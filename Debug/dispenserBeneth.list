
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032f0  08017da8  08017da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b098  0801b098  0001d168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b098  0801b098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0a0  0801b0a0  0001d168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0a0  0801b0a0  0001c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b0a4  0801b0a4  0001c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0801b0a8  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d168  2**0
                  CONTENTS
 10 .bss          00015894  20000168  20000168  0001d168  2**2
                  ALLOC
 11 .eth_desc     00000004  200159fc  200159fc  0001d168  2**0
                  ALLOC
 12 .eth_buf      00000000  20015a00  20015a00  0001d168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  20015a00  20015a00  0001d168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0001d168  2**0
                  CONTENTS, READONLY
 15 .debug_info   000375a4  00000000  00000000  0001d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008bc9  00000000  00000000  0005473c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002840  00000000  00000000  0005d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f9d  00000000  00000000  0005fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00013585  00000000  00000000  00061ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003cd4b  00000000  00000000  0007506a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f5ba9  00000000  00000000  000b1db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001a795e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b1e8  00000000  00000000  001a79a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001b2b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017d90 	.word	0x08017d90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08017d90 	.word	0x08017d90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	@ (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	@ 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000184 	.word	0x20000184
 80005dc:	20000224 	.word	0x20000224

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 febf 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f827 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f935 	bl	800085c <MX_GPIO_Init>
  MX_FSMC_Init();
 80005f2:	f000 f9bb 	bl	800096c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 f8dd 	bl	80007b4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005fa:	f000 f905 	bl	8000808 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80005fe:	f000 f8a3 	bl	8000748 <MX_TIM7_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000602:	f000 f885 	bl	8000710 <MX_NVIC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <main+0x54>)
 8000608:	1d3c      	adds	r4, r7, #4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f009 f9cd 	bl	80099bc <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <main+0x58>)
 8000626:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000628:	f009 f9b1 	bl	800998e <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 800062c:	2064      	movs	r0, #100	@ 0x64
 800062e:	f000 fedd 	bl	80013ec <HAL_Delay>
 8000632:	e7fb      	b.n	800062c <main+0x4c>
 8000634:	08017db4 	.word	0x08017db4
 8000638:	2000054c 	.word	0x2000054c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f016 fb72 	bl	8016d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <SystemClock_Config+0xcc>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b25      	ldr	r3, [pc, #148]	@ (8000708 <SystemClock_Config+0xcc>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b22      	ldr	r3, [pc, #136]	@ (800070c <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <SystemClock_Config+0xd0>)
 8000686:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <SystemClock_Config+0xd0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006ac:	2319      	movs	r3, #25
 80006ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fcc4 	bl	8004050 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006ce:	f000 f9f5 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2105      	movs	r1, #5
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 ff25 	bl	8004540 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006fc:	f000 f9de 	bl	8000abc <Error_Handler>
  }
}
 8000700:	bf00      	nop
 8000702:	3750      	adds	r7, #80	@ 0x50
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2105      	movs	r1, #5
 8000718:	2043      	movs	r0, #67	@ 0x43
 800071a:	f000 ff43 	bl	80015a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800071e:	2043      	movs	r0, #67	@ 0x43
 8000720:	f000 ff5c 	bl	80015dc <HAL_NVIC_EnableIRQ>
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2105      	movs	r1, #5
 8000728:	203d      	movs	r0, #61	@ 0x3d
 800072a:	f000 ff3b 	bl	80015a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 800072e:	203d      	movs	r0, #61	@ 0x3d
 8000730:	f000 ff54 	bl	80015dc <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2105      	movs	r1, #5
 8000738:	2037      	movs	r0, #55	@ 0x37
 800073a:	f000 ff33 	bl	80015a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800073e:	2037      	movs	r0, #55	@ 0x37
 8000740:	f000 ff4c 	bl	80015dc <HAL_NVIC_EnableIRQ>
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000756:	4b15      	ldr	r3, [pc, #84]	@ (80007ac <MX_TIM7_Init+0x64>)
 8000758:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <MX_TIM7_Init+0x68>)
 800075a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_TIM7_Init+0x64>)
 800075e:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000762:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000764:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_TIM7_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_TIM7_Init+0x64>)
 800076c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000770:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_TIM7_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_TIM7_Init+0x64>)
 800077a:	f004 f93b 	bl	80049f4 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000784:	f000 f99a 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_TIM7_Init+0x64>)
 8000796:	f004 fbab 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 f98c 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000424 	.word	0x20000424
 80007b0:	40001400 	.word	0x40001400

080007b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <MX_USART1_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	@ (8000800 <MX_USART1_UART_Init+0x4c>)
 80007ec:	f004 fc10 	bl	8005010 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f961 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000046c 	.word	0x2000046c
 8000804:	40011000 	.word	0x40011000

08000808 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800080c:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	@ (8000858 <MX_USART6_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 8000814:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000818:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART6_UART_Init+0x4c>)
 8000840:	f004 fbe6 	bl	8005010 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f937 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200004b4 	.word	0x200004b4
 8000858:	40011400 	.word	0x40011400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	@ 0x30
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a3a      	ldr	r2, [pc, #232]	@ (8000964 <MX_GPIO_Init+0x108>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	4b34      	ldr	r3, [pc, #208]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a33      	ldr	r2, [pc, #204]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a2c      	ldr	r2, [pc, #176]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a25      	ldr	r2, [pc, #148]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b23      	ldr	r3, [pc, #140]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_GPIO_Init+0x108>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <MX_GPIO_Init+0x108>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <MX_GPIO_Init+0x108>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2108      	movs	r1, #8
 800093a:	480b      	ldr	r0, [pc, #44]	@ (8000968 <MX_GPIO_Init+0x10c>)
 800093c:	f002 f91c 	bl	8002b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000940:	2308      	movs	r3, #8
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <MX_GPIO_Init+0x10c>)
 8000958:	f001 ff72 	bl	8002840 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	@ 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40020c00 	.word	0x40020c00

0800096c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 8000986:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800098a:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 800098e:	4a25      	ldr	r2, [pc, #148]	@ (8000a24 <MX_FSMC_Init+0xb8>)
 8000990:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 8000994:	2204      	movs	r2, #4
 8000996:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80009e6:	230f      	movs	r3, #15
 80009e8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80009ea:	230f      	movs	r3, #15
 80009ec:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80009ee:	23ff      	movs	r3, #255	@ 0xff
 80009f0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80009f2:	230f      	movs	r3, #15
 80009f4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80009f6:	2310      	movs	r3, #16
 80009f8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80009fa:	2311      	movs	r3, #17
 80009fc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_FSMC_Init+0xb4>)
 8000a0a:	f003 ffab 	bl	8004964 <HAL_SRAM_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8000a14:	f000 f852 	bl	8000abc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200004fc 	.word	0x200004fc
 8000a24:	a0000104 	.word	0xa0000104

08000a28 <StartDefaultTask>:
  * @param argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b096      	sub	sp, #88	@ 0x58
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a30:	f015 f9be 	bl	8015db0 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 8000a34:	f006 f9ce 	bl	8006dd4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  uint32_t cycle_counter = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  // 等待 USB 枚举就绪
  osDelay(2000);
 8000a3c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a40:	f009 f808 	bl	8009a54 <osDelay>



  for(;;)
  {
	  	  cycle_counter++;
 8000a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a46:	3301      	adds	r3, #1
 8000a48:	64fb      	str	r3, [r7, #76]	@ 0x4c

	      // 添加 keepalive 调试信息
	      char usb_msg[64];
	      uint32_t current_time = HAL_GetTick() / 1000; // 将毫秒转换为秒
 8000a4a:	f000 fcc3 	bl	80013d4 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	4a0f      	ldr	r2, [pc, #60]	@ (8000a90 <StartDefaultTask+0x68>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	099b      	lsrs	r3, r3, #6
 8000a58:	64bb      	str	r3, [r7, #72]	@ 0x48
	      snprintf(usb_msg, sizeof(usb_msg), "Keepalive #%lu @ %lu s\r\n", cycle_counter, current_time);
 8000a5a:	f107 0008 	add.w	r0, r7, #8
 8000a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a64:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <StartDefaultTask+0x6c>)
 8000a66:	2140      	movs	r1, #64	@ 0x40
 8000a68:	f016 f82c 	bl	8016ac4 <sniprintf>
	      CDC_Transmit_FS((uint8_t*)usb_msg, strlen(usb_msg));
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbad 	bl	80001d0 <strlen>
 8000a76:	4602      	mov	r2, r0
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f015 fa54 	bl	8015f2c <CDC_Transmit_FS>
        osDelay(2000); // 2秒间隔
 8000a84:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a88:	f008 ffe4 	bl	8009a54 <osDelay>
  {
 8000a8c:	bf00      	nop
 8000a8e:	e7d9      	b.n	8000a44 <StartDefaultTask+0x1c>
 8000a90:	10624dd3 	.word	0x10624dd3
 8000a94:	08017dd0 	.word	0x08017dd0

08000a98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d101      	bne.n	8000aae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aaa:	f000 fc7f 	bl	80013ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40002000 	.word	0x40002000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <Error_Handler+0x8>

08000ac8 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b092      	sub	sp, #72	@ 0x48
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a7e      	ldr	r2, [pc, #504]	@ (8000ce0 <HAL_ETH_MspInit+0x218>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	f040 80f6 	bne.w	8000cd8 <HAL_ETH_MspInit+0x210>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8000af0:	4b7c      	ldr	r3, [pc, #496]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af4:	4a7b      	ldr	r2, [pc, #492]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000af6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afc:	4b79      	ldr	r3, [pc, #484]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b0c:	4b75      	ldr	r3, [pc, #468]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b10:	4a74      	ldr	r2, [pc, #464]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b18:	4b72      	ldr	r3, [pc, #456]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b28:	4b6e      	ldr	r3, [pc, #440]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a6d      	ldr	r2, [pc, #436]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b6b      	ldr	r3, [pc, #428]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b44:	4b67      	ldr	r3, [pc, #412]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	4a66      	ldr	r2, [pc, #408]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b50:	4b64      	ldr	r3, [pc, #400]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
 8000b60:	4b60      	ldr	r3, [pc, #384]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	4a5f      	ldr	r2, [pc, #380]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b74:	623b      	str	r3, [r7, #32]
 8000b76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
 8000b7c:	4b59      	ldr	r3, [pc, #356]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	4a58      	ldr	r2, [pc, #352]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b88:	4b56      	ldr	r3, [pc, #344]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	4b52      	ldr	r3, [pc, #328]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	4a51      	ldr	r2, [pc, #324]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc0:	4b48      	ldr	r3, [pc, #288]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	4b44      	ldr	r3, [pc, #272]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	4a43      	ldr	r2, [pc, #268]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bdc:	4b41      	ldr	r3, [pc, #260]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a3c      	ldr	r2, [pc, #240]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b36      	ldr	r3, [pc, #216]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0c:	4a35      	ldr	r2, [pc, #212]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c14:	4b33      	ldr	r3, [pc, #204]	@ (8000ce4 <HAL_ETH_MspInit+0x21c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c20:	2302      	movs	r3, #2
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c30:	230b      	movs	r3, #11
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482b      	ldr	r0, [pc, #172]	@ (8000ce8 <HAL_ETH_MspInit+0x220>)
 8000c3c:	f001 fe00 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c40:	2386      	movs	r3, #134	@ 0x86
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4824      	ldr	r0, [pc, #144]	@ (8000cec <HAL_ETH_MspInit+0x224>)
 8000c5c:	f001 fdf0 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c60:	2330      	movs	r3, #48	@ 0x30
 8000c62:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c70:	230b      	movs	r3, #11
 8000c72:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c78:	4619      	mov	r1, r3
 8000c7a:	481b      	ldr	r0, [pc, #108]	@ (8000ce8 <HAL_ETH_MspInit+0x220>)
 8000c7c:	f001 fde0 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000c80:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000c84:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c92:	230b      	movs	r3, #11
 8000c94:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4814      	ldr	r0, [pc, #80]	@ (8000cf0 <HAL_ETH_MspInit+0x228>)
 8000c9e:	f001 fdcf 	bl	8002840 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <HAL_ETH_MspInit+0x22c>)
 8000cba:	f001 fdc1 	bl	8002840 <HAL_GPIO_Init>
    
    /* Reset PHY */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <HAL_ETH_MspInit+0x22c>)
 8000cc4:	f001 ff58 	bl	8002b78 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2108      	movs	r1, #8
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <HAL_ETH_MspInit+0x22c>)
 8000cce:	f001 ff53 	bl	8002b78 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	@ 0x64
 8000cd4:	f000 fb8a 	bl	80013ec <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */

    /* USER CODE END ETH_MspInit 1 */
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3748      	adds	r7, #72	@ 0x48
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40028000 	.word	0x40028000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a11      	ldr	r2, [pc, #68]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	210f      	movs	r1, #15
 8000d3a:	f06f 0001 	mvn.w	r0, #1
 8000d3e:	f000 fc31 	bl	80015a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <HAL_TIM_Base_MspInit+0x3c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10d      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <HAL_TIM_Base_MspInit+0x40>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40001400 	.word	0x40001400
 8000d90:	40023800 	.word	0x40023800

08000d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a32      	ldr	r2, [pc, #200]	@ (8000e7c <HAL_UART_MspInit+0xe8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12d      	bne.n	8000e12 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	4a30      	ldr	r2, [pc, #192]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	61bb      	str	r3, [r7, #24]
 8000dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dee:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e00:	2307      	movs	r3, #7
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <HAL_UART_MspInit+0xf0>)
 8000e0c:	f001 fd18 	bl	8002840 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e10:	e030      	b.n	8000e74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1c      	ldr	r2, [pc, #112]	@ (8000e88 <HAL_UART_MspInit+0xf4>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d12b      	bne.n	8000e74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e24:	4a16      	ldr	r2, [pc, #88]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e26:	f043 0320 	orr.w	r3, r3, #32
 8000e2a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e30:	f003 0320 	and.w	r3, r3, #32
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	4a0f      	ldr	r2, [pc, #60]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <HAL_UART_MspInit+0xec>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e54:	23c0      	movs	r3, #192	@ 0xc0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e64:	2308      	movs	r3, #8
 8000e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4807      	ldr	r0, [pc, #28]	@ (8000e8c <HAL_UART_MspInit+0xf8>)
 8000e70:	f001 fce6 	bl	8002840 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	@ 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40011400 	.word	0x40011400
 8000e8c:	40020800 	.word	0x40020800

08000e90 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <HAL_FSMC_MspInit+0xc8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d151      	bne.n	8000f50 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <HAL_FSMC_MspInit+0xc8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <HAL_FSMC_MspInit+0xcc>)
 8000eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eba:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <HAL_FSMC_MspInit+0xcc>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <HAL_FSMC_MspInit+0xcc>)
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000ece:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8000ed2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <HAL_FSMC_MspInit+0xd0>)
 8000eea:	f001 fca9 	bl	8002840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eee:	f240 433f 	movw	r3, #1087	@ 0x43f
 8000ef2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f00:	230c      	movs	r3, #12
 8000f02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4816      	ldr	r0, [pc, #88]	@ (8000f64 <HAL_FSMC_MspInit+0xd4>)
 8000f0a:	f001 fc99 	bl	8002840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000f0e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8000f12:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f20:	230c      	movs	r3, #12
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	480f      	ldr	r0, [pc, #60]	@ (8000f68 <HAL_FSMC_MspInit+0xd8>)
 8000f2a:	f001 fc89 	bl	8002840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f2e:	f64f 7333 	movw	r3, #65331	@ 0xff33
 8000f32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000f40:	230c      	movs	r3, #12
 8000f42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4808      	ldr	r0, [pc, #32]	@ (8000f6c <HAL_FSMC_MspInit+0xdc>)
 8000f4a:	f001 fc79 	bl	8002840 <HAL_GPIO_Init>
 8000f4e:	e000      	b.n	8000f52 <HAL_FSMC_MspInit+0xc2>
    return;
 8000f50:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000550 	.word	0x20000550
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40021400 	.word	0x40021400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40020c00 	.word	0x40020c00

08000f70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000f78:	f7ff ff8a 	bl	8000e90 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	@ 0x38
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <HAL_InitTick+0xe4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	4a32      	ldr	r2, [pc, #200]	@ (8001068 <HAL_InitTick+0xe4>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa4:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <HAL_InitTick+0xe4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fb0:	f107 0210 	add.w	r2, r7, #16
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fca0 	bl	8004900 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d103      	bne.n	8000fd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fca:	f003 fc71 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8000fce:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fd0:	e004      	b.n	8000fdc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fd2:	f003 fc6d 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fde:	4a23      	ldr	r2, [pc, #140]	@ (800106c <HAL_InitTick+0xe8>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	0c9b      	lsrs	r3, r3, #18
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000fea:	4b21      	ldr	r3, [pc, #132]	@ (8001070 <HAL_InitTick+0xec>)
 8000fec:	4a21      	ldr	r2, [pc, #132]	@ (8001074 <HAL_InitTick+0xf0>)
 8000fee:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8001070 <HAL_InitTick+0xec>)
 8000ff2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ff6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8001070 <HAL_InitTick+0xec>)
 8000ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ffc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <HAL_InitTick+0xec>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <HAL_InitTick+0xec>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_InitTick+0xec>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <HAL_InitTick+0xec>)
 8001012:	f003 fcef 	bl	80049f4 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800101c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001020:	2b00      	cmp	r3, #0
 8001022:	d11b      	bne.n	800105c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8001024:	4812      	ldr	r0, [pc, #72]	@ (8001070 <HAL_InitTick+0xec>)
 8001026:	f003 fd35 	bl	8004a94 <HAL_TIM_Base_Start_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001030:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001034:	2b00      	cmp	r3, #0
 8001036:	d111      	bne.n	800105c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001038:	202d      	movs	r0, #45	@ 0x2d
 800103a:	f000 facf 	bl	80015dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d808      	bhi.n	8001056 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	202d      	movs	r0, #45	@ 0x2d
 800104a:	f000 faab 	bl	80015a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <HAL_InitTick+0xf4>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	e002      	b.n	800105c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800105c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001060:	4618      	mov	r0, r3
 8001062:	3738      	adds	r7, #56	@ 0x38
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	431bde83 	.word	0x431bde83
 8001070:	20000554 	.word	0x20000554
 8001074:	40002000 	.word	0x40002000
 8001078:	20000004 	.word	0x20000004

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <NMI_Handler+0x4>

08001084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <HardFault_Handler+0x4>

0800108c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <MemManage_Handler+0x4>

08001094 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010b8:	4802      	ldr	r0, [pc, #8]	@ (80010c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010ba:	f003 fd5b 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000554 	.word	0x20000554

080010c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <TIM7_IRQHandler+0x10>)
 80010ce:	f003 fd51 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000424 	.word	0x20000424

080010dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
  static uint32_t eth_irq_count = 0;
  eth_irq_count++;
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <ETH_IRQHandler+0x5c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <ETH_IRQHandler+0x5c>)
 80010ea:	6013      	str	r3, [r2, #0]
  
  // 每100次中断输出一次计数，避免太多日志
  if (eth_irq_count % 100 == 1) {
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <ETH_IRQHandler+0x5c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <ETH_IRQHandler+0x60>)
 80010f2:	fba3 1302 	umull	r1, r3, r3, r2
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2164      	movs	r1, #100	@ 0x64
 80010fa:	fb01 f303 	mul.w	r3, r1, r3
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d111      	bne.n	8001128 <ETH_IRQHandler+0x4c>
    char debug_msg[40];
    snprintf(debug_msg, sizeof(debug_msg), "⚡ ETH中断 #%lu\r\n", eth_irq_count);
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <ETH_IRQHandler+0x5c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4638      	mov	r0, r7
 800110a:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <ETH_IRQHandler+0x64>)
 800110c:	2128      	movs	r1, #40	@ 0x28
 800110e:	f015 fcd9 	bl	8016ac4 <sniprintf>
    CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
 8001112:	463b      	mov	r3, r7
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f85b 	bl	80001d0 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	463b      	mov	r3, r7
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f014 ff02 	bl	8015f2c <CDC_Transmit_FS>
  }
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001128:	4806      	ldr	r0, [pc, #24]	@ (8001144 <ETH_IRQHandler+0x68>)
 800112a:	f000 fdf3 	bl	8001d14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000059c 	.word	0x2000059c
 800113c:	51eb851f 	.word	0x51eb851f
 8001140:	08017dec 	.word	0x08017dec
 8001144:	200050c8 	.word	0x200050c8

08001148 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <OTG_FS_IRQHandler+0x10>)
 800114e:	f001 fe70 	bl	8002e32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	200151ac 	.word	0x200151ac

0800115c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return 1;
 8001160:	2301      	movs	r3, #1
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <_kill>:

int _kill(int pid, int sig)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001176:	4b05      	ldr	r3, [pc, #20]	@ (800118c <_kill+0x20>)
 8001178:	2216      	movs	r2, #22
 800117a:	601a      	str	r2, [r3, #0]
  return -1;
 800117c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	200159ec 	.word	0x200159ec

08001190 <_exit>:

void _exit (int status)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ffe5 	bl	800116c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011a2:	bf00      	nop
 80011a4:	e7fd      	b.n	80011a2 <_exit+0x12>

080011a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e00a      	b.n	80011ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011b8:	f3af 8000 	nop.w
 80011bc:	4601      	mov	r1, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	60ba      	str	r2, [r7, #8]
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	dbf0      	blt.n	80011b8 <_read+0x12>
  }

  return len;
 80011d6:	687b      	ldr	r3, [r7, #4]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	e009      	b.n	8001206 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	60ba      	str	r2, [r7, #8]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	dbf1      	blt.n	80011f2 <_write+0x12>
  }
  return len;
 800120e:	687b      	ldr	r3, [r7, #4]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_close>:

int _close(int file)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001240:	605a      	str	r2, [r3, #4]
  return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_isatty>:

int _isatty(int file)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001266:	b480      	push	{r7}
 8001268:	b085      	sub	sp, #20
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001288:	4a14      	ldr	r2, [pc, #80]	@ (80012dc <_sbrk+0x5c>)
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <_sbrk+0x60>)
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <_sbrk+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d102      	bne.n	80012a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <_sbrk+0x64>)
 800129e:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <_sbrk+0x68>)
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d205      	bcs.n	80012bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <_sbrk+0x6c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ba:	e009      	b.n	80012d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012bc:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <_sbrk+0x64>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a06      	ldr	r2, [pc, #24]	@ (80012e4 <_sbrk+0x64>)
 80012cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20020000 	.word	0x20020000
 80012e0:	00000400 	.word	0x00000400
 80012e4:	200005a0 	.word	0x200005a0
 80012e8:	20015a00 	.word	0x20015a00
 80012ec:	200159ec 	.word	0x200159ec

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	@ (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800134c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001318:	f7ff ffea 	bl	80012f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	@ (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	@ (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	@ (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001342:	f015 fda3 	bl	8016e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff f94b 	bl	80005e0 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001358:	0801b0a8 	.word	0x0801b0a8
  ldr r2, =_sbss
 800135c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001360:	200159fc 	.word	0x200159fc

08001364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	@ (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	@ (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f8fc 	bl	800158e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f7ff fdf4 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fcac 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008
 80013d0:	200005a4 	.word	0x200005a4

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200005a4 	.word	0x200005a4

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800145c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001466:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	60d3      	str	r3, [r2, #12]
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	@ (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	@ (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	@ 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ff4c 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b6:	f7ff ff61 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	6978      	ldr	r0, [r7, #20]
 80015c2:	f7ff ffb1 	bl	8001528 <NVIC_EncodePriority>
 80015c6:	4602      	mov	r2, r0
 80015c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff80 	bl	80014d4 <__NVIC_SetPriority>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff ff54 	bl	8001498 <__NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e08a      	b.n	8001720 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fa53 	bl	8000ac8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <HAL_ETH_Init+0x130>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a3f      	ldr	r2, [pc, #252]	@ (8001728 <HAL_ETH_Init+0x130>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <HAL_ETH_Init+0x130>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_ETH_Init+0x134>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a3a      	ldr	r2, [pc, #232]	@ (800172c <HAL_ETH_Init+0x134>)
 8001644:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001648:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800164a:	4b38      	ldr	r3, [pc, #224]	@ (800172c <HAL_ETH_Init+0x134>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4936      	ldr	r1, [pc, #216]	@ (800172c <HAL_ETH_Init+0x134>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_ETH_Init+0x134>)
 800165a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff feae 	bl	80013d4 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800167a:	e011      	b.n	80016a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800167c:	f7ff feaa 	bl	80013d4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800168a:	d909      	bls.n	80016a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	22e0      	movs	r2, #224	@ 0xe0
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e03f      	b.n	8001720 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e4      	bne.n	800167c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fe06 	bl	80022c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 feb1 	bl	8002420 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 ff07 	bl	80024d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	461a      	mov	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fe6f 	bl	80023b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80016e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016f6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800170a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2210      	movs	r2, #16
 800171a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40013800 	.word	0x40013800

08001730 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800173e:	2b10      	cmp	r3, #16
 8001740:	d161      	bne.n	8001806 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2220      	movs	r2, #32
 8001746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2204      	movs	r2, #4
 8001754:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f9f4 	bl	8001b44 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fe41 	bl	80013ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001784:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001788:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017a0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fc2a 	bl	8001ffc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fe13 	bl	80013ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0204 	orr.w	r2, r2, #4
 80017dc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80017f0:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80017f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017f8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2240      	movs	r2, #64	@ 0x40
 80017fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
  }
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800181e:	2b40      	cmp	r3, #64	@ 0x40
 8001820:	d170      	bne.n	8001904 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 800183c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001844:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001858:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800185c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f023 0302 	bic.w	r3, r3, #2
 8001870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001874:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0204 	bic.w	r2, r2, #4
 8001884:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800188e:	2001      	movs	r0, #1
 8001890:	f7ff fdac 	bl	80013ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fbad 	bl	8001ffc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0208 	bic.w	r2, r2, #8
 80018b0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff fd96 	bl	80013ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e00e      	b.n	80018ec <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	3212      	adds	r2, #18
 80018d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d9ed      	bls.n	80018ce <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2210      	movs	r2, #16
 80018fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
  }
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001924:	f043 0201 	orr.w	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e045      	b.n	80019be <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001938:	2b40      	cmp	r3, #64	@ 0x40
 800193a:	d13f      	bne.n	80019bc <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001944:	2201      	movs	r2, #1
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fe31 	bl	80025b0 <ETH_Prepare_Tx_Descriptors>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800195a:	f043 0202 	orr.w	r2, r3, #2
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e02a      	b.n	80019be <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001968:	f3bf 8f4f 	dsb	sy
}
 800196c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197c:	2b03      	cmp	r3, #3
 800197e:	d904      	bls.n	800198a <HAL_ETH_Transmit_IT+0x7c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001984:	1f1a      	subs	r2, r3, #4
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00d      	beq.n	80019b8 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019a4:	461a      	mov	r2, r3
 80019a6:	2304      	movs	r3, #4
 80019a8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b2:	461a      	mov	r2, r3
 80019b4:	2300      	movs	r3, #0
 80019b6:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b088      	sub	sp, #32
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a4      	b.n	8001b3c <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80019f8:	2b40      	cmp	r3, #64	@ 0x40
 80019fa:	d001      	beq.n	8001a00 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e09d      	b.n	8001b3c <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a04:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	3212      	adds	r2, #18
 8001a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a10:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a16:	f1c3 0304 	rsb	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a1c:	e066      	b.n	8001aec <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_ETH_ReadData+0x88>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03c      	beq.n	8001ac8 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0c1b      	lsrs	r3, r3, #16
 8001a6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a70:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001a86:	2301      	movs	r3, #1
 8001a88:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	f005 ff08 	bl	80078bc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	441a      	add	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	3301      	adds	r3, #1
 8001acc:	61fb      	str	r3, [r7, #28]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d902      	bls.n	8001ada <HAL_ETH_ReadData+0x114>
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	3212      	adds	r2, #18
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db06      	blt.n	8001b02 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d202      	bcs.n	8001b02 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001afc:	7cfb      	ldrb	r3, [r7, #19]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d08d      	beq.n	8001a1e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f814 	bl	8001b44 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001b22:	7cfb      	ldrb	r3, [r7, #19]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d108      	bne.n	8001b3a <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001b50:	2301      	movs	r3, #1
 8001b52:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b58:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	3212      	adds	r2, #18
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b6a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b6c:	e044      	b.n	8001bf8 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d112      	bne.n	8001b9c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fe6a 	bl	8007854 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	74fb      	strb	r3, [r7, #19]
 8001b8a:	e007      	b.n	8001b9c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	461a      	mov	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d02a      	beq.n	8001bf8 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	6053      	str	r3, [r2, #4]
 8001bba:	e005      	b.n	8001bc8 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d902      	bls.n	8001be6 <ETH_UpdateDescriptor+0xa2>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	3b04      	subs	r3, #4
 8001be4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	3212      	adds	r2, #18
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <ETH_UpdateDescriptor+0xc0>
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1b4      	bne.n	8001b6e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d01a      	beq.n	8001c44 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3303      	adds	r3, #3
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c18:	f3bf 8f5f 	dmb	sy
}
 8001c1c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6919      	ldr	r1, [r3, #16]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	18ca      	adds	r2, r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c36:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3318      	adds	r3, #24
 8001c58:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c64:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001c66:	2301      	movs	r3, #1
 8001c68:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c6a:	e047      	b.n	8001cfc <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d902      	bls.n	8001c98 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	3b04      	subs	r3, #4
 8001c96:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d02c      	beq.n	8001cfc <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	440b      	add	r3, r1
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db1f      	blt.n	8001cf8 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 fe3a 	bl	800793e <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d902      	bls.n	8001cea <HAL_ETH_ReleaseTxPacket+0x9e>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cf6:	e001      	b.n	8001cfc <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1b1      	bne.n	8001c6c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d22:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e6c <HAL_ETH_IRQHandler+0x158>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00e      	beq.n	8001d6a <HAL_ETH_IRQHandler+0x56>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d009      	beq.n	8001d6a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <HAL_ETH_IRQHandler+0x15c>)
 8001d62:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f005 fa63 	bl	8007230 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00f      	beq.n	8001d94 <HAL_ETH_IRQHandler+0x80>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d86:	461a      	mov	r2, r3
 8001d88:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001d8c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 fa5e 	bl	8007250 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d042      	beq.n	8001e24 <HAL_ETH_IRQHandler+0x110>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03d      	beq.n	8001e24 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dae:	f043 0208 	orr.w	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01a      	beq.n	8001df8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <HAL_ETH_IRQHandler+0x160>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dec:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	22e0      	movs	r2, #224	@ 0xe0
 8001df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001df6:	e012      	b.n	8001e1e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e16:	461a      	mov	r2, r3
 8001e18:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001e1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f005 fa26 	bl	8007270 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e34:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f81a 	bl	8001e78 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e56:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_ETH_IRQHandler+0x158>)
 8001e58:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e5c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f814 	bl	8001e8c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40013c00 	.word	0x40013c00
 8001e70:	00010040 	.word	0x00010040
 8001e74:	007e2000 	.word	0x007e2000

08001e78 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 031c 	and.w	r3, r3, #28
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	02db      	lsls	r3, r3, #11
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	019b      	lsls	r3, r3, #6
 8001ece:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f023 0302 	bic.w	r3, r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ef0:	f7ff fa70 	bl	80013d4 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ef6:	e00d      	b.n	8001f14 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001ef8:	f7ff fa6c 	bl	80013d4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f06:	d301      	bcc.n	8001f0c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e010      	b.n	8001f2e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1ec      	bne.n	8001ef8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 031c 	and.w	r3, r3, #28
 8001f52:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	02db      	lsls	r3, r3, #11
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	019b      	lsls	r3, r3, #6
 8001f64:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f90:	f7ff fa20 	bl	80013d4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f96:	e00d      	b.n	8001fb4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f98:	f7ff fa1c 	bl	80013d4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa6:	d301      	bcc.n	8001fac <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e009      	b.n	8001fc0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ec      	bne.n	8001f98 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800201a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800201e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202c:	2001      	movs	r0, #1
 800202e:	f7ff f9dd 	bl	80013ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800203c:	6193      	str	r3, [r2, #24]
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4b53      	ldr	r3, [pc, #332]	@ (80021ac <ETH_SetMACConfig+0x164>)
 800205e:	4013      	ands	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7b9b      	ldrb	r3, [r3, #14]
 8002066:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	7c12      	ldrb	r2, [r2, #16]
 800206c:	2a00      	cmp	r2, #0
 800206e:	d102      	bne.n	8002076 <ETH_SetMACConfig+0x2e>
 8002070:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0x30>
 8002076:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002078:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	7c52      	ldrb	r2, [r2, #17]
 800207e:	2a00      	cmp	r2, #0
 8002080:	d102      	bne.n	8002088 <ETH_SetMACConfig+0x40>
 8002082:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002086:	e000      	b.n	800208a <ETH_SetMACConfig+0x42>
 8002088:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800208a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002090:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7fdb      	ldrb	r3, [r3, #31]
 8002096:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002098:	431a      	orrs	r2, r3
                        macconf->Speed |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800209e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	7f92      	ldrb	r2, [r2, #30]
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d102      	bne.n	80020ae <ETH_SetMACConfig+0x66>
 80020a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ac:	e000      	b.n	80020b0 <ETH_SetMACConfig+0x68>
 80020ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80020b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7f1b      	ldrb	r3, [r3, #28]
 80020b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80020c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetMACConfig+0x90>
 80020d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020d6:	e000      	b.n	80020da <ETH_SetMACConfig+0x92>
 80020d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	7bdb      	ldrb	r3, [r3, #15]
 80020e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80020e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80020e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80020f2:	4313      	orrs	r3, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800210a:	2001      	movs	r0, #1
 800210c:	f7ff f96e 	bl	80013ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002136:	2a00      	cmp	r2, #0
 8002138:	d101      	bne.n	800213e <ETH_SetMACConfig+0xf6>
 800213a:	2280      	movs	r2, #128	@ 0x80
 800213c:	e000      	b.n	8002140 <ETH_SetMACConfig+0xf8>
 800213e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002140:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002146:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800214e:	2a01      	cmp	r2, #1
 8002150:	d101      	bne.n	8002156 <ETH_SetMACConfig+0x10e>
 8002152:	2208      	movs	r2, #8
 8002154:	e000      	b.n	8002158 <ETH_SetMACConfig+0x110>
 8002156:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002158:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002160:	2a01      	cmp	r2, #1
 8002162:	d101      	bne.n	8002168 <ETH_SetMACConfig+0x120>
 8002164:	2204      	movs	r2, #4
 8002166:	e000      	b.n	800216a <ETH_SetMACConfig+0x122>
 8002168:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800216a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002172:	2a01      	cmp	r2, #1
 8002174:	d101      	bne.n	800217a <ETH_SetMACConfig+0x132>
 8002176:	2202      	movs	r2, #2
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0x134>
 800217a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	4313      	orrs	r3, r2
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002194:	2001      	movs	r0, #1
 8002196:	f7ff f929 	bl	80013ec <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	fd20810f 	.word	0xfd20810f

080021b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <ETH_SetDMAConfig+0x110>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <ETH_SetDMAConfig+0x2c>
 80021d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021da:	e000      	b.n	80021de <ETH_SetDMAConfig+0x2e>
 80021dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	7b5b      	ldrb	r3, [r3, #13]
 80021e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	7f52      	ldrb	r2, [r2, #29]
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d102      	bne.n	80021f4 <ETH_SetDMAConfig+0x44>
 80021ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80021f2:	e000      	b.n	80021f6 <ETH_SetDMAConfig+0x46>
 80021f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80021f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	7b9b      	ldrb	r3, [r3, #14]
 80021fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80021fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002204:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	7f1b      	ldrb	r3, [r3, #28]
 800220a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800220c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7f9b      	ldrb	r3, [r3, #30]
 8002212:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002214:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800221a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002222:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002224:	4313      	orrs	r3, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff f8d0 	bl	80013ec <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002254:	461a      	mov	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	791b      	ldrb	r3, [r3, #4]
 800225e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002264:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800226a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002270:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002278:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800227a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002282:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002288:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002292:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002296:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f7ff f8a1 	bl	80013ec <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	f8de3f23 	.word	0xf8de3f23

080022c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b0a6      	sub	sp, #152	@ 0x98
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002306:	2300      	movs	r3, #0
 8002308:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002310:	2300      	movs	r3, #0
 8002312:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800232c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002330:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800233e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002342:	4619      	mov	r1, r3
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fe7f 	bl	8002048 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800234a:	2301      	movs	r3, #1
 800234c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800234e:	2301      	movs	r3, #1
 8002350:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002358:	2301      	movs	r3, #1
 800235a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800236c:	2300      	movs	r3, #0
 800236e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002376:	2301      	movs	r3, #1
 8002378:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800237a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800237e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002380:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002384:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002386:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800238a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002392:	2300      	movs	r3, #0
 8002394:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff05 	bl	80021b0 <ETH_SetDMAConfig>
}
 80023a6:	bf00      	nop
 80023a8:	3798      	adds	r7, #152	@ 0x98
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3305      	adds	r3, #5
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	3204      	adds	r2, #4
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <ETH_MACAddressConfig+0x68>)
 80023d2:	4413      	add	r3, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3303      	adds	r3, #3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	061a      	lsls	r2, r3, #24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3302      	adds	r3, #2
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3301      	adds	r3, #1
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	4313      	orrs	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <ETH_MACAddressConfig+0x6c>)
 8002402:	4413      	add	r3, r2
 8002404:	461a      	mov	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	6013      	str	r3, [r2, #0]
}
 800240a:	bf00      	nop
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40028040 	.word	0x40028040
 800241c:	40028044 	.word	0x40028044

08002420 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e03e      	b.n	80024ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2200      	movs	r2, #0
 8002456:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	3206      	adds	r2, #6
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d80c      	bhi.n	8002490 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	461a      	mov	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	e004      	b.n	800249a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	461a      	mov	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d9bd      	bls.n	800242e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c4:	611a      	str	r2, [r3, #16]
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e048      	b.n	8002572 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6919      	ldr	r1, [r3, #16]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2200      	movs	r2, #0
 80024fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800251c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	3212      	adds	r2, #18
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d80c      	bhi.n	8002562 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6919      	ldr	r1, [r3, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	461a      	mov	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	e004      	b.n	800256c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	461a      	mov	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3301      	adds	r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d9b3      	bls.n	80024e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a2:	60da      	str	r2, [r3, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b091      	sub	sp, #68	@ 0x44
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3318      	adds	r3, #24
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025da:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025f2:	d007      	beq.n	8002604 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f8:	3304      	adds	r3, #4
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002604:	2302      	movs	r3, #2
 8002606:	e115      	b.n	8002834 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260a:	3301      	adds	r3, #1
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800260e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002620:	f023 031f 	bic.w	r3, r3, #31
 8002624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002626:	6852      	ldr	r2, [r2, #4]
 8002628:	431a      	orrs	r2, r3
 800262a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	431a      	orrs	r2, r3
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0320 	and.w	r3, r3, #32
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	431a      	orrs	r2, r3
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800268e:	e084      	b.n	800279a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80026aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e005      	b.n	80026bc <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026be:	3301      	adds	r3, #1
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d902      	bls.n	80026ce <ETH_Prepare_Tx_Descriptors+0x11e>
 80026c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ca:	3b04      	subs	r3, #4
 80026cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80026e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026e4:	d007      	beq.n	80026f6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ea:	3304      	adds	r3, #4
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d029      	beq.n	800274a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80026fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002704:	2300      	movs	r3, #0
 8002706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002708:	e019      	b.n	800273e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800270a:	f3bf 8f5f 	dmb	sy
}
 800270e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800271c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800271e:	3301      	adds	r3, #1
 8002720:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002724:	2b03      	cmp	r3, #3
 8002726:	d902      	bls.n	800272e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800272a:	3b04      	subs	r3, #4
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800272e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002730:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273a:	3301      	adds	r3, #1
 800273c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800273e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002742:	429a      	cmp	r2, r3
 8002744:	d3e1      	bcc.n	800270a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	e074      	b.n	8002834 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002754:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002758:	3301      	adds	r3, #1
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800275c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002774:	f023 031f 	bic.w	r3, r3, #31
 8002778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	431a      	orrs	r2, r3
 800277e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002780:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	3301      	adds	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002788:	f3bf 8f5f 	dmb	sy
}
 800278c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002798:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f47f af76 	bne.w	8002690 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e005      	b.n	80027c4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	6a3a      	ldr	r2, [r7, #32]
 80027d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80027da:	f3bf 8f5f 	dmb	sy
}
 80027de:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ea:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f4:	3304      	adds	r3, #4
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002800:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002802:	f3ef 8310 	mrs	r3, PRIMASK
 8002806:	613b      	str	r3, [r7, #16]
  return(result);
 8002808:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	2301      	movs	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f383 8810 	msr	PRIMASK, r3
}
 8002816:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800281c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281e:	4413      	add	r3, r2
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f383 8810 	msr	PRIMASK, r3
}
 8002830:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3744      	adds	r7, #68	@ 0x44
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e16b      	b.n	8002b34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 815a 	bne.w	8002b2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d005      	beq.n	8002892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288e:	2b02      	cmp	r3, #2
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d017      	beq.n	8002930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d123      	bne.n	8002984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80b4 	beq.w	8002b2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b60      	ldr	r3, [pc, #384]	@ (8002b4c <HAL_GPIO_Init+0x30c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	4a5f      	ldr	r2, [pc, #380]	@ (8002b4c <HAL_GPIO_Init+0x30c>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029d6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b4c <HAL_GPIO_Init+0x30c>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b50 <HAL_GPIO_Init+0x310>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	@ (8002b54 <HAL_GPIO_Init+0x314>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a51      	ldr	r2, [pc, #324]	@ (8002b58 <HAL_GPIO_Init+0x318>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d025      	beq.n	8002a62 <HAL_GPIO_Init+0x222>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a50      	ldr	r2, [pc, #320]	@ (8002b5c <HAL_GPIO_Init+0x31c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01f      	beq.n	8002a5e <HAL_GPIO_Init+0x21e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	@ (8002b60 <HAL_GPIO_Init+0x320>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d019      	beq.n	8002a5a <HAL_GPIO_Init+0x21a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4e      	ldr	r2, [pc, #312]	@ (8002b64 <HAL_GPIO_Init+0x324>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x216>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4d      	ldr	r2, [pc, #308]	@ (8002b68 <HAL_GPIO_Init+0x328>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x212>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	@ (8002b6c <HAL_GPIO_Init+0x32c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4b      	ldr	r2, [pc, #300]	@ (8002b70 <HAL_GPIO_Init+0x330>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x20a>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e00e      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	e00c      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a4e:	2306      	movs	r3, #6
 8002a50:	e00a      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a52:	2305      	movs	r3, #5
 8002a54:	e008      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a56:	2304      	movs	r3, #4
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e004      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_GPIO_Init+0x228>
 8002a66:	2300      	movs	r3, #0
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	f002 0203 	and.w	r2, r2, #3
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	4093      	lsls	r3, r2
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a78:	4935      	ldr	r1, [pc, #212]	@ (8002b50 <HAL_GPIO_Init+0x310>)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4013      	ands	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aaa:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab0:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad4:	4a27      	ldr	r2, [pc, #156]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ada:	4b26      	ldr	r3, [pc, #152]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b28:	4a12      	ldr	r2, [pc, #72]	@ (8002b74 <HAL_GPIO_Init+0x334>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2b0f      	cmp	r3, #15
 8002b38:	f67f ae90 	bls.w	800285c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40020000 	.word	0x40020000
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020800 	.word	0x40020800
 8002b60:	40020c00 	.word	0x40020c00
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40021400 	.word	0x40021400
 8002b6c:	40021800 	.word	0x40021800
 8002b70:	40021c00 	.word	0x40021c00
 8002b74:	40013c00 	.word	0x40013c00

08002b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	807b      	strh	r3, [r7, #2]
 8002b84:	4613      	mov	r3, r2
 8002b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8e:	887a      	ldrh	r2, [r7, #2]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b94:	e003      	b.n	8002b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b96:	887b      	ldrh	r3, [r7, #2]
 8002b98:	041a      	lsls	r2, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af02      	add	r7, sp, #8
 8002bb0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e101      	b.n	8002dc0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f013 faf0 	bl	80161bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2203      	movs	r2, #3
 8002be0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bea:	d102      	bne.n	8002bf2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 feb5 	bl	8005966 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7c1a      	ldrb	r2, [r3, #16]
 8002c04:	f88d 2000 	strb.w	r2, [sp]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	f002 fd94 	bl	8005738 <USB_CoreInit>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0ce      	b.n	8002dc0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2100      	movs	r1, #0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 fead 	bl	8005988 <USB_SetCurrentMode>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0bf      	b.n	8002dc0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e04a      	b.n	8002cdc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3315      	adds	r3, #21
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3314      	adds	r3, #20
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	b298      	uxth	r0, r3
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	332e      	adds	r3, #46	@ 0x2e
 8002c82:	4602      	mov	r2, r0
 8002c84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3318      	adds	r3, #24
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	331c      	adds	r3, #28
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3320      	adds	r3, #32
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3324      	adds	r3, #36	@ 0x24
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	791b      	ldrb	r3, [r3, #4]
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d3af      	bcc.n	8002c46 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e044      	b.n	8002d76 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	3301      	adds	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	7bfa      	ldrb	r2, [r7, #15]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d3b5      	bcc.n	8002cec <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	7c1a      	ldrb	r2, [r3, #16]
 8002d88:	f88d 2000 	strb.w	r2, [sp]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d90:	f002 fe46 	bl	8005a20 <USB_DevInit>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00c      	b.n	8002dc0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f003 fe90 	bl	8006ade <USB_DevDisconnect>

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_PCD_Start+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e022      	b.n	8002e2a <HAL_PCD_Start+0x62>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f002 fd97 	bl	8005944 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fe3e 	bl	8006a9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e32:	b590      	push	{r4, r7, lr}
 8002e34:	b08d      	sub	sp, #52	@ 0x34
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fefc 	bl	8006c46 <USB_GetMode>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 848c 	bne.w	800376e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fe60 	bl	8006b20 <USB_ReadInterrupts>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8482 	beq.w	800376c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fe4d 	bl	8006b20 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d107      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f002 0202 	and.w	r2, r2, #2
 8002e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fe3b 	bl	8006b20 <USB_ReadInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b10      	cmp	r3, #16
 8002eb2:	d161      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0210 	bic.w	r2, r2, #16
 8002ec2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002eea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eee:	d124      	bne.n	8002f3a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d035      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	6a38      	ldr	r0, [r7, #32]
 8002f10:	f003 fc72 	bl	80067f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f20:	441a      	add	r2, r3
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f32:	441a      	add	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	615a      	str	r2, [r3, #20]
 8002f38:	e016      	b.n	8002f68 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002f40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f44:	d110      	bne.n	8002f68 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	4619      	mov	r1, r3
 8002f50:	6a38      	ldr	r0, [r7, #32]
 8002f52:	f003 fc51 	bl	80067f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f62:	441a      	add	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0210 	orr.w	r2, r2, #16
 8002f76:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fdcf 	bl	8006b20 <USB_ReadInterrupts>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f88:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f8c:	f040 80a7 	bne.w	80030de <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fdd4 	bl	8006b46 <USB_ReadDevAllOutEpInterrupt>
 8002f9e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002fa0:	e099      	b.n	80030d6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 808e 	beq.w	80030ca <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fdf8 	bl	8006bae <USB_ReadDevOutEPInterrupt>
 8002fbe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	2301      	movs	r3, #1
 8002fda:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fea4 	bl	8003d2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 ff7a 	bl	8003efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800301e:	461a      	mov	r2, r3
 8003020:	2310      	movs	r3, #16
 8003022:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d030      	beq.n	8003090 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003036:	2b80      	cmp	r3, #128	@ 0x80
 8003038:	d109      	bne.n	800304e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003048:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800304c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800304e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003050:	4613      	mov	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d108      	bne.n	800307e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f013 f99d 	bl	80163b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308a:	461a      	mov	r2, r3
 800308c:	2302      	movs	r3, #2
 800308e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	2320      	movs	r3, #32
 80030aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c2:	461a      	mov	r2, r3
 80030c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030c8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	3301      	adds	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80030d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f47f af62 	bne.w	8002fa2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fd1c 	bl	8006b20 <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030f2:	f040 80db 	bne.w	80032ac <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f003 fd3d 	bl	8006b7a <USB_ReadDevAllInEpInterrupt>
 8003100:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003106:	e0cd      	b.n	80032a4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80c2 	beq.w	8003298 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fd63 	bl	8006bea <USB_ReadDevInEPInterrupt>
 8003124:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d057      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003144:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	43db      	mvns	r3, r3
 800314a:	69f9      	ldr	r1, [r7, #28]
 800314c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003150:	4013      	ands	r3, r2
 8003152:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003160:	461a      	mov	r2, r3
 8003162:	2301      	movs	r3, #1
 8003164:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	799b      	ldrb	r3, [r3, #6]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d132      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3320      	adds	r3, #32
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4403      	add	r3, r0
 800318e:	331c      	adds	r3, #28
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4419      	add	r1, r3
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4403      	add	r3, r0
 80031a2:	3320      	adds	r3, #32
 80031a4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x3a2>
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3324      	adds	r3, #36	@ 0x24
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d108      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031cc:	461a      	mov	r2, r3
 80031ce:	2101      	movs	r1, #1
 80031d0:	f003 fd6a 	bl	8006ca8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f013 f867 	bl	80162ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f6:	461a      	mov	r2, r3
 80031f8:	2308      	movs	r3, #8
 80031fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003212:	461a      	mov	r2, r3
 8003214:	2310      	movs	r3, #16
 8003216:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800322e:	461a      	mov	r2, r3
 8003230:	2340      	movs	r3, #64	@ 0x40
 8003232:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d023      	beq.n	8003286 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800323e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003240:	6a38      	ldr	r0, [r7, #32]
 8003242:	f002 fd51 	bl	8005ce8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3310      	adds	r3, #16
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	78db      	ldrb	r3, [r3, #3]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d108      	bne.n	8003274 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2200      	movs	r2, #0
 8003266:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f013 f8b4 	bl	80163dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003280:	461a      	mov	r2, r3
 8003282:	2302      	movs	r3, #2
 8003284:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003290:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fcbd 	bl	8003c12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800329e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f47f af2e 	bne.w	8003108 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fc35 	bl	8006b20 <USB_ReadInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80032bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80032c0:	d122      	bne.n	8003308 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032e8:	2100      	movs	r1, #0
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fea4 	bl	8004038 <HAL_PCDEx_LPM_Callback>
 80032f0:	e002      	b.n	80032f8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f013 f852 	bl	801639c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f003 fc07 	bl	8006b20 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331c:	d112      	bne.n	8003344 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b01      	cmp	r3, #1
 800332c:	d102      	bne.n	8003334 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f013 f80e 	bl	8016350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003342:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fbe9 	bl	8006b20 <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003358:	f040 80b7 	bne.w	80034ca <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2110      	movs	r1, #16
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fcb6 	bl	8005ce8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003380:	e046      	b.n	8003410 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800338e:	461a      	mov	r2, r3
 8003390:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003394:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a6:	0151      	lsls	r1, r2, #5
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	440a      	add	r2, r1
 80033ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80033b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c2:	461a      	mov	r2, r3
 80033c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033c8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033da:	0151      	lsls	r1, r2, #5
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	440a      	add	r2, r1
 80033e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80033e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033fa:	0151      	lsls	r1, r2, #5
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	440a      	add	r2, r1
 8003400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003404:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003408:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	3301      	adds	r3, #1
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	461a      	mov	r2, r3
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	4293      	cmp	r3, r2
 800341a:	d3b2      	bcc.n	8003382 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	69fa      	ldr	r2, [r7, #28]
 8003426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800342a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800342e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7bdb      	ldrb	r3, [r3, #15]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003448:	f043 030b 	orr.w	r3, r3, #11
 800344c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800345e:	f043 030b 	orr.w	r3, r3, #11
 8003462:	6453      	str	r3, [r2, #68]	@ 0x44
 8003464:	e015      	b.n	8003492 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003474:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003478:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800347c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800348c:	f043 030b 	orr.w	r3, r3, #11
 8003490:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034a0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80034a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034b4:	461a      	mov	r2, r3
 80034b6:	f003 fbf7 	bl	8006ca8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80034c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 fb26 	bl	8006b20 <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034de:	d123      	bne.n	8003528 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f003 fbbc 	bl	8006c62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fc73 	bl	8005dda <USB_GetDevSpeed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681c      	ldr	r4, [r3, #0]
 8003500:	f001 f9ca 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 8003504:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	4620      	mov	r0, r4
 800350e:	f002 f977 	bl	8005800 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f012 fef3 	bl	80162fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003526:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f003 faf7 	bl	8006b20 <USB_ReadInterrupts>
 8003532:	4603      	mov	r3, r0
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d10a      	bne.n	8003552 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f012 fed0 	bl	80162e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 0208 	and.w	r2, r2, #8
 8003550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fae2 	bl	8006b20 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d123      	bne.n	80035ae <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003572:	2301      	movs	r3, #1
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
 8003576:	e014      	b.n	80035a2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d105      	bne.n	800359c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fb0a 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	3301      	adds	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	791b      	ldrb	r3, [r3, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d3e4      	bcc.n	8003578 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 fab4 	bl	8006b20 <USB_ReadInterrupts>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c2:	d13c      	bne.n	800363e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c8:	e02b      	b.n	8003622 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	3318      	adds	r3, #24
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d115      	bne.n	800361c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80035f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da12      	bge.n	800361c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	3317      	adds	r3, #23
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 faca 	bl	8003bb0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	3301      	adds	r3, #1
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	791b      	ldrb	r3, [r3, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	4293      	cmp	r3, r2
 800362c:	d3cd      	bcc.n	80035ca <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800363c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f003 fa6c 	bl	8006b20 <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800364e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003652:	d156      	bne.n	8003702 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
 8003658:	e045      	b.n	80036e6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d12e      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003682:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003684:	2b00      	cmp	r3, #0
 8003686:	da2b      	bge.n	80036e0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	0c1a      	lsrs	r2, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003692:	4053      	eors	r3, r2
 8003694:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d121      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a0:	4613      	mov	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036dc:	6053      	str	r3, [r2, #4]
            break;
 80036de:	e008      	b.n	80036f2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	3301      	adds	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	791b      	ldrb	r3, [r3, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d3b3      	bcc.n	800365a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fa0a 	bl	8006b20 <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003716:	d10a      	bne.n	800372e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f012 fe71 	bl	8016400 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800372c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f003 f9f4 	bl	8006b20 <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 0304 	and.w	r3, r3, #4
 800373e:	2b04      	cmp	r3, #4
 8003740:	d115      	bne.n	800376e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f012 fe61 	bl	801641c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	e000      	b.n	800376e <HAL_PCD_IRQHandler+0x93c>
      return;
 800376c:	bf00      	nop
    }
  }
}
 800376e:	3734      	adds	r7, #52	@ 0x34
 8003770:	46bd      	mov	sp, r7
 8003772:	bd90      	pop	{r4, r7, pc}

08003774 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_SetAddress+0x1a>
 800378a:	2302      	movs	r3, #2
 800378c:	e012      	b.n	80037b4 <HAL_PCD_SetAddress+0x40>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 f953 	bl	8006a50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4608      	mov	r0, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	70fb      	strb	r3, [r7, #3]
 80037ce:	460b      	mov	r3, r1
 80037d0:	803b      	strh	r3, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da0f      	bge.n	8003802 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 020f 	and.w	r2, r3, #15
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	3310      	adds	r3, #16
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	705a      	strb	r2, [r3, #1]
 8003800:	e00f      	b.n	8003822 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	4613      	mov	r3, r2
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	3304      	adds	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	b2da      	uxtb	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800382e:	883b      	ldrh	r3, [r7, #0]
 8003830:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	78ba      	ldrb	r2, [r7, #2]
 800383c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	785b      	ldrb	r3, [r3, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003850:	78bb      	ldrb	r3, [r7, #2]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d102      	bne.n	800385c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_EP_Open+0xae>
 8003866:	2302      	movs	r3, #2
 8003868:	e00e      	b.n	8003888 <HAL_PCD_EP_Open+0xcc>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68f9      	ldr	r1, [r7, #12]
 8003878:	4618      	mov	r0, r3
 800387a:	f002 fad3 	bl	8005e24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003886:	7afb      	ldrb	r3, [r7, #11]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800389c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da0f      	bge.n	80038c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 020f 	and.w	r2, r3, #15
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3310      	adds	r3, #16
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	705a      	strb	r2, [r3, #1]
 80038c2:	e00f      	b.n	80038e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	4613      	mov	r3, r2
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_PCD_EP_Close+0x6e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e00e      	b.n	800391c <HAL_PCD_EP_Close+0x8c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68f9      	ldr	r1, [r7, #12]
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fb11 	bl	8005f34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	607a      	str	r2, [r7, #4]
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	460b      	mov	r3, r1
 8003932:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003934:	7afb      	ldrb	r3, [r7, #11]
 8003936:	f003 020f 	and.w	r2, r3, #15
 800393a:	4613      	mov	r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2200      	movs	r2, #0
 8003964:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003966:	7afb      	ldrb	r3, [r7, #11]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	b2da      	uxtb	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	799b      	ldrb	r3, [r3, #6]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d102      	bne.n	8003980 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	799b      	ldrb	r3, [r3, #6]
 8003988:	461a      	mov	r2, r3
 800398a:	6979      	ldr	r1, [r7, #20]
 800398c:	f002 fbae 	bl	80060ec <USB_EPStartXfer>

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80039bc:	681b      	ldr	r3, [r3, #0]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	460b      	mov	r3, r1
 80039d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	7afb      	ldrb	r3, [r7, #11]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3310      	adds	r3, #16
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	3304      	adds	r3, #4
 80039f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2201      	movs	r2, #1
 8003a08:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0a:	7afb      	ldrb	r3, [r7, #11]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	799b      	ldrb	r3, [r3, #6]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d102      	bne.n	8003a24 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	799b      	ldrb	r3, [r3, #6]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	f002 fb5c 	bl	80060ec <USB_EPStartXfer>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	7912      	ldrb	r2, [r2, #4]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e04f      	b.n	8003afc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	da0f      	bge.n	8003a84 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 020f 	and.w	r2, r3, #15
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	3310      	adds	r3, #16
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4413      	add	r3, r2
 8003a78:	3304      	adds	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	705a      	strb	r2, [r3, #1]
 8003a82:	e00d      	b.n	8003aa0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	3304      	adds	r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_PCD_EP_SetStall+0x82>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e01d      	b.n	8003afc <HAL_PCD_EP_SetStall+0xbe>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f002 feea 	bl	80068a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ad4:	78fb      	ldrb	r3, [r7, #3]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7999      	ldrb	r1, [r3, #6]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003aec:	461a      	mov	r2, r3
 8003aee:	f003 f8db 	bl	8006ca8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	7912      	ldrb	r2, [r2, #4]
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e042      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0f      	bge.n	8003b4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3310      	adds	r3, #16
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	705a      	strb	r2, [r3, #1]
 8003b48:	e00f      	b.n	8003b6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	78fb      	ldrb	r3, [r7, #3]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_PCD_EP_ClrStall+0x86>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e00e      	b.n	8003ba8 <HAL_PCD_EP_ClrStall+0xa4>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68f9      	ldr	r1, [r7, #12]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f002 fef3 	bl	8006984 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	da0c      	bge.n	8003bde <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 020f 	and.w	r2, r3, #15
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	3310      	adds	r3, #16
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e00c      	b.n	8003bf8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68f9      	ldr	r1, [r7, #12]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fd12 	bl	8006628 <USB_EPStopXfer>
 8003c04:	4603      	mov	r3, r0
 8003c06:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c08:	7afb      	ldrb	r3, [r7, #11]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b08a      	sub	sp, #40	@ 0x28
 8003c16:	af02      	add	r7, sp, #8
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3310      	adds	r3, #16
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	4413      	add	r3, r2
 8003c36:	3304      	adds	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d901      	bls.n	8003c4a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e06b      	b.n	8003d22 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c6e:	e02a      	b.n	8003cc6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	69fa      	ldr	r2, [r7, #28]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d902      	bls.n	8003c8c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	3303      	adds	r3, #3
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	68d9      	ldr	r1, [r3, #12]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6978      	ldr	r0, [r7, #20]
 8003caa:	f002 fd67 	bl	800677c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	441a      	add	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d809      	bhi.n	8003cf0 <PCD_WriteEmptyTxFifo+0xde>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d203      	bcs.n	8003cf0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1bf      	bne.n	8003c70 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d811      	bhi.n	8003d20 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	43db      	mvns	r3, r3
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	333c      	adds	r3, #60	@ 0x3c
 8003d44:	3304      	adds	r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	799b      	ldrb	r3, [r3, #6]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d17b      	bne.n	8003e5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4a61      	ldr	r2, [pc, #388]	@ (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	f240 80b9 	bls.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80b3 	beq.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e0a7      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dae:	461a      	mov	r2, r3
 8003db0:	2320      	movs	r3, #32
 8003db2:	6093      	str	r3, [r2, #8]
 8003db4:	e098      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f040 8093 	bne.w	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d90f      	bls.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e07e      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	0159      	lsls	r1, r3, #5
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e16:	1ad2      	subs	r2, r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d114      	bne.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e34:	461a      	mov	r2, r3
 8003e36:	2101      	movs	r1, #1
 8003e38:	f002 ff36 	bl	8006ca8 <USB_EP0_OutStart>
 8003e3c:	e006      	b.n	8003e4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	4619      	mov	r1, r3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f012 fa10 	bl	8016278 <HAL_PCD_DataOutStageCallback>
 8003e58:	e046      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d124      	bne.n	8003eac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00a      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	e032      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0320 	and.w	r3, r3, #32
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f012 f9e7 	bl	8016278 <HAL_PCD_DataOutStageCallback>
 8003eaa:	e01d      	b.n	8003ee8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d114      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d108      	bne.n	8003edc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	f002 fee6 	bl	8006ca8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f012 f9c8 	bl	8016278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	4f54300a 	.word	0x4f54300a
 8003ef8:	4f54310a 	.word	0x4f54310a

08003efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	333c      	adds	r3, #60	@ 0x3c
 8003f14:	3304      	adds	r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	015a      	lsls	r2, r3, #5
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a15      	ldr	r2, [pc, #84]	@ (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d90e      	bls.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f012 f97f 	bl	8016254 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d90c      	bls.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	799b      	ldrb	r3, [r3, #6]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d108      	bne.n	8003f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f70:	461a      	mov	r2, r3
 8003f72:	2101      	movs	r1, #1
 8003f74:	f002 fe98 	bl	8006ca8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	4f54300a 	.word	0x4f54300a

08003f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003fa6:	883b      	ldrh	r3, [r7, #0]
 8003fa8:	0419      	lsls	r1, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fb4:	e028      	b.n	8004008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	e00d      	b.n	8003fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	3340      	adds	r3, #64	@ 0x40
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	4413      	add	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d3ec      	bcc.n	8003fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ff0:	883b      	ldrh	r3, [r7, #0]
 8003ff2:	0418      	lsls	r0, r3, #16
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	4302      	orrs	r2, r0
 8004000:	3340      	adds	r3, #64	@ 0x40
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e267      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800406e:	4b88      	ldr	r3, [pc, #544]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	2b04      	cmp	r3, #4
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b85      	ldr	r3, [pc, #532]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004082:	2b08      	cmp	r3, #8
 8004084:	d112      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b82      	ldr	r3, [pc, #520]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800408e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b7e      	ldr	r3, [pc, #504]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x108>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e242      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x74>
 80040b6:	4b76      	ldr	r3, [pc, #472]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a75      	ldr	r2, [pc, #468]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b70      	ldr	r3, [pc, #448]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b6d      	ldr	r3, [pc, #436]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6c      	ldr	r2, [pc, #432]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040e8:	4b69      	ldr	r3, [pc, #420]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a68      	ldr	r2, [pc, #416]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b66      	ldr	r3, [pc, #408]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a65      	ldr	r2, [pc, #404]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fd f964 	bl	80013d4 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd f960 	bl	80013d4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	@ 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e207      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b5b      	ldr	r3, [pc, #364]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xc0>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd f950 	bl	80013d4 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd f94c 	bl	80013d4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1f3      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	4b51      	ldr	r3, [pc, #324]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0xe8>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004166:	4b4a      	ldr	r3, [pc, #296]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00b      	beq.n	800418a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b47      	ldr	r3, [pc, #284]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800417a:	2b08      	cmp	r3, #8
 800417c:	d11c      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b44      	ldr	r3, [pc, #272]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d116      	bne.n	80041b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418a:	4b41      	ldr	r3, [pc, #260]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e1c7      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4937      	ldr	r1, [pc, #220]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	e03a      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d020      	beq.n	8004202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c0:	4b34      	ldr	r3, [pc, #208]	@ (8004294 <HAL_RCC_OscConfig+0x244>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c6:	f7fd f905 	bl	80013d4 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ce:	f7fd f901 	bl	80013d4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e1a8      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ec:	4b28      	ldr	r3, [pc, #160]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4925      	ldr	r1, [pc, #148]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <HAL_RCC_OscConfig+0x244>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd f8e4 	bl	80013d4 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004210:	f7fd f8e0 	bl	80013d4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e187      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d036      	beq.n	80042a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <HAL_RCC_OscConfig+0x248>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004248:	f7fd f8c4 	bl	80013d4 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004250:	f7fd f8c0 	bl	80013d4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e167      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <HAL_RCC_OscConfig+0x240>)
 8004264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
 800426e:	e01b      	b.n	80042a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_RCC_OscConfig+0x248>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fd f8ad 	bl	80013d4 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800427c:	e00e      	b.n	800429c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd f8a9 	bl	80013d4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d907      	bls.n	800429c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e150      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 8004290:	40023800 	.word	0x40023800
 8004294:	42470000 	.word	0x42470000
 8004298:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	4b88      	ldr	r3, [pc, #544]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1ea      	bne.n	800427e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8097 	beq.w	80043e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ba:	4b81      	ldr	r3, [pc, #516]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	4b7d      	ldr	r3, [pc, #500]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	4a7c      	ldr	r2, [pc, #496]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d6:	4b7a      	ldr	r3, [pc, #488]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b77      	ldr	r3, [pc, #476]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d118      	bne.n	8004324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b74      	ldr	r3, [pc, #464]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a73      	ldr	r2, [pc, #460]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fd f869 	bl	80013d4 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fd f865 	bl	80013d4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e10c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004318:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <HAL_RCC_OscConfig+0x474>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d106      	bne.n	800433a <HAL_RCC_OscConfig+0x2ea>
 800432c:	4b64      	ldr	r3, [pc, #400]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004330:	4a63      	ldr	r2, [pc, #396]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6713      	str	r3, [r2, #112]	@ 0x70
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x30c>
 8004342:	4b5f      	ldr	r3, [pc, #380]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004346:	4a5e      	ldr	r2, [pc, #376]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6713      	str	r3, [r2, #112]	@ 0x70
 800434e:	4b5c      	ldr	r3, [pc, #368]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004352:	4a5b      	ldr	r2, [pc, #364]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	@ 0x70
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x324>
 800435c:	4b58      	ldr	r3, [pc, #352]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004360:	4a57      	ldr	r2, [pc, #348]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	@ 0x70
 8004368:	4b55      	ldr	r3, [pc, #340]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800436c:	4a54      	ldr	r2, [pc, #336]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 0304 	bic.w	r3, r3, #4
 8004372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fd f82a 	bl	80013d4 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004382:	e00a      	b.n	800439a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004384:	f7fd f826 	bl	80013d4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0cb      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	4b49      	ldr	r3, [pc, #292]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0ee      	beq.n	8004384 <HAL_RCC_OscConfig+0x334>
 80043a6:	e014      	b.n	80043d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a8:	f7fd f814 	bl	80013d4 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	e00a      	b.n	80043c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fd f810 	bl	80013d4 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0b5      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c6:	4b3e      	ldr	r3, [pc, #248]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ee      	bne.n	80043b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	4a38      	ldr	r2, [pc, #224]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 80a1 	beq.w	8004530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ee:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d05c      	beq.n	80044b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d141      	bne.n	8004486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fc ffe4 	bl	80013d4 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fc ffe0 	bl	80013d4 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e087      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	019b      	lsls	r3, r3, #6
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004444:	085b      	lsrs	r3, r3, #1
 8004446:	3b01      	subs	r3, #1
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	491b      	ldr	r1, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004458:	4b1b      	ldr	r3, [pc, #108]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fc ffb9 	bl	80013d4 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fc ffb5 	bl	80013d4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e05c      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004478:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x416>
 8004484:	e054      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <HAL_RCC_OscConfig+0x478>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448c:	f7fc ffa2 	bl	80013d4 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fc ff9e 	bl	80013d4 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e045      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a6:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <HAL_RCC_OscConfig+0x470>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x444>
 80044b2:	e03d      	b.n	8004530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d107      	bne.n	80044cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e038      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044cc:	4b1b      	ldr	r3, [pc, #108]	@ (800453c <HAL_RCC_OscConfig+0x4ec>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d028      	beq.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d121      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d11a      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044fc:	4013      	ands	r3, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004504:	4293      	cmp	r3, r2
 8004506:	d111      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	085b      	lsrs	r3, r3, #1
 8004514:	3b01      	subs	r3, #1
 8004516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004518:	429a      	cmp	r2, r3
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023800 	.word	0x40023800

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cc      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b68      	ldr	r3, [pc, #416]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d90c      	bls.n	800457c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b65      	ldr	r3, [pc, #404]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b63      	ldr	r3, [pc, #396]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0b8      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004594:	4b59      	ldr	r3, [pc, #356]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a58      	ldr	r2, [pc, #352]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800459e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045ac:	4b53      	ldr	r3, [pc, #332]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4a52      	ldr	r2, [pc, #328]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b8:	4b50      	ldr	r3, [pc, #320]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	494d      	ldr	r1, [pc, #308]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d044      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b47      	ldr	r3, [pc, #284]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d119      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e07f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d003      	beq.n	80045fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b3f      	ldr	r3, [pc, #252]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e06f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3b      	ldr	r3, [pc, #236]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e067      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b37      	ldr	r3, [pc, #220]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4934      	ldr	r1, [pc, #208]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	4313      	orrs	r3, r2
 800462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fc fed0 	bl	80013d4 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fc fecc 	bl	80013d4 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e04f      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2b      	ldr	r3, [pc, #172]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b25      	ldr	r3, [pc, #148]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d20c      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b22      	ldr	r3, [pc, #136]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e032      	b.n	80046ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b19      	ldr	r3, [pc, #100]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4916      	ldr	r1, [pc, #88]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	490e      	ldr	r1, [pc, #56]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046c6:	f000 f821 	bl	800470c <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490a      	ldr	r1, [pc, #40]	@ (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046e2:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fc fc4c 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40023c00 	.word	0x40023c00
 80046fc:	40023800 	.word	0x40023800
 8004700:	0801ae40 	.word	0x0801ae40
 8004704:	20000000 	.word	0x20000000
 8004708:	20000004 	.word	0x20000004

0800470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800470c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004710:	b090      	sub	sp, #64	@ 0x40
 8004712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004724:	4b59      	ldr	r3, [pc, #356]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b08      	cmp	r3, #8
 800472e:	d00d      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x40>
 8004730:	2b08      	cmp	r3, #8
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d002      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x34>
 800473a:	2b04      	cmp	r3, #4
 800473c:	d003      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x3a>
 800473e:	e09b      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004740:	4b53      	ldr	r3, [pc, #332]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004744:	e09b      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004746:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800474a:	e098      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800474c:	4b4f      	ldr	r3, [pc, #316]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004754:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004756:	4b4d      	ldr	r3, [pc, #308]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d028      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004762:	4b4a      	ldr	r3, [pc, #296]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	2200      	movs	r2, #0
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	627a      	str	r2, [r7, #36]	@ 0x24
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004774:	2100      	movs	r1, #0
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004778:	fb03 f201 	mul.w	r2, r3, r1
 800477c:	2300      	movs	r3, #0
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	4413      	add	r3, r2
 8004784:	4a43      	ldr	r2, [pc, #268]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x188>)
 8004786:	fba0 1202 	umull	r1, r2, r0, r2
 800478a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800478c:	460a      	mov	r2, r1
 800478e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004792:	4413      	add	r3, r2
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004798:	2200      	movs	r2, #0
 800479a:	61bb      	str	r3, [r7, #24]
 800479c:	61fa      	str	r2, [r7, #28]
 800479e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047a6:	f7fb fd6b 	bl	8000280 <__aeabi_uldivmod>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4613      	mov	r3, r2
 80047b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047b2:	e053      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b4:	4b35      	ldr	r3, [pc, #212]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	099b      	lsrs	r3, r3, #6
 80047ba:	2200      	movs	r2, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	617a      	str	r2, [r7, #20]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047c6:	f04f 0b00 	mov.w	fp, #0
 80047ca:	4652      	mov	r2, sl
 80047cc:	465b      	mov	r3, fp
 80047ce:	f04f 0000 	mov.w	r0, #0
 80047d2:	f04f 0100 	mov.w	r1, #0
 80047d6:	0159      	lsls	r1, r3, #5
 80047d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047dc:	0150      	lsls	r0, r2, #5
 80047de:	4602      	mov	r2, r0
 80047e0:	460b      	mov	r3, r1
 80047e2:	ebb2 080a 	subs.w	r8, r2, sl
 80047e6:	eb63 090b 	sbc.w	r9, r3, fp
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047fe:	ebb2 0408 	subs.w	r4, r2, r8
 8004802:	eb63 0509 	sbc.w	r5, r3, r9
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	00eb      	lsls	r3, r5, #3
 8004810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004814:	00e2      	lsls	r2, r4, #3
 8004816:	4614      	mov	r4, r2
 8004818:	461d      	mov	r5, r3
 800481a:	eb14 030a 	adds.w	r3, r4, sl
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	eb45 030b 	adc.w	r3, r5, fp
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004832:	4629      	mov	r1, r5
 8004834:	028b      	lsls	r3, r1, #10
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483c:	4621      	mov	r1, r4
 800483e:	028a      	lsls	r2, r1, #10
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004846:	2200      	movs	r2, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004850:	f7fb fd16 	bl	8000280 <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_GetSysClockFreq+0x180>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	3301      	adds	r3, #1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800486c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004876:	e002      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x184>)
 800487a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800487c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004880:	4618      	mov	r0, r3
 8004882:	3740      	adds	r7, #64	@ 0x40
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	00f42400 	.word	0x00f42400
 8004894:	017d7840 	.word	0x017d7840

08004898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000000 	.word	0x20000000

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	@ (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	0801ae50 	.word	0x0801ae50

080048d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048dc:	f7ff ffdc 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0b5b      	lsrs	r3, r3, #13
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	@ (80048fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	0801ae50 	.word	0x0801ae50

08004900 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	220f      	movs	r2, #15
 800490e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004910:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 0203 	and.w	r2, r3, #3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800491c:	4b0f      	ldr	r3, [pc, #60]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004928:	4b0c      	ldr	r3, [pc, #48]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004934:	4b09      	ldr	r3, [pc, #36]	@ (800495c <HAL_RCC_GetClockConfig+0x5c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004942:	4b07      	ldr	r3, [pc, #28]	@ (8004960 <HAL_RCC_GetClockConfig+0x60>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0207 	and.w	r2, r3, #7
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	601a      	str	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	40023c00 	.word	0x40023c00

08004964 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e038      	b.n	80049ec <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7fc faee 	bl	8000f70 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	3308      	adds	r3, #8
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 fdfa 	bl	8005598 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	461a      	mov	r2, r3
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	f000 fe5c 	bl	800566c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6858      	ldr	r0, [r3, #4]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	f000 fe81 	bl	80056c8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	6892      	ldr	r2, [r2, #8]
 80049ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	6892      	ldr	r2, [r2, #8]
 80049da:	f041 0101 	orr.w	r1, r1, #1
 80049de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e041      	b.n	8004a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc f998 	bl	8000d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 f9b6 	bl	8004da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d001      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e04e      	b.n	8004b4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a23      	ldr	r2, [pc, #140]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d022      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad6:	d01d      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d018      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d013      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00e      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d009      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a19      	ldr	r2, [pc, #100]	@ (8004b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d004      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d010      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	e007      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40010400 	.word	0x40010400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	40001800 	.word	0x40001800

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0202 	mvn.w	r2, #2
 8004ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8d2 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8c4 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8d5 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8ac 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f89e 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8af 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f886 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f878 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f889 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f860 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f852 	bl	8004d54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f863 	bl	8004d7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0201 	mvn.w	r2, #1
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fb fedc 	bl	8000a98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00c      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f97c 	bl	8004ffc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f834 	bl	8004d90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00c      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d007      	beq.n	8004d4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0220 	mvn.w	r2, #32
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f94e 	bl	8004fe8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a43      	ldr	r2, [pc, #268]	@ (8004ec4 <TIM_Base_SetConfig+0x120>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d00f      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a40      	ldr	r2, [pc, #256]	@ (8004ec8 <TIM_Base_SetConfig+0x124>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <TIM_Base_SetConfig+0x128>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d007      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed0 <TIM_Base_SetConfig+0x12c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3d      	ldr	r2, [pc, #244]	@ (8004ed4 <TIM_Base_SetConfig+0x130>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <TIM_Base_SetConfig+0x120>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d027      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec8 <TIM_Base_SetConfig+0x124>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d023      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2e      	ldr	r2, [pc, #184]	@ (8004ecc <TIM_Base_SetConfig+0x128>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01f      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ed0 <TIM_Base_SetConfig+0x12c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <TIM_Base_SetConfig+0x130>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d017      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a2b      	ldr	r2, [pc, #172]	@ (8004ed8 <TIM_Base_SetConfig+0x134>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <TIM_Base_SetConfig+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a29      	ldr	r2, [pc, #164]	@ (8004ee0 <TIM_Base_SetConfig+0x13c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a28      	ldr	r2, [pc, #160]	@ (8004ee4 <TIM_Base_SetConfig+0x140>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a27      	ldr	r2, [pc, #156]	@ (8004ee8 <TIM_Base_SetConfig+0x144>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a26      	ldr	r2, [pc, #152]	@ (8004eec <TIM_Base_SetConfig+0x148>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d108      	bne.n	8004e68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec4 <TIM_Base_SetConfig+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_Base_SetConfig+0xf2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a10      	ldr	r2, [pc, #64]	@ (8004ed4 <TIM_Base_SetConfig+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d103      	bne.n	8004e9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f043 0204 	orr.w	r2, r3, #4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	40001c00 	.word	0x40001c00
 8004eec:	40002000 	.word	0x40002000

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e05a      	b.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a21      	ldr	r2, [pc, #132]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d022      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f54:	d01d      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d018      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a17      	ldr	r2, [pc, #92]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a15      	ldr	r2, [pc, #84]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10c      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40010400 	.word	0x40010400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40001800 	.word	0x40001800

08004fe8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fb feac 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f82b 	bl	80050b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b4:	b0c0      	sub	sp, #256	@ 0x100
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	ea40 0301 	orr.w	r3, r0, r1
 80050d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005108:	f021 010c 	bic.w	r1, r1, #12
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005116:	430b      	orrs	r3, r1
 8005118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512a:	6999      	ldr	r1, [r3, #24]
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	ea40 0301 	orr.w	r3, r0, r1
 8005136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b8f      	ldr	r3, [pc, #572]	@ (800537c <UART_SetConfig+0x2cc>)
 8005140:	429a      	cmp	r2, r3
 8005142:	d005      	beq.n	8005150 <UART_SetConfig+0xa0>
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b8d      	ldr	r3, [pc, #564]	@ (8005380 <UART_SetConfig+0x2d0>)
 800514c:	429a      	cmp	r2, r3
 800514e:	d104      	bne.n	800515a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7ff fbc2 	bl	80048d8 <HAL_RCC_GetPCLK2Freq>
 8005154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005158:	e003      	b.n	8005162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800515a:	f7ff fba9 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 800515e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800516c:	f040 810c 	bne.w	8005388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800517a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800517e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	1891      	adds	r1, r2, r2
 8005188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800518a:	415b      	adcs	r3, r3
 800518c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800518e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005192:	4621      	mov	r1, r4
 8005194:	eb12 0801 	adds.w	r8, r2, r1
 8005198:	4629      	mov	r1, r5
 800519a:	eb43 0901 	adc.w	r9, r3, r1
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051b2:	4690      	mov	r8, r2
 80051b4:	4699      	mov	r9, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	eb18 0303 	adds.w	r3, r8, r3
 80051bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051c0:	462b      	mov	r3, r5
 80051c2:	eb49 0303 	adc.w	r3, r9, r3
 80051c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051de:	460b      	mov	r3, r1
 80051e0:	18db      	adds	r3, r3, r3
 80051e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e4:	4613      	mov	r3, r2
 80051e6:	eb42 0303 	adc.w	r3, r2, r3
 80051ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051f4:	f7fb f844 	bl	8000280 <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <UART_SetConfig+0x2d4>)
 80051fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	011c      	lsls	r4, r3, #4
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	1891      	adds	r1, r2, r2
 800521e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005220:	415b      	adcs	r3, r3
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005228:	4641      	mov	r1, r8
 800522a:	eb12 0a01 	adds.w	sl, r2, r1
 800522e:	4649      	mov	r1, r9
 8005230:	eb43 0b01 	adc.w	fp, r3, r1
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005248:	4692      	mov	sl, r2
 800524a:	469b      	mov	fp, r3
 800524c:	4643      	mov	r3, r8
 800524e:	eb1a 0303 	adds.w	r3, sl, r3
 8005252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005256:	464b      	mov	r3, r9
 8005258:	eb4b 0303 	adc.w	r3, fp, r3
 800525c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800526c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005274:	460b      	mov	r3, r1
 8005276:	18db      	adds	r3, r3, r3
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
 800527a:	4613      	mov	r3, r2
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
 8005282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800528a:	f7fa fff9 	bl	8000280 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4611      	mov	r1, r2
 8005294:	4b3b      	ldr	r3, [pc, #236]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005296:	fba3 2301 	umull	r2, r3, r3, r1
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2264      	movs	r2, #100	@ 0x64
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	1acb      	subs	r3, r1, r3
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052aa:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <UART_SetConfig+0x2d4>)
 80052ac:	fba3 2302 	umull	r2, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052b8:	441c      	add	r4, r3
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052d4:	415b      	adcs	r3, r3
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052dc:	4641      	mov	r1, r8
 80052de:	1851      	adds	r1, r2, r1
 80052e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80052e2:	4649      	mov	r1, r9
 80052e4:	414b      	adcs	r3, r1
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052f4:	4659      	mov	r1, fp
 80052f6:	00cb      	lsls	r3, r1, #3
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fe:	4651      	mov	r1, sl
 8005300:	00ca      	lsls	r2, r1, #3
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	4603      	mov	r3, r0
 8005308:	4642      	mov	r2, r8
 800530a:	189b      	adds	r3, r3, r2
 800530c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005310:	464b      	mov	r3, r9
 8005312:	460a      	mov	r2, r1
 8005314:	eb42 0303 	adc.w	r3, r2, r3
 8005318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800532c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005330:	460b      	mov	r3, r1
 8005332:	18db      	adds	r3, r3, r3
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005336:	4613      	mov	r3, r2
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800533e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005346:	f7fa ff9b 	bl	8000280 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	@ 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3332      	adds	r3, #50	@ 0x32
 8005362:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	f003 0207 	and.w	r2, r3, #7
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4422      	add	r2, r4
 8005376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005378:	e106      	b.n	8005588 <UART_SetConfig+0x4d8>
 800537a:	bf00      	nop
 800537c:	40011000 	.word	0x40011000
 8005380:	40011400 	.word	0x40011400
 8005384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800539a:	4642      	mov	r2, r8
 800539c:	464b      	mov	r3, r9
 800539e:	1891      	adds	r1, r2, r2
 80053a0:	6239      	str	r1, [r7, #32]
 80053a2:	415b      	adcs	r3, r3
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053aa:	4641      	mov	r1, r8
 80053ac:	1854      	adds	r4, r2, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	eb43 0501 	adc.w	r5, r3, r1
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	00eb      	lsls	r3, r5, #3
 80053be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c2:	00e2      	lsls	r2, r4, #3
 80053c4:	4614      	mov	r4, r2
 80053c6:	461d      	mov	r5, r3
 80053c8:	4643      	mov	r3, r8
 80053ca:	18e3      	adds	r3, r4, r3
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053d0:	464b      	mov	r3, r9
 80053d2:	eb45 0303 	adc.w	r3, r5, r3
 80053d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053f6:	4629      	mov	r1, r5
 80053f8:	008b      	lsls	r3, r1, #2
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005400:	4621      	mov	r1, r4
 8005402:	008a      	lsls	r2, r1, #2
 8005404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005408:	f7fa ff3a 	bl	8000280 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4b60      	ldr	r3, [pc, #384]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005412:	fba3 2302 	umull	r2, r3, r3, r2
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	011c      	lsls	r4, r3, #4
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	2200      	movs	r2, #0
 8005420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	1891      	adds	r1, r2, r2
 8005432:	61b9      	str	r1, [r7, #24]
 8005434:	415b      	adcs	r3, r3
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	4641      	mov	r1, r8
 800543e:	1851      	adds	r1, r2, r1
 8005440:	6139      	str	r1, [r7, #16]
 8005442:	4649      	mov	r1, r9
 8005444:	414b      	adcs	r3, r1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005454:	4659      	mov	r1, fp
 8005456:	00cb      	lsls	r3, r1, #3
 8005458:	4651      	mov	r1, sl
 800545a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545e:	4651      	mov	r1, sl
 8005460:	00ca      	lsls	r2, r1, #3
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	4603      	mov	r3, r0
 8005468:	4642      	mov	r2, r8
 800546a:	189b      	adds	r3, r3, r2
 800546c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005470:	464b      	mov	r3, r9
 8005472:	460a      	mov	r2, r1
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005494:	4649      	mov	r1, r9
 8005496:	008b      	lsls	r3, r1, #2
 8005498:	4641      	mov	r1, r8
 800549a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800549e:	4641      	mov	r1, r8
 80054a0:	008a      	lsls	r2, r1, #2
 80054a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054a6:	f7fa feeb 	bl	8000280 <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	4b38      	ldr	r3, [pc, #224]	@ (8005594 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 2301 	umull	r2, r3, r3, r1
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2264      	movs	r2, #100	@ 0x64
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	1acb      	subs	r3, r1, r3
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	3332      	adds	r3, #50	@ 0x32
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <UART_SetConfig+0x4e4>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d0:	441c      	add	r4, r3
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80054da:	677a      	str	r2, [r7, #116]	@ 0x74
 80054dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	415b      	adcs	r3, r3
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005522:	464b      	mov	r3, r9
 8005524:	460a      	mov	r2, r1
 8005526:	eb42 0303 	adc.w	r3, r2, r3
 800552a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	663b      	str	r3, [r7, #96]	@ 0x60
 8005536:	667a      	str	r2, [r7, #100]	@ 0x64
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005544:	4649      	mov	r1, r9
 8005546:	008b      	lsls	r3, r1, #2
 8005548:	4641      	mov	r1, r8
 800554a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554e:	4641      	mov	r1, r8
 8005550:	008a      	lsls	r2, r1, #2
 8005552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005556:	f7fa fe93 	bl	8000280 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005560:	fba3 1302 	umull	r1, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	2164      	movs	r1, #100	@ 0x64
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	3332      	adds	r3, #50	@ 0x32
 8005572:	4a08      	ldr	r2, [pc, #32]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4422      	add	r2, r4
 8005586:	609a      	str	r2, [r3, #8]
}
 8005588:	bf00      	nop
 800558a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800558e:	46bd      	mov	sp, r7
 8005590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005594:	51eb851f 	.word	0x51eb851f

08005598 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	f023 0101 	bic.w	r1, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d102      	bne.n	80055c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80055c2:	2340      	movs	r3, #64	@ 0x40
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e001      	b.n	80055cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80055d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80055de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80055e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80055ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80055f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80055f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80055fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8005602:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8005608:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8005626:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <FSMC_NORSRAM_Init+0xd0>)
 8005628:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005630:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8005638:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	43db      	mvns	r3, r3
 8005648:	ea02 0103 	and.w	r1, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4319      	orrs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0008fb7f 	.word	0x0008fb7f

0800566c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8005682:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800568a:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8005692:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	3b01      	subs	r3, #1
 800569a:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 800569c:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	3b02      	subs	r3, #2
 80056a4:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80056a6:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80056b2:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056dc:	d11d      	bne.n	800571a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056e6:	4b13      	ldr	r3, [pc, #76]	@ (8005734 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	6811      	ldr	r1, [r2, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	6852      	ldr	r2, [r2, #4]
 80056f2:	0112      	lsls	r2, r2, #4
 80056f4:	4311      	orrs	r1, r2
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	0212      	lsls	r2, r2, #8
 80056fc:	4311      	orrs	r1, r2
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	6992      	ldr	r2, [r2, #24]
 8005702:	4311      	orrs	r1, r2
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	68d2      	ldr	r2, [r2, #12]
 8005708:	0412      	lsls	r2, r2, #16
 800570a:	430a      	orrs	r2, r1
 800570c:	ea43 0102 	orr.w	r1, r3, r2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005718:	e005      	b.n	8005726 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	cff00000 	.word	0xcff00000

08005738 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005738:	b084      	sub	sp, #16
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	f107 001c 	add.w	r0, r7, #28
 8005746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800574a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800574e:	2b01      	cmp	r3, #1
 8005750:	d123      	bne.n	800579a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800577a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800577e:	2b01      	cmp	r3, #1
 8005780:	d105      	bne.n	800578e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f001 fae8 	bl	8006d64 <USB_CoreReset>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
 8005798:	e01b      	b.n	80057d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fadc 	bl	8006d64 <USB_CoreReset>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80057c4:	e005      	b.n	80057d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057d2:	7fbb      	ldrb	r3, [r7, #30]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d10b      	bne.n	80057f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f043 0206 	orr.w	r2, r3, #6
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057fc:	b004      	add	sp, #16
 80057fe:	4770      	bx	lr

08005800 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d165      	bne.n	80058e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4a41      	ldr	r2, [pc, #260]	@ (800591c <USB_SetTurnaroundTime+0x11c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d906      	bls.n	800582a <USB_SetTurnaroundTime+0x2a>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4a40      	ldr	r2, [pc, #256]	@ (8005920 <USB_SetTurnaroundTime+0x120>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d202      	bcs.n	800582a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005824:	230f      	movs	r3, #15
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e062      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	4a3c      	ldr	r2, [pc, #240]	@ (8005920 <USB_SetTurnaroundTime+0x120>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d306      	bcc.n	8005840 <USB_SetTurnaroundTime+0x40>
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	4a3b      	ldr	r2, [pc, #236]	@ (8005924 <USB_SetTurnaroundTime+0x124>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d202      	bcs.n	8005840 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800583a:	230e      	movs	r3, #14
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e057      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4a38      	ldr	r2, [pc, #224]	@ (8005924 <USB_SetTurnaroundTime+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d306      	bcc.n	8005856 <USB_SetTurnaroundTime+0x56>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4a37      	ldr	r2, [pc, #220]	@ (8005928 <USB_SetTurnaroundTime+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d202      	bcs.n	8005856 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005850:	230d      	movs	r3, #13
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e04c      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a33      	ldr	r2, [pc, #204]	@ (8005928 <USB_SetTurnaroundTime+0x128>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d306      	bcc.n	800586c <USB_SetTurnaroundTime+0x6c>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4a32      	ldr	r2, [pc, #200]	@ (800592c <USB_SetTurnaroundTime+0x12c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d802      	bhi.n	800586c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005866:	230c      	movs	r3, #12
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e041      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4a2f      	ldr	r2, [pc, #188]	@ (800592c <USB_SetTurnaroundTime+0x12c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d906      	bls.n	8005882 <USB_SetTurnaroundTime+0x82>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4a2e      	ldr	r2, [pc, #184]	@ (8005930 <USB_SetTurnaroundTime+0x130>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d802      	bhi.n	8005882 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800587c:	230b      	movs	r3, #11
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e036      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4a2a      	ldr	r2, [pc, #168]	@ (8005930 <USB_SetTurnaroundTime+0x130>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d906      	bls.n	8005898 <USB_SetTurnaroundTime+0x98>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <USB_SetTurnaroundTime+0x134>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d802      	bhi.n	8005898 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005892:	230a      	movs	r3, #10
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e02b      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <USB_SetTurnaroundTime+0x134>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d906      	bls.n	80058ae <USB_SetTurnaroundTime+0xae>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a25      	ldr	r2, [pc, #148]	@ (8005938 <USB_SetTurnaroundTime+0x138>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d202      	bcs.n	80058ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058a8:	2309      	movs	r3, #9
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e020      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4a21      	ldr	r2, [pc, #132]	@ (8005938 <USB_SetTurnaroundTime+0x138>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d306      	bcc.n	80058c4 <USB_SetTurnaroundTime+0xc4>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4a20      	ldr	r2, [pc, #128]	@ (800593c <USB_SetTurnaroundTime+0x13c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d802      	bhi.n	80058c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058be:	2308      	movs	r3, #8
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	e015      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a1d      	ldr	r2, [pc, #116]	@ (800593c <USB_SetTurnaroundTime+0x13c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d906      	bls.n	80058da <USB_SetTurnaroundTime+0xda>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005940 <USB_SetTurnaroundTime+0x140>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d202      	bcs.n	80058da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058d4:	2307      	movs	r3, #7
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e00a      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058da:	2306      	movs	r3, #6
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e007      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058e6:	2309      	movs	r3, #9
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e001      	b.n	80058f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058ec:	2309      	movs	r3, #9
 80058ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	029b      	lsls	r3, r3, #10
 8005904:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	00d8acbf 	.word	0x00d8acbf
 8005920:	00e4e1c0 	.word	0x00e4e1c0
 8005924:	00f42400 	.word	0x00f42400
 8005928:	01067380 	.word	0x01067380
 800592c:	011a499f 	.word	0x011a499f
 8005930:	01312cff 	.word	0x01312cff
 8005934:	014ca43f 	.word	0x014ca43f
 8005938:	016e3600 	.word	0x016e3600
 800593c:	01a6ab1f 	.word	0x01a6ab1f
 8005940:	01e84800 	.word	0x01e84800

08005944 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f043 0201 	orr.w	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d115      	bne.n	80059d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059b6:	200a      	movs	r0, #10
 80059b8:	f7fb fd18 	bl	80013ec <HAL_Delay>
      ms += 10U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	330a      	adds	r3, #10
 80059c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f93f 	bl	8006c46 <USB_GetMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d01e      	beq.n	8005a0c <USB_SetCurrentMode+0x84>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80059d2:	d9f0      	bls.n	80059b6 <USB_SetCurrentMode+0x2e>
 80059d4:	e01a      	b.n	8005a0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d115      	bne.n	8005a08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80059e8:	200a      	movs	r0, #10
 80059ea:	f7fb fcff 	bl	80013ec <HAL_Delay>
      ms += 10U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	330a      	adds	r3, #10
 80059f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 f926 	bl	8006c46 <USB_GetMode>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <USB_SetCurrentMode+0x84>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a04:	d9f0      	bls.n	80059e8 <USB_SetCurrentMode+0x60>
 8005a06:	e001      	b.n	8005a0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e005      	b.n	8005a18 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a10:	d101      	bne.n	8005a16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a20:	b084      	sub	sp, #16
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e009      	b.n	8005a54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	3340      	adds	r3, #64	@ 0x40
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	2b0e      	cmp	r3, #14
 8005a58:	d9f2      	bls.n	8005a40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d11c      	bne.n	8005a9c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a70:	f043 0302 	orr.w	r3, r3, #2
 8005a74:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a86:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a9a:	e00b      	b.n	8005ab4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aba:	461a      	mov	r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ac0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d10d      	bne.n	8005ae4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f968 	bl	8005da8 <USB_SetDevSpeed>
 8005ad8:	e008      	b.n	8005aec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ada:	2101      	movs	r1, #1
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f963 	bl	8005da8 <USB_SetDevSpeed>
 8005ae2:	e003      	b.n	8005aec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ae4:	2103      	movs	r1, #3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f95e 	bl	8005da8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aec:	2110      	movs	r1, #16
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8fa 	bl	8005ce8 <USB_FlushTxFifo>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f924 	bl	8005d4c <USB_FlushRxFifo>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b20:	461a      	mov	r2, r3
 8005b22:	2300      	movs	r3, #0
 8005b24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e043      	b.n	8005bc0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b4e:	d118      	bne.n	8005b82 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b62:	461a      	mov	r2, r3
 8005b64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	e013      	b.n	8005b94 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	e008      	b.n	8005b94 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d3b5      	bcc.n	8005b38 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
 8005bd0:	e043      	b.n	8005c5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005be8:	d118      	bne.n	8005c1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	e013      	b.n	8005c2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c12:	461a      	mov	r2, r3
 8005c14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e008      	b.n	8005c2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	3301      	adds	r3, #1
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c5e:	461a      	mov	r2, r3
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d3b5      	bcc.n	8005bd2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f043 0210 	orr.w	r2, r3, #16
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <USB_DevInit+0x2c4>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ca8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f043 0208 	orr.w	r2, r3, #8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ce0:	b004      	add	sp, #16
 8005ce2:	4770      	bx	lr
 8005ce4:	803c3800 	.word	0x803c3800

08005ce8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d02:	d901      	bls.n	8005d08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e01b      	b.n	8005d40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	daf2      	bge.n	8005cf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	019b      	lsls	r3, r3, #6
 8005d18:	f043 0220 	orr.w	r2, r3, #32
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d2c:	d901      	bls.n	8005d32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e006      	b.n	8005d40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0320 	and.w	r3, r3, #32
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	d0f0      	beq.n	8005d20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d64:	d901      	bls.n	8005d6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e018      	b.n	8005d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	daf2      	bge.n	8005d58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2210      	movs	r2, #16
 8005d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d88:	d901      	bls.n	8005d8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e006      	b.n	8005d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d0f0      	beq.n	8005d7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0306 	and.w	r3, r3, #6
 8005df2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
 8005dfe:	e00a      	b.n	8005e16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d002      	beq.n	8005e0c <USB_GetDevSpeed+0x32>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	d102      	bne.n	8005e12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	75fb      	strb	r3, [r7, #23]
 8005e10:	e001      	b.n	8005e16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e12:	230f      	movs	r3, #15
 8005e14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d13a      	bne.n	8005eb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	68f9      	ldr	r1, [r7, #12]
 8005e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d155      	bne.n	8005f24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	059b      	lsls	r3, r3, #22
 8005e9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e036      	b.n	8005f24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	68f9      	ldr	r1, [r7, #12]
 8005ed0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11a      	bne.n	8005f24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	791b      	ldrb	r3, [r3, #4]
 8005f08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f0a:	430b      	orrs	r3, r1
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	785b      	ldrb	r3, [r3, #1]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d161      	bne.n	8006014 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f66:	d11f      	bne.n	8005fa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	2101      	movs	r1, #1
 8005fba:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc8:	4013      	ands	r3, r2
 8005fca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fec:	4013      	ands	r3, r2
 8005fee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0159      	lsls	r1, r3, #5
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	440b      	add	r3, r1
 8006006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800600a:	4619      	mov	r1, r3
 800600c:	4b35      	ldr	r3, [pc, #212]	@ (80060e4 <USB_DeactivateEndpoint+0x1b0>)
 800600e:	4013      	ands	r3, r2
 8006010:	600b      	str	r3, [r1, #0]
 8006012:	e060      	b.n	80060d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006026:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800602a:	d11f      	bne.n	800606c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006046:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800604a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006066:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800606a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	2101      	movs	r1, #1
 800607e:	fa01 f303 	lsl.w	r3, r1, r3
 8006082:	041b      	lsls	r3, r3, #16
 8006084:	43db      	mvns	r3, r3
 8006086:	68f9      	ldr	r1, [r7, #12]
 8006088:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800608c:	4013      	ands	r3, r2
 800608e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	2101      	movs	r1, #1
 80060a2:	fa01 f303 	lsl.w	r3, r1, r3
 80060a6:	041b      	lsls	r3, r3, #16
 80060a8:	43db      	mvns	r3, r3
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b0:	4013      	ands	r3, r2
 80060b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	0159      	lsls	r1, r3, #5
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ce:	4619      	mov	r1, r3
 80060d0:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <USB_DeactivateEndpoint+0x1b4>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	ec337800 	.word	0xec337800
 80060e8:	eff37800 	.word	0xeff37800

080060ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	@ 0x28
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 817f 	bne.w	800640c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d132      	bne.n	800617c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006130:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006134:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006154:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006174:	0cdb      	lsrs	r3, r3, #19
 8006176:	04db      	lsls	r3, r3, #19
 8006178:	6113      	str	r3, [r2, #16]
 800617a:	e097      	b.n	80062ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006196:	0cdb      	lsrs	r3, r3, #19
 8006198:	04db      	lsls	r3, r3, #19
 800619a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	69fa      	ldr	r2, [r7, #28]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11a      	bne.n	80061fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d903      	bls.n	80061da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061f8:	6113      	str	r3, [r2, #16]
 80061fa:	e044      	b.n	8006286 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	4413      	add	r3, r2
 8006206:	1e5a      	subs	r2, r3, #1
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	8afb      	ldrh	r3, [r7, #22]
 8006222:	04d9      	lsls	r1, r3, #19
 8006224:	4ba4      	ldr	r3, [pc, #656]	@ (80064b8 <USB_EPStartXfer+0x3cc>)
 8006226:	400b      	ands	r3, r1
 8006228:	69b9      	ldr	r1, [r7, #24]
 800622a:	0148      	lsls	r0, r1, #5
 800622c:	69f9      	ldr	r1, [r7, #28]
 800622e:	4401      	add	r1, r0
 8006230:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006234:	4313      	orrs	r3, r2
 8006236:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d122      	bne.n	8006286 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800625a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800625e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	8afb      	ldrh	r3, [r7, #22]
 8006270:	075b      	lsls	r3, r3, #29
 8006272:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	0148      	lsls	r0, r1, #5
 800627a:	69f9      	ldr	r1, [r7, #28]
 800627c:	4401      	add	r1, r0
 800627e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006282:	4313      	orrs	r3, r2
 8006284:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	0148      	lsls	r0, r1, #5
 80062a0:	69f9      	ldr	r1, [r7, #28]
 80062a2:	4401      	add	r1, r0
 80062a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062a8:	4313      	orrs	r3, r2
 80062aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d14b      	bne.n	800634a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	791b      	ldrb	r3, [r3, #4]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d128      	bne.n	8006328 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e00f      	b.n	8006328 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006326:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006342:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e166      	b.n	8006618 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006364:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006368:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	791b      	ldrb	r3, [r3, #4]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d015      	beq.n	800639e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 814e 	beq.w	8006618 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	2101      	movs	r1, #1
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	69f9      	ldr	r1, [r7, #28]
 8006394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006398:	4313      	orrs	r3, r2
 800639a:	634b      	str	r3, [r1, #52]	@ 0x34
 800639c:	e13c      	b.n	8006618 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d110      	bne.n	80063d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e00f      	b.n	80063f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	68d9      	ldr	r1, [r3, #12]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	b298      	uxth	r0, r3
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4603      	mov	r3, r0
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f9b9 	bl	800677c <USB_WritePacket>
 800640a:	e105      	b.n	8006618 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	0151      	lsls	r1, r2, #5
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	440a      	add	r2, r1
 8006422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006426:	0cdb      	lsrs	r3, r3, #19
 8006428:	04db      	lsls	r3, r3, #19
 800642a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006446:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800644a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800644e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d132      	bne.n	80064bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	0148      	lsls	r0, r1, #5
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	4401      	add	r1, r0
 800648c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006490:	4313      	orrs	r3, r2
 8006492:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	69fa      	ldr	r2, [r7, #28]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064b2:	6113      	str	r3, [r2, #16]
 80064b4:	e062      	b.n	800657c <USB_EPStartXfer+0x490>
 80064b6:	bf00      	nop
 80064b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d123      	bne.n	800650c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064da:	69b9      	ldr	r1, [r7, #24]
 80064dc:	0148      	lsls	r0, r1, #5
 80064de:	69f9      	ldr	r1, [r7, #28]
 80064e0:	4401      	add	r1, r0
 80064e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064e6:	4313      	orrs	r3, r2
 80064e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006504:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006508:	6113      	str	r3, [r2, #16]
 800650a:	e037      	b.n	800657c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4413      	add	r3, r2
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006520:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	8afa      	ldrh	r2, [r7, #22]
 8006528:	fb03 f202 	mul.w	r2, r3, r2
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	8afb      	ldrh	r3, [r7, #22]
 8006540:	04d9      	lsls	r1, r3, #19
 8006542:	4b38      	ldr	r3, [pc, #224]	@ (8006624 <USB_EPStartXfer+0x538>)
 8006544:	400b      	ands	r3, r1
 8006546:	69b9      	ldr	r1, [r7, #24]
 8006548:	0148      	lsls	r0, r1, #5
 800654a:	69f9      	ldr	r1, [r7, #28]
 800654c:	4401      	add	r1, r0
 800654e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006552:	4313      	orrs	r3, r2
 8006554:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656c:	69b9      	ldr	r1, [r7, #24]
 800656e:	0148      	lsls	r0, r1, #5
 8006570:	69f9      	ldr	r1, [r7, #28]
 8006572:	4401      	add	r1, r0
 8006574:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006578:	4313      	orrs	r3, r2
 800657a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10d      	bne.n	800659e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	68d9      	ldr	r1, [r3, #12]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	460a      	mov	r2, r1
 800659c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	791b      	ldrb	r3, [r3, #4]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d128      	bne.n	80065f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d110      	bne.n	80065d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	0151      	lsls	r1, r2, #5
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	440a      	add	r2, r1
 80065cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e00f      	b.n	80065f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006612:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	1ff80000 	.word	0x1ff80000

08006628 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	785b      	ldrb	r3, [r3, #1]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d14a      	bne.n	80066dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800665a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665e:	f040 8086 	bne.w	800676e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	7812      	ldrb	r2, [r2, #0]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006680:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006684:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3301      	adds	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d902      	bls.n	80066c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e056      	b.n	800676e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d8:	d0e7      	beq.n	80066aa <USB_EPStopXfer+0x82>
 80066da:	e048      	b.n	800676e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f4:	d13b      	bne.n	800676e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	7812      	ldrb	r2, [r2, #0]
 800670a:	0151      	lsls	r1, r2, #5
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	440a      	add	r2, r1
 8006710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006714:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006718:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	7812      	ldrb	r2, [r2, #0]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006738:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800673c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f242 7210 	movw	r2, #10000	@ 0x2710
 800674a:	4293      	cmp	r3, r2
 800674c:	d902      	bls.n	8006754 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
          break;
 8006752:	e00c      	b.n	800676e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	015a      	lsls	r2, r3, #5
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	4413      	add	r3, r2
 800675e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006768:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800676c:	d0e7      	beq.n	800673e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800677c:	b480      	push	{r7}
 800677e:	b089      	sub	sp, #36	@ 0x24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	4611      	mov	r1, r2
 8006788:	461a      	mov	r2, r3
 800678a:	460b      	mov	r3, r1
 800678c:	71fb      	strb	r3, [r7, #7]
 800678e:	4613      	mov	r3, r2
 8006790:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800679a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d123      	bne.n	80067ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067a2:	88bb      	ldrh	r3, [r7, #4]
 80067a4:	3303      	adds	r3, #3
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e018      	b.n	80067e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	031a      	lsls	r2, r3, #12
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067bc:	461a      	mov	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	3301      	adds	r3, #1
 80067c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3301      	adds	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	3301      	adds	r3, #1
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d3e2      	bcc.n	80067b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3724      	adds	r7, #36	@ 0x24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b08b      	sub	sp, #44	@ 0x2c
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	b29b      	uxth	r3, r3
 8006814:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e014      	b.n	800684e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	3301      	adds	r3, #1
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006838:	3301      	adds	r3, #1
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	3301      	adds	r3, #1
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	3301      	adds	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	3301      	adds	r3, #1
 800684c:	623b      	str	r3, [r7, #32]
 800684e:	6a3a      	ldr	r2, [r7, #32]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	429a      	cmp	r2, r3
 8006854:	d3e6      	bcc.n	8006824 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006856:	8bfb      	ldrh	r3, [r7, #30]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d01e      	beq.n	800689a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800685c:	2300      	movs	r3, #0
 800685e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006866:	461a      	mov	r2, r3
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	fa22 f303 	lsr.w	r3, r2, r3
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	701a      	strb	r2, [r3, #0]
      i++;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3301      	adds	r3, #1
 8006886:	623b      	str	r3, [r7, #32]
      pDest++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	3b01      	subs	r3, #1
 8006892:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006894:	8bfb      	ldrh	r3, [r7, #30]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ea      	bne.n	8006870 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800689c:	4618      	mov	r0, r3
 800689e:	372c      	adds	r7, #44	@ 0x2c
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d12c      	bne.n	800691e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db12      	blt.n	80068fc <USB_EPSetStall+0x54>
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00f      	beq.n	80068fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006916:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	e02b      	b.n	8006976 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	db12      	blt.n	8006956 <USB_EPSetStall+0xae>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	440a      	add	r2, r1
 800694c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006950:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006954:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	440a      	add	r2, r1
 800696c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006970:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006974:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d128      	bne.n	80069f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	791b      	ldrb	r3, [r3, #4]
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d003      	beq.n	80069d0 <USB_EPClearStall+0x4c>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d138      	bne.n	8006a42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	6013      	str	r3, [r2, #0]
 80069f0:	e027      	b.n	8006a42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	791b      	ldrb	r3, [r3, #4]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d003      	beq.n	8006a22 <USB_EPClearStall+0x9e>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	791b      	ldrb	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d10f      	bne.n	8006a42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a6e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ab6:	f023 0303 	bic.w	r3, r3, #3
 8006aba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aca:	f023 0302 	bic.w	r3, r3, #2
 8006ace:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006af8:	f023 0303 	bic.w	r3, r3, #3
 8006afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b0c:	f043 0302 	orr.w	r3, r3, #2
 8006b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4013      	ands	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006b38:	68fb      	ldr	r3, [r7, #12]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b62:	69db      	ldr	r3, [r3, #28]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	0c1b      	lsrs	r3, r3, #16
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	b29b      	uxth	r3, r3
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b087      	sub	sp, #28
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	01db      	lsls	r3, r3, #7
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4013      	ands	r3, r2
 8006c36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c38:	68bb      	ldr	r3, [r7, #8]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b083      	sub	sp, #12
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	f003 0301 	and.w	r3, r3, #1
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b085      	sub	sp, #20
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c80:	f023 0307 	bic.w	r3, r3, #7
 8006c84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	333c      	adds	r3, #60	@ 0x3c
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	4a26      	ldr	r2, [pc, #152]	@ (8006d60 <USB_EP0_OutStart+0xb8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d90a      	bls.n	8006ce2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cdc:	d101      	bne.n	8006ce2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e037      	b.n	8006d52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce8:	461a      	mov	r2, r3
 8006cea:	2300      	movs	r3, #0
 8006cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d10:	f043 0318 	orr.w	r3, r3, #24
 8006d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006d28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10f      	bne.n	8006d50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	4f54300a 	.word	0x4f54300a

08006d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	3301      	adds	r3, #1
 8006d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d7c:	d901      	bls.n	8006d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e022      	b.n	8006dc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	daf2      	bge.n	8006d70 <USB_CoreReset+0xc>

  count = 10U;
 8006d8a:	230a      	movs	r3, #10
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006d8e:	e002      	b.n	8006d96 <USB_CoreReset+0x32>
  {
    count--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1f9      	bne.n	8006d90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f043 0201 	orr.w	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db4:	d901      	bls.n	8006dba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e006      	b.n	8006dc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d0f0      	beq.n	8006da8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006dd4:	b5b0      	push	{r4, r5, r7, lr}
 8006dd6:	b08c      	sub	sp, #48	@ 0x30
 8006dd8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006dda:	4b91      	ldr	r3, [pc, #580]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006ddc:	22c0      	movs	r2, #192	@ 0xc0
 8006dde:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006de0:	4b8f      	ldr	r3, [pc, #572]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006de2:	22a8      	movs	r2, #168	@ 0xa8
 8006de4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8006de6:	4b8e      	ldr	r3, [pc, #568]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006de8:	220a      	movs	r2, #10
 8006dea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 8006dec:	4b8c      	ldr	r3, [pc, #560]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006dee:	2258      	movs	r2, #88	@ 0x58
 8006df0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006df2:	4b8c      	ldr	r3, [pc, #560]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006df4:	22ff      	movs	r2, #255	@ 0xff
 8006df6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006df8:	4b8a      	ldr	r3, [pc, #552]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006dfa:	22ff      	movs	r2, #255	@ 0xff
 8006dfc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006dfe:	4b89      	ldr	r3, [pc, #548]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006e00:	22ff      	movs	r2, #255	@ 0xff
 8006e02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006e04:	4b87      	ldr	r3, [pc, #540]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8006e0a:	4b87      	ldr	r3, [pc, #540]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006e10:	4b85      	ldr	r3, [pc, #532]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006e16:	4b84      	ldr	r3, [pc, #528]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8006e1c:	4b82      	ldr	r3, [pc, #520]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006e22:	2100      	movs	r1, #0
 8006e24:	2000      	movs	r0, #0
 8006e26:	f005 fe4f 	bl	800cac8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006e2a:	4b7d      	ldr	r3, [pc, #500]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	061a      	lsls	r2, r3, #24
 8006e30:	4b7b      	ldr	r3, [pc, #492]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	431a      	orrs	r2, r3
 8006e38:	4b79      	ldr	r3, [pc, #484]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e3a:	789b      	ldrb	r3, [r3, #2]
 8006e3c:	021b      	lsls	r3, r3, #8
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	4a77      	ldr	r2, [pc, #476]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e42:	78d2      	ldrb	r2, [r2, #3]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	061a      	lsls	r2, r3, #24
 8006e48:	4b75      	ldr	r3, [pc, #468]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	0619      	lsls	r1, r3, #24
 8006e4e:	4b74      	ldr	r3, [pc, #464]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	4319      	orrs	r1, r3
 8006e56:	4b72      	ldr	r3, [pc, #456]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e58:	789b      	ldrb	r3, [r3, #2]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	4970      	ldr	r1, [pc, #448]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e60:	78c9      	ldrb	r1, [r1, #3]
 8006e62:	430b      	orrs	r3, r1
 8006e64:	021b      	lsls	r3, r3, #8
 8006e66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	0619      	lsls	r1, r3, #24
 8006e72:	4b6b      	ldr	r3, [pc, #428]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	4319      	orrs	r1, r3
 8006e7a:	4b69      	ldr	r3, [pc, #420]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e7c:	789b      	ldrb	r3, [r3, #2]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	430b      	orrs	r3, r1
 8006e82:	4967      	ldr	r1, [pc, #412]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e84:	78c9      	ldrb	r1, [r1, #3]
 8006e86:	430b      	orrs	r3, r1
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	4b63      	ldr	r3, [pc, #396]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	0619      	lsls	r1, r3, #24
 8006e96:	4b62      	ldr	r3, [pc, #392]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006e98:	785b      	ldrb	r3, [r3, #1]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	4319      	orrs	r1, r3
 8006e9e:	4b60      	ldr	r3, [pc, #384]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006ea0:	789b      	ldrb	r3, [r3, #2]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	495e      	ldr	r1, [pc, #376]	@ (8007020 <MX_LWIP_Init+0x24c>)
 8006ea8:	78c9      	ldrb	r1, [r1, #3]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	0e1b      	lsrs	r3, r3, #24
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800702c <MX_LWIP_Init+0x258>)
 8006eb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	061a      	lsls	r2, r3, #24
 8006eba:	4b5a      	ldr	r3, [pc, #360]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ebc:	785b      	ldrb	r3, [r3, #1]
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	4b58      	ldr	r3, [pc, #352]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ec4:	789b      	ldrb	r3, [r3, #2]
 8006ec6:	021b      	lsls	r3, r3, #8
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	4a56      	ldr	r2, [pc, #344]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ecc:	78d2      	ldrb	r2, [r2, #3]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	061a      	lsls	r2, r3, #24
 8006ed2:	4b54      	ldr	r3, [pc, #336]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	0619      	lsls	r1, r3, #24
 8006ed8:	4b52      	ldr	r3, [pc, #328]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	041b      	lsls	r3, r3, #16
 8006ede:	4319      	orrs	r1, r3
 8006ee0:	4b50      	ldr	r3, [pc, #320]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ee2:	789b      	ldrb	r3, [r3, #2]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	494e      	ldr	r1, [pc, #312]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006eea:	78c9      	ldrb	r1, [r1, #3]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	0619      	lsls	r1, r3, #24
 8006efc:	4b49      	ldr	r3, [pc, #292]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	4319      	orrs	r1, r3
 8006f04:	4b47      	ldr	r3, [pc, #284]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f06:	789b      	ldrb	r3, [r3, #2]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	4945      	ldr	r1, [pc, #276]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f0e:	78c9      	ldrb	r1, [r1, #3]
 8006f10:	430b      	orrs	r3, r1
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	4b42      	ldr	r3, [pc, #264]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	0619      	lsls	r1, r3, #24
 8006f20:	4b40      	ldr	r3, [pc, #256]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f22:	785b      	ldrb	r3, [r3, #1]
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	4319      	orrs	r1, r3
 8006f28:	4b3e      	ldr	r3, [pc, #248]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f2a:	789b      	ldrb	r3, [r3, #2]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	493c      	ldr	r1, [pc, #240]	@ (8007024 <MX_LWIP_Init+0x250>)
 8006f32:	78c9      	ldrb	r1, [r1, #3]
 8006f34:	430b      	orrs	r3, r1
 8006f36:	0e1b      	lsrs	r3, r3, #24
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8007030 <MX_LWIP_Init+0x25c>)
 8006f3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	061a      	lsls	r2, r3, #24
 8006f44:	4b38      	ldr	r3, [pc, #224]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	4b36      	ldr	r3, [pc, #216]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f4e:	789b      	ldrb	r3, [r3, #2]
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	4313      	orrs	r3, r2
 8006f54:	4a34      	ldr	r2, [pc, #208]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f56:	78d2      	ldrb	r2, [r2, #3]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	061a      	lsls	r2, r3, #24
 8006f5c:	4b32      	ldr	r3, [pc, #200]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	0619      	lsls	r1, r3, #24
 8006f62:	4b31      	ldr	r3, [pc, #196]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	4319      	orrs	r1, r3
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f6c:	789b      	ldrb	r3, [r3, #2]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	430b      	orrs	r3, r1
 8006f72:	492d      	ldr	r1, [pc, #180]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f74:	78c9      	ldrb	r1, [r1, #3]
 8006f76:	430b      	orrs	r3, r1
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	4b29      	ldr	r3, [pc, #164]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	0619      	lsls	r1, r3, #24
 8006f86:	4b28      	ldr	r3, [pc, #160]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f88:	785b      	ldrb	r3, [r3, #1]
 8006f8a:	041b      	lsls	r3, r3, #16
 8006f8c:	4319      	orrs	r1, r3
 8006f8e:	4b26      	ldr	r3, [pc, #152]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f90:	789b      	ldrb	r3, [r3, #2]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	430b      	orrs	r3, r1
 8006f96:	4924      	ldr	r1, [pc, #144]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006f98:	78c9      	ldrb	r1, [r1, #3]
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	4b20      	ldr	r3, [pc, #128]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	0619      	lsls	r1, r3, #24
 8006faa:	4b1f      	ldr	r3, [pc, #124]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006fac:	785b      	ldrb	r3, [r3, #1]
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	4319      	orrs	r1, r3
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006fb4:	789b      	ldrb	r3, [r3, #2]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	491b      	ldr	r1, [pc, #108]	@ (8007028 <MX_LWIP_Init+0x254>)
 8006fbc:	78c9      	ldrb	r1, [r1, #3]
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	0e1b      	lsrs	r3, r3, #24
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8007034 <MX_LWIP_Init+0x260>)
 8006fc6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <MX_LWIP_Init+0x264>)
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800703c <MX_LWIP_Init+0x268>)
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4b17      	ldr	r3, [pc, #92]	@ (8007034 <MX_LWIP_Init+0x260>)
 8006fd6:	4a16      	ldr	r2, [pc, #88]	@ (8007030 <MX_LWIP_Init+0x25c>)
 8006fd8:	4914      	ldr	r1, [pc, #80]	@ (800702c <MX_LWIP_Init+0x258>)
 8006fda:	4819      	ldr	r0, [pc, #100]	@ (8007040 <MX_LWIP_Init+0x26c>)
 8006fdc:	f006 fb3e 	bl	800d65c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006fe0:	4817      	ldr	r0, [pc, #92]	@ (8007040 <MX_LWIP_Init+0x26c>)
 8006fe2:	f006 fdcf 	bl	800db84 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006fe6:	4816      	ldr	r0, [pc, #88]	@ (8007040 <MX_LWIP_Init+0x26c>)
 8006fe8:	f006 fdf0 	bl	800dbcc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006fec:	4915      	ldr	r1, [pc, #84]	@ (8007044 <MX_LWIP_Init+0x270>)
 8006fee:	4814      	ldr	r0, [pc, #80]	@ (8007040 <MX_LWIP_Init+0x26c>)
 8006ff0:	f006 fed2 	bl	800dd98 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006ff4:	4b14      	ldr	r3, [pc, #80]	@ (8007048 <MX_LWIP_Init+0x274>)
 8006ff6:	1d3c      	adds	r4, r7, #4
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	490d      	ldr	r1, [pc, #52]	@ (8007040 <MX_LWIP_Init+0x26c>)
 800700a:	4618      	mov	r0, r3
 800700c:	f002 fcd6 	bl	80099bc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  // 给ethernet_link_thread一点时间启动，然后强制初始链路检查
  osDelay(100);
 8007010:	2064      	movs	r0, #100	@ 0x64
 8007012:	f002 fd1f 	bl	8009a54 <osDelay>
/* USER CODE END 3 */
}
 8007016:	bf00      	nop
 8007018:	3720      	adds	r7, #32
 800701a:	46bd      	mov	sp, r7
 800701c:	bdb0      	pop	{r4, r5, r7, pc}
 800701e:	bf00      	nop
 8007020:	200005e8 	.word	0x200005e8
 8007024:	200005ec 	.word	0x200005ec
 8007028:	200005f0 	.word	0x200005f0
 800702c:	200005dc 	.word	0x200005dc
 8007030:	200005e0 	.word	0x200005e0
 8007034:	200005e4 	.word	0x200005e4
 8007038:	0800ca05 	.word	0x0800ca05
 800703c:	080076b9 	.word	0x080076b9
 8007040:	200005a8 	.word	0x200005a8
 8007044:	0800704d 	.word	0x0800704d
 8007048:	08017e0c 	.word	0x08017e0c

0800704c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
    // 链路连接时，启动网络接口
    netif_set_up(netif);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f006 fdb1 	bl	800dbcc <netif_set_up>
/* USER CODE BEGIN 6 */
    // 链路断开时，关闭网络接口
    netif_set_down(netif);
/* USER CODE END 6 */
  }
}
 800706a:	e002      	b.n	8007072 <ethernet_link_status_updated+0x26>
    netif_set_down(netif);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f006 fe07 	bl	800dc80 <netif_set_down>
}
 8007072:	bf00      	nop
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <YT8512C_SoftReset>:
 * @brief YT8512C PHY 软复位
 * @param heth: ETH 句柄指针
 * @retval YT8512C 状态
 */
static int32_t YT8512C_SoftReset(ETH_HandleTypeDef *heth)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
    uint32_t regvalue = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]

    /* 发送软复位命令 */
    if (HAL_ETH_WritePHYRegister(heth, YT8512C_ADDR, YT8512C_BCR, YT8512C_BCR_SOFT_RESET) != HAL_OK)
 800708a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708e:	2200      	movs	r2, #0
 8007090:	2100      	movs	r1, #0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fa ff4f 	bl	8001f36 <HAL_ETH_WritePHYRegister>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <YT8512C_SoftReset+0x2a>
    {
        return YT8512C_STATUS_WRITE_ERROR;
 800709e:	f06f 0303 	mvn.w	r3, #3
 80070a2:	e020      	b.n	80070e6 <YT8512C_SoftReset+0x6c>
    }

    /* 等待复位完成 */
    tickstart = HAL_GetTick();
 80070a4:	f7fa f996 	bl	80013d4 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]
    do {
        if (HAL_ETH_ReadPHYRegister(heth, YT8512C_ADDR, YT8512C_BCR, &regvalue) != HAL_OK)
 80070aa:	f107 0308 	add.w	r3, r7, #8
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fa fef4 	bl	8001ea0 <HAL_ETH_ReadPHYRegister>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <YT8512C_SoftReset+0x4a>
        {
            return YT8512C_STATUS_READ_ERROR;
 80070be:	f06f 0304 	mvn.w	r3, #4
 80070c2:	e010      	b.n	80070e6 <YT8512C_SoftReset+0x6c>
        }

        /* 检查超时 */
        if ((HAL_GetTick() - tickstart) >= 1000U)
 80070c4:	f7fa f986 	bl	80013d4 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070d2:	d302      	bcc.n	80070da <YT8512C_SoftReset+0x60>
        {
            return YT8512C_STATUS_RESET_TIMEOUT;
 80070d4:	f06f 0301 	mvn.w	r3, #1
 80070d8:	e005      	b.n	80070e6 <YT8512C_SoftReset+0x6c>
        }
    } while (regvalue & YT8512C_BCR_SOFT_RESET);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1e2      	bne.n	80070aa <YT8512C_SoftReset+0x30>

    return YT8512C_STATUS_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <YT8512C_Init>:
 * @brief YT8512C PHY 初始化
 * @param heth: ETH 句柄指针
 * @retval YT8512C 状态
 */
int32_t YT8512C_Init(ETH_HandleTypeDef *heth)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
    int32_t ret = YT8512C_STATUS_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
    uint32_t regvalue = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60bb      	str	r3, [r7, #8]

    /* 软复位 PHY */
    ret = YT8512C_SoftReset(heth);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff ffbb 	bl	800707a <YT8512C_SoftReset>
 8007104:	60f8      	str	r0, [r7, #12]
    if (ret != YT8512C_STATUS_OK)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <YT8512C_Init+0x22>
    {
        return ret;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	e012      	b.n	8007136 <YT8512C_Init+0x48>
    }

    /* 配置自动协商 */
    regvalue = YT8512C_BCR_AUTONEGO_EN | YT8512C_BCR_RESTART_AUTONEGO;
 8007110:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8007114:	60bb      	str	r3, [r7, #8]
    if (HAL_ETH_WritePHYRegister(heth, YT8512C_ADDR, YT8512C_BCR, regvalue) != HAL_OK)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2200      	movs	r2, #0
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7fa ff0a 	bl	8001f36 <HAL_ETH_WritePHYRegister>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <YT8512C_Init+0x40>
    {
        return YT8512C_STATUS_WRITE_ERROR;
 8007128:	f06f 0303 	mvn.w	r3, #3
 800712c:	e003      	b.n	8007136 <YT8512C_Init+0x48>
    }

    /* 延时等待 PHY 稳定 */
    HAL_Delay(100);
 800712e:	2064      	movs	r0, #100	@ 0x64
 8007130:	f7fa f95c 	bl	80013ec <HAL_Delay>

    return YT8512C_STATUS_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <YT8512C_GetLinkState>:
 * @brief 获取 YT8512C PHY 链路状态 (增强错误处理)
 * @param heth: ETH 句柄指针
 * @retval YT8512C 状态
 */
int32_t YT8512C_GetLinkState(ETH_HandleTypeDef *heth)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
    uint32_t regvalue = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	60bb      	str	r3, [r7, #8]
    uint32_t retry_count = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	617b      	str	r3, [r7, #20]
    const uint32_t max_retries = 3;
 800714e:	2303      	movs	r3, #3
 8007150:	613b      	str	r3, [r7, #16]
    HAL_StatusTypeDef hal_status;

    /* 读取基本状态寄存器 - 带重试机制 */
    do {
        hal_status = HAL_ETH_ReadPHYRegister(heth, YT8512C_ADDR, YT8512C_BSR, &regvalue);
 8007152:	f107 0308 	add.w	r3, r7, #8
 8007156:	2201      	movs	r2, #1
 8007158:	2100      	movs	r1, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa fea0 	bl	8001ea0 <HAL_ETH_ReadPHYRegister>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
        if (hal_status == HAL_OK) {
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <YT8512C_GetLinkState+0x4a>
            break;
        }

        retry_count++;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	3301      	adds	r3, #1
 800716e:	617b      	str	r3, [r7, #20]
        if (retry_count < max_retries) {
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	429a      	cmp	r2, r3
 8007176:	d202      	bcs.n	800717e <YT8512C_GetLinkState+0x40>
            HAL_Delay(10); // 短暂延时后重试
 8007178:	200a      	movs	r0, #10
 800717a:	f7fa f937 	bl	80013ec <HAL_Delay>
        }
    } while (retry_count < max_retries);
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3e5      	bcc.n	8007152 <YT8512C_GetLinkState+0x14>
 8007186:	e000      	b.n	800718a <YT8512C_GetLinkState+0x4c>
            break;
 8007188:	bf00      	nop

    if (hal_status != HAL_OK)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <YT8512C_GetLinkState+0x58>
    {
        return YT8512C_STATUS_READ_ERROR;
 8007190:	f06f 0304 	mvn.w	r3, #4
 8007194:	e047      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
    }

    /* 检查链路状态 */
    if ((regvalue & YT8512C_BSR_LINK_STATUS) == 0)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <YT8512C_GetLinkState+0x66>
    {
        return YT8512C_STATUS_LINK_DOWN;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e040      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
    }

    /* 检查自动协商是否完成 */
    if ((regvalue & YT8512C_BSR_AUTONEGO_CPLT) == 0)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <YT8512C_GetLinkState+0x74>
    {
        return YT8512C_STATUS_AUTONEGO_NOTDONE;
 80071ae:	2306      	movs	r3, #6
 80071b0:	e039      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
    }

    /* 读取速度和双工状态 - 带重试机制 */
    retry_count = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
    do {
        hal_status = HAL_ETH_ReadPHYRegister(heth, YT8512C_ADDR, YT8512C_PHYSCSR, &regvalue);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	2211      	movs	r2, #17
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa fe6e 	bl	8001ea0 <HAL_ETH_ReadPHYRegister>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]
        if (hal_status == HAL_OK) {
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00e      	beq.n	80071ec <YT8512C_GetLinkState+0xae>
            break;
        }

        retry_count++;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	3301      	adds	r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
        if (retry_count < max_retries) {
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d202      	bcs.n	80071e2 <YT8512C_GetLinkState+0xa4>
            HAL_Delay(10); // 短暂延时后重试
 80071dc:	200a      	movs	r0, #10
 80071de:	f7fa f905 	bl	80013ec <HAL_Delay>
        }
    } while (retry_count < max_retries);
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3e5      	bcc.n	80071b6 <YT8512C_GetLinkState+0x78>
 80071ea:	e000      	b.n	80071ee <YT8512C_GetLinkState+0xb0>
            break;
 80071ec:	bf00      	nop

    if (hal_status != HAL_OK)
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d002      	beq.n	80071fa <YT8512C_GetLinkState+0xbc>
    {
        return YT8512C_STATUS_READ_ERROR;
 80071f4:	f06f 0304 	mvn.w	r3, #4
 80071f8:	e015      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
    }

    /* 解析速度和双工模式 - 使用更准确的位检测 */
    /* 检查速度 (bit 4 = 1 表示100M, bit 4 = 0 表示10M) */
    if ((regvalue & YT8512C_PHYSCSR_SPEED_100M) != 0)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <YT8512C_GetLinkState+0xd8>
    {
        /* 100Mbps - 检查双工模式 (bit 13 = 1 表示全双工) */
        if ((regvalue & YT8512C_PHYSCSR_DUPLEX_FULL) != 0)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <YT8512C_GetLinkState+0xd4>
        {
            return YT8512C_STATUS_100MBITS_FULLDUPLEX;
 800720e:	2302      	movs	r3, #2
 8007210:	e009      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
        }
        else
        {
            return YT8512C_STATUS_100MBITS_HALFDUPLEX;
 8007212:	2303      	movs	r3, #3
 8007214:	e007      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
        }
    }
    else
    {
        /* 10Mbps - 检查双工模式 */
        if ((regvalue & YT8512C_PHYSCSR_DUPLEX_FULL) != 0)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <YT8512C_GetLinkState+0xe6>
        {
            return YT8512C_STATUS_10MBITS_FULLDUPLEX;
 8007220:	2304      	movs	r3, #4
 8007222:	e000      	b.n	8007226 <YT8512C_GetLinkState+0xe8>
        }
        else
        {
            return YT8512C_STATUS_10MBITS_HALFDUPLEX;
 8007224:	2305      	movs	r3, #5
        }
    }
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007238:	4b04      	ldr	r3, [pc, #16]	@ (800724c <HAL_ETH_RxCpltCallback+0x1c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f002 fd39 	bl	8009cb4 <osSemaphoreRelease>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200050c0 	.word	0x200050c0

08007250 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007258:	4b04      	ldr	r3, [pc, #16]	@ (800726c <HAL_ETH_TxCpltCallback+0x1c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f002 fd29 	bl	8009cb4 <osSemaphoreRelease>
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	200050c4 	.word	0x200050c4

08007270 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fa feb2 	bl	8001fe2 <HAL_ETH_GetDMAError>
 800727e:	4603      	mov	r3, r0
 8007280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007284:	2b80      	cmp	r3, #128	@ 0x80
 8007286:	d104      	bne.n	8007292 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007288:	4b04      	ldr	r3, [pc, #16]	@ (800729c <HAL_ETH_ErrorCallback+0x2c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f002 fd11 	bl	8009cb4 <osSemaphoreRelease>
  }
}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	200050c0 	.word	0x200050c0

080072a0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80072a0:	b5b0      	push	{r4, r5, r7, lr}
 80072a2:	b092      	sub	sp, #72	@ 0x48
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80072ae:	4b76      	ldr	r3, [pc, #472]	@ (8007488 <low_level_init+0x1e8>)
 80072b0:	4a76      	ldr	r2, [pc, #472]	@ (800748c <low_level_init+0x1ec>)
 80072b2:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[1] = 0x80;
 80072ba:	2380      	movs	r3, #128	@ 0x80
 80072bc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  MACAddr[2] = 0xE1;
 80072c0:	23e1      	movs	r3, #225	@ 0xe1
 80072c2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  MACAddr[3] = 0x00;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  MACAddr[4] = 0x00;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  MACAddr[5] = 0x00;
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  heth.Init.MACAddr = &MACAddr[0];
 80072d8:	4a6b      	ldr	r2, [pc, #428]	@ (8007488 <low_level_init+0x1e8>)
 80072da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80072de:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80072e0:	4b69      	ldr	r3, [pc, #420]	@ (8007488 <low_level_init+0x1e8>)
 80072e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80072e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80072e8:	4b67      	ldr	r3, [pc, #412]	@ (8007488 <low_level_init+0x1e8>)
 80072ea:	4a69      	ldr	r2, [pc, #420]	@ (8007490 <low_level_init+0x1f0>)
 80072ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80072ee:	4b66      	ldr	r3, [pc, #408]	@ (8007488 <low_level_init+0x1e8>)
 80072f0:	4a68      	ldr	r2, [pc, #416]	@ (8007494 <low_level_init+0x1f4>)
 80072f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80072f4:	4b64      	ldr	r3, [pc, #400]	@ (8007488 <low_level_init+0x1e8>)
 80072f6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80072fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80072fc:	4862      	ldr	r0, [pc, #392]	@ (8007488 <low_level_init+0x1e8>)
 80072fe:	f7fa f97b 	bl	80015f8 <HAL_ETH_Init>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007308:	2238      	movs	r2, #56	@ 0x38
 800730a:	2100      	movs	r1, #0
 800730c:	4862      	ldr	r0, [pc, #392]	@ (8007498 <low_level_init+0x1f8>)
 800730e:	f00f fd11 	bl	8016d34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007312:	4b61      	ldr	r3, [pc, #388]	@ (8007498 <low_level_init+0x1f8>)
 8007314:	2221      	movs	r2, #33	@ 0x21
 8007316:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007318:	4b5f      	ldr	r3, [pc, #380]	@ (8007498 <low_level_init+0x1f8>)
 800731a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800731e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007320:	4b5d      	ldr	r3, [pc, #372]	@ (8007498 <low_level_init+0x1f8>)
 8007322:	2200      	movs	r2, #0
 8007324:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007326:	485d      	ldr	r0, [pc, #372]	@ (800749c <low_level_init+0x1fc>)
 8007328:	f006 f852 	bl	800d3d0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2206      	movs	r2, #6
 8007330:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007334:	4b54      	ldr	r3, [pc, #336]	@ (8007488 <low_level_init+0x1e8>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007340:	4b51      	ldr	r3, [pc, #324]	@ (8007488 <low_level_init+0x1e8>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	785a      	ldrb	r2, [r3, #1]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800734c:	4b4e      	ldr	r3, [pc, #312]	@ (8007488 <low_level_init+0x1e8>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	789a      	ldrb	r2, [r3, #2]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007358:	4b4b      	ldr	r3, [pc, #300]	@ (8007488 <low_level_init+0x1e8>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	78da      	ldrb	r2, [r3, #3]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007364:	4b48      	ldr	r3, [pc, #288]	@ (8007488 <low_level_init+0x1e8>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	791a      	ldrb	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007370:	4b45      	ldr	r3, [pc, #276]	@ (8007488 <low_level_init+0x1e8>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	795a      	ldrb	r2, [r3, #5]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007382:	849a      	strh	r2, [r3, #36]	@ 0x24
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800738a:	f043 0302 	orr.w	r3, r3, #2
 800738e:	b2da      	uxtb	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8007396:	2300      	movs	r3, #0
 8007398:	633b      	str	r3, [r7, #48]	@ 0x30
 800739a:	2300      	movs	r3, #0
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800739e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f002 fc05 	bl	8009bb4 <osSemaphoreCreate>
 80073aa:	4603      	mov	r3, r0
 80073ac:	4a3c      	ldr	r2, [pc, #240]	@ (80074a0 <low_level_init+0x200>)
 80073ae:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80073b0:	2300      	movs	r3, #0
 80073b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073b4:	2300      	movs	r3, #0
 80073b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80073b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80073bc:	2101      	movs	r1, #1
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 fbf8 	bl	8009bb4 <osSemaphoreCreate>
 80073c4:	4603      	mov	r3, r0
 80073c6:	4a37      	ldr	r2, [pc, #220]	@ (80074a4 <low_level_init+0x204>)
 80073c8:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80073ca:	4b35      	ldr	r3, [pc, #212]	@ (80074a0 <low_level_init+0x200>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2100      	movs	r1, #0
 80073d0:	4618      	mov	r0, r3
 80073d2:	f002 fc21 	bl	8009c18 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 80073d6:	4b33      	ldr	r3, [pc, #204]	@ (80074a4 <low_level_init+0x204>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2100      	movs	r1, #0
 80073dc:	4618      	mov	r0, r3
 80073de:	f002 fc1b 	bl	8009c18 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80073e2:	4b31      	ldr	r3, [pc, #196]	@ (80074a8 <low_level_init+0x208>)
 80073e4:	f107 040c 	add.w	r4, r7, #12
 80073e8:	461d      	mov	r5, r3
 80073ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80073f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80073f6:	f107 030c 	add.w	r3, r7, #12
 80073fa:	6879      	ldr	r1, [r7, #4]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f002 fadd 	bl	80099bc <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8007402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8007406:	2b00      	cmp	r3, #0
 8007408:	d137      	bne.n	800747a <low_level_init+0x1da>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    /* 使用新版HAL API，需要设置必要的回调函数 */

    // 设置接收缓冲区分配回调函数 - 这是新版HAL API必需的
    heth.rxAllocateCallback = HAL_ETH_RxAllocateCallback;
 800740a:	4b1f      	ldr	r3, [pc, #124]	@ (8007488 <low_level_init+0x1e8>)
 800740c:	4a27      	ldr	r2, [pc, #156]	@ (80074ac <low_level_init+0x20c>)
 800740e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    heth.rxLinkCallback = HAL_ETH_RxLinkCallback;
 8007412:	4b1d      	ldr	r3, [pc, #116]	@ (8007488 <low_level_init+0x1e8>)
 8007414:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <low_level_init+0x210>)
 8007416:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    heth.txFreeCallback = NULL; // 发送不需要特殊处理
 800741a:	4b1b      	ldr	r3, [pc, #108]	@ (8007488 <low_level_init+0x1e8>)
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    __HAL_ETH_DMA_ENABLE_IT(&heth, ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8007422:	4b19      	ldr	r3, [pc, #100]	@ (8007488 <low_level_init+0x1e8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <low_level_init+0x1e8>)
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007438:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800743c:	61d3      	str	r3, [r2, #28]
    /* 启动ETH中断模式 */
    HAL_ETH_Start_IT(&heth);
 800743e:	4812      	ldr	r0, [pc, #72]	@ (8007488 <low_level_init+0x1e8>)
 8007440:	f7fa f976 	bl	8001730 <HAL_ETH_Start_IT>

    /* 初始化 YT8512C PHY */
    int32_t phy_status = YT8512C_Init(&heth);
 8007444:	4810      	ldr	r0, [pc, #64]	@ (8007488 <low_level_init+0x1e8>)
 8007446:	f7ff fe52 	bl	80070ee <YT8512C_Init>
 800744a:	6438      	str	r0, [r7, #64]	@ 0x40
    HAL_ETH_WritePHYRegister(&heth, YT8512C_ADDR, YT8512C_DBG_AOR, 0x4000);  // 扩展寄存器偏移
 800744c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007450:	221e      	movs	r2, #30
 8007452:	2100      	movs	r1, #0
 8007454:	480c      	ldr	r0, [pc, #48]	@ (8007488 <low_level_init+0x1e8>)
 8007456:	f7fa fd6e 	bl	8001f36 <HAL_ETH_WritePHYRegister>
    HAL_ETH_WritePHYRegister(&heth, YT8512C_ADDR, YT8512C_DBG_DR, 0x0003);    // RMII 启用 (bit1=1, bit0=1)
 800745a:	2303      	movs	r3, #3
 800745c:	221f      	movs	r2, #31
 800745e:	2100      	movs	r1, #0
 8007460:	4809      	ldr	r0, [pc, #36]	@ (8007488 <low_level_init+0x1e8>)
 8007462:	f7fa fd68 	bl	8001f36 <HAL_ETH_WritePHYRegister>
    if (phy_status != YT8512C_STATUS_OK)
 8007466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <low_level_init+0x1d0>
    {
        Error_Handler();
 800746c:	f7f9 fb26 	bl	8000abc <Error_Handler>
    }

    /* 等待 PHY 链路建立 */
    HAL_Delay(1000);
 8007470:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007474:	f7f9 ffba 	bl	80013ec <HAL_Delay>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007478:	e001      	b.n	800747e <low_level_init+0x1de>
    Error_Handler();
 800747a:	f7f9 fb1f 	bl	8000abc <Error_Handler>
}
 800747e:	bf00      	nop
 8007480:	3748      	adds	r7, #72	@ 0x48
 8007482:	46bd      	mov	sp, r7
 8007484:	bdb0      	pop	{r4, r5, r7, pc}
 8007486:	bf00      	nop
 8007488:	200050c8 	.word	0x200050c8
 800748c:	40028000 	.word	0x40028000
 8007490:	20005020 	.word	0x20005020
 8007494:	20004f80 	.word	0x20004f80
 8007498:	20005178 	.word	0x20005178
 800749c:	0801ae58 	.word	0x0801ae58
 80074a0:	200050c0 	.word	0x200050c0
 80074a4:	200050c4 	.word	0x200050c4
 80074a8:	08017e48 	.word	0x08017e48
 80074ac:	08007855 	.word	0x08007855
 80074b0:	080078bd 	.word	0x080078bd

080074b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b092      	sub	sp, #72	@ 0x48
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	2230      	movs	r2, #48	@ 0x30
 80074d2:	2100      	movs	r1, #0
 80074d4:	4618      	mov	r0, r3
 80074d6:	f00f fc2d 	bl	8016d34 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	2230      	movs	r2, #48	@ 0x30
 80074e0:	2100      	movs	r1, #0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f00f fc26 	bl	8016d34 <memset>

  for(q = p; q != NULL; q = q->next)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80074ec:	e045      	b.n	800757a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80074ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d902      	bls.n	80074fa <low_level_output+0x46>
      return ERR_IF;
 80074f4:	f06f 030b 	mvn.w	r3, #11
 80074f8:	e07f      	b.n	80075fa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 80074fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074fc:	6859      	ldr	r1, [r3, #4]
 80074fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	3348      	adds	r3, #72	@ 0x48
 800750a:	443b      	add	r3, r7
 800750c:	3b3c      	subs	r3, #60	@ 0x3c
 800750e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007512:	895b      	ldrh	r3, [r3, #10]
 8007514:	4619      	mov	r1, r3
 8007516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007518:	4613      	mov	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3348      	adds	r3, #72	@ 0x48
 8007522:	443b      	add	r3, r7
 8007524:	3b38      	subs	r3, #56	@ 0x38
 8007526:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800752a:	2b00      	cmp	r3, #0
 800752c:	d011      	beq.n	8007552 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800752e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	f107 000c 	add.w	r0, r7, #12
 8007536:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007538:	460b      	mov	r3, r1
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	440b      	add	r3, r1
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	18c1      	adds	r1, r0, r3
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	3348      	adds	r3, #72	@ 0x48
 800754c:	443b      	add	r3, r7
 800754e:	3b34      	subs	r3, #52	@ 0x34
 8007550:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800755a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800755c:	4613      	mov	r3, r2
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3348      	adds	r3, #72	@ 0x48
 8007566:	443b      	add	r3, r7
 8007568:	3b34      	subs	r3, #52	@ 0x34
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800756e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007570:	3301      	adds	r3, #1
 8007572:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8007574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	643b      	str	r3, [r7, #64]	@ 0x40
 800757a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1b6      	bne.n	80074ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	891b      	ldrh	r3, [r3, #8]
 8007584:	461a      	mov	r2, r3
 8007586:	4b1f      	ldr	r3, [pc, #124]	@ (8007604 <low_level_output+0x150>)
 8007588:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <low_level_output+0x150>)
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007592:	4a1c      	ldr	r2, [pc, #112]	@ (8007604 <low_level_output+0x150>)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8007598:	6838      	ldr	r0, [r7, #0]
 800759a:	f007 f851 	bl	800e640 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800759e:	4919      	ldr	r1, [pc, #100]	@ (8007604 <low_level_output+0x150>)
 80075a0:	4819      	ldr	r0, [pc, #100]	@ (8007608 <low_level_output+0x154>)
 80075a2:	f7fa f9b4 	bl	800190e <HAL_ETH_Transmit_IT>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d103      	bne.n	80075b4 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80075b2:	e01b      	b.n	80075ec <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80075b4:	4814      	ldr	r0, [pc, #80]	@ (8007608 <low_level_output+0x154>)
 80075b6:	f7fa fd07 	bl	8001fc8 <HAL_ETH_GetError>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00d      	beq.n	80075e0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80075c4:	4b11      	ldr	r3, [pc, #68]	@ (800760c <low_level_output+0x158>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f002 fb23 	bl	8009c18 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 80075d2:	480d      	ldr	r0, [pc, #52]	@ (8007608 <low_level_output+0x154>)
 80075d4:	f7fa fb3a 	bl	8001c4c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80075d8:	23fe      	movs	r3, #254	@ 0xfe
 80075da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80075de:	e005      	b.n	80075ec <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80075e0:	6838      	ldr	r0, [r7, #0]
 80075e2:	f006 ff87 	bl	800e4f4 <pbuf_free>
        errval =  ERR_IF;
 80075e6:	23f4      	movs	r3, #244	@ 0xf4
 80075e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 80075ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80075f0:	f113 0f02 	cmn.w	r3, #2
 80075f4:	d0d3      	beq.n	800759e <low_level_output+0xea>

  return errval;
 80075f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3748      	adds	r7, #72	@ 0x48
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20005178 	.word	0x20005178
 8007608:	200050c8 	.word	0x200050c8
 800760c:	200050c4 	.word	0x200050c4

08007610 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <low_level_input+0x2c>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d105      	bne.n	8007630 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8007624:	f107 030c 	add.w	r3, r7, #12
 8007628:	4619      	mov	r1, r3
 800762a:	4805      	ldr	r0, [pc, #20]	@ (8007640 <low_level_input+0x30>)
 800762c:	f7fa f9cb 	bl	80019c6 <HAL_ETH_ReadData>
  }

  return p;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20004f7c 	.word	0x20004f7c
 8007640:	200050c8 	.word	0x200050c8

08007644 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007654:	4b0f      	ldr	r3, [pc, #60]	@ (8007694 <ethernetif_input+0x50>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f04f 31ff 	mov.w	r1, #4294967295
 800765c:	4618      	mov	r0, r3
 800765e:	f002 fadb 	bl	8009c18 <osSemaphoreWait>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f5      	bne.n	8007654 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007668:	68b8      	ldr	r0, [r7, #8]
 800766a:	f7ff ffd1 	bl	8007610 <low_level_input>
 800766e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	4798      	blx	r3
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f006 ff34 	bl	800e4f4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1ea      	bne.n	8007668 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007692:	e7df      	b.n	8007654 <ethernetif_input+0x10>
 8007694:	200050c0 	.word	0x200050c0

08007698 <low_level_output_arp_off>:
 *
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if ...
 */
static err_t low_level_output_arp_off(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  err_t errval;
  errval = ERR_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]

/* USER CODE BEGIN 5 */

/* USER CODE END 5 */

  return errval;
 80076a8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80076ac:	4618      	mov	r0, r3
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <ethernetif_init+0x1c>
 80076c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007700 <ethernetif_init+0x48>)
 80076c8:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 80076cc:	490d      	ldr	r1, [pc, #52]	@ (8007704 <ethernetif_init+0x4c>)
 80076ce:	480e      	ldr	r0, [pc, #56]	@ (8007708 <ethernetif_init+0x50>)
 80076d0:	f00f f980 	bl	80169d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2273      	movs	r2, #115	@ 0x73
 80076d8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2274      	movs	r2, #116	@ 0x74
 80076e0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
#else
  /* The user should write its own code in low_level_output_arp_off function */
  netif->output = low_level_output_arp_off;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a09      	ldr	r2, [pc, #36]	@ (800770c <ethernetif_init+0x54>)
 80076e8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a08      	ldr	r2, [pc, #32]	@ (8007710 <ethernetif_init+0x58>)
 80076ee:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fdd5 	bl	80072a0 <low_level_init>

  return ERR_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	08017e64 	.word	0x08017e64
 8007704:	08017e80 	.word	0x08017e80
 8007708:	08017e90 	.word	0x08017e90
 800770c:	08007699 	.word	0x08007699
 8007710:	080074b5 	.word	0x080074b5

08007714 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007720:	68f9      	ldr	r1, [r7, #12]
 8007722:	4809      	ldr	r0, [pc, #36]	@ (8007748 <pbuf_free_custom+0x34>)
 8007724:	f005 ff44 	bl	800d5b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8007728:	4b08      	ldr	r3, [pc, #32]	@ (800774c <pbuf_free_custom+0x38>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d107      	bne.n	8007740 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007730:	4b06      	ldr	r3, [pc, #24]	@ (800774c <pbuf_free_custom+0x38>)
 8007732:	2200      	movs	r2, #0
 8007734:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8007736:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <pbuf_free_custom+0x3c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f002 faba 	bl	8009cb4 <osSemaphoreRelease>
  }
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	0801ae58 	.word	0x0801ae58
 800774c:	20004f7c 	.word	0x20004f7c
 8007750:	200050c0 	.word	0x200050c0

08007754 <sys_now>:
* when LWIP_TIMERS == 1 and NO_SYS == 1
* @param None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007758:	f7f9 fe3c 	bl	80013d4 <HAL_GetTick>
 800775c:	4603      	mov	r3, r0
}
 800775e:	4618      	mov	r0, r3
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
    extern struct netif gnetif;
    int32_t phy_link_state = YT8512C_STATUS_LINK_DOWN;
 800776c:	2301      	movs	r3, #1
 800776e:	613b      	str	r3, [r7, #16]
    int32_t prev_link_state = YT8512C_STATUS_LINK_DOWN;
 8007770:	2301      	movs	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
    uint32_t error_count = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]
    uint32_t consecutive_errors = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
    const uint32_t max_consecutive_errors = 10;
 800777c:	230a      	movs	r3, #10
 800777e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
        /* 获取 YT8512C PHY 链路状态 */
        phy_link_state = YT8512C_GetLinkState(&heth);
 8007780:	4832      	ldr	r0, [pc, #200]	@ (800784c <ethernet_link_thread+0xe8>)
 8007782:	f7ff fcdc 	bl	800713e <YT8512C_GetLinkState>
 8007786:	6138      	str	r0, [r7, #16]

        /* 处理PHY通信错误 */
        if (phy_link_state == YT8512C_STATUS_READ_ERROR)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f113 0f05 	cmn.w	r3, #5
 800778e:	d11d      	bne.n	80077cc <ethernet_link_thread+0x68>
        {
            error_count++;
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	3301      	adds	r3, #1
 8007794:	61bb      	str	r3, [r7, #24]
            consecutive_errors++;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	3301      	adds	r3, #1
 800779a:	617b      	str	r3, [r7, #20]

            /* 如果连续错误过多，尝试重新初始化PHY */
            if (consecutive_errors >= max_consecutive_errors)
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d30e      	bcc.n	80077c2 <ethernet_link_thread+0x5e>
            {
                /* 重新初始化PHY */
                int32_t init_result = YT8512C_Init(&heth);
 80077a4:	4829      	ldr	r0, [pc, #164]	@ (800784c <ethernet_link_thread+0xe8>)
 80077a6:	f7ff fca2 	bl	80070ee <YT8512C_Init>
 80077aa:	60b8      	str	r0, [r7, #8]
                if (init_result == YT8512C_STATUS_OK)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <ethernet_link_thread+0x58>
                {
                    consecutive_errors = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	617b      	str	r3, [r7, #20]
                    prev_link_state = YT8512C_STATUS_LINK_DOWN; // 强制状态检查
 80077b6:	2301      	movs	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	e002      	b.n	80077c2 <ethernet_link_thread+0x5e>
                }
                else
                {
                    consecutive_errors = max_consecutive_errors / 2; // 减少连续错误计数，避免无限重试
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	085b      	lsrs	r3, r3, #1
 80077c0:	617b      	str	r3, [r7, #20]
                }
            }

            /* 跳过本次状态更新 */
            osDelay(500); // 延长等待时间
 80077c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80077c6:	f002 f945 	bl	8009a54 <osDelay>
            continue;
 80077ca:	e03e      	b.n	800784a <ethernet_link_thread+0xe6>
        }

        /* 成功读取PHY状态，重置连续错误计数 */
        consecutive_errors = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	617b      	str	r3, [r7, #20]

        /* 检查链路状态是否发生变化 */
        if (phy_link_state != prev_link_state)
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d035      	beq.n	8007844 <ethernet_link_thread+0xe0>
        {
            switch (phy_link_state)
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b06      	cmp	r3, #6
 80077dc:	d029      	beq.n	8007832 <ethernet_link_thread+0xce>
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	2b06      	cmp	r3, #6
 80077e2:	dc28      	bgt.n	8007836 <ethernet_link_thread+0xd2>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d016      	beq.n	8007818 <ethernet_link_thread+0xb4>
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dd22      	ble.n	8007836 <ethernet_link_thread+0xd2>
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	3b02      	subs	r3, #2
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d81e      	bhi.n	8007836 <ethernet_link_thread+0xd2>
                case YT8512C_STATUS_100MBITS_FULLDUPLEX:
                case YT8512C_STATUS_100MBITS_HALFDUPLEX:
                case YT8512C_STATUS_10MBITS_FULLDUPLEX:
                case YT8512C_STATUS_10MBITS_HALFDUPLEX:
                    /* 链路已建立 */
                    if (prev_link_state == YT8512C_STATUS_LINK_DOWN ||
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d002      	beq.n	8007804 <ethernet_link_thread+0xa0>
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b06      	cmp	r3, #6
 8007802:	d11a      	bne.n	800783a <ethernet_link_thread+0xd6>
                        prev_link_state == YT8512C_STATUS_AUTONEGO_NOTDONE)
                    {
                        /* 启动以太网 */
                        HAL_ETH_Start_IT(&heth);
 8007804:	4811      	ldr	r0, [pc, #68]	@ (800784c <ethernet_link_thread+0xe8>)
 8007806:	f7f9 ff93 	bl	8001730 <HAL_ETH_Start_IT>
                        netif_set_link_up(&gnetif);
 800780a:	4811      	ldr	r0, [pc, #68]	@ (8007850 <ethernet_link_thread+0xec>)
 800780c:	f006 fa60 	bl	800dcd0 <netif_set_link_up>
                        netif_set_up(&gnetif);
 8007810:	480f      	ldr	r0, [pc, #60]	@ (8007850 <ethernet_link_thread+0xec>)
 8007812:	f006 f9db 	bl	800dbcc <netif_set_up>
                    }
                    break;
 8007816:	e010      	b.n	800783a <ethernet_link_thread+0xd6>

                case YT8512C_STATUS_LINK_DOWN:
                    /* 链路断开 */
                    if (prev_link_state != YT8512C_STATUS_LINK_DOWN)
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d00f      	beq.n	800783e <ethernet_link_thread+0xda>
                    {
                        HAL_ETH_Stop_IT(&heth);
 800781e:	480b      	ldr	r0, [pc, #44]	@ (800784c <ethernet_link_thread+0xe8>)
 8007820:	f7f9 fff6 	bl	8001810 <HAL_ETH_Stop_IT>
                        netif_set_link_down(&gnetif);
 8007824:	480a      	ldr	r0, [pc, #40]	@ (8007850 <ethernet_link_thread+0xec>)
 8007826:	f006 fa87 	bl	800dd38 <netif_set_link_down>
                        netif_set_down(&gnetif);
 800782a:	4809      	ldr	r0, [pc, #36]	@ (8007850 <ethernet_link_thread+0xec>)
 800782c:	f006 fa28 	bl	800dc80 <netif_set_down>
                    }
                    break;
 8007830:	e005      	b.n	800783e <ethernet_link_thread+0xda>

                case YT8512C_STATUS_AUTONEGO_NOTDONE:
                    /* 自动协商进行中，继续等待 */
                    break;
 8007832:	bf00      	nop
 8007834:	e004      	b.n	8007840 <ethernet_link_thread+0xdc>

                default:
                    /* 其他状态或错误 */
                    break;
 8007836:	bf00      	nop
 8007838:	e002      	b.n	8007840 <ethernet_link_thread+0xdc>
                    break;
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <ethernet_link_thread+0xdc>
                    break;
 800783e:	bf00      	nop
            }

            prev_link_state = phy_link_state;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	61fb      	str	r3, [r7, #28]
        }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007844:	2064      	movs	r0, #100	@ 0x64
 8007846:	f002 f905 	bl	8009a54 <osDelay>
        phy_link_state = YT8512C_GetLinkState(&heth);
 800784a:	e799      	b.n	8007780 <ethernet_link_thread+0x1c>
 800784c:	200050c8 	.word	0x200050c8
 8007850:	200005a8 	.word	0x200005a8

08007854 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af02      	add	r7, sp, #8
 800785a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  // 进入临界区保护内存池分配
  taskENTER_CRITICAL();
 800785c:	f004 fccc 	bl	800c1f8 <vPortEnterCritical>

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007860:	4813      	ldr	r0, [pc, #76]	@ (80078b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007862:	f005 fe31 	bl	800d4c8 <memp_malloc_pool>
 8007866:	60f8      	str	r0, [r7, #12]
    if (p)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d014      	beq.n	8007898 <HAL_ETH_RxAllocateCallback+0x44>
    {
      /* Get the buff from the struct pbuf address. */
      *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f103 0220 	add.w	r2, r3, #32
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	601a      	str	r2, [r3, #0]
      p->custom_free_function = pbuf_free_custom;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a0e      	ldr	r2, [pc, #56]	@ (80078b4 <HAL_ETH_RxAllocateCallback+0x60>)
 800787c:	611a      	str	r2, [r3, #16]
      /* Initialize the struct pbuf.
      * This must be performed whenever a buffer's allocated because it may be
      * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
      pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007886:	9201      	str	r2, [sp, #4]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2241      	movs	r2, #65	@ 0x41
 800788e:	2100      	movs	r1, #0
 8007890:	2000      	movs	r0, #0
 8007892:	f006 fc75 	bl	800e180 <pbuf_alloced_custom>
 8007896:	e005      	b.n	80078a4 <HAL_ETH_RxAllocateCallback+0x50>
    }
    else
    {
      RxAllocStatus = RX_ALLOC_ERROR;
 8007898:	4b07      	ldr	r3, [pc, #28]	@ (80078b8 <HAL_ETH_RxAllocateCallback+0x64>)
 800789a:	2201      	movs	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
      *buff = NULL;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
    }

  // 退出临界区
  taskEXIT_CRITICAL();
 80078a4:	f004 fcda 	bl	800c25c <vPortExitCritical>
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	0801ae58 	.word	0x0801ae58
 80078b4:	08007715 	.word	0x08007715
 80078b8:	20004f7c 	.word	0x20004f7c

080078bc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */
  // 进入临界区保护pbuf链表操作
  taskENTER_CRITICAL();
 80078ca:	f004 fc95 	bl	800c1f8 <vPortEnterCritical>

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3b20      	subs	r3, #32
 80078de:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	2200      	movs	r2, #0
 80078ea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	887a      	ldrh	r2, [r7, #2]
 80078f0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d103      	bne.n	8007902 <HAL_ETH_RxLinkCallback+0x46>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e003      	b.n	800790a <HAL_ETH_RxLinkCallback+0x4e>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	601a      	str	r2, [r3, #0]
  }
  *ppEnd = p;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e009      	b.n	800792c <HAL_ETH_RxLinkCallback+0x70>
  {
    p->tot_len += Length;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	891a      	ldrh	r2, [r3, #8]
 800791c:	887b      	ldrh	r3, [r7, #2]
 800791e:	4413      	add	r3, r2
 8007920:	b29a      	uxth	r2, r3
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1f2      	bne.n	8007918 <HAL_ETH_RxLinkCallback+0x5c>
  }

  // 退出临界区
  taskEXIT_CRITICAL();
 8007932:	f004 fc93 	bl	800c25c <vPortExitCritical>
/* USER CODE END HAL ETH RxLinkCallback */
}
 8007936:	bf00      	nop
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */
  // 进入临界区保护pbuf释放操作
  taskENTER_CRITICAL();
 8007946:	f004 fc57 	bl	800c1f8 <vPortEnterCritical>

  pbuf_free((struct pbuf *)buff);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f006 fdd2 	bl	800e4f4 <pbuf_free>

  // 退出临界区
  taskEXIT_CRITICAL();
 8007950:	f004 fc84 	bl	800c25c <vPortExitCritical>
/* USER CODE END HAL ETH TxFreeCallback */
}
 8007954:	bf00      	nop
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007968:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800796c:	f00e feee 	bl	801674c <USBD_static_malloc>
 8007970:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d109      	bne.n	800798c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	32b0      	adds	r2, #176	@ 0xb0
 8007982:	2100      	movs	r1, #0
 8007984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007988:	2302      	movs	r3, #2
 800798a:	e0d4      	b.n	8007b36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800798c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007990:	2100      	movs	r1, #0
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f00f f9ce 	bl	8016d34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32b0      	adds	r2, #176	@ 0xb0
 80079a2:	68f9      	ldr	r1, [r7, #12]
 80079a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32b0      	adds	r2, #176	@ 0xb0
 80079b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7c1b      	ldrb	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d138      	bne.n	8007a36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079c4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b40 <USBD_CDC_Init+0x1e4>)
 80079c6:	7819      	ldrb	r1, [r3, #0]
 80079c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079cc:	2202      	movs	r2, #2
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f00e fd99 	bl	8016506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079d4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b40 <USBD_CDC_Init+0x1e4>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3323      	adds	r3, #35	@ 0x23
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079ee:	4b55      	ldr	r3, [pc, #340]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 80079f0:	7819      	ldrb	r1, [r3, #0]
 80079f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079f6:	2202      	movs	r2, #2
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f00e fd84 	bl	8016506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079fe:	4b51      	ldr	r3, [pc, #324]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f003 020f 	and.w	r2, r3, #15
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a16:	2201      	movs	r2, #1
 8007a18:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b48 <USBD_CDC_Init+0x1ec>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	f003 020f 	and.w	r2, r3, #15
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	331c      	adds	r3, #28
 8007a30:	2210      	movs	r2, #16
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e035      	b.n	8007aa2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a36:	4b42      	ldr	r3, [pc, #264]	@ (8007b40 <USBD_CDC_Init+0x1e4>)
 8007a38:	7819      	ldrb	r1, [r3, #0]
 8007a3a:	2340      	movs	r3, #64	@ 0x40
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f00e fd61 	bl	8016506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a44:	4b3e      	ldr	r3, [pc, #248]	@ (8007b40 <USBD_CDC_Init+0x1e4>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	3323      	adds	r3, #35	@ 0x23
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a5e:	4b39      	ldr	r3, [pc, #228]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 8007a60:	7819      	ldrb	r1, [r3, #0]
 8007a62:	2340      	movs	r3, #64	@ 0x40
 8007a64:	2202      	movs	r2, #2
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f00e fd4d 	bl	8016506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a6c:	4b35      	ldr	r3, [pc, #212]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 020f 	and.w	r2, r3, #15
 8007a74:	6879      	ldr	r1, [r7, #4]
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	440b      	add	r3, r1
 8007a80:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a84:	2201      	movs	r2, #1
 8007a86:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a88:	4b2f      	ldr	r3, [pc, #188]	@ (8007b48 <USBD_CDC_Init+0x1ec>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	331c      	adds	r3, #28
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007aa2:	4b29      	ldr	r3, [pc, #164]	@ (8007b48 <USBD_CDC_Init+0x1ec>)
 8007aa4:	7819      	ldrb	r1, [r3, #0]
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f00e fd2b 	bl	8016506 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ab0:	4b25      	ldr	r3, [pc, #148]	@ (8007b48 <USBD_CDC_Init+0x1ec>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 020f 	and.w	r2, r3, #15
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3323      	adds	r3, #35	@ 0x23
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	33b0      	adds	r3, #176	@ 0xb0
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b00:	2302      	movs	r3, #2
 8007b02:	e018      	b.n	8007b36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7c1b      	ldrb	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 8007b0e:	7819      	ldrb	r1, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f00e fde2 	bl	80166e4 <USBD_LL_PrepareReceive>
 8007b20:	e008      	b.n	8007b34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b22:	4b08      	ldr	r3, [pc, #32]	@ (8007b44 <USBD_CDC_Init+0x1e8>)
 8007b24:	7819      	ldrb	r1, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b2c:	2340      	movs	r3, #64	@ 0x40
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f00e fdd8 	bl	80166e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000093 	.word	0x20000093
 8007b44:	20000094 	.word	0x20000094
 8007b48:	20000095 	.word	0x20000095

08007b4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b58:	4b3a      	ldr	r3, [pc, #232]	@ (8007c44 <USBD_CDC_DeInit+0xf8>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f00e fcf7 	bl	8016552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b64:	4b37      	ldr	r3, [pc, #220]	@ (8007c44 <USBD_CDC_DeInit+0xf8>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f003 020f 	and.w	r2, r3, #15
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	3323      	adds	r3, #35	@ 0x23
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b7e:	4b32      	ldr	r3, [pc, #200]	@ (8007c48 <USBD_CDC_DeInit+0xfc>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f00e fce4 	bl	8016552 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c48 <USBD_CDC_DeInit+0xfc>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f003 020f 	and.w	r2, r3, #15
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ba6:	4b29      	ldr	r3, [pc, #164]	@ (8007c4c <USBD_CDC_DeInit+0x100>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f00e fcd0 	bl	8016552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bb2:	4b26      	ldr	r3, [pc, #152]	@ (8007c4c <USBD_CDC_DeInit+0x100>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	f003 020f 	and.w	r2, r3, #15
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	3323      	adds	r3, #35	@ 0x23
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8007c4c <USBD_CDC_DeInit+0x100>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	331c      	adds	r3, #28
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	32b0      	adds	r2, #176	@ 0xb0
 8007bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01f      	beq.n	8007c38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	33b0      	adds	r3, #176	@ 0xb0
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	32b0      	adds	r2, #176	@ 0xb0
 8007c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f00e fda4 	bl	8016768 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	32b0      	adds	r2, #176	@ 0xb0
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000093 	.word	0x20000093
 8007c48:	20000094 	.word	0x20000094
 8007c4c:	20000095 	.word	0x20000095

08007c50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	32b0      	adds	r2, #176	@ 0xb0
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0bf      	b.n	8007e00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d050      	beq.n	8007d2e <USBD_CDC_Setup+0xde>
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	f040 80af 	bne.w	8007df0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d03a      	beq.n	8007d10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	da1b      	bge.n	8007cdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	33b0      	adds	r3, #176	@ 0xb0
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	88d2      	ldrh	r2, [r2, #6]
 8007cc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b07      	cmp	r3, #7
 8007cc8:	bf28      	it	cs
 8007cca:	2307      	movcs	r3, #7
 8007ccc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	89fa      	ldrh	r2, [r7, #14]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 fda9 	bl	800982c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cda:	e090      	b.n	8007dfe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	785a      	ldrb	r2, [r3, #1]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	88db      	ldrh	r3, [r3, #6]
 8007cea:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cec:	d803      	bhi.n	8007cf6 <USBD_CDC_Setup+0xa6>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	e000      	b.n	8007cf8 <USBD_CDC_Setup+0xa8>
 8007cf6:	2240      	movs	r2, #64	@ 0x40
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007cfe:	6939      	ldr	r1, [r7, #16]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d06:	461a      	mov	r2, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f001 fdbe 	bl	800988a <USBD_CtlPrepareRx>
      break;
 8007d0e:	e076      	b.n	8007dfe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	33b0      	adds	r3, #176	@ 0xb0
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	7850      	ldrb	r0, [r2, #1]
 8007d26:	2200      	movs	r2, #0
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	4798      	blx	r3
      break;
 8007d2c:	e067      	b.n	8007dfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	785b      	ldrb	r3, [r3, #1]
 8007d32:	2b0b      	cmp	r3, #11
 8007d34:	d851      	bhi.n	8007dda <USBD_CDC_Setup+0x18a>
 8007d36:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <USBD_CDC_Setup+0xec>)
 8007d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3c:	08007d6d 	.word	0x08007d6d
 8007d40:	08007de9 	.word	0x08007de9
 8007d44:	08007ddb 	.word	0x08007ddb
 8007d48:	08007ddb 	.word	0x08007ddb
 8007d4c:	08007ddb 	.word	0x08007ddb
 8007d50:	08007ddb 	.word	0x08007ddb
 8007d54:	08007ddb 	.word	0x08007ddb
 8007d58:	08007ddb 	.word	0x08007ddb
 8007d5c:	08007ddb 	.word	0x08007ddb
 8007d60:	08007ddb 	.word	0x08007ddb
 8007d64:	08007d97 	.word	0x08007d97
 8007d68:	08007dc1 	.word	0x08007dc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d107      	bne.n	8007d88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d78:	f107 030a 	add.w	r3, r7, #10
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fd53 	bl	800982c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d86:	e032      	b.n	8007dee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fcd1 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	75fb      	strb	r3, [r7, #23]
          break;
 8007d94:	e02b      	b.n	8007dee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d107      	bne.n	8007db2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007da2:	f107 030d 	add.w	r3, r7, #13
 8007da6:	2201      	movs	r2, #1
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fd3e 	bl	800982c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007db0:	e01d      	b.n	8007dee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f001 fcbc 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dbe:	e016      	b.n	8007dee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d00f      	beq.n	8007dec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fcaf 	bl	8009732 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007dd8:	e008      	b.n	8007dec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f001 fca8 	bl	8009732 <USBD_CtlError>
          ret = USBD_FAIL;
 8007de2:	2303      	movs	r3, #3
 8007de4:	75fb      	strb	r3, [r7, #23]
          break;
 8007de6:	e002      	b.n	8007dee <USBD_CDC_Setup+0x19e>
          break;
 8007de8:	bf00      	nop
 8007dea:	e008      	b.n	8007dfe <USBD_CDC_Setup+0x1ae>
          break;
 8007dec:	bf00      	nop
      }
      break;
 8007dee:	e006      	b.n	8007dfe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fc9d 	bl	8009732 <USBD_CtlError>
      ret = USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3718      	adds	r7, #24
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	32b0      	adds	r2, #176	@ 0xb0
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e065      	b.n	8007efe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	32b0      	adds	r2, #176	@ 0xb0
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e42:	78fb      	ldrb	r3, [r7, #3]
 8007e44:	f003 020f 	and.w	r2, r3, #15
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	440b      	add	r3, r1
 8007e54:	3314      	adds	r3, #20
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d02f      	beq.n	8007ebc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3314      	adds	r3, #20
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 010f 	and.w	r1, r3, #15
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	440b      	add	r3, r1
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4403      	add	r3, r0
 8007e84:	331c      	adds	r3, #28
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d112      	bne.n	8007ebc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	f003 020f 	and.w	r2, r3, #15
 8007e9c:	6879      	ldr	r1, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	440b      	add	r3, r1
 8007ea8:	3314      	adds	r3, #20
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007eae:	78f9      	ldrb	r1, [r7, #3]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f00e fbf4 	bl	80166a2 <USBD_LL_Transmit>
 8007eba:	e01f      	b.n	8007efc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	33b0      	adds	r3, #176	@ 0xb0
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d010      	beq.n	8007efc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	33b0      	adds	r3, #176	@ 0xb0
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4413      	add	r3, r2
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	32b0      	adds	r2, #176	@ 0xb0
 8007f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32b0      	adds	r2, #176	@ 0xb0
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e01a      	b.n	8007f6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f38:	78fb      	ldrb	r3, [r7, #3]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f00e fbf2 	bl	8016726 <USBD_LL_GetRxDataSize>
 8007f42:	4602      	mov	r2, r0
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	33b0      	adds	r3, #176	@ 0xb0
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f68:	4611      	mov	r1, r2
 8007f6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	32b0      	adds	r2, #176	@ 0xb0
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e024      	b.n	8007fe2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	33b0      	adds	r3, #176	@ 0xb0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d019      	beq.n	8007fe0 <USBD_CDC_EP0_RxReady+0x6a>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fb2:	2bff      	cmp	r3, #255	@ 0xff
 8007fb4:	d014      	beq.n	8007fe0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	33b0      	adds	r3, #176	@ 0xb0
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	22ff      	movs	r2, #255	@ 0xff
 8007fdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ff4:	2182      	movs	r1, #130	@ 0x82
 8007ff6:	4818      	ldr	r0, [pc, #96]	@ (8008058 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ff8:	f000 fd62 	bl	8008ac0 <USBD_GetEpDesc>
 8007ffc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ffe:	2101      	movs	r1, #1
 8008000:	4815      	ldr	r0, [pc, #84]	@ (8008058 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008002:	f000 fd5d 	bl	8008ac0 <USBD_GetEpDesc>
 8008006:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008008:	2181      	movs	r1, #129	@ 0x81
 800800a:	4813      	ldr	r0, [pc, #76]	@ (8008058 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800800c:	f000 fd58 	bl	8008ac0 <USBD_GetEpDesc>
 8008010:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	2210      	movs	r2, #16
 800801c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d006      	beq.n	8008032 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2200      	movs	r2, #0
 8008028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800802c:	711a      	strb	r2, [r3, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d006      	beq.n	8008046 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008040:	711a      	strb	r2, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2243      	movs	r2, #67	@ 0x43
 800804a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800804c:	4b02      	ldr	r3, [pc, #8]	@ (8008058 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000050 	.word	0x20000050

0800805c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008064:	2182      	movs	r1, #130	@ 0x82
 8008066:	4818      	ldr	r0, [pc, #96]	@ (80080c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008068:	f000 fd2a 	bl	8008ac0 <USBD_GetEpDesc>
 800806c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800806e:	2101      	movs	r1, #1
 8008070:	4815      	ldr	r0, [pc, #84]	@ (80080c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008072:	f000 fd25 	bl	8008ac0 <USBD_GetEpDesc>
 8008076:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008078:	2181      	movs	r1, #129	@ 0x81
 800807a:	4813      	ldr	r0, [pc, #76]	@ (80080c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800807c:	f000 fd20 	bl	8008ac0 <USBD_GetEpDesc>
 8008080:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2210      	movs	r2, #16
 800808c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d006      	beq.n	80080a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2200      	movs	r2, #0
 8008098:	711a      	strb	r2, [r3, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f042 0202 	orr.w	r2, r2, #2
 80080a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d006      	beq.n	80080b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	711a      	strb	r2, [r3, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f042 0202 	orr.w	r2, r2, #2
 80080b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2243      	movs	r2, #67	@ 0x43
 80080ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080bc:	4b02      	ldr	r3, [pc, #8]	@ (80080c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	20000050 	.word	0x20000050

080080cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080d4:	2182      	movs	r1, #130	@ 0x82
 80080d6:	4818      	ldr	r0, [pc, #96]	@ (8008138 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080d8:	f000 fcf2 	bl	8008ac0 <USBD_GetEpDesc>
 80080dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080de:	2101      	movs	r1, #1
 80080e0:	4815      	ldr	r0, [pc, #84]	@ (8008138 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080e2:	f000 fced 	bl	8008ac0 <USBD_GetEpDesc>
 80080e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080e8:	2181      	movs	r1, #129	@ 0x81
 80080ea:	4813      	ldr	r0, [pc, #76]	@ (8008138 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080ec:	f000 fce8 	bl	8008ac0 <USBD_GetEpDesc>
 80080f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2210      	movs	r2, #16
 80080fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d006      	beq.n	8008112 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2200      	movs	r2, #0
 8008108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800810c:	711a      	strb	r2, [r3, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d006      	beq.n	8008126 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008120:	711a      	strb	r2, [r3, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2243      	movs	r2, #67	@ 0x43
 800812a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000050 	.word	0x20000050

0800813c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	220a      	movs	r2, #10
 8008148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800814a:	4b03      	ldr	r3, [pc, #12]	@ (8008158 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	2000000c 	.word	0x2000000c

0800815c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800816c:	2303      	movs	r3, #3
 800816e:	e009      	b.n	8008184 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	33b0      	adds	r3, #176	@ 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	32b0      	adds	r2, #176	@ 0xb0
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e008      	b.n	80081c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32b0      	adds	r2, #176	@ 0xb0
 80081e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e004      	b.n	8008202 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
	...

08008210 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	32b0      	adds	r2, #176	@ 0xb0
 8008222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008226:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	e025      	b.n	8008282 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800823c:	2b00      	cmp	r3, #0
 800823e:	d11f      	bne.n	8008280 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	2201      	movs	r2, #1
 8008244:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008248:	4b10      	ldr	r3, [pc, #64]	@ (800828c <USBD_CDC_TransmitPacket+0x7c>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	f003 020f 	and.w	r2, r3, #15
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4403      	add	r3, r0
 8008262:	3314      	adds	r3, #20
 8008264:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008266:	4b09      	ldr	r3, [pc, #36]	@ (800828c <USBD_CDC_TransmitPacket+0x7c>)
 8008268:	7819      	ldrb	r1, [r3, #0]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f00e fa13 	bl	80166a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20000093 	.word	0x20000093

08008290 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	32b0      	adds	r2, #176	@ 0xb0
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	32b0      	adds	r2, #176	@ 0xb0
 80082b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e018      	b.n	80082f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7c1b      	ldrb	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082c6:	4b0c      	ldr	r3, [pc, #48]	@ (80082f8 <USBD_CDC_ReceivePacket+0x68>)
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f00e fa05 	bl	80166e4 <USBD_LL_PrepareReceive>
 80082da:	e008      	b.n	80082ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <USBD_CDC_ReceivePacket+0x68>)
 80082de:	7819      	ldrb	r1, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082e6:	2340      	movs	r3, #64	@ 0x40
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f00e f9fb 	bl	80166e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000094 	.word	0x20000094

080082fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	e01f      	b.n	8008354 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	79fa      	ldrb	r2, [r7, #7]
 8008346:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f00e f875 	bl	8016438 <USBD_LL_Init>
 800834e:	4603      	mov	r3, r0
 8008350:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008370:	2303      	movs	r3, #3
 8008372:	e025      	b.n	80083c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32ae      	adds	r2, #174	@ 0xae
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00f      	beq.n	80083b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32ae      	adds	r2, #174	@ 0xae
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	f107 020e 	add.w	r2, r7, #14
 80083a4:	4610      	mov	r0, r2
 80083a6:	4798      	blx	r3
 80083a8:	4602      	mov	r2, r0
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f00e f87d 	bl	80164d0 <USBD_LL_Start>
 80083d6:	4603      	mov	r3, r0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b084      	sub	sp, #16
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d009      	beq.n	8008424 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4611      	mov	r1, r2
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	4798      	blx	r3
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008424:	7bfb      	ldrb	r3, [r7, #15]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b084      	sub	sp, #16
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	78fa      	ldrb	r2, [r7, #3]
 8008448:	4611      	mov	r1, r2
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	4618      	mov	r0, r3
 8008476:	f001 f922 	bl	80096be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008496:	f003 031f 	and.w	r3, r3, #31
 800849a:	2b02      	cmp	r3, #2
 800849c:	d01a      	beq.n	80084d4 <USBD_LL_SetupStage+0x72>
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d822      	bhi.n	80084e8 <USBD_LL_SetupStage+0x86>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <USBD_LL_SetupStage+0x4a>
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d00a      	beq.n	80084c0 <USBD_LL_SetupStage+0x5e>
 80084aa:	e01d      	b.n	80084e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fb77 	bl	8008ba8 <USBD_StdDevReq>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
      break;
 80084be:	e020      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fbdf 	bl	8008c8c <USBD_StdItfReq>
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
      break;
 80084d2:	e016      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fc41 	bl	8008d64 <USBD_StdEPReq>
 80084e2:	4603      	mov	r3, r0
 80084e4:	73fb      	strb	r3, [r7, #15]
      break;
 80084e6:	e00c      	b.n	8008502 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f00e f84a 	bl	8016590 <USBD_LL_StallEP>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008500:	bf00      	nop
  }

  return ret;
 8008502:	7bfb      	ldrb	r3, [r7, #15]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	460b      	mov	r3, r1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800851e:	7afb      	ldrb	r3, [r7, #11]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d177      	bne.n	8008614 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800852a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008532:	2b03      	cmp	r3, #3
 8008534:	f040 80a1 	bne.w	800867a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	8992      	ldrh	r2, [r2, #12]
 8008540:	4293      	cmp	r3, r2
 8008542:	d91c      	bls.n	800857e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	8992      	ldrh	r2, [r2, #12]
 800854c:	1a9a      	subs	r2, r3, r2
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	8992      	ldrh	r2, [r2, #12]
 800855a:	441a      	add	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6919      	ldr	r1, [r3, #16]
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	899b      	ldrh	r3, [r3, #12]
 8008568:	461a      	mov	r2, r3
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4293      	cmp	r3, r2
 8008570:	bf38      	it	cc
 8008572:	4613      	movcc	r3, r2
 8008574:	461a      	mov	r2, r3
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f001 f9a8 	bl	80098cc <USBD_CtlContinueRx>
 800857c:	e07d      	b.n	800867a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	2b02      	cmp	r3, #2
 800858a:	d014      	beq.n	80085b6 <USBD_LL_DataOutStage+0xaa>
 800858c:	2b02      	cmp	r3, #2
 800858e:	d81d      	bhi.n	80085cc <USBD_LL_DataOutStage+0xc0>
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <USBD_LL_DataOutStage+0x8e>
 8008594:	2b01      	cmp	r3, #1
 8008596:	d003      	beq.n	80085a0 <USBD_LL_DataOutStage+0x94>
 8008598:	e018      	b.n	80085cc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	75bb      	strb	r3, [r7, #22]
            break;
 800859e:	e018      	b.n	80085d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	4619      	mov	r1, r3
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 fa6e 	bl	8008a8c <USBD_CoreFindIF>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75bb      	strb	r3, [r7, #22]
            break;
 80085b4:	e00d      	b.n	80085d2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fa70 	bl	8008aa6 <USBD_CoreFindEP>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75bb      	strb	r3, [r7, #22]
            break;
 80085ca:	e002      	b.n	80085d2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	75bb      	strb	r3, [r7, #22]
            break;
 80085d0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085d2:	7dbb      	ldrb	r3, [r7, #22]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d119      	bne.n	800860c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d113      	bne.n	800860c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085e4:	7dba      	ldrb	r2, [r7, #22]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	32ae      	adds	r2, #174	@ 0xae
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80085f4:	7dba      	ldrb	r2, [r7, #22]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085fc:	7dba      	ldrb	r2, [r7, #22]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	32ae      	adds	r2, #174	@ 0xae
 8008602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008606:	691b      	ldr	r3, [r3, #16]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 f96e 	bl	80098ee <USBD_CtlSendStatus>
 8008612:	e032      	b.n	800867a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861a:	b2db      	uxtb	r3, r3
 800861c:	4619      	mov	r1, r3
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fa41 	bl	8008aa6 <USBD_CoreFindEP>
 8008624:	4603      	mov	r3, r0
 8008626:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008628:	7dbb      	ldrb	r3, [r7, #22]
 800862a:	2bff      	cmp	r3, #255	@ 0xff
 800862c:	d025      	beq.n	800867a <USBD_LL_DataOutStage+0x16e>
 800862e:	7dbb      	ldrb	r3, [r7, #22]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d122      	bne.n	800867a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b03      	cmp	r3, #3
 800863e:	d117      	bne.n	8008670 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008640:	7dba      	ldrb	r2, [r7, #22]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	32ae      	adds	r2, #174	@ 0xae
 8008646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00f      	beq.n	8008670 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008650:	7dba      	ldrb	r2, [r7, #22]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008658:	7dba      	ldrb	r2, [r7, #22]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	32ae      	adds	r2, #174	@ 0xae
 800865e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	7afa      	ldrb	r2, [r7, #11]
 8008666:	4611      	mov	r1, r2
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	4798      	blx	r3
 800866c:	4603      	mov	r3, r0
 800866e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	e000      	b.n	800867c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d178      	bne.n	800878a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3314      	adds	r3, #20
 800869c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d163      	bne.n	8008770 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	8992      	ldrh	r2, [r2, #12]
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d91c      	bls.n	80086ee <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	8992      	ldrh	r2, [r2, #12]
 80086bc:	1a9a      	subs	r2, r3, r2
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	8992      	ldrh	r2, [r2, #12]
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6919      	ldr	r1, [r3, #16]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	461a      	mov	r2, r3
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f001 f8c4 	bl	8009868 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086e0:	2300      	movs	r3, #0
 80086e2:	2200      	movs	r2, #0
 80086e4:	2100      	movs	r1, #0
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f00d fffc 	bl	80166e4 <USBD_LL_PrepareReceive>
 80086ec:	e040      	b.n	8008770 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	899b      	ldrh	r3, [r3, #12]
 80086f2:	461a      	mov	r2, r3
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d11c      	bne.n	8008736 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008704:	4293      	cmp	r3, r2
 8008706:	d316      	bcc.n	8008736 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008712:	429a      	cmp	r2, r3
 8008714:	d20f      	bcs.n	8008736 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f001 f8a4 	bl	8009868 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008728:	2300      	movs	r3, #0
 800872a:	2200      	movs	r2, #0
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f00d ffd8 	bl	80166e4 <USBD_LL_PrepareReceive>
 8008734:	e01c      	b.n	8008770 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d10f      	bne.n	8008762 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008762:	2180      	movs	r1, #128	@ 0x80
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f00d ff13 	bl	8016590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f001 f8d2 	bl	8009914 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d03a      	beq.n	80087f0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f7ff fe30 	bl	80083e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008788:	e032      	b.n	80087f0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f986 	bl	8008aa6 <USBD_CoreFindEP>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2bff      	cmp	r3, #255	@ 0xff
 80087a2:	d025      	beq.n	80087f0 <USBD_LL_DataInStage+0x16c>
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d122      	bne.n	80087f0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d11c      	bne.n	80087f0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80087b6:	7dfa      	ldrb	r2, [r7, #23]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	32ae      	adds	r2, #174	@ 0xae
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d014      	beq.n	80087f0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80087c6:	7dfa      	ldrb	r2, [r7, #23]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087ce:	7dfa      	ldrb	r2, [r7, #23]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	32ae      	adds	r2, #174	@ 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	7afa      	ldrb	r2, [r7, #11]
 80087dc:	4611      	mov	r1, r2
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	4798      	blx	r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087e6:	7dbb      	ldrb	r3, [r7, #22]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80087ec:	7dbb      	ldrb	r3, [r7, #22]
 80087ee:	e000      	b.n	80087f2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b084      	sub	sp, #16
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008832:	2b00      	cmp	r3, #0
 8008834:	d014      	beq.n	8008860 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00e      	beq.n	8008860 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6852      	ldr	r2, [r2, #4]
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	4611      	mov	r1, r2
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008860:	2340      	movs	r3, #64	@ 0x40
 8008862:	2200      	movs	r2, #0
 8008864:	2100      	movs	r1, #0
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f00d fe4d 	bl	8016506 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2240      	movs	r2, #64	@ 0x40
 8008878:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800887c:	2340      	movs	r3, #64	@ 0x40
 800887e:	2200      	movs	r2, #0
 8008880:	2180      	movs	r1, #128	@ 0x80
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f00d fe3f 	bl	8016506 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2240      	movs	r2, #64	@ 0x40
 8008894:	841a      	strh	r2, [r3, #32]

  return ret;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	78fa      	ldrb	r2, [r7, #3]
 80088b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d006      	beq.n	80088e2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2204      	movs	r2, #4
 80088e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b04      	cmp	r3, #4
 800890a:	d106      	bne.n	800891a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008912:	b2da      	uxtb	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b03      	cmp	r3, #3
 800893a:	d110      	bne.n	800895e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	69db      	ldr	r3, [r3, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	32ae      	adds	r2, #174	@ 0xae
 800897e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	e01c      	b.n	80089c4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b03      	cmp	r3, #3
 8008994:	d115      	bne.n	80089c2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	32ae      	adds	r2, #174	@ 0xae
 80089a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	32ae      	adds	r2, #174	@ 0xae
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	78fa      	ldrb	r2, [r7, #3]
 80089bc:	4611      	mov	r1, r2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	32ae      	adds	r2, #174	@ 0xae
 80089e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e01c      	b.n	8008a28 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d115      	bne.n	8008a26 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	32ae      	adds	r2, #174	@ 0xae
 8008a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	32ae      	adds	r2, #174	@ 0xae
 8008a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	4611      	mov	r1, r2
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6852      	ldr	r2, [r2, #4]
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	4611      	mov	r1, r2
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	4798      	blx	r3
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a98:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	460b      	mov	r3, r1
 8008ab0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ab2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	885b      	ldrh	r3, [r3, #2]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	7812      	ldrb	r2, [r2, #0]
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d91f      	bls.n	8008b26 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008aec:	e013      	b.n	8008b16 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008aee:	f107 030a 	add.w	r3, r7, #10
 8008af2:	4619      	mov	r1, r3
 8008af4:	6978      	ldr	r0, [r7, #20]
 8008af6:	f000 f81b 	bl	8008b30 <USBD_GetNextDesc>
 8008afa:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	785b      	ldrb	r3, [r3, #1]
 8008b00:	2b05      	cmp	r3, #5
 8008b02:	d108      	bne.n	8008b16 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	789b      	ldrb	r3, [r3, #2]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d008      	beq.n	8008b24 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	885b      	ldrh	r3, [r3, #2]
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	897b      	ldrh	r3, [r7, #10]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d8e5      	bhi.n	8008aee <USBD_GetEpDesc+0x2e>
 8008b22:	e000      	b.n	8008b26 <USBD_GetEpDesc+0x66>
          break;
 8008b24:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b26:	693b      	ldr	r3, [r7, #16]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	7812      	ldrb	r2, [r2, #0]
 8008b46:	4413      	add	r3, r2
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	b21a      	sxth	r2, r3
 8008b8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	b21b      	sxth	r3, r3
 8008b96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b98:	89fb      	ldrh	r3, [r7, #14]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
	...

08008ba8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	d005      	beq.n	8008bce <USBD_StdDevReq+0x26>
 8008bc2:	2b40      	cmp	r3, #64	@ 0x40
 8008bc4:	d857      	bhi.n	8008c76 <USBD_StdDevReq+0xce>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00f      	beq.n	8008bea <USBD_StdDevReq+0x42>
 8008bca:	2b20      	cmp	r3, #32
 8008bcc:	d153      	bne.n	8008c76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	32ae      	adds	r2, #174	@ 0xae
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]
      break;
 8008be8:	e04a      	b.n	8008c80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b09      	cmp	r3, #9
 8008bf0:	d83b      	bhi.n	8008c6a <USBD_StdDevReq+0xc2>
 8008bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf8 <USBD_StdDevReq+0x50>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008c6b 	.word	0x08008c6b
 8008c04:	08008c57 	.word	0x08008c57
 8008c08:	08008c6b 	.word	0x08008c6b
 8008c0c:	08008c2b 	.word	0x08008c2b
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c6b 	.word	0x08008c6b
 8008c18:	08008c43 	.word	0x08008c43
 8008c1c:	08008c35 	.word	0x08008c35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fa3e 	bl	80090a4 <USBD_GetDescriptor>
          break;
 8008c28:	e024      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fba3 	bl	8009378 <USBD_SetAddress>
          break;
 8008c32:	e01f      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fbe2 	bl	8009400 <USBD_SetConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8008c40:	e018      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c42:	6839      	ldr	r1, [r7, #0]
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fc85 	bl	8009554 <USBD_GetConfig>
          break;
 8008c4a:	e013      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fcb6 	bl	80095c0 <USBD_GetStatus>
          break;
 8008c54:	e00e      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fce5 	bl	8009628 <USBD_SetFeature>
          break;
 8008c5e:	e009      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fd09 	bl	800967a <USBD_ClrFeature>
          break;
 8008c68:	e004      	b.n	8008c74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fd60 	bl	8009732 <USBD_CtlError>
          break;
 8008c72:	bf00      	nop
      }
      break;
 8008c74:	e004      	b.n	8008c80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fd5a 	bl	8009732 <USBD_CtlError>
      break;
 8008c7e:	bf00      	nop
  }

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop

08008c8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ca2:	2b40      	cmp	r3, #64	@ 0x40
 8008ca4:	d005      	beq.n	8008cb2 <USBD_StdItfReq+0x26>
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d852      	bhi.n	8008d50 <USBD_StdItfReq+0xc4>
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <USBD_StdItfReq+0x26>
 8008cae:	2b20      	cmp	r3, #32
 8008cb0:	d14e      	bne.n	8008d50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d840      	bhi.n	8008d42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	889b      	ldrh	r3, [r3, #4]
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d836      	bhi.n	8008d38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	889b      	ldrh	r3, [r3, #4]
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7ff feda 	bl	8008a8c <USBD_CoreFindIF>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	2bff      	cmp	r3, #255	@ 0xff
 8008ce0:	d01d      	beq.n	8008d1e <USBD_StdItfReq+0x92>
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d11a      	bne.n	8008d1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ce8:	7bba      	ldrb	r2, [r7, #14]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	32ae      	adds	r2, #174	@ 0xae
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00f      	beq.n	8008d18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cf8:	7bba      	ldrb	r2, [r7, #14]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d00:	7bba      	ldrb	r2, [r7, #14]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32ae      	adds	r2, #174	@ 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d16:	e004      	b.n	8008d22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d1c:	e001      	b.n	8008d22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	88db      	ldrh	r3, [r3, #6]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d110      	bne.n	8008d4c <USBD_StdItfReq+0xc0>
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10d      	bne.n	8008d4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fddc 	bl	80098ee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d36:	e009      	b.n	8008d4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fcf9 	bl	8009732 <USBD_CtlError>
          break;
 8008d40:	e004      	b.n	8008d4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fcf4 	bl	8009732 <USBD_CtlError>
          break;
 8008d4a:	e000      	b.n	8008d4e <USBD_StdItfReq+0xc2>
          break;
 8008d4c:	bf00      	nop
      }
      break;
 8008d4e:	e004      	b.n	8008d5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fced 	bl	8009732 <USBD_CtlError>
      break;
 8008d58:	bf00      	nop
  }

  return ret;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	889b      	ldrh	r3, [r3, #4]
 8008d76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d80:	2b40      	cmp	r3, #64	@ 0x40
 8008d82:	d007      	beq.n	8008d94 <USBD_StdEPReq+0x30>
 8008d84:	2b40      	cmp	r3, #64	@ 0x40
 8008d86:	f200 8181 	bhi.w	800908c <USBD_StdEPReq+0x328>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d02a      	beq.n	8008de4 <USBD_StdEPReq+0x80>
 8008d8e:	2b20      	cmp	r3, #32
 8008d90:	f040 817c 	bne.w	800908c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fe84 	bl	8008aa6 <USBD_CoreFindEP>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008da2:	7b7b      	ldrb	r3, [r7, #13]
 8008da4:	2bff      	cmp	r3, #255	@ 0xff
 8008da6:	f000 8176 	beq.w	8009096 <USBD_StdEPReq+0x332>
 8008daa:	7b7b      	ldrb	r3, [r7, #13]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 8172 	bne.w	8009096 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008db2:	7b7a      	ldrb	r2, [r7, #13]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008dba:	7b7a      	ldrb	r2, [r7, #13]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	32ae      	adds	r2, #174	@ 0xae
 8008dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f000 8165 	beq.w	8009096 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008dcc:	7b7a      	ldrb	r2, [r7, #13]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	32ae      	adds	r2, #174	@ 0xae
 8008dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008de2:	e158      	b.n	8009096 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b03      	cmp	r3, #3
 8008dea:	d008      	beq.n	8008dfe <USBD_StdEPReq+0x9a>
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	f300 8147 	bgt.w	8009080 <USBD_StdEPReq+0x31c>
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 809b 	beq.w	8008f2e <USBD_StdEPReq+0x1ca>
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d03c      	beq.n	8008e76 <USBD_StdEPReq+0x112>
 8008dfc:	e140      	b.n	8009080 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d002      	beq.n	8008e10 <USBD_StdEPReq+0xac>
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d016      	beq.n	8008e3c <USBD_StdEPReq+0xd8>
 8008e0e:	e02c      	b.n	8008e6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00d      	beq.n	8008e32 <USBD_StdEPReq+0xce>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d00a      	beq.n	8008e32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f00d fbb5 	bl	8016590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e26:	2180      	movs	r1, #128	@ 0x80
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f00d fbb1 	bl	8016590 <USBD_LL_StallEP>
 8008e2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e30:	e020      	b.n	8008e74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc7c 	bl	8009732 <USBD_CtlError>
              break;
 8008e3a:	e01b      	b.n	8008e74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	885b      	ldrh	r3, [r3, #2]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10e      	bne.n	8008e62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <USBD_StdEPReq+0xfe>
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b80      	cmp	r3, #128	@ 0x80
 8008e4e:	d008      	beq.n	8008e62 <USBD_StdEPReq+0xfe>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	88db      	ldrh	r3, [r3, #6]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f00d fb97 	bl	8016590 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fd43 	bl	80098ee <USBD_CtlSendStatus>

              break;
 8008e68:	e004      	b.n	8008e74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fc60 	bl	8009732 <USBD_CtlError>
              break;
 8008e72:	bf00      	nop
          }
          break;
 8008e74:	e109      	b.n	800908a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d002      	beq.n	8008e88 <USBD_StdEPReq+0x124>
 8008e82:	2b03      	cmp	r3, #3
 8008e84:	d016      	beq.n	8008eb4 <USBD_StdEPReq+0x150>
 8008e86:	e04b      	b.n	8008f20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00d      	beq.n	8008eaa <USBD_StdEPReq+0x146>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b80      	cmp	r3, #128	@ 0x80
 8008e92:	d00a      	beq.n	8008eaa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f00d fb79 	bl	8016590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e9e:	2180      	movs	r1, #128	@ 0x80
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f00d fb75 	bl	8016590 <USBD_LL_StallEP>
 8008ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ea8:	e040      	b.n	8008f2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fc40 	bl	8009732 <USBD_CtlError>
              break;
 8008eb2:	e03b      	b.n	8008f2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	885b      	ldrh	r3, [r3, #2]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d136      	bne.n	8008f2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d004      	beq.n	8008ed0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f00d fb7f 	bl	80165ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fd0c 	bl	80098ee <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fde3 	bl	8008aa6 <USBD_CoreFindEP>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ee4:	7b7b      	ldrb	r3, [r7, #13]
 8008ee6:	2bff      	cmp	r3, #255	@ 0xff
 8008ee8:	d01f      	beq.n	8008f2a <USBD_StdEPReq+0x1c6>
 8008eea:	7b7b      	ldrb	r3, [r7, #13]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d11c      	bne.n	8008f2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ef0:	7b7a      	ldrb	r2, [r7, #13]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008ef8:	7b7a      	ldrb	r2, [r7, #13]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32ae      	adds	r2, #174	@ 0xae
 8008efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d010      	beq.n	8008f2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f08:	7b7a      	ldrb	r2, [r7, #13]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	32ae      	adds	r2, #174	@ 0xae
 8008f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f1e:	e004      	b.n	8008f2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fc05 	bl	8009732 <USBD_CtlError>
              break;
 8008f28:	e000      	b.n	8008f2c <USBD_StdEPReq+0x1c8>
              break;
 8008f2a:	bf00      	nop
          }
          break;
 8008f2c:	e0ad      	b.n	800908a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d002      	beq.n	8008f40 <USBD_StdEPReq+0x1dc>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d033      	beq.n	8008fa6 <USBD_StdEPReq+0x242>
 8008f3e:	e099      	b.n	8009074 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <USBD_StdEPReq+0x1f2>
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b80      	cmp	r3, #128	@ 0x80
 8008f4a:	d004      	beq.n	8008f56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fbef 	bl	8009732 <USBD_CtlError>
                break;
 8008f54:	e093      	b.n	800907e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da0b      	bge.n	8008f76 <USBD_StdEPReq+0x212>
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f64:	4613      	mov	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	3310      	adds	r3, #16
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	3304      	adds	r3, #4
 8008f74:	e00b      	b.n	8008f8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	4413      	add	r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2200      	movs	r2, #0
 8008f94:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	330e      	adds	r3, #14
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc44 	bl	800982c <USBD_CtlSendData>
              break;
 8008fa4:	e06b      	b.n	800907e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	da11      	bge.n	8008fd2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	f003 020f 	and.w	r2, r3, #15
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3323      	adds	r3, #35	@ 0x23
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d117      	bne.n	8008ff8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fbb1 	bl	8009732 <USBD_CtlError>
                  break;
 8008fd0:	e055      	b.n	800907e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	f003 020f 	and.w	r2, r3, #15
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fb9e 	bl	8009732 <USBD_CtlError>
                  break;
 8008ff6:	e042      	b.n	800907e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da0b      	bge.n	8009018 <USBD_StdEPReq+0x2b4>
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	3310      	adds	r3, #16
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	4413      	add	r3, r2
 8009014:	3304      	adds	r3, #4
 8009016:	e00b      	b.n	8009030 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <USBD_StdEPReq+0x2da>
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b80      	cmp	r3, #128	@ 0x80
 800903c:	d103      	bne.n	8009046 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	739a      	strb	r2, [r3, #14]
 8009044:	e00e      	b.n	8009064 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009046:	7bbb      	ldrb	r3, [r7, #14]
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f00d fade 	bl	801660c <USBD_LL_IsStallEP>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2201      	movs	r2, #1
 800905a:	739a      	strb	r2, [r3, #14]
 800905c:	e002      	b.n	8009064 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2200      	movs	r2, #0
 8009062:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	330e      	adds	r3, #14
 8009068:	2202      	movs	r2, #2
 800906a:	4619      	mov	r1, r3
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fbdd 	bl	800982c <USBD_CtlSendData>
              break;
 8009072:	e004      	b.n	800907e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fb5b 	bl	8009732 <USBD_CtlError>
              break;
 800907c:	bf00      	nop
          }
          break;
 800907e:	e004      	b.n	800908a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb55 	bl	8009732 <USBD_CtlError>
          break;
 8009088:	bf00      	nop
      }
      break;
 800908a:	e005      	b.n	8009098 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fb4f 	bl	8009732 <USBD_CtlError>
      break;
 8009094:	e000      	b.n	8009098 <USBD_StdEPReq+0x334>
      break;
 8009096:	bf00      	nop
  }

  return ret;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	0a1b      	lsrs	r3, r3, #8
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	f200 8128 	bhi.w	800931a <USBD_GetDescriptor+0x276>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <USBD_GetDescriptor+0x2c>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	080090ed 	.word	0x080090ed
 80090d4:	08009105 	.word	0x08009105
 80090d8:	08009145 	.word	0x08009145
 80090dc:	0800931b 	.word	0x0800931b
 80090e0:	0800931b 	.word	0x0800931b
 80090e4:	080092bb 	.word	0x080092bb
 80090e8:	080092e7 	.word	0x080092e7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
      break;
 8009102:	e112      	b.n	800932a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10d      	bne.n	8009128 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009114:	f107 0208 	add.w	r2, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009126:	e100      	b.n	800932a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	f107 0208 	add.w	r2, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3301      	adds	r3, #1
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
      break;
 8009142:	e0f2      	b.n	800932a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b05      	cmp	r3, #5
 800914c:	f200 80ac 	bhi.w	80092a8 <USBD_GetDescriptor+0x204>
 8009150:	a201      	add	r2, pc, #4	@ (adr r2, 8009158 <USBD_GetDescriptor+0xb4>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009171 	.word	0x08009171
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091d9 	.word	0x080091d9
 8009164:	0800920d 	.word	0x0800920d
 8009168:	08009241 	.word	0x08009241
 800916c:	08009275 	.word	0x08009275
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009192:	e091      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 facb 	bl	8009732 <USBD_CtlError>
            err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
          break;
 80091a2:	e089      	b.n	80092b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7c12      	ldrb	r2, [r2, #16]
 80091bc:	f107 0108 	add.w	r1, r7, #8
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c6:	e077      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fab1 	bl	8009732 <USBD_CtlError>
            err++;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	3301      	adds	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
          break;
 80091d6:	e06f      	b.n	80092b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fa:	e05d      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa97 	bl	8009732 <USBD_CtlError>
            err++;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	3301      	adds	r3, #1
 8009208:	72fb      	strb	r3, [r7, #11]
          break;
 800920a:	e055      	b.n	80092b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e043      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa7d 	bl	8009732 <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e03b      	b.n	80092b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e029      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa63 	bl	8009732 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e021      	b.n	80092b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e00f      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa49 	bl	8009732 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e007      	b.n	80092b8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa41 	bl	8009732 <USBD_CtlError>
          err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80092b6:	bf00      	nop
      }
      break;
 80092b8:	e037      	b.n	800932a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7c1b      	ldrb	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ca:	f107 0208 	add.w	r2, r7, #8
 80092ce:	4610      	mov	r0, r2
 80092d0:	4798      	blx	r3
 80092d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092d4:	e029      	b.n	800932a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa2a 	bl	8009732 <USBD_CtlError>
        err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	e021      	b.n	800932a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f6:	f107 0208 	add.w	r2, r7, #8
 80092fa:	4610      	mov	r0, r2
 80092fc:	4798      	blx	r3
 80092fe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	2207      	movs	r2, #7
 8009306:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009308:	e00f      	b.n	800932a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fa10 	bl	8009732 <USBD_CtlError>
        err++;
 8009312:	7afb      	ldrb	r3, [r7, #11]
 8009314:	3301      	adds	r3, #1
 8009316:	72fb      	strb	r3, [r7, #11]
      break;
 8009318:	e007      	b.n	800932a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa08 	bl	8009732 <USBD_CtlError>
      err++;
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	3301      	adds	r3, #1
 8009326:	72fb      	strb	r3, [r7, #11]
      break;
 8009328:	bf00      	nop
  }

  if (err != 0U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11e      	bne.n	800936e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d016      	beq.n	8009366 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009338:	893b      	ldrh	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00e      	beq.n	800935c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88da      	ldrh	r2, [r3, #6]
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	4293      	cmp	r3, r2
 8009346:	bf28      	it	cs
 8009348:	4613      	movcs	r3, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800934e:	893b      	ldrh	r3, [r7, #8]
 8009350:	461a      	mov	r2, r3
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa69 	bl	800982c <USBD_CtlSendData>
 800935a:	e009      	b.n	8009370 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f9e7 	bl	8009732 <USBD_CtlError>
 8009364:	e004      	b.n	8009370 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fac1 	bl	80098ee <USBD_CtlSendStatus>
 800936c:	e000      	b.n	8009370 <USBD_GetDescriptor+0x2cc>
    return;
 800936e:	bf00      	nop
  }
}
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop

08009378 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	889b      	ldrh	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d131      	bne.n	80093ee <USBD_SetAddress+0x76>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d12d      	bne.n	80093ee <USBD_SetAddress+0x76>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	2b7f      	cmp	r3, #127	@ 0x7f
 8009398:	d829      	bhi.n	80093ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	885b      	ldrh	r3, [r3, #2]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d104      	bne.n	80093bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9bc 	bl	8009732 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ba:	e01d      	b.n	80093f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7bfa      	ldrb	r2, [r7, #15]
 80093c0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f00d f94b 	bl	8016664 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa8d 	bl	80098ee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	e009      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ec:	e004      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f99e 	bl	8009732 <USBD_CtlError>
  }
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	4b4e      	ldr	r3, [pc, #312]	@ (8009550 <USBD_SetConfig+0x150>)
 8009416:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009418:	4b4d      	ldr	r3, [pc, #308]	@ (8009550 <USBD_SetConfig+0x150>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d905      	bls.n	800942c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f985 	bl	8009732 <USBD_CtlError>
    return USBD_FAIL;
 8009428:	2303      	movs	r3, #3
 800942a:	e08c      	b.n	8009546 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d002      	beq.n	800943e <USBD_SetConfig+0x3e>
 8009438:	2b03      	cmp	r3, #3
 800943a:	d029      	beq.n	8009490 <USBD_SetConfig+0x90>
 800943c:	e075      	b.n	800952a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800943e:	4b44      	ldr	r3, [pc, #272]	@ (8009550 <USBD_SetConfig+0x150>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d020      	beq.n	8009488 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009446:	4b42      	ldr	r3, [pc, #264]	@ (8009550 <USBD_SetConfig+0x150>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009450:	4b3f      	ldr	r3, [pc, #252]	@ (8009550 <USBD_SetConfig+0x150>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7fe ffcd 	bl	80083f6 <USBD_SetClassConfig>
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d008      	beq.n	8009478 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f962 	bl	8009732 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009476:	e065      	b.n	8009544 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 fa38 	bl	80098ee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2203      	movs	r2, #3
 8009482:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009486:	e05d      	b.n	8009544 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fa30 	bl	80098ee <USBD_CtlSendStatus>
      break;
 800948e:	e059      	b.n	8009544 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009490:	4b2f      	ldr	r3, [pc, #188]	@ (8009550 <USBD_SetConfig+0x150>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d112      	bne.n	80094be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80094a0:	4b2b      	ldr	r3, [pc, #172]	@ (8009550 <USBD_SetConfig+0x150>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	461a      	mov	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094aa:	4b29      	ldr	r3, [pc, #164]	@ (8009550 <USBD_SetConfig+0x150>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7fe ffbc 	bl	800842e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa19 	bl	80098ee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094bc:	e042      	b.n	8009544 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80094be:	4b24      	ldr	r3, [pc, #144]	@ (8009550 <USBD_SetConfig+0x150>)
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d02a      	beq.n	8009522 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fe ffaa 	bl	800842e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094da:	4b1d      	ldr	r3, [pc, #116]	@ (8009550 <USBD_SetConfig+0x150>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009550 <USBD_SetConfig+0x150>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7fe ff83 	bl	80083f6 <USBD_SetClassConfig>
 80094f0:	4603      	mov	r3, r0
 80094f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00f      	beq.n	800951a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094fa:	6839      	ldr	r1, [r7, #0]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f918 	bl	8009732 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7fe ff8f 	bl	800842e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2202      	movs	r2, #2
 8009514:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009518:	e014      	b.n	8009544 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f9e7 	bl	80098ee <USBD_CtlSendStatus>
      break;
 8009520:	e010      	b.n	8009544 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f9e3 	bl	80098ee <USBD_CtlSendStatus>
      break;
 8009528:	e00c      	b.n	8009544 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f900 	bl	8009732 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009532:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <USBD_SetConfig+0x150>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fe ff78 	bl	800842e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800953e:	2303      	movs	r3, #3
 8009540:	73fb      	strb	r3, [r7, #15]
      break;
 8009542:	bf00      	nop
  }

  return ret;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	200051b0 	.word	0x200051b0

08009554 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	88db      	ldrh	r3, [r3, #6]
 8009562:	2b01      	cmp	r3, #1
 8009564:	d004      	beq.n	8009570 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009566:	6839      	ldr	r1, [r7, #0]
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f8e2 	bl	8009732 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800956e:	e023      	b.n	80095b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b02      	cmp	r3, #2
 800957a:	dc02      	bgt.n	8009582 <USBD_GetConfig+0x2e>
 800957c:	2b00      	cmp	r3, #0
 800957e:	dc03      	bgt.n	8009588 <USBD_GetConfig+0x34>
 8009580:	e015      	b.n	80095ae <USBD_GetConfig+0x5a>
 8009582:	2b03      	cmp	r3, #3
 8009584:	d00b      	beq.n	800959e <USBD_GetConfig+0x4a>
 8009586:	e012      	b.n	80095ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3308      	adds	r3, #8
 8009592:	2201      	movs	r2, #1
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f948 	bl	800982c <USBD_CtlSendData>
        break;
 800959c:	e00c      	b.n	80095b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3304      	adds	r3, #4
 80095a2:	2201      	movs	r2, #1
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f940 	bl	800982c <USBD_CtlSendData>
        break;
 80095ac:	e004      	b.n	80095b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f8be 	bl	8009732 <USBD_CtlError>
        break;
 80095b6:	bf00      	nop
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d81e      	bhi.n	8009616 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	88db      	ldrh	r3, [r3, #6]
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d004      	beq.n	80095ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f8a5 	bl	8009732 <USBD_CtlError>
        break;
 80095e8:	e01a      	b.n	8009620 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2201      	movs	r2, #1
 80095ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f043 0202 	orr.w	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	330c      	adds	r3, #12
 800960a:	2202      	movs	r2, #2
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f90c 	bl	800982c <USBD_CtlSendData>
      break;
 8009614:	e004      	b.n	8009620 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f88a 	bl	8009732 <USBD_CtlError>
      break;
 800961e:	bf00      	nop
  }
}
 8009620:	bf00      	nop
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	885b      	ldrh	r3, [r3, #2]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d107      	bne.n	800964a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f953 	bl	80098ee <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009648:	e013      	b.n	8009672 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	885b      	ldrh	r3, [r3, #2]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d10b      	bne.n	800966a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	889b      	ldrh	r3, [r3, #4]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b29b      	uxth	r3, r3
 800965a:	b2da      	uxtb	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f943 	bl	80098ee <USBD_CtlSendStatus>
}
 8009668:	e003      	b.n	8009672 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f860 	bl	8009732 <USBD_CtlError>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800968a:	b2db      	uxtb	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	2b02      	cmp	r3, #2
 8009690:	d80b      	bhi.n	80096aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	2b01      	cmp	r3, #1
 8009698:	d10c      	bne.n	80096b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f923 	bl	80098ee <USBD_CtlSendStatus>
      }
      break;
 80096a8:	e004      	b.n	80096b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f840 	bl	8009732 <USBD_CtlError>
      break;
 80096b2:	e000      	b.n	80096b6 <USBD_ClrFeature+0x3c>
      break;
 80096b4:	bf00      	nop
  }
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	3301      	adds	r3, #1
 80096d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	781a      	ldrb	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f7ff fa3d 	bl	8008b68 <SWAPBYTE>
 80096ee:	4603      	mov	r3, r0
 80096f0:	461a      	mov	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	3301      	adds	r3, #1
 80096fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fa30 	bl	8008b68 <SWAPBYTE>
 8009708:	4603      	mov	r3, r0
 800970a:	461a      	mov	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	3301      	adds	r3, #1
 8009714:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3301      	adds	r3, #1
 800971a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f7ff fa23 	bl	8008b68 <SWAPBYTE>
 8009722:	4603      	mov	r3, r0
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	80da      	strh	r2, [r3, #6]
}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800973c:	2180      	movs	r1, #128	@ 0x80
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f00c ff26 	bl	8016590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009744:	2100      	movs	r1, #0
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f00c ff22 	bl	8016590 <USBD_LL_StallEP>
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d042      	beq.n	80097f0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f000 f842 	bl	80097f8 <USBD_GetLen>
 8009774:	4603      	mov	r3, r0
 8009776:	3301      	adds	r3, #1
 8009778:	005b      	lsls	r3, r3, #1
 800977a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800977e:	d808      	bhi.n	8009792 <USBD_GetString+0x3e>
 8009780:	6938      	ldr	r0, [r7, #16]
 8009782:	f000 f839 	bl	80097f8 <USBD_GetLen>
 8009786:	4603      	mov	r3, r0
 8009788:	3301      	adds	r3, #1
 800978a:	b29b      	uxth	r3, r3
 800978c:	005b      	lsls	r3, r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	e001      	b.n	8009796 <USBD_GetString+0x42>
 8009792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	68ba      	ldr	r2, [r7, #8]
 800979e:	4413      	add	r3, r2
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	3301      	adds	r3, #1
 80097aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097ac:	7dfb      	ldrb	r3, [r7, #23]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	2203      	movs	r2, #3
 80097b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	3301      	adds	r3, #1
 80097ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097bc:	e013      	b.n	80097e6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	4413      	add	r3, r2
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	7812      	ldrb	r2, [r2, #0]
 80097c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	3301      	adds	r3, #1
 80097ce:	613b      	str	r3, [r7, #16]
    idx++;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	3301      	adds	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	4413      	add	r3, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
    idx++;
 80097e0:	7dfb      	ldrb	r3, [r7, #23]
 80097e2:	3301      	adds	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e7      	bne.n	80097be <USBD_GetString+0x6a>
 80097ee:	e000      	b.n	80097f2 <USBD_GetString+0x9e>
    return;
 80097f0:	bf00      	nop
  }
}
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b085      	sub	sp, #20
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009808:	e005      	b.n	8009816 <USBD_GetLen+0x1e>
  {
    len++;
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	3301      	adds	r3, #1
 800980e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3301      	adds	r3, #1
 8009814:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f5      	bne.n	800980a <USBD_GetLen+0x12>
  }

  return len;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2202      	movs	r2, #2
 800983c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	2100      	movs	r1, #0
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f00c ff22 	bl	80166a2 <USBD_LL_Transmit>

  return USBD_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	2100      	movs	r1, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f00c ff11 	bl	80166a2 <USBD_LL_Transmit>

  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2203      	movs	r2, #3
 800989a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f00c ff11 	bl	80166e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	2100      	movs	r1, #0
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f00c ff00 	bl	80166e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2204      	movs	r2, #4
 80098fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098fe:	2300      	movs	r3, #0
 8009900:	2200      	movs	r2, #0
 8009902:	2100      	movs	r1, #0
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f00c fecc 	bl	80166a2 <USBD_LL_Transmit>

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2205      	movs	r2, #5
 8009920:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009924:	2300      	movs	r3, #0
 8009926:	2200      	movs	r2, #0
 8009928:	2100      	movs	r1, #0
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f00c feda 	bl	80166e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800993a:	b480      	push	{r7}
 800993c:	b085      	sub	sp, #20
 800993e:	af00      	add	r7, sp, #0
 8009940:	4603      	mov	r3, r0
 8009942:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009944:	2300      	movs	r3, #0
 8009946:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800994c:	2b84      	cmp	r3, #132	@ 0x84
 800994e:	d005      	beq.n	800995c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009950:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4413      	add	r3, r2
 8009958:	3303      	adds	r3, #3
 800995a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800995c:	68fb      	ldr	r3, [r7, #12]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009970:	f3ef 8305 	mrs	r3, IPSR
 8009974:	607b      	str	r3, [r7, #4]
  return(result);
 8009976:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009978:	2b00      	cmp	r3, #0
 800997a:	bf14      	ite	ne
 800997c:	2301      	movne	r3, #1
 800997e:	2300      	moveq	r3, #0
 8009980:	b2db      	uxtb	r3, r3
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009992:	f001 fc95 	bl	800b2c0 <vTaskStartScheduler>
  
  return osOK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	bd80      	pop	{r7, pc}

0800999c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80099a0:	f7ff ffe3 	bl	800996a <inHandlerMode>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80099aa:	f001 fdaf 	bl	800b50c <xTaskGetTickCountFromISR>
 80099ae:	4603      	mov	r3, r0
 80099b0:	e002      	b.n	80099b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80099b2:	f001 fd9b 	bl	800b4ec <xTaskGetTickCount>
 80099b6:	4603      	mov	r3, r0
  }
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	bd80      	pop	{r7, pc}

080099bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099be:	b089      	sub	sp, #36	@ 0x24
 80099c0:	af04      	add	r7, sp, #16
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d020      	beq.n	8009a10 <osThreadCreate+0x54>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01c      	beq.n	8009a10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	685c      	ldr	r4, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	691e      	ldr	r6, [r3, #16]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff ffa6 	bl	800993a <makeFreeRtosPriority>
 80099ee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	695b      	ldr	r3, [r3, #20]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099f8:	9202      	str	r2, [sp, #8]
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	9100      	str	r1, [sp, #0]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	4632      	mov	r2, r6
 8009a02:	4629      	mov	r1, r5
 8009a04:	4620      	mov	r0, r4
 8009a06:	f001 fa75 	bl	800aef4 <xTaskCreateStatic>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	e01c      	b.n	8009a4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685c      	ldr	r4, [r3, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a1c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff ff88 	bl	800993a <makeFreeRtosPriority>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	f107 030c 	add.w	r3, r7, #12
 8009a30:	9301      	str	r3, [sp, #4]
 8009a32:	9200      	str	r2, [sp, #0]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	4632      	mov	r2, r6
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f001 faba 	bl	800afb4 <xTaskCreate>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d001      	beq.n	8009a4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e000      	b.n	8009a4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <osDelay+0x16>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	e000      	b.n	8009a6c <osDelay+0x18>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f001 fbf1 	bl	800b254 <vTaskDelay>
  
  return osOK;
 8009a72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d007      	beq.n	8009a9c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4619      	mov	r1, r3
 8009a92:	2001      	movs	r0, #1
 8009a94:	f000 fc47 	bl	800a326 <xQueueCreateMutexStatic>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	e003      	b.n	8009aa4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	f000 fc2a 	bl	800a2f6 <xQueueCreateMutex>
 8009aa2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <osMutexWait+0x18>
    return osErrorParameter;
 8009ac0:	2380      	movs	r3, #128	@ 0x80
 8009ac2:	e03a      	b.n	8009b3a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ace:	d103      	bne.n	8009ad8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	e009      	b.n	8009aec <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d006      	beq.n	8009aec <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <osMutexWait+0x40>
      ticks = 1;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009aec:	f7ff ff3d 	bl	800996a <inHandlerMode>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d017      	beq.n	8009b26 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	461a      	mov	r2, r3
 8009afc:	2100      	movs	r1, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 f84e 	bl	800aba0 <xQueueReceiveFromISR>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d001      	beq.n	8009b0e <osMutexWait+0x62>
      return osErrorOS;
 8009b0a:	23ff      	movs	r3, #255	@ 0xff
 8009b0c:	e015      	b.n	8009b3a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d011      	beq.n	8009b38 <osMutexWait+0x8c>
 8009b14:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <osMutexWait+0x98>)
 8009b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b1a:	601a      	str	r2, [r3, #0]
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	e008      	b.n	8009b38 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009b26:	68f9      	ldr	r1, [r7, #12]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 ff29 	bl	800a980 <xQueueSemaphoreTake>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d001      	beq.n	8009b38 <osMutexWait+0x8c>
    return osErrorOS;
 8009b34:	23ff      	movs	r3, #255	@ 0xff
 8009b36:	e000      	b.n	8009b3a <osMutexWait+0x8e>
  }
  
  return osOK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009b58:	f7ff ff07 	bl	800996a <inHandlerMode>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d016      	beq.n	8009b90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b62:	f107 0308 	add.w	r3, r7, #8
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 fd97 	bl	800a69c <xQueueGiveFromISR>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d001      	beq.n	8009b78 <osMutexRelease+0x30>
      return osErrorOS;
 8009b74:	23ff      	movs	r3, #255	@ 0xff
 8009b76:	e017      	b.n	8009ba8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d013      	beq.n	8009ba6 <osMutexRelease+0x5e>
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bb0 <osMutexRelease+0x68>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	e00a      	b.n	8009ba6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009b90:	2300      	movs	r3, #0
 8009b92:	2200      	movs	r2, #0
 8009b94:	2100      	movs	r1, #0
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fbe0 	bl	800a35c <xQueueGenericSend>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d001      	beq.n	8009ba6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009ba2:	23ff      	movs	r3, #255	@ 0xff
 8009ba4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00f      	beq.n	8009be6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d10a      	bne.n	8009be2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	2203      	movs	r2, #3
 8009bd2:	9200      	str	r2, [sp, #0]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f000 fa9b 	bl	800a114 <xQueueGenericCreateStatic>
 8009bde:	4603      	mov	r3, r0
 8009be0:	e016      	b.n	8009c10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e014      	b.n	8009c10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d110      	bne.n	8009c0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009bec:	2203      	movs	r2, #3
 8009bee:	2100      	movs	r1, #0
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	f000 fb0c 	bl	800a20e <xQueueGenericCreate>
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <osSemaphoreCreate+0x56>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	2200      	movs	r2, #0
 8009c02:	2100      	movs	r1, #0
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 fba9 	bl	800a35c <xQueueGenericSend>
      return sema;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	e000      	b.n	8009c10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009c2c:	2380      	movs	r3, #128	@ 0x80
 8009c2e:	e03a      	b.n	8009ca6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d103      	bne.n	8009c44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	e009      	b.n	8009c58 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <osSemaphoreWait+0x40>
      ticks = 1;
 8009c54:	2301      	movs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009c58:	f7ff fe87 	bl	800996a <inHandlerMode>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d017      	beq.n	8009c92 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009c62:	f107 0308 	add.w	r3, r7, #8
 8009c66:	461a      	mov	r2, r3
 8009c68:	2100      	movs	r1, #0
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 ff98 	bl	800aba0 <xQueueReceiveFromISR>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d001      	beq.n	8009c7a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009c76:	23ff      	movs	r3, #255	@ 0xff
 8009c78:	e015      	b.n	8009ca6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d011      	beq.n	8009ca4 <osSemaphoreWait+0x8c>
 8009c80:	4b0b      	ldr	r3, [pc, #44]	@ (8009cb0 <osSemaphoreWait+0x98>)
 8009c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	f3bf 8f4f 	dsb	sy
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	e008      	b.n	8009ca4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009c92:	68f9      	ldr	r1, [r7, #12]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fe73 	bl	800a980 <xQueueSemaphoreTake>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d001      	beq.n	8009ca4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009ca0:	23ff      	movs	r3, #255	@ 0xff
 8009ca2:	e000      	b.n	8009ca6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	e000ed04 	.word	0xe000ed04

08009cb4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009cc4:	f7ff fe51 	bl	800996a <inHandlerMode>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d016      	beq.n	8009cfc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fce1 	bl	800a69c <xQueueGiveFromISR>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d001      	beq.n	8009ce4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009ce0:	23ff      	movs	r3, #255	@ 0xff
 8009ce2:	e017      	b.n	8009d14 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d013      	beq.n	8009d12 <osSemaphoreRelease+0x5e>
 8009cea:	4b0c      	ldr	r3, [pc, #48]	@ (8009d1c <osSemaphoreRelease+0x68>)
 8009cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	e00a      	b.n	8009d12 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fb2a 	bl	800a35c <xQueueGenericSend>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d001      	beq.n	8009d12 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009d0e:	23ff      	movs	r3, #255	@ 0xff
 8009d10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009d12:	68fb      	ldr	r3, [r7, #12]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	e000ed04 	.word	0xe000ed04

08009d20 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af02      	add	r7, sp, #8
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d011      	beq.n	8009d56 <osMessageCreate+0x36>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00d      	beq.n	8009d56 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6859      	ldr	r1, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	2400      	movs	r4, #0
 8009d4c:	9400      	str	r4, [sp, #0]
 8009d4e:	f000 f9e1 	bl	800a114 <xQueueGenericCreateStatic>
 8009d52:	4603      	mov	r3, r0
 8009d54:	e008      	b.n	8009d68 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4619      	mov	r1, r3
 8009d62:	f000 fa54 	bl	800a20e <xQueueGenericCreate>
 8009d66:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd90      	pop	{r4, r7, pc}

08009d70 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <osMessagePut+0x1e>
    ticks = 1;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009d8e:	f7ff fdec 	bl	800996a <inHandlerMode>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d018      	beq.n	8009dca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009d98:	f107 0210 	add.w	r2, r7, #16
 8009d9c:	f107 0108 	add.w	r1, r7, #8
 8009da0:	2300      	movs	r3, #0
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fbdc 	bl	800a560 <xQueueGenericSendFromISR>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d001      	beq.n	8009db2 <osMessagePut+0x42>
      return osErrorOS;
 8009dae:	23ff      	movs	r3, #255	@ 0xff
 8009db0:	e018      	b.n	8009de4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d014      	beq.n	8009de2 <osMessagePut+0x72>
 8009db8:	4b0c      	ldr	r3, [pc, #48]	@ (8009dec <osMessagePut+0x7c>)
 8009dba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dbe:	601a      	str	r2, [r3, #0]
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	e00b      	b.n	8009de2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009dca:	f107 0108 	add.w	r1, r7, #8
 8009dce:	2300      	movs	r3, #0
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 fac2 	bl	800a35c <xQueueGenericSend>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d001      	beq.n	8009de2 <osMessagePut+0x72>
      return osErrorOS;
 8009dde:	23ff      	movs	r3, #255	@ 0xff
 8009de0:	e000      	b.n	8009de4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b08b      	sub	sp, #44	@ 0x2c
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10a      	bne.n	8009e20 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009e0a:	2380      	movs	r3, #128	@ 0x80
 8009e0c:	617b      	str	r3, [r7, #20]
    return event;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	461c      	mov	r4, r3
 8009e12:	f107 0314 	add.w	r3, r7, #20
 8009e16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e1e:	e054      	b.n	8009eca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009e20:	2300      	movs	r3, #0
 8009e22:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e2e:	d103      	bne.n	8009e38 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009e30:	f04f 33ff 	mov.w	r3, #4294967295
 8009e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e36:	e009      	b.n	8009e4c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d006      	beq.n	8009e4c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <osMessageGet+0x5c>
      ticks = 1;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009e4c:	f7ff fd8d 	bl	800996a <inHandlerMode>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d01c      	beq.n	8009e90 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009e56:	f107 0220 	add.w	r2, r7, #32
 8009e5a:	f107 0314 	add.w	r3, r7, #20
 8009e5e:	3304      	adds	r3, #4
 8009e60:	4619      	mov	r1, r3
 8009e62:	68b8      	ldr	r0, [r7, #8]
 8009e64:	f000 fe9c 	bl	800aba0 <xQueueReceiveFromISR>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d102      	bne.n	8009e74 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009e6e:	2310      	movs	r3, #16
 8009e70:	617b      	str	r3, [r7, #20]
 8009e72:	e001      	b.n	8009e78 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d01d      	beq.n	8009eba <osMessageGet+0xca>
 8009e7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <osMessageGet+0xe4>)
 8009e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	e014      	b.n	8009eba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	3304      	adds	r3, #4
 8009e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e98:	4619      	mov	r1, r3
 8009e9a:	68b8      	ldr	r0, [r7, #8]
 8009e9c:	f000 fc8e 	bl	800a7bc <xQueueReceive>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d102      	bne.n	8009eac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009ea6:	2310      	movs	r3, #16
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e006      	b.n	8009eba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <osMessageGet+0xc6>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	e000      	b.n	8009eb8 <osMessageGet+0xc8>
 8009eb6:	2340      	movs	r3, #64	@ 0x40
 8009eb8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	461c      	mov	r4, r3
 8009ebe:	f107 0314 	add.w	r3, r7, #20
 8009ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	372c      	adds	r7, #44	@ 0x2c
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f103 0208 	add.w	r2, r3, #8
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f103 0208 	add.w	r2, r3, #8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f103 0208 	add.w	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f32:	b480      	push	{r7}
 8009f34:	b085      	sub	sp, #20
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689a      	ldr	r2, [r3, #8]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	683a      	ldr	r2, [r7, #0]
 8009f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	601a      	str	r2, [r3, #0]
}
 8009f6e:	bf00      	nop
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b085      	sub	sp, #20
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d103      	bne.n	8009f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e00c      	b.n	8009fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3308      	adds	r3, #8
 8009f9e:	60fb      	str	r3, [r7, #12]
 8009fa0:	e002      	b.n	8009fa8 <vListInsert+0x2e>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d2f6      	bcs.n	8009fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	601a      	str	r2, [r3, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6892      	ldr	r2, [r2, #8]
 800a002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	6852      	ldr	r2, [r2, #4]
 800a00c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	429a      	cmp	r2, r3
 800a016:	d103      	bne.n	800a020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	1e5a      	subs	r2, r3, #1
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10b      	bne.n	800a06c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a06c:	f002 f8c4 	bl	800c1f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a078:	68f9      	ldr	r1, [r7, #12]
 800a07a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a07c:	fb01 f303 	mul.w	r3, r1, r3
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09c:	3b01      	subs	r3, #1
 800a09e:	68f9      	ldr	r1, [r7, #12]
 800a0a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a0a2:	fb01 f303 	mul.w	r3, r1, r3
 800a0a6:	441a      	add	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	22ff      	movs	r2, #255	@ 0xff
 800a0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	22ff      	movs	r2, #255	@ 0xff
 800a0b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d114      	bne.n	800a0ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d01a      	beq.n	800a100 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3310      	adds	r3, #16
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f001 fb72 	bl	800b7b8 <xTaskRemoveFromEventList>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d012      	beq.n	800a100 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0da:	4b0d      	ldr	r3, [pc, #52]	@ (800a110 <xQueueGenericReset+0xd0>)
 800a0dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	e009      	b.n	800a100 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3310      	adds	r3, #16
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fef1 	bl	8009ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3324      	adds	r3, #36	@ 0x24
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7ff feec 	bl	8009ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a100:	f002 f8ac 	bl	800c25c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a104:	2301      	movs	r3, #1
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	e000ed04 	.word	0xe000ed04

0800a114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a114:	b580      	push	{r7, lr}
 800a116:	b08e      	sub	sp, #56	@ 0x38
 800a118:	af02      	add	r7, sp, #8
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10b      	bne.n	800a140 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a13a:	bf00      	nop
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10b      	bne.n	800a15e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14a:	f383 8811 	msr	BASEPRI, r3
 800a14e:	f3bf 8f6f 	isb	sy
 800a152:	f3bf 8f4f 	dsb	sy
 800a156:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	e7fd      	b.n	800a15a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <xQueueGenericCreateStatic+0x56>
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <xQueueGenericCreateStatic+0x5a>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e000      	b.n	800a170 <xQueueGenericCreateStatic+0x5c>
 800a16e:	2300      	movs	r3, #0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10b      	bne.n	800a18c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	623b      	str	r3, [r7, #32]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <xQueueGenericCreateStatic+0x84>
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d101      	bne.n	800a19c <xQueueGenericCreateStatic+0x88>
 800a198:	2301      	movs	r3, #1
 800a19a:	e000      	b.n	800a19e <xQueueGenericCreateStatic+0x8a>
 800a19c:	2300      	movs	r3, #0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10b      	bne.n	800a1ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	61fb      	str	r3, [r7, #28]
}
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
 800a1b8:	e7fd      	b.n	800a1b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1ba:	2348      	movs	r3, #72	@ 0x48
 800a1bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b48      	cmp	r3, #72	@ 0x48
 800a1c2:	d00b      	beq.n	800a1dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	61bb      	str	r3, [r7, #24]
}
 800a1d6:	bf00      	nop
 800a1d8:	bf00      	nop
 800a1da:	e7fd      	b.n	800a1d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00d      	beq.n	800a204 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	68b9      	ldr	r1, [r7, #8]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 f840 	bl	800a284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a206:	4618      	mov	r0, r3
 800a208:	3730      	adds	r7, #48	@ 0x30
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b08a      	sub	sp, #40	@ 0x28
 800a212:	af02      	add	r7, sp, #8
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	4613      	mov	r3, r2
 800a21a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <xQueueGenericCreate+0x2c>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	613b      	str	r3, [r7, #16]
}
 800a234:	bf00      	nop
 800a236:	bf00      	nop
 800a238:	e7fd      	b.n	800a236 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	fb02 f303 	mul.w	r3, r2, r3
 800a242:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3348      	adds	r3, #72	@ 0x48
 800a248:	4618      	mov	r0, r3
 800a24a:	f002 f8f7 	bl	800c43c <pvPortMalloc>
 800a24e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d011      	beq.n	800a27a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	3348      	adds	r3, #72	@ 0x48
 800a25e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a268:	79fa      	ldrb	r2, [r7, #7]
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	4613      	mov	r3, r2
 800a270:	697a      	ldr	r2, [r7, #20]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f000 f805 	bl	800a284 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a27a:	69bb      	ldr	r3, [r7, #24]
	}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
 800a290:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	e002      	b.n	800a2a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	69b8      	ldr	r0, [r7, #24]
 800a2b6:	f7ff fec3 	bl	800a040 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00e      	beq.n	800a2ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f837 	bl	800a35c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b086      	sub	sp, #24
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a300:	2301      	movs	r3, #1
 800a302:	617b      	str	r3, [r7, #20]
 800a304:	2300      	movs	r3, #0
 800a306:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	461a      	mov	r2, r3
 800a30c:	6939      	ldr	r1, [r7, #16]
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f7ff ff7d 	bl	800a20e <xQueueGenericCreate>
 800a314:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff ffd3 	bl	800a2c2 <prvInitialiseMutex>

		return xNewQueue;
 800a31c:	68fb      	ldr	r3, [r7, #12]
	}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af02      	add	r7, sp, #8
 800a32c:	4603      	mov	r3, r0
 800a32e:	6039      	str	r1, [r7, #0]
 800a330:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a332:	2301      	movs	r3, #1
 800a334:	617b      	str	r3, [r7, #20]
 800a336:	2300      	movs	r3, #0
 800a338:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2200      	movs	r2, #0
 800a342:	6939      	ldr	r1, [r7, #16]
 800a344:	6978      	ldr	r0, [r7, #20]
 800a346:	f7ff fee5 	bl	800a114 <xQueueGenericCreateStatic>
 800a34a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f7ff ffb8 	bl	800a2c2 <prvInitialiseMutex>

		return xNewQueue;
 800a352:	68fb      	ldr	r3, [r7, #12]
	}
 800a354:	4618      	mov	r0, r3
 800a356:	3718      	adds	r7, #24
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	@ 0x38
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a36a:	2300      	movs	r3, #0
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10b      	bne.n	800a390 <xQueueGenericSend+0x34>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	e7fd      	b.n	800a38c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d103      	bne.n	800a39e <xQueueGenericSend+0x42>
 800a396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <xQueueGenericSend+0x46>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e000      	b.n	800a3a4 <xQueueGenericSend+0x48>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10b      	bne.n	800a3c0 <xQueueGenericSend+0x64>
	__asm volatile
 800a3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3ba:	bf00      	nop
 800a3bc:	bf00      	nop
 800a3be:	e7fd      	b.n	800a3bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d103      	bne.n	800a3ce <xQueueGenericSend+0x72>
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <xQueueGenericSend+0x76>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <xQueueGenericSend+0x78>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10b      	bne.n	800a3f0 <xQueueGenericSend+0x94>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	623b      	str	r3, [r7, #32]
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	e7fd      	b.n	800a3ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3f0:	f001 fba8 	bl	800bb44 <xTaskGetSchedulerState>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d102      	bne.n	800a400 <xQueueGenericSend+0xa4>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <xQueueGenericSend+0xa8>
 800a400:	2301      	movs	r3, #1
 800a402:	e000      	b.n	800a406 <xQueueGenericSend+0xaa>
 800a404:	2300      	movs	r3, #0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10b      	bne.n	800a422 <xQueueGenericSend+0xc6>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	61fb      	str	r3, [r7, #28]
}
 800a41c:	bf00      	nop
 800a41e:	bf00      	nop
 800a420:	e7fd      	b.n	800a41e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a422:	f001 fee9 	bl	800c1f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42e:	429a      	cmp	r2, r3
 800a430:	d302      	bcc.n	800a438 <xQueueGenericSend+0xdc>
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	2b02      	cmp	r3, #2
 800a436:	d129      	bne.n	800a48c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	68b9      	ldr	r1, [r7, #8]
 800a43c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a43e:	f000 fc49 	bl	800acd4 <prvCopyDataToQueue>
 800a442:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a44c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44e:	3324      	adds	r3, #36	@ 0x24
 800a450:	4618      	mov	r0, r3
 800a452:	f001 f9b1 	bl	800b7b8 <xTaskRemoveFromEventList>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d013      	beq.n	800a484 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a45c:	4b3f      	ldr	r3, [pc, #252]	@ (800a55c <xQueueGenericSend+0x200>)
 800a45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	e00a      	b.n	800a484 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a470:	2b00      	cmp	r3, #0
 800a472:	d007      	beq.n	800a484 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a474:	4b39      	ldr	r3, [pc, #228]	@ (800a55c <xQueueGenericSend+0x200>)
 800a476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a484:	f001 feea 	bl	800c25c <vPortExitCritical>
				return pdPASS;
 800a488:	2301      	movs	r3, #1
 800a48a:	e063      	b.n	800a554 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d103      	bne.n	800a49a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a492:	f001 fee3 	bl	800c25c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a496:	2300      	movs	r3, #0
 800a498:	e05c      	b.n	800a554 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a4a0:	f107 0314 	add.w	r3, r7, #20
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f001 f9eb 	bl	800b880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4ae:	f001 fed5 	bl	800c25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4b2:	f000 ff6f 	bl	800b394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4b6:	f001 fe9f 	bl	800c1f8 <vPortEnterCritical>
 800a4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4c0:	b25b      	sxtb	r3, r3
 800a4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4c6:	d103      	bne.n	800a4d0 <xQueueGenericSend+0x174>
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4dc:	d103      	bne.n	800a4e6 <xQueueGenericSend+0x18a>
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4e6:	f001 feb9 	bl	800c25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4ea:	1d3a      	adds	r2, r7, #4
 800a4ec:	f107 0314 	add.w	r3, r7, #20
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f001 f9da 	bl	800b8ac <xTaskCheckForTimeOut>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d124      	bne.n	800a548 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a500:	f000 fce0 	bl	800aec4 <prvIsQueueFull>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d018      	beq.n	800a53c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	3310      	adds	r3, #16
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	4611      	mov	r1, r2
 800a512:	4618      	mov	r0, r3
 800a514:	f001 f92a 	bl	800b76c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a51a:	f000 fc6b 	bl	800adf4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a51e:	f000 ff47 	bl	800b3b0 <xTaskResumeAll>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f af7c 	bne.w	800a422 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a52a:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <xQueueGenericSend+0x200>)
 800a52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	e772      	b.n	800a422 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a53c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53e:	f000 fc59 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a542:	f000 ff35 	bl	800b3b0 <xTaskResumeAll>
 800a546:	e76c      	b.n	800a422 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a54a:	f000 fc53 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a54e:	f000 ff2f 	bl	800b3b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a554:	4618      	mov	r0, r3
 800a556:	3738      	adds	r7, #56	@ 0x38
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	e000ed04 	.word	0xe000ed04

0800a560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b090      	sub	sp, #64	@ 0x40
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <xQueueGenericSendFromISR+0x3e>
 800a596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <xQueueGenericSendFromISR+0x42>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e000      	b.n	800a5a4 <xQueueGenericSendFromISR+0x44>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d103      	bne.n	800a5ce <xQueueGenericSendFromISR+0x6e>
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d101      	bne.n	800a5d2 <xQueueGenericSendFromISR+0x72>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <xQueueGenericSendFromISR+0x74>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10b      	bne.n	800a5f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	623b      	str	r3, [r7, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5f0:	f001 fee2 	bl	800c3b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5f4:	f3ef 8211 	mrs	r2, BASEPRI
 800a5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61fa      	str	r2, [r7, #28]
 800a60a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a60c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a60e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	429a      	cmp	r2, r3
 800a61a:	d302      	bcc.n	800a622 <xQueueGenericSendFromISR+0xc2>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d12f      	bne.n	800a682 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	68b9      	ldr	r1, [r7, #8]
 800a636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a638:	f000 fb4c 	bl	800acd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a63c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a644:	d112      	bne.n	800a66c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d016      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a650:	3324      	adds	r3, #36	@ 0x24
 800a652:	4618      	mov	r0, r3
 800a654:	f001 f8b0 	bl	800b7b8 <xTaskRemoveFromEventList>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00e      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2201      	movs	r2, #1
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e007      	b.n	800a67c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a66c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a670:	3301      	adds	r3, #1
 800a672:	b2db      	uxtb	r3, r3
 800a674:	b25a      	sxtb	r2, r3
 800a676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a67c:	2301      	movs	r3, #1
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a680:	e001      	b.n	800a686 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a682:	2300      	movs	r3, #0
 800a684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a688:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a694:	4618      	mov	r0, r3
 800a696:	3740      	adds	r7, #64	@ 0x40
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08e      	sub	sp, #56	@ 0x38
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10b      	bne.n	800a6c8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	623b      	str	r3, [r7, #32]
}
 800a6c2:	bf00      	nop
 800a6c4:	bf00      	nop
 800a6c6:	e7fd      	b.n	800a6c4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	61fb      	str	r3, [r7, #28]
}
 800a6e2:	bf00      	nop
 800a6e4:	bf00      	nop
 800a6e6:	e7fd      	b.n	800a6e4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d103      	bne.n	800a6f8 <xQueueGiveFromISR+0x5c>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <xQueueGiveFromISR+0x60>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e000      	b.n	800a6fe <xQueueGiveFromISR+0x62>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	61bb      	str	r3, [r7, #24]
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	e7fd      	b.n	800a716 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a71a:	f001 fe4d 	bl	800c3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800a71e:	f3ef 8211 	mrs	r2, BASEPRI
 800a722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	617a      	str	r2, [r7, #20]
 800a734:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a736:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a738:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a746:	429a      	cmp	r2, r3
 800a748:	d22b      	bcs.n	800a7a2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a75c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d112      	bne.n	800a78c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d016      	beq.n	800a79c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a770:	3324      	adds	r3, #36	@ 0x24
 800a772:	4618      	mov	r0, r3
 800a774:	f001 f820 	bl	800b7b8 <xTaskRemoveFromEventList>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00e      	beq.n	800a79c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00b      	beq.n	800a79c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2201      	movs	r2, #1
 800a788:	601a      	str	r2, [r3, #0]
 800a78a:	e007      	b.n	800a79c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a78c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a790:	3301      	adds	r3, #1
 800a792:	b2db      	uxtb	r3, r3
 800a794:	b25a      	sxtb	r2, r3
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a79c:	2301      	movs	r3, #1
 800a79e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a0:	e001      	b.n	800a7a6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f383 8811 	msr	BASEPRI, r3
}
 800a7b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3738      	adds	r7, #56	@ 0x38
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b08c      	sub	sp, #48	@ 0x30
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10b      	bne.n	800a7ee <xQueueReceive+0x32>
	__asm volatile
 800a7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7da:	f383 8811 	msr	BASEPRI, r3
 800a7de:	f3bf 8f6f 	isb	sy
 800a7e2:	f3bf 8f4f 	dsb	sy
 800a7e6:	623b      	str	r3, [r7, #32]
}
 800a7e8:	bf00      	nop
 800a7ea:	bf00      	nop
 800a7ec:	e7fd      	b.n	800a7ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d103      	bne.n	800a7fc <xQueueReceive+0x40>
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <xQueueReceive+0x44>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e000      	b.n	800a802 <xQueueReceive+0x46>
 800a800:	2300      	movs	r3, #0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <xQueueReceive+0x62>
	__asm volatile
 800a806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	61fb      	str	r3, [r7, #28]
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	e7fd      	b.n	800a81a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a81e:	f001 f991 	bl	800bb44 <xTaskGetSchedulerState>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <xQueueReceive+0x72>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <xQueueReceive+0x76>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <xQueueReceive+0x78>
 800a832:	2300      	movs	r3, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <xQueueReceive+0x94>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	61bb      	str	r3, [r7, #24]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a850:	f001 fcd2 	bl	800c1f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a858:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01f      	beq.n	800a8a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a864:	f000 faa0 	bl	800ada8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86a:	1e5a      	subs	r2, r3, #1
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a872:	691b      	ldr	r3, [r3, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00f      	beq.n	800a898 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	3310      	adds	r3, #16
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 ff9b 	bl	800b7b8 <xTaskRemoveFromEventList>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d007      	beq.n	800a898 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a888:	4b3c      	ldr	r3, [pc, #240]	@ (800a97c <xQueueReceive+0x1c0>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a898:	f001 fce0 	bl	800c25c <vPortExitCritical>
				return pdPASS;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e069      	b.n	800a974 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d103      	bne.n	800a8ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8a6:	f001 fcd9 	bl	800c25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e062      	b.n	800a974 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d106      	bne.n	800a8c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8b4:	f107 0310 	add.w	r3, r7, #16
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f000 ffe1 	bl	800b880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8c2:	f001 fccb 	bl	800c25c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8c6:	f000 fd65 	bl	800b394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ca:	f001 fc95 	bl	800c1f8 <vPortEnterCritical>
 800a8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8d4:	b25b      	sxtb	r3, r3
 800a8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8da:	d103      	bne.n	800a8e4 <xQueueReceive+0x128>
 800a8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8ea:	b25b      	sxtb	r3, r3
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d103      	bne.n	800a8fa <xQueueReceive+0x13e>
 800a8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8fa:	f001 fcaf 	bl	800c25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8fe:	1d3a      	adds	r2, r7, #4
 800a900:	f107 0310 	add.w	r3, r7, #16
 800a904:	4611      	mov	r1, r2
 800a906:	4618      	mov	r0, r3
 800a908:	f000 ffd0 	bl	800b8ac <xTaskCheckForTimeOut>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d123      	bne.n	800a95a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a914:	f000 fac0 	bl	800ae98 <prvIsQueueEmpty>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d017      	beq.n	800a94e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a920:	3324      	adds	r3, #36	@ 0x24
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f000 ff20 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a92c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a92e:	f000 fa61 	bl	800adf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a932:	f000 fd3d 	bl	800b3b0 <xTaskResumeAll>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d189      	bne.n	800a850 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a93c:	4b0f      	ldr	r3, [pc, #60]	@ (800a97c <xQueueReceive+0x1c0>)
 800a93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	f3bf 8f6f 	isb	sy
 800a94c:	e780      	b.n	800a850 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a94e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a950:	f000 fa50 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a954:	f000 fd2c 	bl	800b3b0 <xTaskResumeAll>
 800a958:	e77a      	b.n	800a850 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a95c:	f000 fa4a 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a960:	f000 fd26 	bl	800b3b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a966:	f000 fa97 	bl	800ae98 <prvIsQueueEmpty>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f43f af6f 	beq.w	800a850 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a972:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a974:	4618      	mov	r0, r3
 800a976:	3730      	adds	r7, #48	@ 0x30
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08e      	sub	sp, #56	@ 0x38
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a992:	2300      	movs	r3, #0
 800a994:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d10b      	bne.n	800a9b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	623b      	str	r3, [r7, #32]
}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	e7fd      	b.n	800a9b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	61fb      	str	r3, [r7, #28]
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	e7fd      	b.n	800a9d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9d4:	f001 f8b6 	bl	800bb44 <xTaskGetSchedulerState>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d102      	bne.n	800a9e4 <xQueueSemaphoreTake+0x64>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <xQueueSemaphoreTake+0x68>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e000      	b.n	800a9ea <xQueueSemaphoreTake+0x6a>
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10b      	bne.n	800aa06 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	61bb      	str	r3, [r7, #24]
}
 800aa00:	bf00      	nop
 800aa02:	bf00      	nop
 800aa04:	e7fd      	b.n	800aa02 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa06:	f001 fbf7 	bl	800c1f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d024      	beq.n	800aa60 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa18:	1e5a      	subs	r2, r3, #1
 800aa1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa1c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d104      	bne.n	800aa30 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa26:	f001 fa39 	bl	800be9c <pvTaskIncrementMutexHeldCount>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa2e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3a:	3310      	adds	r3, #16
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 febb 	bl	800b7b8 <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b54      	ldr	r3, [pc, #336]	@ (800ab9c <xQueueSemaphoreTake+0x21c>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa58:	f001 fc00 	bl	800c25c <vPortExitCritical>
				return pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e098      	b.n	800ab92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d112      	bne.n	800aa8c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	617b      	str	r3, [r7, #20]
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aa84:	f001 fbea 	bl	800c25c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e082      	b.n	800ab92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d106      	bne.n	800aaa0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa92:	f107 030c 	add.w	r3, r7, #12
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fef2 	bl	800b880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaa0:	f001 fbdc 	bl	800c25c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaa4:	f000 fc76 	bl	800b394 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaa8:	f001 fba6 	bl	800c1f8 <vPortEnterCritical>
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aab2:	b25b      	sxtb	r3, r3
 800aab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab8:	d103      	bne.n	800aac2 <xQueueSemaphoreTake+0x142>
 800aaba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aac8:	b25b      	sxtb	r3, r3
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aace:	d103      	bne.n	800aad8 <xQueueSemaphoreTake+0x158>
 800aad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aad8:	f001 fbc0 	bl	800c25c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aadc:	463a      	mov	r2, r7
 800aade:	f107 030c 	add.w	r3, r7, #12
 800aae2:	4611      	mov	r1, r2
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fee1 	bl	800b8ac <xTaskCheckForTimeOut>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d132      	bne.n	800ab56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aaf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaf2:	f000 f9d1 	bl	800ae98 <prvIsQueueEmpty>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d026      	beq.n	800ab4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aafc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ab04:	f001 fb78 	bl	800c1f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 f837 	bl	800bb80 <xTaskPriorityInherit>
 800ab12:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ab14:	f001 fba2 	bl	800c25c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1a:	3324      	adds	r3, #36	@ 0x24
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fe23 	bl	800b76c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab28:	f000 f964 	bl	800adf4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab2c:	f000 fc40 	bl	800b3b0 <xTaskResumeAll>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f47f af67 	bne.w	800aa06 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ab38:	4b18      	ldr	r3, [pc, #96]	@ (800ab9c <xQueueSemaphoreTake+0x21c>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	e75d      	b.n	800aa06 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ab4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab4c:	f000 f952 	bl	800adf4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab50:	f000 fc2e 	bl	800b3b0 <xTaskResumeAll>
 800ab54:	e757      	b.n	800aa06 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ab56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab58:	f000 f94c 	bl	800adf4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab5c:	f000 fc28 	bl	800b3b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab62:	f000 f999 	bl	800ae98 <prvIsQueueEmpty>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f43f af4c 	beq.w	800aa06 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00d      	beq.n	800ab90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ab74:	f001 fb40 	bl	800c1f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ab78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ab7a:	f000 f893 	bl	800aca4 <prvGetDisinheritPriorityAfterTimeout>
 800ab7e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ab80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab86:	4618      	mov	r0, r3
 800ab88:	f001 f8f8 	bl	800bd7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab8c:	f001 fb66 	bl	800c25c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3738      	adds	r7, #56	@ 0x38
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08e      	sub	sp, #56	@ 0x38
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10b      	bne.n	800abce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	623b      	str	r3, [r7, #32]
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	e7fd      	b.n	800abca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <xQueueReceiveFromISR+0x3c>
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d101      	bne.n	800abe0 <xQueueReceiveFromISR+0x40>
 800abdc:	2301      	movs	r3, #1
 800abde:	e000      	b.n	800abe2 <xQueueReceiveFromISR+0x42>
 800abe0:	2300      	movs	r3, #0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d10b      	bne.n	800abfe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	61fb      	str	r3, [r7, #28]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abfe:	f001 fbdb 	bl	800c3b8 <vPortValidateInterruptPriority>
	__asm volatile
 800ac02:	f3ef 8211 	mrs	r2, BASEPRI
 800ac06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0a:	f383 8811 	msr	BASEPRI, r3
 800ac0e:	f3bf 8f6f 	isb	sy
 800ac12:	f3bf 8f4f 	dsb	sy
 800ac16:	61ba      	str	r2, [r7, #24]
 800ac18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ac1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d02f      	beq.n	800ac8a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac34:	68b9      	ldr	r1, [r7, #8]
 800ac36:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac38:	f000 f8b6 	bl	800ada8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac3e:	1e5a      	subs	r2, r3, #1
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ac44:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac4c:	d112      	bne.n	800ac74 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d016      	beq.n	800ac84 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac58:	3310      	adds	r3, #16
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fdac 	bl	800b7b8 <xTaskRemoveFromEventList>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00e      	beq.n	800ac84 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	e007      	b.n	800ac84 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac78:	3301      	adds	r3, #1
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	b25a      	sxtb	r2, r3
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ac84:	2301      	movs	r3, #1
 800ac86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac88:	e001      	b.n	800ac8e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f383 8811 	msr	BASEPRI, r3
}
 800ac98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3738      	adds	r7, #56	@ 0x38
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1c3 0307 	rsb	r3, r3, #7
 800acbe:	60fb      	str	r3, [r7, #12]
 800acc0:	e001      	b.n	800acc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acc2:	2300      	movs	r3, #0
 800acc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800acc6:	68fb      	ldr	r3, [r7, #12]
	}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10d      	bne.n	800ad0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d14d      	bne.n	800ad96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 ffb4 	bl	800bc6c <xTaskPriorityDisinherit>
 800ad04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	609a      	str	r2, [r3, #8]
 800ad0c:	e043      	b.n	800ad96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d119      	bne.n	800ad48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6858      	ldr	r0, [r3, #4]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	f00c f8db 	bl	8016eda <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	685a      	ldr	r2, [r3, #4]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2c:	441a      	add	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d32b      	bcc.n	800ad96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	605a      	str	r2, [r3, #4]
 800ad46:	e026      	b.n	800ad96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68d8      	ldr	r0, [r3, #12]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad50:	461a      	mov	r2, r3
 800ad52:	68b9      	ldr	r1, [r7, #8]
 800ad54:	f00c f8c1 	bl	8016eda <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	68da      	ldr	r2, [r3, #12]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad60:	425b      	negs	r3, r3
 800ad62:	441a      	add	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d207      	bcs.n	800ad84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	441a      	add	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d105      	bne.n	800ad96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d002      	beq.n	800ad96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ad9e:	697b      	ldr	r3, [r7, #20]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d018      	beq.n	800adec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68da      	ldr	r2, [r3, #12]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc2:	441a      	add	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68da      	ldr	r2, [r3, #12]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	429a      	cmp	r2, r3
 800add2:	d303      	bcc.n	800addc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68d9      	ldr	r1, [r3, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade4:	461a      	mov	r2, r3
 800ade6:	6838      	ldr	r0, [r7, #0]
 800ade8:	f00c f877 	bl	8016eda <memcpy>
	}
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800adfc:	f001 f9fc 	bl	800c1f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae08:	e011      	b.n	800ae2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d012      	beq.n	800ae38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3324      	adds	r3, #36	@ 0x24
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 fcce 	bl	800b7b8 <xTaskRemoveFromEventList>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae22:	f000 fda7 	bl	800b974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dce9      	bgt.n	800ae0a <prvUnlockQueue+0x16>
 800ae36:	e000      	b.n	800ae3a <prvUnlockQueue+0x46>
					break;
 800ae38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	22ff      	movs	r2, #255	@ 0xff
 800ae3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae42:	f001 fa0b 	bl	800c25c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae46:	f001 f9d7 	bl	800c1f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae52:	e011      	b.n	800ae78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d012      	beq.n	800ae82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3310      	adds	r3, #16
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fca9 	bl	800b7b8 <xTaskRemoveFromEventList>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d001      	beq.n	800ae70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae6c:	f000 fd82 	bl	800b974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	3b01      	subs	r3, #1
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dce9      	bgt.n	800ae54 <prvUnlockQueue+0x60>
 800ae80:	e000      	b.n	800ae84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ae82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	22ff      	movs	r2, #255	@ 0xff
 800ae88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ae8c:	f001 f9e6 	bl	800c25c <vPortExitCritical>
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aea0:	f001 f9aa 	bl	800c1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aeac:	2301      	movs	r3, #1
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	e001      	b.n	800aeb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aeb6:	f001 f9d1 	bl	800c25c <vPortExitCritical>

	return xReturn;
 800aeba:	68fb      	ldr	r3, [r7, #12]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aecc:	f001 f994 	bl	800c1f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d102      	bne.n	800aee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	e001      	b.n	800aee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aee2:	2300      	movs	r3, #0
 800aee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aee6:	f001 f9b9 	bl	800c25c <vPortExitCritical>

	return xReturn;
 800aeea:	68fb      	ldr	r3, [r7, #12]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08e      	sub	sp, #56	@ 0x38
 800aef8:	af04      	add	r7, sp, #16
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10b      	bne.n	800af20 <xTaskCreateStatic+0x2c>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	623b      	str	r3, [r7, #32]
}
 800af1a:	bf00      	nop
 800af1c:	bf00      	nop
 800af1e:	e7fd      	b.n	800af1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10b      	bne.n	800af3e <xTaskCreateStatic+0x4a>
	__asm volatile
 800af26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	61fb      	str	r3, [r7, #28]
}
 800af38:	bf00      	nop
 800af3a:	bf00      	nop
 800af3c:	e7fd      	b.n	800af3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af3e:	23a0      	movs	r3, #160	@ 0xa0
 800af40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2ba0      	cmp	r3, #160	@ 0xa0
 800af46:	d00b      	beq.n	800af60 <xTaskCreateStatic+0x6c>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	61bb      	str	r3, [r7, #24]
}
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	e7fd      	b.n	800af5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af64:	2b00      	cmp	r3, #0
 800af66:	d01e      	beq.n	800afa6 <xTaskCreateStatic+0xb2>
 800af68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d01b      	beq.n	800afa6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7a:	2202      	movs	r2, #2
 800af7c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af80:	2300      	movs	r3, #0
 800af82:	9303      	str	r3, [sp, #12]
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	f107 0314 	add.w	r3, r7, #20
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f000 f851 	bl	800b040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800afa0:	f000 f8ee 	bl	800b180 <prvAddNewTaskToReadyList>
 800afa4:	e001      	b.n	800afaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800afa6:	2300      	movs	r3, #0
 800afa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afaa:	697b      	ldr	r3, [r7, #20]
	}
 800afac:	4618      	mov	r0, r3
 800afae:	3728      	adds	r7, #40	@ 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08c      	sub	sp, #48	@ 0x30
 800afb8:	af04      	add	r7, sp, #16
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	603b      	str	r3, [r7, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afc4:	88fb      	ldrh	r3, [r7, #6]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4618      	mov	r0, r3
 800afca:	f001 fa37 	bl	800c43c <pvPortMalloc>
 800afce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00e      	beq.n	800aff4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afd6:	20a0      	movs	r0, #160	@ 0xa0
 800afd8:	f001 fa30 	bl	800c43c <pvPortMalloc>
 800afdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d003      	beq.n	800afec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	697a      	ldr	r2, [r7, #20]
 800afe8:	631a      	str	r2, [r3, #48]	@ 0x30
 800afea:	e005      	b.n	800aff8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afec:	6978      	ldr	r0, [r7, #20]
 800afee:	f001 faf3 	bl	800c5d8 <vPortFree>
 800aff2:	e001      	b.n	800aff8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d017      	beq.n	800b02e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b006:	88fa      	ldrh	r2, [r7, #6]
 800b008:	2300      	movs	r3, #0
 800b00a:	9303      	str	r3, [sp, #12]
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	9302      	str	r3, [sp, #8]
 800b010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	68b9      	ldr	r1, [r7, #8]
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 f80f 	bl	800b040 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b022:	69f8      	ldr	r0, [r7, #28]
 800b024:	f000 f8ac 	bl	800b180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b028:	2301      	movs	r3, #1
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	e002      	b.n	800b034 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b034:	69bb      	ldr	r3, [r7, #24]
	}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b088      	sub	sp, #32
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b058:	3b01      	subs	r3, #1
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	f023 0307 	bic.w	r3, r3, #7
 800b066:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	617b      	str	r3, [r7, #20]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01f      	beq.n	800b0d0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b090:	2300      	movs	r3, #0
 800b092:	61fb      	str	r3, [r7, #28]
 800b094:	e012      	b.n	800b0bc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	4413      	add	r3, r2
 800b09c:	7819      	ldrb	r1, [r3, #0]
 800b09e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	3334      	adds	r3, #52	@ 0x34
 800b0a6:	460a      	mov	r2, r1
 800b0a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d006      	beq.n	800b0c4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	61fb      	str	r3, [r7, #28]
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	2b0f      	cmp	r3, #15
 800b0c0:	d9e9      	bls.n	800b096 <prvInitialiseNewTask+0x56>
 800b0c2:	e000      	b.n	800b0c6 <prvInitialiseNewTask+0x86>
			{
				break;
 800b0c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b0ce:	e003      	b.n	800b0d8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	2b06      	cmp	r3, #6
 800b0dc:	d901      	bls.n	800b0e2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0de:	2306      	movs	r3, #6
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0ec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe ff0d 	bl	8009f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	3318      	adds	r3, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe ff08 	bl	8009f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b10c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b110:	f1c3 0207 	rsb	r2, r3, #7
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b11c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	2200      	movs	r2, #0
 800b122:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b130:	334c      	adds	r3, #76	@ 0x4c
 800b132:	224c      	movs	r2, #76	@ 0x4c
 800b134:	2100      	movs	r1, #0
 800b136:	4618      	mov	r0, r3
 800b138:	f00b fdfc 	bl	8016d34 <memset>
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	4a0d      	ldr	r2, [pc, #52]	@ (800b174 <prvInitialiseNewTask+0x134>)
 800b140:	651a      	str	r2, [r3, #80]	@ 0x50
 800b142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b144:	4a0c      	ldr	r2, [pc, #48]	@ (800b178 <prvInitialiseNewTask+0x138>)
 800b146:	655a      	str	r2, [r3, #84]	@ 0x54
 800b148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14a:	4a0c      	ldr	r2, [pc, #48]	@ (800b17c <prvInitialiseNewTask+0x13c>)
 800b14c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	68f9      	ldr	r1, [r7, #12]
 800b152:	69b8      	ldr	r0, [r7, #24]
 800b154:	f000 ff1c 	bl	800bf90 <pxPortInitialiseStack>
 800b158:	4602      	mov	r2, r0
 800b15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b168:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b16a:	bf00      	nop
 800b16c:	3720      	adds	r7, #32
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	200158b0 	.word	0x200158b0
 800b178:	20015918 	.word	0x20015918
 800b17c:	20015980 	.word	0x20015980

0800b180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b188:	f001 f836 	bl	800c1f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b18c:	4b2a      	ldr	r3, [pc, #168]	@ (800b238 <prvAddNewTaskToReadyList+0xb8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3301      	adds	r3, #1
 800b192:	4a29      	ldr	r2, [pc, #164]	@ (800b238 <prvAddNewTaskToReadyList+0xb8>)
 800b194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b196:	4b29      	ldr	r3, [pc, #164]	@ (800b23c <prvAddNewTaskToReadyList+0xbc>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b19e:	4a27      	ldr	r2, [pc, #156]	@ (800b23c <prvAddNewTaskToReadyList+0xbc>)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1a4:	4b24      	ldr	r3, [pc, #144]	@ (800b238 <prvAddNewTaskToReadyList+0xb8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d110      	bne.n	800b1ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1ac:	f000 fc06 	bl	800b9bc <prvInitialiseTaskLists>
 800b1b0:	e00d      	b.n	800b1ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1b2:	4b23      	ldr	r3, [pc, #140]	@ (800b240 <prvAddNewTaskToReadyList+0xc0>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d109      	bne.n	800b1ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ba:	4b20      	ldr	r3, [pc, #128]	@ (800b23c <prvAddNewTaskToReadyList+0xbc>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d802      	bhi.n	800b1ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b23c <prvAddNewTaskToReadyList+0xbc>)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b244 <prvAddNewTaskToReadyList+0xc4>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	4a1b      	ldr	r2, [pc, #108]	@ (800b244 <prvAddNewTaskToReadyList+0xc4>)
 800b1d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	2201      	movs	r2, #1
 800b1de:	409a      	lsls	r2, r3
 800b1e0:	4b19      	ldr	r3, [pc, #100]	@ (800b248 <prvAddNewTaskToReadyList+0xc8>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	4a18      	ldr	r2, [pc, #96]	@ (800b248 <prvAddNewTaskToReadyList+0xc8>)
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a15      	ldr	r2, [pc, #84]	@ (800b24c <prvAddNewTaskToReadyList+0xcc>)
 800b1f8:	441a      	add	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7fe fe96 	bl	8009f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b206:	f001 f829 	bl	800c25c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b20a:	4b0d      	ldr	r3, [pc, #52]	@ (800b240 <prvAddNewTaskToReadyList+0xc0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00e      	beq.n	800b230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b212:	4b0a      	ldr	r3, [pc, #40]	@ (800b23c <prvAddNewTaskToReadyList+0xbc>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d207      	bcs.n	800b230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b220:	4b0b      	ldr	r3, [pc, #44]	@ (800b250 <prvAddNewTaskToReadyList+0xd0>)
 800b222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200052b4 	.word	0x200052b4
 800b23c:	200051b4 	.word	0x200051b4
 800b240:	200052c0 	.word	0x200052c0
 800b244:	200052d0 	.word	0x200052d0
 800b248:	200052bc 	.word	0x200052bc
 800b24c:	200051b8 	.word	0x200051b8
 800b250:	e000ed04 	.word	0xe000ed04

0800b254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b25c:	2300      	movs	r3, #0
 800b25e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d018      	beq.n	800b298 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b266:	4b14      	ldr	r3, [pc, #80]	@ (800b2b8 <vTaskDelay+0x64>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <vTaskDelay+0x32>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	60bb      	str	r3, [r7, #8]
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	e7fd      	b.n	800b282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b286:	f000 f885 	bl	800b394 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b28a:	2100      	movs	r1, #0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 fe19 	bl	800bec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b292:	f000 f88d 	bl	800b3b0 <xTaskResumeAll>
 800b296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d107      	bne.n	800b2ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b29e:	4b07      	ldr	r3, [pc, #28]	@ (800b2bc <vTaskDelay+0x68>)
 800b2a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2a4:	601a      	str	r2, [r3, #0]
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2ae:	bf00      	nop
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200052dc 	.word	0x200052dc
 800b2bc:	e000ed04 	.word	0xe000ed04

0800b2c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	@ 0x28
 800b2c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2ce:	463a      	mov	r2, r7
 800b2d0:	1d39      	adds	r1, r7, #4
 800b2d2:	f107 0308 	add.w	r3, r7, #8
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7f5 f968 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	9202      	str	r2, [sp, #8]
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	460a      	mov	r2, r1
 800b2ee:	4921      	ldr	r1, [pc, #132]	@ (800b374 <vTaskStartScheduler+0xb4>)
 800b2f0:	4821      	ldr	r0, [pc, #132]	@ (800b378 <vTaskStartScheduler+0xb8>)
 800b2f2:	f7ff fdff 	bl	800aef4 <xTaskCreateStatic>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	4a20      	ldr	r2, [pc, #128]	@ (800b37c <vTaskStartScheduler+0xbc>)
 800b2fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2fc:	4b1f      	ldr	r3, [pc, #124]	@ (800b37c <vTaskStartScheduler+0xbc>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e001      	b.n	800b30e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d11b      	bne.n	800b34c <vTaskStartScheduler+0x8c>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	613b      	str	r3, [r7, #16]
}
 800b326:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b328:	4b15      	ldr	r3, [pc, #84]	@ (800b380 <vTaskStartScheduler+0xc0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	334c      	adds	r3, #76	@ 0x4c
 800b32e:	4a15      	ldr	r2, [pc, #84]	@ (800b384 <vTaskStartScheduler+0xc4>)
 800b330:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b332:	4b15      	ldr	r3, [pc, #84]	@ (800b388 <vTaskStartScheduler+0xc8>)
 800b334:	f04f 32ff 	mov.w	r2, #4294967295
 800b338:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b33a:	4b14      	ldr	r3, [pc, #80]	@ (800b38c <vTaskStartScheduler+0xcc>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b340:	4b13      	ldr	r3, [pc, #76]	@ (800b390 <vTaskStartScheduler+0xd0>)
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b346:	f000 feb3 	bl	800c0b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b34a:	e00f      	b.n	800b36c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b352:	d10b      	bne.n	800b36c <vTaskStartScheduler+0xac>
	__asm volatile
 800b354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	60fb      	str	r3, [r7, #12]
}
 800b366:	bf00      	nop
 800b368:	bf00      	nop
 800b36a:	e7fd      	b.n	800b368 <vTaskStartScheduler+0xa8>
}
 800b36c:	bf00      	nop
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	08017eb8 	.word	0x08017eb8
 800b378:	0800b98d 	.word	0x0800b98d
 800b37c:	200052d8 	.word	0x200052d8
 800b380:	200051b4 	.word	0x200051b4
 800b384:	20000118 	.word	0x20000118
 800b388:	200052d4 	.word	0x200052d4
 800b38c:	200052c0 	.word	0x200052c0
 800b390:	200052b8 	.word	0x200052b8

0800b394 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b394:	b480      	push	{r7}
 800b396:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b398:	4b04      	ldr	r3, [pc, #16]	@ (800b3ac <vTaskSuspendAll+0x18>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3301      	adds	r3, #1
 800b39e:	4a03      	ldr	r2, [pc, #12]	@ (800b3ac <vTaskSuspendAll+0x18>)
 800b3a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3a2:	bf00      	nop
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	200052dc 	.word	0x200052dc

0800b3b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3be:	4b42      	ldr	r3, [pc, #264]	@ (800b4c8 <xTaskResumeAll+0x118>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d10b      	bne.n	800b3de <xTaskResumeAll+0x2e>
	__asm volatile
 800b3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ca:	f383 8811 	msr	BASEPRI, r3
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	603b      	str	r3, [r7, #0]
}
 800b3d8:	bf00      	nop
 800b3da:	bf00      	nop
 800b3dc:	e7fd      	b.n	800b3da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3de:	f000 ff0b 	bl	800c1f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3e2:	4b39      	ldr	r3, [pc, #228]	@ (800b4c8 <xTaskResumeAll+0x118>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	4a37      	ldr	r2, [pc, #220]	@ (800b4c8 <xTaskResumeAll+0x118>)
 800b3ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ec:	4b36      	ldr	r3, [pc, #216]	@ (800b4c8 <xTaskResumeAll+0x118>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d161      	bne.n	800b4b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3f4:	4b35      	ldr	r3, [pc, #212]	@ (800b4cc <xTaskResumeAll+0x11c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d05d      	beq.n	800b4b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3fc:	e02e      	b.n	800b45c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3fe:	4b34      	ldr	r3, [pc, #208]	@ (800b4d0 <xTaskResumeAll+0x120>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3318      	adds	r3, #24
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fdee 	bl	8009fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	3304      	adds	r3, #4
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe fde9 	bl	8009fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	2201      	movs	r2, #1
 800b420:	409a      	lsls	r2, r3
 800b422:	4b2c      	ldr	r3, [pc, #176]	@ (800b4d4 <xTaskResumeAll+0x124>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4313      	orrs	r3, r2
 800b428:	4a2a      	ldr	r2, [pc, #168]	@ (800b4d4 <xTaskResumeAll+0x124>)
 800b42a:	6013      	str	r3, [r2, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b430:	4613      	mov	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	4413      	add	r3, r2
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4a27      	ldr	r2, [pc, #156]	@ (800b4d8 <xTaskResumeAll+0x128>)
 800b43a:	441a      	add	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3304      	adds	r3, #4
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fd75 	bl	8009f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b44c:	4b23      	ldr	r3, [pc, #140]	@ (800b4dc <xTaskResumeAll+0x12c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	429a      	cmp	r2, r3
 800b454:	d302      	bcc.n	800b45c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b456:	4b22      	ldr	r3, [pc, #136]	@ (800b4e0 <xTaskResumeAll+0x130>)
 800b458:	2201      	movs	r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b45c:	4b1c      	ldr	r3, [pc, #112]	@ (800b4d0 <xTaskResumeAll+0x120>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1cc      	bne.n	800b3fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b46a:	f000 fb4b 	bl	800bb04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b46e:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e4 <xTaskResumeAll+0x134>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d010      	beq.n	800b49c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b47a:	f000 f859 	bl	800b530 <xTaskIncrementTick>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b484:	4b16      	ldr	r3, [pc, #88]	@ (800b4e0 <xTaskResumeAll+0x130>)
 800b486:	2201      	movs	r2, #1
 800b488:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f1      	bne.n	800b47a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b496:	4b13      	ldr	r3, [pc, #76]	@ (800b4e4 <xTaskResumeAll+0x134>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b49c:	4b10      	ldr	r3, [pc, #64]	@ (800b4e0 <xTaskResumeAll+0x130>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d009      	beq.n	800b4b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b4e8 <xTaskResumeAll+0x138>)
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4b8:	f000 fed0 	bl	800c25c <vPortExitCritical>

	return xAlreadyYielded;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	200052dc 	.word	0x200052dc
 800b4cc:	200052b4 	.word	0x200052b4
 800b4d0:	20005274 	.word	0x20005274
 800b4d4:	200052bc 	.word	0x200052bc
 800b4d8:	200051b8 	.word	0x200051b8
 800b4dc:	200051b4 	.word	0x200051b4
 800b4e0:	200052c8 	.word	0x200052c8
 800b4e4:	200052c4 	.word	0x200052c4
 800b4e8:	e000ed04 	.word	0xe000ed04

0800b4ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4f2:	4b05      	ldr	r3, [pc, #20]	@ (800b508 <xTaskGetTickCount+0x1c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4f8:	687b      	ldr	r3, [r7, #4]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	200052b8 	.word	0x200052b8

0800b50c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b512:	f000 ff51 	bl	800c3b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b516:	2300      	movs	r3, #0
 800b518:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b51a:	4b04      	ldr	r3, [pc, #16]	@ (800b52c <xTaskGetTickCountFromISR+0x20>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b520:	683b      	ldr	r3, [r7, #0]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	200052b8 	.word	0x200052b8

0800b530 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b53a:	4b4f      	ldr	r3, [pc, #316]	@ (800b678 <xTaskIncrementTick+0x148>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 808f 	bne.w	800b662 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b544:	4b4d      	ldr	r3, [pc, #308]	@ (800b67c <xTaskIncrementTick+0x14c>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3301      	adds	r3, #1
 800b54a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b54c:	4a4b      	ldr	r2, [pc, #300]	@ (800b67c <xTaskIncrementTick+0x14c>)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d121      	bne.n	800b59c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b558:	4b49      	ldr	r3, [pc, #292]	@ (800b680 <xTaskIncrementTick+0x150>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	603b      	str	r3, [r7, #0]
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop
 800b578:	e7fd      	b.n	800b576 <xTaskIncrementTick+0x46>
 800b57a:	4b41      	ldr	r3, [pc, #260]	@ (800b680 <xTaskIncrementTick+0x150>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	60fb      	str	r3, [r7, #12]
 800b580:	4b40      	ldr	r3, [pc, #256]	@ (800b684 <xTaskIncrementTick+0x154>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a3e      	ldr	r2, [pc, #248]	@ (800b680 <xTaskIncrementTick+0x150>)
 800b586:	6013      	str	r3, [r2, #0]
 800b588:	4a3e      	ldr	r2, [pc, #248]	@ (800b684 <xTaskIncrementTick+0x154>)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	6013      	str	r3, [r2, #0]
 800b58e:	4b3e      	ldr	r3, [pc, #248]	@ (800b688 <xTaskIncrementTick+0x158>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3301      	adds	r3, #1
 800b594:	4a3c      	ldr	r2, [pc, #240]	@ (800b688 <xTaskIncrementTick+0x158>)
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	f000 fab4 	bl	800bb04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b59c:	4b3b      	ldr	r3, [pc, #236]	@ (800b68c <xTaskIncrementTick+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d348      	bcc.n	800b638 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a6:	4b36      	ldr	r3, [pc, #216]	@ (800b680 <xTaskIncrementTick+0x150>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d104      	bne.n	800b5ba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b0:	4b36      	ldr	r3, [pc, #216]	@ (800b68c <xTaskIncrementTick+0x15c>)
 800b5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b6:	601a      	str	r2, [r3, #0]
					break;
 800b5b8:	e03e      	b.n	800b638 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	4b31      	ldr	r3, [pc, #196]	@ (800b680 <xTaskIncrementTick+0x150>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d203      	bcs.n	800b5da <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b5d2:	4a2e      	ldr	r2, [pc, #184]	@ (800b68c <xTaskIncrementTick+0x15c>)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b5d8:	e02e      	b.n	800b638 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fd04 	bl	8009fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d004      	beq.n	800b5f6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fcfb 	bl	8009fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	409a      	lsls	r2, r3
 800b5fe:	4b24      	ldr	r3, [pc, #144]	@ (800b690 <xTaskIncrementTick+0x160>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4313      	orrs	r3, r2
 800b604:	4a22      	ldr	r2, [pc, #136]	@ (800b690 <xTaskIncrementTick+0x160>)
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60c:	4613      	mov	r3, r2
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	4413      	add	r3, r2
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	4a1f      	ldr	r2, [pc, #124]	@ (800b694 <xTaskIncrementTick+0x164>)
 800b616:	441a      	add	r2, r3
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f7fe fc87 	bl	8009f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b628:	4b1b      	ldr	r3, [pc, #108]	@ (800b698 <xTaskIncrementTick+0x168>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62e:	429a      	cmp	r2, r3
 800b630:	d3b9      	bcc.n	800b5a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b632:	2301      	movs	r3, #1
 800b634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b636:	e7b6      	b.n	800b5a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b638:	4b17      	ldr	r3, [pc, #92]	@ (800b698 <xTaskIncrementTick+0x168>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63e:	4915      	ldr	r1, [pc, #84]	@ (800b694 <xTaskIncrementTick+0x164>)
 800b640:	4613      	mov	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	440b      	add	r3, r1
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d901      	bls.n	800b654 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b654:	4b11      	ldr	r3, [pc, #68]	@ (800b69c <xTaskIncrementTick+0x16c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b65c:	2301      	movs	r3, #1
 800b65e:	617b      	str	r3, [r7, #20]
 800b660:	e004      	b.n	800b66c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b662:	4b0f      	ldr	r3, [pc, #60]	@ (800b6a0 <xTaskIncrementTick+0x170>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3301      	adds	r3, #1
 800b668:	4a0d      	ldr	r2, [pc, #52]	@ (800b6a0 <xTaskIncrementTick+0x170>)
 800b66a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b66c:	697b      	ldr	r3, [r7, #20]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3718      	adds	r7, #24
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200052dc 	.word	0x200052dc
 800b67c:	200052b8 	.word	0x200052b8
 800b680:	2000526c 	.word	0x2000526c
 800b684:	20005270 	.word	0x20005270
 800b688:	200052cc 	.word	0x200052cc
 800b68c:	200052d4 	.word	0x200052d4
 800b690:	200052bc 	.word	0x200052bc
 800b694:	200051b8 	.word	0x200051b8
 800b698:	200051b4 	.word	0x200051b4
 800b69c:	200052c8 	.word	0x200052c8
 800b6a0:	200052c4 	.word	0x200052c4

0800b6a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6aa:	4b2a      	ldr	r3, [pc, #168]	@ (800b754 <vTaskSwitchContext+0xb0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6b2:	4b29      	ldr	r3, [pc, #164]	@ (800b758 <vTaskSwitchContext+0xb4>)
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6b8:	e045      	b.n	800b746 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b6ba:	4b27      	ldr	r3, [pc, #156]	@ (800b758 <vTaskSwitchContext+0xb4>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c0:	4b26      	ldr	r3, [pc, #152]	@ (800b75c <vTaskSwitchContext+0xb8>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	fab3 f383 	clz	r3, r3
 800b6cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	f1c3 031f 	rsb	r3, r3, #31
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	4922      	ldr	r1, [pc, #136]	@ (800b760 <vTaskSwitchContext+0xbc>)
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	4613      	mov	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	440b      	add	r3, r1
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10b      	bne.n	800b702 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
 800b6fe:	bf00      	nop
 800b700:	e7fd      	b.n	800b6fe <vTaskSwitchContext+0x5a>
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	4a14      	ldr	r2, [pc, #80]	@ (800b760 <vTaskSwitchContext+0xbc>)
 800b70e:	4413      	add	r3, r2
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	605a      	str	r2, [r3, #4]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	3308      	adds	r3, #8
 800b724:	429a      	cmp	r2, r3
 800b726:	d104      	bne.n	800b732 <vTaskSwitchContext+0x8e>
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	605a      	str	r2, [r3, #4]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	4a0a      	ldr	r2, [pc, #40]	@ (800b764 <vTaskSwitchContext+0xc0>)
 800b73a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b73c:	4b09      	ldr	r3, [pc, #36]	@ (800b764 <vTaskSwitchContext+0xc0>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	334c      	adds	r3, #76	@ 0x4c
 800b742:	4a09      	ldr	r2, [pc, #36]	@ (800b768 <vTaskSwitchContext+0xc4>)
 800b744:	6013      	str	r3, [r2, #0]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	200052dc 	.word	0x200052dc
 800b758:	200052c8 	.word	0x200052c8
 800b75c:	200052bc 	.word	0x200052bc
 800b760:	200051b8 	.word	0x200051b8
 800b764:	200051b4 	.word	0x200051b4
 800b768:	20000118 	.word	0x20000118

0800b76c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d10b      	bne.n	800b794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	60fb      	str	r3, [r7, #12]
}
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	e7fd      	b.n	800b790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b794:	4b07      	ldr	r3, [pc, #28]	@ (800b7b4 <vTaskPlaceOnEventList+0x48>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3318      	adds	r3, #24
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7fe fbec 	bl	8009f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	6838      	ldr	r0, [r7, #0]
 800b7a6:	f000 fb8d 	bl	800bec4 <prvAddCurrentTaskToDelayedList>
}
 800b7aa:	bf00      	nop
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	200051b4 	.word	0x200051b4

0800b7b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d10b      	bne.n	800b7e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	60fb      	str	r3, [r7, #12]
}
 800b7e0:	bf00      	nop
 800b7e2:	bf00      	nop
 800b7e4:	e7fd      	b.n	800b7e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	3318      	adds	r3, #24
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fbfe 	bl	8009fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b868 <xTaskRemoveFromEventList+0xb0>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d11c      	bne.n	800b832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	3304      	adds	r3, #4
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe fbf5 	bl	8009fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b806:	2201      	movs	r2, #1
 800b808:	409a      	lsls	r2, r3
 800b80a:	4b18      	ldr	r3, [pc, #96]	@ (800b86c <xTaskRemoveFromEventList+0xb4>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4313      	orrs	r3, r2
 800b810:	4a16      	ldr	r2, [pc, #88]	@ (800b86c <xTaskRemoveFromEventList+0xb4>)
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b818:	4613      	mov	r3, r2
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4a13      	ldr	r2, [pc, #76]	@ (800b870 <xTaskRemoveFromEventList+0xb8>)
 800b822:	441a      	add	r2, r3
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	3304      	adds	r3, #4
 800b828:	4619      	mov	r1, r3
 800b82a:	4610      	mov	r0, r2
 800b82c:	f7fe fb81 	bl	8009f32 <vListInsertEnd>
 800b830:	e005      	b.n	800b83e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3318      	adds	r3, #24
 800b836:	4619      	mov	r1, r3
 800b838:	480e      	ldr	r0, [pc, #56]	@ (800b874 <xTaskRemoveFromEventList+0xbc>)
 800b83a:	f7fe fb7a 	bl	8009f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b842:	4b0d      	ldr	r3, [pc, #52]	@ (800b878 <xTaskRemoveFromEventList+0xc0>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	429a      	cmp	r2, r3
 800b84a:	d905      	bls.n	800b858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b850:	4b0a      	ldr	r3, [pc, #40]	@ (800b87c <xTaskRemoveFromEventList+0xc4>)
 800b852:	2201      	movs	r2, #1
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e001      	b.n	800b85c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b85c:	697b      	ldr	r3, [r7, #20]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	200052dc 	.word	0x200052dc
 800b86c:	200052bc 	.word	0x200052bc
 800b870:	200051b8 	.word	0x200051b8
 800b874:	20005274 	.word	0x20005274
 800b878:	200051b4 	.word	0x200051b4
 800b87c:	200052c8 	.word	0x200052c8

0800b880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b888:	4b06      	ldr	r3, [pc, #24]	@ (800b8a4 <vTaskInternalSetTimeOutState+0x24>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b890:	4b05      	ldr	r3, [pc, #20]	@ (800b8a8 <vTaskInternalSetTimeOutState+0x28>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	605a      	str	r2, [r3, #4]
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	200052cc 	.word	0x200052cc
 800b8a8:	200052b8 	.word	0x200052b8

0800b8ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10b      	bne.n	800b8d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	613b      	str	r3, [r7, #16]
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	e7fd      	b.n	800b8d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d10b      	bne.n	800b8f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	60fb      	str	r3, [r7, #12]
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	e7fd      	b.n	800b8ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b8f2:	f000 fc81 	bl	800c1f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b8f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b96c <xTaskCheckForTimeOut+0xc0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90e:	d102      	bne.n	800b916 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	e023      	b.n	800b95e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	4b15      	ldr	r3, [pc, #84]	@ (800b970 <xTaskCheckForTimeOut+0xc4>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d007      	beq.n	800b932 <xTaskCheckForTimeOut+0x86>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e015      	b.n	800b95e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d20b      	bcs.n	800b954 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	1ad2      	subs	r2, r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ff99 	bl	800b880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	e004      	b.n	800b95e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b95a:	2301      	movs	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b95e:	f000 fc7d 	bl	800c25c <vPortExitCritical>

	return xReturn;
 800b962:	69fb      	ldr	r3, [r7, #28]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3720      	adds	r7, #32
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	200052b8 	.word	0x200052b8
 800b970:	200052cc 	.word	0x200052cc

0800b974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b974:	b480      	push	{r7}
 800b976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b978:	4b03      	ldr	r3, [pc, #12]	@ (800b988 <vTaskMissedYield+0x14>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	601a      	str	r2, [r3, #0]
}
 800b97e:	bf00      	nop
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	200052c8 	.word	0x200052c8

0800b98c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b994:	f000 f852 	bl	800ba3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b998:	4b06      	ldr	r3, [pc, #24]	@ (800b9b4 <prvIdleTask+0x28>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d9f9      	bls.n	800b994 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9a0:	4b05      	ldr	r3, [pc, #20]	@ (800b9b8 <prvIdleTask+0x2c>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b9b0:	e7f0      	b.n	800b994 <prvIdleTask+0x8>
 800b9b2:	bf00      	nop
 800b9b4:	200051b8 	.word	0x200051b8
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	607b      	str	r3, [r7, #4]
 800b9c6:	e00c      	b.n	800b9e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4a12      	ldr	r2, [pc, #72]	@ (800ba1c <prvInitialiseTaskLists+0x60>)
 800b9d4:	4413      	add	r3, r2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe fa7e 	bl	8009ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b06      	cmp	r3, #6
 800b9e6:	d9ef      	bls.n	800b9c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b9e8:	480d      	ldr	r0, [pc, #52]	@ (800ba20 <prvInitialiseTaskLists+0x64>)
 800b9ea:	f7fe fa75 	bl	8009ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b9ee:	480d      	ldr	r0, [pc, #52]	@ (800ba24 <prvInitialiseTaskLists+0x68>)
 800b9f0:	f7fe fa72 	bl	8009ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b9f4:	480c      	ldr	r0, [pc, #48]	@ (800ba28 <prvInitialiseTaskLists+0x6c>)
 800b9f6:	f7fe fa6f 	bl	8009ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9fa:	480c      	ldr	r0, [pc, #48]	@ (800ba2c <prvInitialiseTaskLists+0x70>)
 800b9fc:	f7fe fa6c 	bl	8009ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba00:	480b      	ldr	r0, [pc, #44]	@ (800ba30 <prvInitialiseTaskLists+0x74>)
 800ba02:	f7fe fa69 	bl	8009ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba06:	4b0b      	ldr	r3, [pc, #44]	@ (800ba34 <prvInitialiseTaskLists+0x78>)
 800ba08:	4a05      	ldr	r2, [pc, #20]	@ (800ba20 <prvInitialiseTaskLists+0x64>)
 800ba0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba38 <prvInitialiseTaskLists+0x7c>)
 800ba0e:	4a05      	ldr	r2, [pc, #20]	@ (800ba24 <prvInitialiseTaskLists+0x68>)
 800ba10:	601a      	str	r2, [r3, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200051b8 	.word	0x200051b8
 800ba20:	20005244 	.word	0x20005244
 800ba24:	20005258 	.word	0x20005258
 800ba28:	20005274 	.word	0x20005274
 800ba2c:	20005288 	.word	0x20005288
 800ba30:	200052a0 	.word	0x200052a0
 800ba34:	2000526c 	.word	0x2000526c
 800ba38:	20005270 	.word	0x20005270

0800ba3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba42:	e019      	b.n	800ba78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ba44:	f000 fbd8 	bl	800c1f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	4b10      	ldr	r3, [pc, #64]	@ (800ba8c <prvCheckTasksWaitingTermination+0x50>)
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3304      	adds	r3, #4
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe fac9 	bl	8009fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ba90 <prvCheckTasksWaitingTermination+0x54>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	4a0b      	ldr	r2, [pc, #44]	@ (800ba90 <prvCheckTasksWaitingTermination+0x54>)
 800ba62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba64:	4b0b      	ldr	r3, [pc, #44]	@ (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	4a0a      	ldr	r2, [pc, #40]	@ (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba6e:	f000 fbf5 	bl	800c25c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f810 	bl	800ba98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba78:	4b06      	ldr	r3, [pc, #24]	@ (800ba94 <prvCheckTasksWaitingTermination+0x58>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e1      	bne.n	800ba44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20005288 	.word	0x20005288
 800ba90:	200052b4 	.word	0x200052b4
 800ba94:	2000529c 	.word	0x2000529c

0800ba98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	334c      	adds	r3, #76	@ 0x4c
 800baa4:	4618      	mov	r0, r3
 800baa6:	f00b f95d 	bl	8016d64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d108      	bne.n	800bac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bab8:	4618      	mov	r0, r3
 800baba:	f000 fd8d 	bl	800c5d8 <vPortFree>
				vPortFree( pxTCB );
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fd8a 	bl	800c5d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bac4:	e019      	b.n	800bafa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d103      	bne.n	800bad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fd81 	bl	800c5d8 <vPortFree>
	}
 800bad6:	e010      	b.n	800bafa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800bade:	2b02      	cmp	r3, #2
 800bae0:	d00b      	beq.n	800bafa <prvDeleteTCB+0x62>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60fb      	str	r3, [r7, #12]
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <prvDeleteTCB+0x5e>
	}
 800bafa:	bf00      	nop
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
	...

0800bb04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb0a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb3c <prvResetNextTaskUnblockTime+0x38>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d104      	bne.n	800bb1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb14:	4b0a      	ldr	r3, [pc, #40]	@ (800bb40 <prvResetNextTaskUnblockTime+0x3c>)
 800bb16:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb1c:	e008      	b.n	800bb30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb1e:	4b07      	ldr	r3, [pc, #28]	@ (800bb3c <prvResetNextTaskUnblockTime+0x38>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	4a04      	ldr	r2, [pc, #16]	@ (800bb40 <prvResetNextTaskUnblockTime+0x3c>)
 800bb2e:	6013      	str	r3, [r2, #0]
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	2000526c 	.word	0x2000526c
 800bb40:	200052d4 	.word	0x200052d4

0800bb44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bb78 <xTaskGetSchedulerState+0x34>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d102      	bne.n	800bb58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bb52:	2301      	movs	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	e008      	b.n	800bb6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb58:	4b08      	ldr	r3, [pc, #32]	@ (800bb7c <xTaskGetSchedulerState+0x38>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bb60:	2302      	movs	r3, #2
 800bb62:	607b      	str	r3, [r7, #4]
 800bb64:	e001      	b.n	800bb6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb6a:	687b      	ldr	r3, [r7, #4]
	}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr
 800bb78:	200052c0 	.word	0x200052c0
 800bb7c:	200052dc 	.word	0x200052dc

0800bb80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d05e      	beq.n	800bc54 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb9a:	4b31      	ldr	r3, [pc, #196]	@ (800bc60 <xTaskPriorityInherit+0xe0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d24e      	bcs.n	800bc42 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	db06      	blt.n	800bbba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbac:	4b2c      	ldr	r3, [pc, #176]	@ (800bc60 <xTaskPriorityInherit+0xe0>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb2:	f1c3 0207 	rsb	r2, r3, #7
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	6959      	ldr	r1, [r3, #20]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4a26      	ldr	r2, [pc, #152]	@ (800bc64 <xTaskPriorityInherit+0xe4>)
 800bbcc:	4413      	add	r3, r2
 800bbce:	4299      	cmp	r1, r3
 800bbd0:	d12f      	bne.n	800bc32 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fa08 	bl	8009fec <uxListRemove>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10a      	bne.n	800bbf8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbec:	43da      	mvns	r2, r3
 800bbee:	4b1e      	ldr	r3, [pc, #120]	@ (800bc68 <xTaskPriorityInherit+0xe8>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	4a1c      	ldr	r2, [pc, #112]	@ (800bc68 <xTaskPriorityInherit+0xe8>)
 800bbf6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bbf8:	4b19      	ldr	r3, [pc, #100]	@ (800bc60 <xTaskPriorityInherit+0xe0>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc06:	2201      	movs	r2, #1
 800bc08:	409a      	lsls	r2, r3
 800bc0a:	4b17      	ldr	r3, [pc, #92]	@ (800bc68 <xTaskPriorityInherit+0xe8>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	4a15      	ldr	r2, [pc, #84]	@ (800bc68 <xTaskPriorityInherit+0xe8>)
 800bc12:	6013      	str	r3, [r2, #0]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc18:	4613      	mov	r3, r2
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4a10      	ldr	r2, [pc, #64]	@ (800bc64 <xTaskPriorityInherit+0xe4>)
 800bc22:	441a      	add	r2, r3
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4610      	mov	r0, r2
 800bc2c:	f7fe f981 	bl	8009f32 <vListInsertEnd>
 800bc30:	e004      	b.n	800bc3c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc32:	4b0b      	ldr	r3, [pc, #44]	@ (800bc60 <xTaskPriorityInherit+0xe0>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	e008      	b.n	800bc54 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc46:	4b06      	ldr	r3, [pc, #24]	@ (800bc60 <xTaskPriorityInherit+0xe0>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d201      	bcs.n	800bc54 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc54:	68fb      	ldr	r3, [r7, #12]
	}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	200051b4 	.word	0x200051b4
 800bc64:	200051b8 	.word	0x200051b8
 800bc68:	200052bc 	.word	0x200052bc

0800bc6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d070      	beq.n	800bd64 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc82:	4b3b      	ldr	r3, [pc, #236]	@ (800bd70 <xTaskPriorityDisinherit+0x104>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d00b      	beq.n	800bca4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc90:	f383 8811 	msr	BASEPRI, r3
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	60fb      	str	r3, [r7, #12]
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10b      	bne.n	800bcc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	60bb      	str	r3, [r7, #8]
}
 800bcbe:	bf00      	nop
 800bcc0:	bf00      	nop
 800bcc2:	e7fd      	b.n	800bcc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcc8:	1e5a      	subs	r2, r3, #1
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d044      	beq.n	800bd64 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d140      	bne.n	800bd64 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	3304      	adds	r3, #4
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe f980 	bl	8009fec <uxListRemove>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d115      	bne.n	800bd1e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf6:	491f      	ldr	r1, [pc, #124]	@ (800bd74 <xTaskPriorityDisinherit+0x108>)
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	440b      	add	r3, r1
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <xTaskPriorityDisinherit+0xb2>
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd12:	43da      	mvns	r2, r3
 800bd14:	4b18      	ldr	r3, [pc, #96]	@ (800bd78 <xTaskPriorityDisinherit+0x10c>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4013      	ands	r3, r2
 800bd1a:	4a17      	ldr	r2, [pc, #92]	@ (800bd78 <xTaskPriorityDisinherit+0x10c>)
 800bd1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2a:	f1c3 0207 	rsb	r2, r3, #7
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd36:	2201      	movs	r2, #1
 800bd38:	409a      	lsls	r2, r3
 800bd3a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd78 <xTaskPriorityDisinherit+0x10c>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	4a0d      	ldr	r2, [pc, #52]	@ (800bd78 <xTaskPriorityDisinherit+0x10c>)
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4a08      	ldr	r2, [pc, #32]	@ (800bd74 <xTaskPriorityDisinherit+0x108>)
 800bd52:	441a      	add	r2, r3
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4610      	mov	r0, r2
 800bd5c:	f7fe f8e9 	bl	8009f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd60:	2301      	movs	r3, #1
 800bd62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd64:	697b      	ldr	r3, [r7, #20]
	}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3718      	adds	r7, #24
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	200051b4 	.word	0x200051b4
 800bd74:	200051b8 	.word	0x200051b8
 800bd78:	200052bc 	.word	0x200052bc

0800bd7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b088      	sub	sp, #32
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d079      	beq.n	800be88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10b      	bne.n	800bdb4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	60fb      	str	r3, [r7, #12]
}
 800bdae:	bf00      	nop
 800bdb0:	bf00      	nop
 800bdb2:	e7fd      	b.n	800bdb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d902      	bls.n	800bdc4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	e002      	b.n	800bdca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdce:	69fa      	ldr	r2, [r7, #28]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d059      	beq.n	800be88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d154      	bne.n	800be88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bdde:	4b2c      	ldr	r3, [pc, #176]	@ (800be90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d10b      	bne.n	800be00 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdec:	f383 8811 	msr	BASEPRI, r3
 800bdf0:	f3bf 8f6f 	isb	sy
 800bdf4:	f3bf 8f4f 	dsb	sy
 800bdf8:	60bb      	str	r3, [r7, #8]
}
 800bdfa:	bf00      	nop
 800bdfc:	bf00      	nop
 800bdfe:	e7fd      	b.n	800bdfc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	69fa      	ldr	r2, [r7, #28]
 800be0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	2b00      	cmp	r3, #0
 800be12:	db04      	blt.n	800be1e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f1c3 0207 	rsb	r2, r3, #7
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	6959      	ldr	r1, [r3, #20]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4a19      	ldr	r2, [pc, #100]	@ (800be94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be2e:	4413      	add	r3, r2
 800be30:	4299      	cmp	r1, r3
 800be32:	d129      	bne.n	800be88 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	3304      	adds	r3, #4
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe f8d7 	bl	8009fec <uxListRemove>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be48:	2201      	movs	r2, #1
 800be4a:	fa02 f303 	lsl.w	r3, r2, r3
 800be4e:	43da      	mvns	r2, r3
 800be50:	4b11      	ldr	r3, [pc, #68]	@ (800be98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4013      	ands	r3, r2
 800be56:	4a10      	ldr	r2, [pc, #64]	@ (800be98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be58:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5e:	2201      	movs	r2, #1
 800be60:	409a      	lsls	r2, r3
 800be62:	4b0d      	ldr	r3, [pc, #52]	@ (800be98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4313      	orrs	r3, r2
 800be68:	4a0b      	ldr	r2, [pc, #44]	@ (800be98 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4a06      	ldr	r2, [pc, #24]	@ (800be94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800be7a:	441a      	add	r2, r3
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	3304      	adds	r3, #4
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f7fe f855 	bl	8009f32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800be88:	bf00      	nop
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}
 800be90:	200051b4 	.word	0x200051b4
 800be94:	200051b8 	.word	0x200051b8
 800be98:	200052bc 	.word	0x200052bc

0800be9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800be9c:	b480      	push	{r7}
 800be9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bea0:	4b07      	ldr	r3, [pc, #28]	@ (800bec0 <pvTaskIncrementMutexHeldCount+0x24>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d004      	beq.n	800beb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bea8:	4b05      	ldr	r3, [pc, #20]	@ (800bec0 <pvTaskIncrementMutexHeldCount+0x24>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800beae:	3201      	adds	r2, #1
 800beb0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800beb2:	4b03      	ldr	r3, [pc, #12]	@ (800bec0 <pvTaskIncrementMutexHeldCount+0x24>)
 800beb4:	681b      	ldr	r3, [r3, #0]
	}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr
 800bec0:	200051b4 	.word	0x200051b4

0800bec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bece:	4b29      	ldr	r3, [pc, #164]	@ (800bf74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed4:	4b28      	ldr	r3, [pc, #160]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3304      	adds	r3, #4
 800beda:	4618      	mov	r0, r3
 800bedc:	f7fe f886 	bl	8009fec <uxListRemove>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bee6:	4b24      	ldr	r3, [pc, #144]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beec:	2201      	movs	r2, #1
 800beee:	fa02 f303 	lsl.w	r3, r2, r3
 800bef2:	43da      	mvns	r2, r3
 800bef4:	4b21      	ldr	r3, [pc, #132]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4013      	ands	r3, r2
 800befa:	4a20      	ldr	r2, [pc, #128]	@ (800bf7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800befc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf04:	d10a      	bne.n	800bf1c <prvAddCurrentTaskToDelayedList+0x58>
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d007      	beq.n	800bf1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3304      	adds	r3, #4
 800bf12:	4619      	mov	r1, r3
 800bf14:	481a      	ldr	r0, [pc, #104]	@ (800bf80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf16:	f7fe f80c 	bl	8009f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf1a:	e026      	b.n	800bf6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4413      	add	r3, r2
 800bf22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf24:	4b14      	ldr	r3, [pc, #80]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d209      	bcs.n	800bf48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf34:	4b13      	ldr	r3, [pc, #76]	@ (800bf84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	4b0f      	ldr	r3, [pc, #60]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3304      	adds	r3, #4
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4610      	mov	r0, r2
 800bf42:	f7fe f81a 	bl	8009f7a <vListInsert>
}
 800bf46:	e010      	b.n	800bf6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf48:	4b0f      	ldr	r3, [pc, #60]	@ (800bf88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	3304      	adds	r3, #4
 800bf52:	4619      	mov	r1, r3
 800bf54:	4610      	mov	r0, r2
 800bf56:	f7fe f810 	bl	8009f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf5a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d202      	bcs.n	800bf6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bf64:	4a09      	ldr	r2, [pc, #36]	@ (800bf8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6013      	str	r3, [r2, #0]
}
 800bf6a:	bf00      	nop
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200052b8 	.word	0x200052b8
 800bf78:	200051b4 	.word	0x200051b4
 800bf7c:	200052bc 	.word	0x200052bc
 800bf80:	200052a0 	.word	0x200052a0
 800bf84:	20005270 	.word	0x20005270
 800bf88:	2000526c 	.word	0x2000526c
 800bf8c:	200052d4 	.word	0x200052d4

0800bf90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3b04      	subs	r3, #4
 800bfa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bfa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3b04      	subs	r3, #4
 800bfae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	f023 0201 	bic.w	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3b04      	subs	r3, #4
 800bfbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfc0:	4a0c      	ldr	r2, [pc, #48]	@ (800bff4 <pxPortInitialiseStack+0x64>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3b14      	subs	r3, #20
 800bfca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3b04      	subs	r3, #4
 800bfd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f06f 0202 	mvn.w	r2, #2
 800bfde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3b20      	subs	r3, #32
 800bfe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr
 800bff4:	0800bff9 	.word	0x0800bff9

0800bff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c002:	4b13      	ldr	r3, [pc, #76]	@ (800c050 <prvTaskExitError+0x58>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00a:	d00b      	beq.n	800c024 <prvTaskExitError+0x2c>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60fb      	str	r3, [r7, #12]
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	e7fd      	b.n	800c020 <prvTaskExitError+0x28>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	60bb      	str	r3, [r7, #8]
}
 800c036:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c038:	bf00      	nop
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d0fc      	beq.n	800c03a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c040:	bf00      	nop
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20000098 	.word	0x20000098
	...

0800c060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c060:	4b07      	ldr	r3, [pc, #28]	@ (800c080 <pxCurrentTCBConst2>)
 800c062:	6819      	ldr	r1, [r3, #0]
 800c064:	6808      	ldr	r0, [r1, #0]
 800c066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06a:	f380 8809 	msr	PSP, r0
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f04f 0000 	mov.w	r0, #0
 800c076:	f380 8811 	msr	BASEPRI, r0
 800c07a:	4770      	bx	lr
 800c07c:	f3af 8000 	nop.w

0800c080 <pxCurrentTCBConst2>:
 800c080:	200051b4 	.word	0x200051b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c084:	bf00      	nop
 800c086:	bf00      	nop

0800c088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c088:	4808      	ldr	r0, [pc, #32]	@ (800c0ac <prvPortStartFirstTask+0x24>)
 800c08a:	6800      	ldr	r0, [r0, #0]
 800c08c:	6800      	ldr	r0, [r0, #0]
 800c08e:	f380 8808 	msr	MSP, r0
 800c092:	f04f 0000 	mov.w	r0, #0
 800c096:	f380 8814 	msr	CONTROL, r0
 800c09a:	b662      	cpsie	i
 800c09c:	b661      	cpsie	f
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	df00      	svc	0
 800c0a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0aa:	bf00      	nop
 800c0ac:	e000ed08 	.word	0xe000ed08

0800c0b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c0b6:	4b47      	ldr	r3, [pc, #284]	@ (800c1d4 <xPortStartScheduler+0x124>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a47      	ldr	r2, [pc, #284]	@ (800c1d8 <xPortStartScheduler+0x128>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d10b      	bne.n	800c0d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	60fb      	str	r3, [r7, #12]
}
 800c0d2:	bf00      	nop
 800c0d4:	bf00      	nop
 800c0d6:	e7fd      	b.n	800c0d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c1d4 <xPortStartScheduler+0x124>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c1dc <xPortStartScheduler+0x12c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d10b      	bne.n	800c0fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e6:	f383 8811 	msr	BASEPRI, r3
 800c0ea:	f3bf 8f6f 	isb	sy
 800c0ee:	f3bf 8f4f 	dsb	sy
 800c0f2:	613b      	str	r3, [r7, #16]
}
 800c0f4:	bf00      	nop
 800c0f6:	bf00      	nop
 800c0f8:	e7fd      	b.n	800c0f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0fa:	4b39      	ldr	r3, [pc, #228]	@ (800c1e0 <xPortStartScheduler+0x130>)
 800c0fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	22ff      	movs	r2, #255	@ 0xff
 800c10a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	b2db      	uxtb	r3, r3
 800c112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	4b31      	ldr	r3, [pc, #196]	@ (800c1e4 <xPortStartScheduler+0x134>)
 800c120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c122:	4b31      	ldr	r3, [pc, #196]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c124:	2207      	movs	r2, #7
 800c126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c128:	e009      	b.n	800c13e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c12a:	4b2f      	ldr	r3, [pc, #188]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3b01      	subs	r3, #1
 800c130:	4a2d      	ldr	r2, [pc, #180]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c134:	78fb      	ldrb	r3, [r7, #3]
 800c136:	b2db      	uxtb	r3, r3
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c13e:	78fb      	ldrb	r3, [r7, #3]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c146:	2b80      	cmp	r3, #128	@ 0x80
 800c148:	d0ef      	beq.n	800c12a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c14a:	4b27      	ldr	r3, [pc, #156]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f1c3 0307 	rsb	r3, r3, #7
 800c152:	2b04      	cmp	r3, #4
 800c154:	d00b      	beq.n	800c16e <xPortStartScheduler+0xbe>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	60bb      	str	r3, [r7, #8]
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c16e:	4b1e      	ldr	r3, [pc, #120]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	021b      	lsls	r3, r3, #8
 800c174:	4a1c      	ldr	r2, [pc, #112]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c178:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c180:	4a19      	ldr	r2, [pc, #100]	@ (800c1e8 <xPortStartScheduler+0x138>)
 800c182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	b2da      	uxtb	r2, r3
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c18c:	4b17      	ldr	r3, [pc, #92]	@ (800c1ec <xPortStartScheduler+0x13c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a16      	ldr	r2, [pc, #88]	@ (800c1ec <xPortStartScheduler+0x13c>)
 800c192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c198:	4b14      	ldr	r3, [pc, #80]	@ (800c1ec <xPortStartScheduler+0x13c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a13      	ldr	r2, [pc, #76]	@ (800c1ec <xPortStartScheduler+0x13c>)
 800c19e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c1a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1a4:	f000 f8da 	bl	800c35c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1a8:	4b11      	ldr	r3, [pc, #68]	@ (800c1f0 <xPortStartScheduler+0x140>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1ae:	f000 f8f9 	bl	800c3a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1b2:	4b10      	ldr	r3, [pc, #64]	@ (800c1f4 <xPortStartScheduler+0x144>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c1f4 <xPortStartScheduler+0x144>)
 800c1b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c1bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1be:	f7ff ff63 	bl	800c088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1c2:	f7ff fa6f 	bl	800b6a4 <vTaskSwitchContext>
	prvTaskExitError();
 800c1c6:	f7ff ff17 	bl	800bff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	e000ed00 	.word	0xe000ed00
 800c1d8:	410fc271 	.word	0x410fc271
 800c1dc:	410fc270 	.word	0x410fc270
 800c1e0:	e000e400 	.word	0xe000e400
 800c1e4:	200052e0 	.word	0x200052e0
 800c1e8:	200052e4 	.word	0x200052e4
 800c1ec:	e000ed20 	.word	0xe000ed20
 800c1f0:	20000098 	.word	0x20000098
 800c1f4:	e000ef34 	.word	0xe000ef34

0800c1f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c212:	4b10      	ldr	r3, [pc, #64]	@ (800c254 <vPortEnterCritical+0x5c>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3301      	adds	r3, #1
 800c218:	4a0e      	ldr	r2, [pc, #56]	@ (800c254 <vPortEnterCritical+0x5c>)
 800c21a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c21c:	4b0d      	ldr	r3, [pc, #52]	@ (800c254 <vPortEnterCritical+0x5c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d110      	bne.n	800c246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c224:	4b0c      	ldr	r3, [pc, #48]	@ (800c258 <vPortEnterCritical+0x60>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00b      	beq.n	800c246 <vPortEnterCritical+0x4e>
	__asm volatile
 800c22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c232:	f383 8811 	msr	BASEPRI, r3
 800c236:	f3bf 8f6f 	isb	sy
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	603b      	str	r3, [r7, #0]
}
 800c240:	bf00      	nop
 800c242:	bf00      	nop
 800c244:	e7fd      	b.n	800c242 <vPortEnterCritical+0x4a>
	}
}
 800c246:	bf00      	nop
 800c248:	370c      	adds	r7, #12
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	20000098 	.word	0x20000098
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c262:	4b12      	ldr	r3, [pc, #72]	@ (800c2ac <vPortExitCritical+0x50>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10b      	bne.n	800c282 <vPortExitCritical+0x26>
	__asm volatile
 800c26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
 800c27a:	607b      	str	r3, [r7, #4]
}
 800c27c:	bf00      	nop
 800c27e:	bf00      	nop
 800c280:	e7fd      	b.n	800c27e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c282:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ac <vPortExitCritical+0x50>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	3b01      	subs	r3, #1
 800c288:	4a08      	ldr	r2, [pc, #32]	@ (800c2ac <vPortExitCritical+0x50>)
 800c28a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c28c:	4b07      	ldr	r3, [pc, #28]	@ (800c2ac <vPortExitCritical+0x50>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <vPortExitCritical+0x44>
 800c294:	2300      	movs	r3, #0
 800c296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f383 8811 	msr	BASEPRI, r3
}
 800c29e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20000098 	.word	0x20000098

0800c2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2b0:	f3ef 8009 	mrs	r0, PSP
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	4b15      	ldr	r3, [pc, #84]	@ (800c310 <pxCurrentTCBConst>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	f01e 0f10 	tst.w	lr, #16
 800c2c0:	bf08      	it	eq
 800c2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ca:	6010      	str	r0, [r2, #0]
 800c2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c2d4:	f380 8811 	msr	BASEPRI, r0
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f7ff f9e0 	bl	800b6a4 <vTaskSwitchContext>
 800c2e4:	f04f 0000 	mov.w	r0, #0
 800c2e8:	f380 8811 	msr	BASEPRI, r0
 800c2ec:	bc09      	pop	{r0, r3}
 800c2ee:	6819      	ldr	r1, [r3, #0]
 800c2f0:	6808      	ldr	r0, [r1, #0]
 800c2f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f6:	f01e 0f10 	tst.w	lr, #16
 800c2fa:	bf08      	it	eq
 800c2fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c300:	f380 8809 	msr	PSP, r0
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	f3af 8000 	nop.w

0800c310 <pxCurrentTCBConst>:
 800c310:	200051b4 	.word	0x200051b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c332:	f7ff f8fd 	bl	800b530 <xTaskIncrementTick>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c33c:	4b06      	ldr	r3, [pc, #24]	@ (800c358 <SysTick_Handler+0x40>)
 800c33e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c342:	601a      	str	r2, [r3, #0]
 800c344:	2300      	movs	r3, #0
 800c346:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	f383 8811 	msr	BASEPRI, r3
}
 800c34e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c350:	bf00      	nop
 800c352:	3708      	adds	r7, #8
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	e000ed04 	.word	0xe000ed04

0800c35c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c360:	4b0b      	ldr	r3, [pc, #44]	@ (800c390 <vPortSetupTimerInterrupt+0x34>)
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c366:	4b0b      	ldr	r3, [pc, #44]	@ (800c394 <vPortSetupTimerInterrupt+0x38>)
 800c368:	2200      	movs	r2, #0
 800c36a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c36c:	4b0a      	ldr	r3, [pc, #40]	@ (800c398 <vPortSetupTimerInterrupt+0x3c>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a0a      	ldr	r2, [pc, #40]	@ (800c39c <vPortSetupTimerInterrupt+0x40>)
 800c372:	fba2 2303 	umull	r2, r3, r2, r3
 800c376:	099b      	lsrs	r3, r3, #6
 800c378:	4a09      	ldr	r2, [pc, #36]	@ (800c3a0 <vPortSetupTimerInterrupt+0x44>)
 800c37a:	3b01      	subs	r3, #1
 800c37c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c37e:	4b04      	ldr	r3, [pc, #16]	@ (800c390 <vPortSetupTimerInterrupt+0x34>)
 800c380:	2207      	movs	r2, #7
 800c382:	601a      	str	r2, [r3, #0]
}
 800c384:	bf00      	nop
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	e000e010 	.word	0xe000e010
 800c394:	e000e018 	.word	0xe000e018
 800c398:	20000000 	.word	0x20000000
 800c39c:	10624dd3 	.word	0x10624dd3
 800c3a0:	e000e014 	.word	0xe000e014

0800c3a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c3b4 <vPortEnableVFP+0x10>
 800c3a8:	6801      	ldr	r1, [r0, #0]
 800c3aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c3ae:	6001      	str	r1, [r0, #0]
 800c3b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3b2:	bf00      	nop
 800c3b4:	e000ed88 	.word	0xe000ed88

0800c3b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3be:	f3ef 8305 	mrs	r3, IPSR
 800c3c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b0f      	cmp	r3, #15
 800c3c8:	d915      	bls.n	800c3f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ca:	4a18      	ldr	r2, [pc, #96]	@ (800c42c <vPortValidateInterruptPriority+0x74>)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3d4:	4b16      	ldr	r3, [pc, #88]	@ (800c430 <vPortValidateInterruptPriority+0x78>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	7afa      	ldrb	r2, [r7, #11]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d20b      	bcs.n	800c3f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	607b      	str	r3, [r7, #4]
}
 800c3f0:	bf00      	nop
 800c3f2:	bf00      	nop
 800c3f4:	e7fd      	b.n	800c3f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c434 <vPortValidateInterruptPriority+0x7c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c438 <vPortValidateInterruptPriority+0x80>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	429a      	cmp	r2, r3
 800c404:	d90b      	bls.n	800c41e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	603b      	str	r3, [r7, #0]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <vPortValidateInterruptPriority+0x62>
	}
 800c41e:	bf00      	nop
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	e000e3f0 	.word	0xe000e3f0
 800c430:	200052e0 	.word	0x200052e0
 800c434:	e000ed0c 	.word	0xe000ed0c
 800c438:	200052e4 	.word	0x200052e4

0800c43c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b08a      	sub	sp, #40	@ 0x28
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c448:	f7fe ffa4 	bl	800b394 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c44c:	4b5c      	ldr	r3, [pc, #368]	@ (800c5c0 <pvPortMalloc+0x184>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c454:	f000 f924 	bl	800c6a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c458:	4b5a      	ldr	r3, [pc, #360]	@ (800c5c4 <pvPortMalloc+0x188>)
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4013      	ands	r3, r2
 800c460:	2b00      	cmp	r3, #0
 800c462:	f040 8095 	bne.w	800c590 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d01e      	beq.n	800c4aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c46c:	2208      	movs	r2, #8
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4413      	add	r3, r2
 800c472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d015      	beq.n	800c4aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f023 0307 	bic.w	r3, r3, #7
 800c484:	3308      	adds	r3, #8
 800c486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d00b      	beq.n	800c4aa <pvPortMalloc+0x6e>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	617b      	str	r3, [r7, #20]
}
 800c4a4:	bf00      	nop
 800c4a6:	bf00      	nop
 800c4a8:	e7fd      	b.n	800c4a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d06f      	beq.n	800c590 <pvPortMalloc+0x154>
 800c4b0:	4b45      	ldr	r3, [pc, #276]	@ (800c5c8 <pvPortMalloc+0x18c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d86a      	bhi.n	800c590 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4ba:	4b44      	ldr	r3, [pc, #272]	@ (800c5cc <pvPortMalloc+0x190>)
 800c4bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4be:	4b43      	ldr	r3, [pc, #268]	@ (800c5cc <pvPortMalloc+0x190>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4c4:	e004      	b.n	800c4d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d903      	bls.n	800c4e2 <pvPortMalloc+0xa6>
 800c4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f1      	bne.n	800c4c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4e2:	4b37      	ldr	r3, [pc, #220]	@ (800c5c0 <pvPortMalloc+0x184>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d051      	beq.n	800c590 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4ec:	6a3b      	ldr	r3, [r7, #32]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	4413      	add	r3, r2
 800c4f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	6a3b      	ldr	r3, [r7, #32]
 800c4fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	1ad2      	subs	r2, r2, r3
 800c506:	2308      	movs	r3, #8
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d920      	bls.n	800c550 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c50e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4413      	add	r3, r2
 800c514:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	f003 0307 	and.w	r3, r3, #7
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d00b      	beq.n	800c538 <pvPortMalloc+0xfc>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c524:	f383 8811 	msr	BASEPRI, r3
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	613b      	str	r3, [r7, #16]
}
 800c532:	bf00      	nop
 800c534:	bf00      	nop
 800c536:	e7fd      	b.n	800c534 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	1ad2      	subs	r2, r2, r3
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c54a:	69b8      	ldr	r0, [r7, #24]
 800c54c:	f000 f90a 	bl	800c764 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c550:	4b1d      	ldr	r3, [pc, #116]	@ (800c5c8 <pvPortMalloc+0x18c>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c8 <pvPortMalloc+0x18c>)
 800c55c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c55e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5c8 <pvPortMalloc+0x18c>)
 800c560:	681a      	ldr	r2, [r3, #0]
 800c562:	4b1b      	ldr	r3, [pc, #108]	@ (800c5d0 <pvPortMalloc+0x194>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d203      	bcs.n	800c572 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c56a:	4b17      	ldr	r3, [pc, #92]	@ (800c5c8 <pvPortMalloc+0x18c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a18      	ldr	r2, [pc, #96]	@ (800c5d0 <pvPortMalloc+0x194>)
 800c570:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	685a      	ldr	r2, [r3, #4]
 800c576:	4b13      	ldr	r3, [pc, #76]	@ (800c5c4 <pvPortMalloc+0x188>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	431a      	orrs	r2, r3
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c586:	4b13      	ldr	r3, [pc, #76]	@ (800c5d4 <pvPortMalloc+0x198>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	3301      	adds	r3, #1
 800c58c:	4a11      	ldr	r2, [pc, #68]	@ (800c5d4 <pvPortMalloc+0x198>)
 800c58e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c590:	f7fe ff0e 	bl	800b3b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <pvPortMalloc+0x17a>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	60fb      	str	r3, [r7, #12]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <pvPortMalloc+0x176>
	return pvReturn;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3728      	adds	r7, #40	@ 0x28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20008ef0 	.word	0x20008ef0
 800c5c4:	20008f04 	.word	0x20008f04
 800c5c8:	20008ef4 	.word	0x20008ef4
 800c5cc:	20008ee8 	.word	0x20008ee8
 800c5d0:	20008ef8 	.word	0x20008ef8
 800c5d4:	20008efc 	.word	0x20008efc

0800c5d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d04f      	beq.n	800c68a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	425b      	negs	r3, r3
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	4b25      	ldr	r3, [pc, #148]	@ (800c694 <vPortFree+0xbc>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4013      	ands	r3, r2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10b      	bne.n	800c61e <vPortFree+0x46>
	__asm volatile
 800c606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	60fb      	str	r3, [r7, #12]
}
 800c618:	bf00      	nop
 800c61a:	bf00      	nop
 800c61c:	e7fd      	b.n	800c61a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00b      	beq.n	800c63e <vPortFree+0x66>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	60bb      	str	r3, [r7, #8]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	4b14      	ldr	r3, [pc, #80]	@ (800c694 <vPortFree+0xbc>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4013      	ands	r3, r2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d01e      	beq.n	800c68a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d11a      	bne.n	800c68a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	4b0e      	ldr	r3, [pc, #56]	@ (800c694 <vPortFree+0xbc>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	43db      	mvns	r3, r3
 800c65e:	401a      	ands	r2, r3
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c664:	f7fe fe96 	bl	800b394 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	685a      	ldr	r2, [r3, #4]
 800c66c:	4b0a      	ldr	r3, [pc, #40]	@ (800c698 <vPortFree+0xc0>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4413      	add	r3, r2
 800c672:	4a09      	ldr	r2, [pc, #36]	@ (800c698 <vPortFree+0xc0>)
 800c674:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c676:	6938      	ldr	r0, [r7, #16]
 800c678:	f000 f874 	bl	800c764 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c67c:	4b07      	ldr	r3, [pc, #28]	@ (800c69c <vPortFree+0xc4>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	3301      	adds	r3, #1
 800c682:	4a06      	ldr	r2, [pc, #24]	@ (800c69c <vPortFree+0xc4>)
 800c684:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c686:	f7fe fe93 	bl	800b3b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c68a:	bf00      	nop
 800c68c:	3718      	adds	r7, #24
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20008f04 	.word	0x20008f04
 800c698:	20008ef4 	.word	0x20008ef4
 800c69c:	20008f00 	.word	0x20008f00

0800c6a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c6aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6ac:	4b27      	ldr	r3, [pc, #156]	@ (800c74c <prvHeapInit+0xac>)
 800c6ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	f003 0307 	and.w	r3, r3, #7
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00c      	beq.n	800c6d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	3307      	adds	r3, #7
 800c6be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 0307 	bic.w	r3, r3, #7
 800c6c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c74c <prvHeapInit+0xac>)
 800c6d0:	4413      	add	r3, r2
 800c6d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c750 <prvHeapInit+0xb0>)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6de:	4b1c      	ldr	r3, [pc, #112]	@ (800c750 <prvHeapInit+0xb0>)
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	1a9b      	subs	r3, r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f023 0307 	bic.w	r3, r3, #7
 800c6fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4a15      	ldr	r2, [pc, #84]	@ (800c754 <prvHeapInit+0xb4>)
 800c700:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c702:	4b14      	ldr	r3, [pc, #80]	@ (800c754 <prvHeapInit+0xb4>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2200      	movs	r2, #0
 800c708:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c70a:	4b12      	ldr	r3, [pc, #72]	@ (800c754 <prvHeapInit+0xb4>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2200      	movs	r2, #0
 800c710:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	68fa      	ldr	r2, [r7, #12]
 800c71a:	1ad2      	subs	r2, r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c720:	4b0c      	ldr	r3, [pc, #48]	@ (800c754 <prvHeapInit+0xb4>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	4a0a      	ldr	r2, [pc, #40]	@ (800c758 <prvHeapInit+0xb8>)
 800c72e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	4a09      	ldr	r2, [pc, #36]	@ (800c75c <prvHeapInit+0xbc>)
 800c736:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c738:	4b09      	ldr	r3, [pc, #36]	@ (800c760 <prvHeapInit+0xc0>)
 800c73a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c73e:	601a      	str	r2, [r3, #0]
}
 800c740:	bf00      	nop
 800c742:	3714      	adds	r7, #20
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	200052e8 	.word	0x200052e8
 800c750:	20008ee8 	.word	0x20008ee8
 800c754:	20008ef0 	.word	0x20008ef0
 800c758:	20008ef8 	.word	0x20008ef8
 800c75c:	20008ef4 	.word	0x20008ef4
 800c760:	20008f04 	.word	0x20008f04

0800c764 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c76c:	4b28      	ldr	r3, [pc, #160]	@ (800c810 <prvInsertBlockIntoFreeList+0xac>)
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	e002      	b.n	800c778 <prvInsertBlockIntoFreeList+0x14>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d8f7      	bhi.n	800c772 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	4413      	add	r3, r2
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	429a      	cmp	r2, r3
 800c792:	d108      	bne.n	800c7a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	441a      	add	r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	441a      	add	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d118      	bne.n	800c7ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	4b15      	ldr	r3, [pc, #84]	@ (800c814 <prvInsertBlockIntoFreeList+0xb0>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d00d      	beq.n	800c7e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	441a      	add	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	681a      	ldr	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	601a      	str	r2, [r3, #0]
 800c7e0:	e008      	b.n	800c7f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c814 <prvInsertBlockIntoFreeList+0xb0>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	601a      	str	r2, [r3, #0]
 800c7ea:	e003      	b.n	800c7f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d002      	beq.n	800c802 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c802:	bf00      	nop
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	20008ee8 	.word	0x20008ee8
 800c814:	20008ef0 	.word	0x20008ef0

0800c818 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c822:	f007 fb83 	bl	8013f2c <sys_timeouts_sleeptime>
 800c826:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d10b      	bne.n	800c848 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c830:	4813      	ldr	r0, [pc, #76]	@ (800c880 <tcpip_timeouts_mbox_fetch+0x68>)
 800c832:	f009 fa6c 	bl	8015d0e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c836:	2200      	movs	r2, #0
 800c838:	6839      	ldr	r1, [r7, #0]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f009 f9de 	bl	8015bfc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c840:	480f      	ldr	r0, [pc, #60]	@ (800c880 <tcpip_timeouts_mbox_fetch+0x68>)
 800c842:	f009 fa55 	bl	8015cf0 <sys_mutex_lock>
    return;
 800c846:	e018      	b.n	800c87a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d102      	bne.n	800c854 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c84e:	f007 fb33 	bl	8013eb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c852:	e7e6      	b.n	800c822 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c854:	480a      	ldr	r0, [pc, #40]	@ (800c880 <tcpip_timeouts_mbox_fetch+0x68>)
 800c856:	f009 fa5a 	bl	8015d0e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f009 f9cc 	bl	8015bfc <sys_arch_mbox_fetch>
 800c864:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c866:	4806      	ldr	r0, [pc, #24]	@ (800c880 <tcpip_timeouts_mbox_fetch+0x68>)
 800c868:	f009 fa42 	bl	8015cf0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c872:	d102      	bne.n	800c87a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c874:	f007 fb20 	bl	8013eb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c878:	e7d3      	b.n	800c822 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	20008f14 	.word	0x20008f14

0800c884 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c88c:	4810      	ldr	r0, [pc, #64]	@ (800c8d0 <tcpip_thread+0x4c>)
 800c88e:	f009 fa2f 	bl	8015cf0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c892:	4b10      	ldr	r3, [pc, #64]	@ (800c8d4 <tcpip_thread+0x50>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d005      	beq.n	800c8a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c89a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d4 <tcpip_thread+0x50>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a0e      	ldr	r2, [pc, #56]	@ (800c8d8 <tcpip_thread+0x54>)
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	4610      	mov	r0, r2
 800c8a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c8a6:	f107 030c 	add.w	r3, r7, #12
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	480b      	ldr	r0, [pc, #44]	@ (800c8dc <tcpip_thread+0x58>)
 800c8ae:	f7ff ffb3 	bl	800c818 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c8b8:	4b09      	ldr	r3, [pc, #36]	@ (800c8e0 <tcpip_thread+0x5c>)
 800c8ba:	2291      	movs	r2, #145	@ 0x91
 800c8bc:	4909      	ldr	r1, [pc, #36]	@ (800c8e4 <tcpip_thread+0x60>)
 800c8be:	480a      	ldr	r0, [pc, #40]	@ (800c8e8 <tcpip_thread+0x64>)
 800c8c0:	f00a f888 	bl	80169d4 <iprintf>
      continue;
 800c8c4:	e003      	b.n	800c8ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f000 f80f 	bl	800c8ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c8ce:	e7ea      	b.n	800c8a6 <tcpip_thread+0x22>
 800c8d0:	20008f14 	.word	0x20008f14
 800c8d4:	20008f08 	.word	0x20008f08
 800c8d8:	20008f0c 	.word	0x20008f0c
 800c8dc:	20008f10 	.word	0x20008f10
 800c8e0:	08017ec0 	.word	0x08017ec0
 800c8e4:	08017ef0 	.word	0x08017ef0
 800c8e8:	08017f10 	.word	0x08017f10

0800c8ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d026      	beq.n	800c94a <tcpip_thread_handle_msg+0x5e>
 800c8fc:	2b02      	cmp	r3, #2
 800c8fe:	dc2b      	bgt.n	800c958 <tcpip_thread_handle_msg+0x6c>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <tcpip_thread_handle_msg+0x1e>
 800c904:	2b01      	cmp	r3, #1
 800c906:	d015      	beq.n	800c934 <tcpip_thread_handle_msg+0x48>
 800c908:	e026      	b.n	800c958 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	6850      	ldr	r0, [r2, #4]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	6892      	ldr	r2, [r2, #8]
 800c916:	4611      	mov	r1, r2
 800c918:	4798      	blx	r3
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	4618      	mov	r0, r3
 800c926:	f001 fde5 	bl	800e4f4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	2009      	movs	r0, #9
 800c92e:	f000 fe63 	bl	800d5f8 <memp_free>
      break;
 800c932:	e018      	b.n	800c966 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	6892      	ldr	r2, [r2, #8]
 800c93c:	4610      	mov	r0, r2
 800c93e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	2008      	movs	r0, #8
 800c944:	f000 fe58 	bl	800d5f8 <memp_free>
      break;
 800c948:	e00d      	b.n	800c966 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	6892      	ldr	r2, [r2, #8]
 800c952:	4610      	mov	r0, r2
 800c954:	4798      	blx	r3
      break;
 800c956:	e006      	b.n	800c966 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c958:	4b05      	ldr	r3, [pc, #20]	@ (800c970 <tcpip_thread_handle_msg+0x84>)
 800c95a:	22cf      	movs	r2, #207	@ 0xcf
 800c95c:	4905      	ldr	r1, [pc, #20]	@ (800c974 <tcpip_thread_handle_msg+0x88>)
 800c95e:	4806      	ldr	r0, [pc, #24]	@ (800c978 <tcpip_thread_handle_msg+0x8c>)
 800c960:	f00a f838 	bl	80169d4 <iprintf>
      break;
 800c964:	bf00      	nop
  }
}
 800c966:	bf00      	nop
 800c968:	3708      	adds	r7, #8
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	08017ec0 	.word	0x08017ec0
 800c974:	08017ef0 	.word	0x08017ef0
 800c978:	08017f10 	.word	0x08017f10

0800c97c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c988:	481a      	ldr	r0, [pc, #104]	@ (800c9f4 <tcpip_inpkt+0x78>)
 800c98a:	f009 f976 	bl	8015c7a <sys_mbox_valid>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <tcpip_inpkt+0x24>
 800c994:	4b18      	ldr	r3, [pc, #96]	@ (800c9f8 <tcpip_inpkt+0x7c>)
 800c996:	22fc      	movs	r2, #252	@ 0xfc
 800c998:	4918      	ldr	r1, [pc, #96]	@ (800c9fc <tcpip_inpkt+0x80>)
 800c99a:	4819      	ldr	r0, [pc, #100]	@ (800ca00 <tcpip_inpkt+0x84>)
 800c99c:	f00a f81a 	bl	80169d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c9a0:	2009      	movs	r0, #9
 800c9a2:	f000 fdb3 	bl	800d50c <memp_malloc>
 800c9a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d102      	bne.n	800c9b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b2:	e01a      	b.n	800c9ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	68ba      	ldr	r2, [r7, #8]
 800c9c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	4809      	ldr	r0, [pc, #36]	@ (800c9f4 <tcpip_inpkt+0x78>)
 800c9d0:	f009 f8fa 	bl	8015bc8 <sys_mbox_trypost>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d006      	beq.n	800c9e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c9da:	6979      	ldr	r1, [r7, #20]
 800c9dc:	2009      	movs	r0, #9
 800c9de:	f000 fe0b 	bl	800d5f8 <memp_free>
    return ERR_MEM;
 800c9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e6:	e000      	b.n	800c9ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c9e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20008f10 	.word	0x20008f10
 800c9f8:	08017ec0 	.word	0x08017ec0
 800c9fc:	08017f38 	.word	0x08017f38
 800ca00:	08017f10 	.word	0x08017f10

0800ca04 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca14:	f003 0318 	and.w	r3, r3, #24
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d006      	beq.n	800ca2a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ca1c:	4a08      	ldr	r2, [pc, #32]	@ (800ca40 <tcpip_input+0x3c>)
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ffab 	bl	800c97c <tcpip_inpkt>
 800ca26:	4603      	mov	r3, r0
 800ca28:	e005      	b.n	800ca36 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ca2a:	4a06      	ldr	r2, [pc, #24]	@ (800ca44 <tcpip_input+0x40>)
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff ffa4 	bl	800c97c <tcpip_inpkt>
 800ca34:	4603      	mov	r3, r0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	08015a4d 	.word	0x08015a4d
 800ca44:	08014955 	.word	0x08014955

0800ca48 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ca52:	4819      	ldr	r0, [pc, #100]	@ (800cab8 <tcpip_try_callback+0x70>)
 800ca54:	f009 f911 	bl	8015c7a <sys_mbox_valid>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <tcpip_try_callback+0x24>
 800ca5e:	4b17      	ldr	r3, [pc, #92]	@ (800cabc <tcpip_try_callback+0x74>)
 800ca60:	f240 125d 	movw	r2, #349	@ 0x15d
 800ca64:	4916      	ldr	r1, [pc, #88]	@ (800cac0 <tcpip_try_callback+0x78>)
 800ca66:	4817      	ldr	r0, [pc, #92]	@ (800cac4 <tcpip_try_callback+0x7c>)
 800ca68:	f009 ffb4 	bl	80169d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ca6c:	2008      	movs	r0, #8
 800ca6e:	f000 fd4d 	bl	800d50c <memp_malloc>
 800ca72:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ca7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7e:	e017      	b.n	800cab0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2201      	movs	r2, #1
 800ca84:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	4808      	ldr	r0, [pc, #32]	@ (800cab8 <tcpip_try_callback+0x70>)
 800ca96:	f009 f897 	bl	8015bc8 <sys_mbox_trypost>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d006      	beq.n	800caae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800caa0:	68f9      	ldr	r1, [r7, #12]
 800caa2:	2008      	movs	r0, #8
 800caa4:	f000 fda8 	bl	800d5f8 <memp_free>
    return ERR_MEM;
 800caa8:	f04f 33ff 	mov.w	r3, #4294967295
 800caac:	e000      	b.n	800cab0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	20008f10 	.word	0x20008f10
 800cabc:	08017ec0 	.word	0x08017ec0
 800cac0:	08017f38 	.word	0x08017f38
 800cac4:	08017f10 	.word	0x08017f10

0800cac8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af02      	add	r7, sp, #8
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cad2:	f000 f872 	bl	800cbba <lwip_init>

  tcpip_init_done = initfunc;
 800cad6:	4a17      	ldr	r2, [pc, #92]	@ (800cb34 <tcpip_init+0x6c>)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cadc:	4a16      	ldr	r2, [pc, #88]	@ (800cb38 <tcpip_init+0x70>)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cae2:	2106      	movs	r1, #6
 800cae4:	4815      	ldr	r0, [pc, #84]	@ (800cb3c <tcpip_init+0x74>)
 800cae6:	f009 f84d 	bl	8015b84 <sys_mbox_new>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d006      	beq.n	800cafe <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800caf0:	4b13      	ldr	r3, [pc, #76]	@ (800cb40 <tcpip_init+0x78>)
 800caf2:	f240 2261 	movw	r2, #609	@ 0x261
 800caf6:	4913      	ldr	r1, [pc, #76]	@ (800cb44 <tcpip_init+0x7c>)
 800caf8:	4813      	ldr	r0, [pc, #76]	@ (800cb48 <tcpip_init+0x80>)
 800cafa:	f009 ff6b 	bl	80169d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cafe:	4813      	ldr	r0, [pc, #76]	@ (800cb4c <tcpip_init+0x84>)
 800cb00:	f009 f8da 	bl	8015cb8 <sys_mutex_new>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d006      	beq.n	800cb18 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb40 <tcpip_init+0x78>)
 800cb0c:	f240 2265 	movw	r2, #613	@ 0x265
 800cb10:	490f      	ldr	r1, [pc, #60]	@ (800cb50 <tcpip_init+0x88>)
 800cb12:	480d      	ldr	r0, [pc, #52]	@ (800cb48 <tcpip_init+0x80>)
 800cb14:	f009 ff5e 	bl	80169d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cb18:	2300      	movs	r3, #0
 800cb1a:	9300      	str	r3, [sp, #0]
 800cb1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb20:	2200      	movs	r2, #0
 800cb22:	490c      	ldr	r1, [pc, #48]	@ (800cb54 <tcpip_init+0x8c>)
 800cb24:	480c      	ldr	r0, [pc, #48]	@ (800cb58 <tcpip_init+0x90>)
 800cb26:	f009 f8ff 	bl	8015d28 <sys_thread_new>
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20008f08 	.word	0x20008f08
 800cb38:	20008f0c 	.word	0x20008f0c
 800cb3c:	20008f10 	.word	0x20008f10
 800cb40:	08017ec0 	.word	0x08017ec0
 800cb44:	08017f48 	.word	0x08017f48
 800cb48:	08017f10 	.word	0x08017f10
 800cb4c:	20008f14 	.word	0x20008f14
 800cb50:	08017f6c 	.word	0x08017f6c
 800cb54:	0800c885 	.word	0x0800c885
 800cb58:	08017f90 	.word	0x08017f90

0800cb5c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	4603      	mov	r3, r0
 800cb64:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cb66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb6a:	021b      	lsls	r3, r3, #8
 800cb6c:	b21a      	sxth	r2, r3
 800cb6e:	88fb      	ldrh	r3, [r7, #6]
 800cb70:	0a1b      	lsrs	r3, r3, #8
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	b21b      	sxth	r3, r3
 800cb76:	4313      	orrs	r3, r2
 800cb78:	b21b      	sxth	r3, r3
 800cb7a:	b29b      	uxth	r3, r3
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	061a      	lsls	r2, r3, #24
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	021b      	lsls	r3, r3, #8
 800cb98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb9c:	431a      	orrs	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	0a1b      	lsrs	r3, r3, #8
 800cba2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cba6:	431a      	orrs	r2, r3
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	0e1b      	lsrs	r3, r3, #24
 800cbac:	4313      	orrs	r3, r2
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cbc4:	f009 f86a 	bl	8015c9c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cbc8:	f000 f8d4 	bl	800cd74 <mem_init>
  memp_init();
 800cbcc:	f000 fc30 	bl	800d430 <memp_init>
  pbuf_init();
  netif_init();
 800cbd0:	f000 fd3c 	bl	800d64c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cbd4:	f007 f9e2 	bl	8013f9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cbd8:	f001 fef4 	bl	800e9c4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cbdc:	f007 f924 	bl	8013e28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cbe0:	bf00      	nop
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cbf2:	4b05      	ldr	r3, [pc, #20]	@ (800cc08 <ptr_to_mem+0x20>)
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	4413      	add	r3, r2
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	370c      	adds	r7, #12
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
 800cc06:	bf00      	nop
 800cc08:	2000cb44 	.word	0x2000cb44

0800cc0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cc14:	4b05      	ldr	r3, [pc, #20]	@ (800cc2c <mem_to_ptr+0x20>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	b29b      	uxth	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	2000cb44 	.word	0x2000cb44

0800cc30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cc30:	b590      	push	{r4, r7, lr}
 800cc32:	b085      	sub	sp, #20
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cc38:	4b45      	ldr	r3, [pc, #276]	@ (800cd50 <plug_holes+0x120>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d206      	bcs.n	800cc50 <plug_holes+0x20>
 800cc42:	4b44      	ldr	r3, [pc, #272]	@ (800cd54 <plug_holes+0x124>)
 800cc44:	f240 12df 	movw	r2, #479	@ 0x1df
 800cc48:	4943      	ldr	r1, [pc, #268]	@ (800cd58 <plug_holes+0x128>)
 800cc4a:	4844      	ldr	r0, [pc, #272]	@ (800cd5c <plug_holes+0x12c>)
 800cc4c:	f009 fec2 	bl	80169d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cc50:	4b43      	ldr	r3, [pc, #268]	@ (800cd60 <plug_holes+0x130>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d306      	bcc.n	800cc68 <plug_holes+0x38>
 800cc5a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd54 <plug_holes+0x124>)
 800cc5c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800cc60:	4940      	ldr	r1, [pc, #256]	@ (800cd64 <plug_holes+0x134>)
 800cc62:	483e      	ldr	r0, [pc, #248]	@ (800cd5c <plug_holes+0x12c>)
 800cc64:	f009 feb6 	bl	80169d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	791b      	ldrb	r3, [r3, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d006      	beq.n	800cc7e <plug_holes+0x4e>
 800cc70:	4b38      	ldr	r3, [pc, #224]	@ (800cd54 <plug_holes+0x124>)
 800cc72:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800cc76:	493c      	ldr	r1, [pc, #240]	@ (800cd68 <plug_holes+0x138>)
 800cc78:	4838      	ldr	r0, [pc, #224]	@ (800cd5c <plug_holes+0x12c>)
 800cc7a:	f009 feab 	bl	80169d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800cc86:	d906      	bls.n	800cc96 <plug_holes+0x66>
 800cc88:	4b32      	ldr	r3, [pc, #200]	@ (800cd54 <plug_holes+0x124>)
 800cc8a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800cc8e:	4937      	ldr	r1, [pc, #220]	@ (800cd6c <plug_holes+0x13c>)
 800cc90:	4832      	ldr	r0, [pc, #200]	@ (800cd5c <plug_holes+0x12c>)
 800cc92:	f009 fe9f 	bl	80169d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7ff ffa4 	bl	800cbe8 <ptr_to_mem>
 800cca0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d024      	beq.n	800ccf4 <plug_holes+0xc4>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	791b      	ldrb	r3, [r3, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d120      	bne.n	800ccf4 <plug_holes+0xc4>
 800ccb2:	4b2b      	ldr	r3, [pc, #172]	@ (800cd60 <plug_holes+0x130>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d01b      	beq.n	800ccf4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ccbc:	4b2c      	ldr	r3, [pc, #176]	@ (800cd70 <plug_holes+0x140>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d102      	bne.n	800cccc <plug_holes+0x9c>
      lfree = mem;
 800ccc6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd70 <plug_holes+0x140>)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	881a      	ldrh	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800ccdc:	d00a      	beq.n	800ccf4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7ff ff80 	bl	800cbe8 <ptr_to_mem>
 800cce8:	4604      	mov	r4, r0
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff ff8e 	bl	800cc0c <mem_to_ptr>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	885b      	ldrh	r3, [r3, #2]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff ff75 	bl	800cbe8 <ptr_to_mem>
 800ccfe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d01f      	beq.n	800cd48 <plug_holes+0x118>
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	791b      	ldrb	r3, [r3, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d11b      	bne.n	800cd48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cd10:	4b17      	ldr	r3, [pc, #92]	@ (800cd70 <plug_holes+0x140>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d102      	bne.n	800cd20 <plug_holes+0xf0>
      lfree = pmem;
 800cd1a:	4a15      	ldr	r2, [pc, #84]	@ (800cd70 <plug_holes+0x140>)
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	881a      	ldrh	r2, [r3, #0]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	881b      	ldrh	r3, [r3, #0]
 800cd2c:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800cd30:	d00a      	beq.n	800cd48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	881b      	ldrh	r3, [r3, #0]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff ff56 	bl	800cbe8 <ptr_to_mem>
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	68b8      	ldr	r0, [r7, #8]
 800cd40:	f7ff ff64 	bl	800cc0c <mem_to_ptr>
 800cd44:	4603      	mov	r3, r0
 800cd46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cd48:	bf00      	nop
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd90      	pop	{r4, r7, pc}
 800cd50:	2000cb44 	.word	0x2000cb44
 800cd54:	08017fa0 	.word	0x08017fa0
 800cd58:	08017fd0 	.word	0x08017fd0
 800cd5c:	08017fe8 	.word	0x08017fe8
 800cd60:	2000cb48 	.word	0x2000cb48
 800cd64:	08018010 	.word	0x08018010
 800cd68:	0801802c 	.word	0x0801802c
 800cd6c:	08018048 	.word	0x08018048
 800cd70:	2000cb50 	.word	0x2000cb50

0800cd74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cd7a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdf8 <mem_init+0x84>)
 800cd7c:	3303      	adds	r3, #3
 800cd7e:	f023 0303 	bic.w	r3, r3, #3
 800cd82:	461a      	mov	r2, r3
 800cd84:	4b1d      	ldr	r3, [pc, #116]	@ (800cdfc <mem_init+0x88>)
 800cd86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cd88:	4b1c      	ldr	r3, [pc, #112]	@ (800cdfc <mem_init+0x88>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 800cd94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cda2:	f44f 5070 	mov.w	r0, #15360	@ 0x3c00
 800cda6:	f7ff ff1f 	bl	800cbe8 <ptr_to_mem>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	4a14      	ldr	r2, [pc, #80]	@ (800ce00 <mem_init+0x8c>)
 800cdae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cdb0:	4b13      	ldr	r3, [pc, #76]	@ (800ce00 <mem_init+0x8c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cdb8:	4b11      	ldr	r3, [pc, #68]	@ (800ce00 <mem_init+0x8c>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 800cdc0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cdc2:	4b0f      	ldr	r3, [pc, #60]	@ (800ce00 <mem_init+0x8c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f44f 5270 	mov.w	r2, #15360	@ 0x3c00
 800cdca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cdcc:	4b0b      	ldr	r3, [pc, #44]	@ (800cdfc <mem_init+0x88>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a0c      	ldr	r2, [pc, #48]	@ (800ce04 <mem_init+0x90>)
 800cdd2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cdd4:	480c      	ldr	r0, [pc, #48]	@ (800ce08 <mem_init+0x94>)
 800cdd6:	f008 ff6f 	bl	8015cb8 <sys_mutex_new>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d006      	beq.n	800cdee <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cde0:	4b0a      	ldr	r3, [pc, #40]	@ (800ce0c <mem_init+0x98>)
 800cde2:	f240 221f 	movw	r2, #543	@ 0x21f
 800cde6:	490a      	ldr	r1, [pc, #40]	@ (800ce10 <mem_init+0x9c>)
 800cde8:	480a      	ldr	r0, [pc, #40]	@ (800ce14 <mem_init+0xa0>)
 800cdea:	f009 fdf3 	bl	80169d4 <iprintf>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20008f30 	.word	0x20008f30
 800cdfc:	2000cb44 	.word	0x2000cb44
 800ce00:	2000cb48 	.word	0x2000cb48
 800ce04:	2000cb50 	.word	0x2000cb50
 800ce08:	2000cb4c 	.word	0x2000cb4c
 800ce0c:	08017fa0 	.word	0x08017fa0
 800ce10:	08018074 	.word	0x08018074
 800ce14:	08017fe8 	.word	0x08017fe8

0800ce18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff fef3 	bl	800cc0c <mem_to_ptr>
 800ce26:	4603      	mov	r3, r0
 800ce28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff feda 	bl	800cbe8 <ptr_to_mem>
 800ce34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	885b      	ldrh	r3, [r3, #2]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff fed4 	bl	800cbe8 <ptr_to_mem>
 800ce40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800ce4a:	d818      	bhi.n	800ce7e <mem_link_valid+0x66>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	885b      	ldrh	r3, [r3, #2]
 800ce50:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800ce54:	d813      	bhi.n	800ce7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ce5a:	8afa      	ldrh	r2, [r7, #22]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d004      	beq.n	800ce6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	881b      	ldrh	r3, [r3, #0]
 800ce64:	8afa      	ldrh	r2, [r7, #22]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d109      	bne.n	800ce7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce6a:	4b08      	ldr	r3, [pc, #32]	@ (800ce8c <mem_link_valid+0x74>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d006      	beq.n	800ce82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	885b      	ldrh	r3, [r3, #2]
 800ce78:	8afa      	ldrh	r2, [r7, #22]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d001      	beq.n	800ce82 <mem_link_valid+0x6a>
    return 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e000      	b.n	800ce84 <mem_link_valid+0x6c>
  }
  return 1;
 800ce82:	2301      	movs	r3, #1
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	2000cb48 	.word	0x2000cb48

0800ce90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b088      	sub	sp, #32
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d070      	beq.n	800cf80 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f003 0303 	and.w	r3, r3, #3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d00d      	beq.n	800cec4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cea8:	4b37      	ldr	r3, [pc, #220]	@ (800cf88 <mem_free+0xf8>)
 800ceaa:	f240 2273 	movw	r2, #627	@ 0x273
 800ceae:	4937      	ldr	r1, [pc, #220]	@ (800cf8c <mem_free+0xfc>)
 800ceb0:	4837      	ldr	r0, [pc, #220]	@ (800cf90 <mem_free+0x100>)
 800ceb2:	f009 fd8f 	bl	80169d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ceb6:	f008 ff5d 	bl	8015d74 <sys_arch_protect>
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f008 ff67 	bl	8015d90 <sys_arch_unprotect>
    return;
 800cec2:	e05e      	b.n	800cf82 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3b08      	subs	r3, #8
 800cec8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ceca:	4b32      	ldr	r3, [pc, #200]	@ (800cf94 <mem_free+0x104>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	69fa      	ldr	r2, [r7, #28]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d306      	bcc.n	800cee2 <mem_free+0x52>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f103 020c 	add.w	r2, r3, #12
 800ceda:	4b2f      	ldr	r3, [pc, #188]	@ (800cf98 <mem_free+0x108>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d90d      	bls.n	800cefe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cee2:	4b29      	ldr	r3, [pc, #164]	@ (800cf88 <mem_free+0xf8>)
 800cee4:	f240 227f 	movw	r2, #639	@ 0x27f
 800cee8:	492c      	ldr	r1, [pc, #176]	@ (800cf9c <mem_free+0x10c>)
 800ceea:	4829      	ldr	r0, [pc, #164]	@ (800cf90 <mem_free+0x100>)
 800ceec:	f009 fd72 	bl	80169d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cef0:	f008 ff40 	bl	8015d74 <sys_arch_protect>
 800cef4:	6138      	str	r0, [r7, #16]
 800cef6:	6938      	ldr	r0, [r7, #16]
 800cef8:	f008 ff4a 	bl	8015d90 <sys_arch_unprotect>
    return;
 800cefc:	e041      	b.n	800cf82 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cefe:	4828      	ldr	r0, [pc, #160]	@ (800cfa0 <mem_free+0x110>)
 800cf00:	f008 fef6 	bl	8015cf0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	791b      	ldrb	r3, [r3, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d110      	bne.n	800cf2e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cf0c:	4b1e      	ldr	r3, [pc, #120]	@ (800cf88 <mem_free+0xf8>)
 800cf0e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cf12:	4924      	ldr	r1, [pc, #144]	@ (800cfa4 <mem_free+0x114>)
 800cf14:	481e      	ldr	r0, [pc, #120]	@ (800cf90 <mem_free+0x100>)
 800cf16:	f009 fd5d 	bl	80169d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cf1a:	4821      	ldr	r0, [pc, #132]	@ (800cfa0 <mem_free+0x110>)
 800cf1c:	f008 fef7 	bl	8015d0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cf20:	f008 ff28 	bl	8015d74 <sys_arch_protect>
 800cf24:	6178      	str	r0, [r7, #20]
 800cf26:	6978      	ldr	r0, [r7, #20]
 800cf28:	f008 ff32 	bl	8015d90 <sys_arch_unprotect>
    return;
 800cf2c:	e029      	b.n	800cf82 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800cf2e:	69f8      	ldr	r0, [r7, #28]
 800cf30:	f7ff ff72 	bl	800ce18 <mem_link_valid>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d110      	bne.n	800cf5c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cf3a:	4b13      	ldr	r3, [pc, #76]	@ (800cf88 <mem_free+0xf8>)
 800cf3c:	f240 2295 	movw	r2, #661	@ 0x295
 800cf40:	4919      	ldr	r1, [pc, #100]	@ (800cfa8 <mem_free+0x118>)
 800cf42:	4813      	ldr	r0, [pc, #76]	@ (800cf90 <mem_free+0x100>)
 800cf44:	f009 fd46 	bl	80169d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800cf48:	4815      	ldr	r0, [pc, #84]	@ (800cfa0 <mem_free+0x110>)
 800cf4a:	f008 fee0 	bl	8015d0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cf4e:	f008 ff11 	bl	8015d74 <sys_arch_protect>
 800cf52:	61b8      	str	r0, [r7, #24]
 800cf54:	69b8      	ldr	r0, [r7, #24]
 800cf56:	f008 ff1b 	bl	8015d90 <sys_arch_unprotect>
    return;
 800cf5a:	e012      	b.n	800cf82 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cf62:	4b12      	ldr	r3, [pc, #72]	@ (800cfac <mem_free+0x11c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69fa      	ldr	r2, [r7, #28]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d202      	bcs.n	800cf72 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cf6c:	4a0f      	ldr	r2, [pc, #60]	@ (800cfac <mem_free+0x11c>)
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cf72:	69f8      	ldr	r0, [r7, #28]
 800cf74:	f7ff fe5c 	bl	800cc30 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cf78:	4809      	ldr	r0, [pc, #36]	@ (800cfa0 <mem_free+0x110>)
 800cf7a:	f008 fec8 	bl	8015d0e <sys_mutex_unlock>
 800cf7e:	e000      	b.n	800cf82 <mem_free+0xf2>
    return;
 800cf80:	bf00      	nop
}
 800cf82:	3720      	adds	r7, #32
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	08017fa0 	.word	0x08017fa0
 800cf8c:	08018090 	.word	0x08018090
 800cf90:	08017fe8 	.word	0x08017fe8
 800cf94:	2000cb44 	.word	0x2000cb44
 800cf98:	2000cb48 	.word	0x2000cb48
 800cf9c:	080180b4 	.word	0x080180b4
 800cfa0:	2000cb4c 	.word	0x2000cb4c
 800cfa4:	080180d0 	.word	0x080180d0
 800cfa8:	080180f8 	.word	0x080180f8
 800cfac:	2000cb50 	.word	0x2000cb50

0800cfb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	460b      	mov	r3, r1
 800cfba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cfbc:	887b      	ldrh	r3, [r7, #2]
 800cfbe:	3303      	adds	r3, #3
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f023 0303 	bic.w	r3, r3, #3
 800cfc6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cfc8:	8bfb      	ldrh	r3, [r7, #30]
 800cfca:	2b0b      	cmp	r3, #11
 800cfcc:	d801      	bhi.n	800cfd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cfce:	230c      	movs	r3, #12
 800cfd0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cfd2:	8bfb      	ldrh	r3, [r7, #30]
 800cfd4:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800cfd8:	d803      	bhi.n	800cfe2 <mem_trim+0x32>
 800cfda:	8bfa      	ldrh	r2, [r7, #30]
 800cfdc:	887b      	ldrh	r3, [r7, #2]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d201      	bcs.n	800cfe6 <mem_trim+0x36>
    return NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	e0d8      	b.n	800d198 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cfe6:	4b6e      	ldr	r3, [pc, #440]	@ (800d1a0 <mem_trim+0x1f0>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d304      	bcc.n	800cffa <mem_trim+0x4a>
 800cff0:	4b6c      	ldr	r3, [pc, #432]	@ (800d1a4 <mem_trim+0x1f4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d306      	bcc.n	800d008 <mem_trim+0x58>
 800cffa:	4b6b      	ldr	r3, [pc, #428]	@ (800d1a8 <mem_trim+0x1f8>)
 800cffc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800d000:	496a      	ldr	r1, [pc, #424]	@ (800d1ac <mem_trim+0x1fc>)
 800d002:	486b      	ldr	r0, [pc, #428]	@ (800d1b0 <mem_trim+0x200>)
 800d004:	f009 fce6 	bl	80169d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d008:	4b65      	ldr	r3, [pc, #404]	@ (800d1a0 <mem_trim+0x1f0>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d304      	bcc.n	800d01c <mem_trim+0x6c>
 800d012:	4b64      	ldr	r3, [pc, #400]	@ (800d1a4 <mem_trim+0x1f4>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d307      	bcc.n	800d02c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d01c:	f008 feaa 	bl	8015d74 <sys_arch_protect>
 800d020:	60b8      	str	r0, [r7, #8]
 800d022:	68b8      	ldr	r0, [r7, #8]
 800d024:	f008 feb4 	bl	8015d90 <sys_arch_unprotect>
    return rmem;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	e0b5      	b.n	800d198 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3b08      	subs	r3, #8
 800d030:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d032:	69b8      	ldr	r0, [r7, #24]
 800d034:	f7ff fdea 	bl	800cc0c <mem_to_ptr>
 800d038:	4603      	mov	r3, r0
 800d03a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	881a      	ldrh	r2, [r3, #0]
 800d040:	8afb      	ldrh	r3, [r7, #22]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	b29b      	uxth	r3, r3
 800d046:	3b08      	subs	r3, #8
 800d048:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d04a:	8bfa      	ldrh	r2, [r7, #30]
 800d04c:	8abb      	ldrh	r3, [r7, #20]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d906      	bls.n	800d060 <mem_trim+0xb0>
 800d052:	4b55      	ldr	r3, [pc, #340]	@ (800d1a8 <mem_trim+0x1f8>)
 800d054:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800d058:	4956      	ldr	r1, [pc, #344]	@ (800d1b4 <mem_trim+0x204>)
 800d05a:	4855      	ldr	r0, [pc, #340]	@ (800d1b0 <mem_trim+0x200>)
 800d05c:	f009 fcba 	bl	80169d4 <iprintf>
  if (newsize > size) {
 800d060:	8bfa      	ldrh	r2, [r7, #30]
 800d062:	8abb      	ldrh	r3, [r7, #20]
 800d064:	429a      	cmp	r2, r3
 800d066:	d901      	bls.n	800d06c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d068:	2300      	movs	r3, #0
 800d06a:	e095      	b.n	800d198 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d06c:	8bfa      	ldrh	r2, [r7, #30]
 800d06e:	8abb      	ldrh	r3, [r7, #20]
 800d070:	429a      	cmp	r2, r3
 800d072:	d101      	bne.n	800d078 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	e08f      	b.n	800d198 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d078:	484f      	ldr	r0, [pc, #316]	@ (800d1b8 <mem_trim+0x208>)
 800d07a:	f008 fe39 	bl	8015cf0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	4618      	mov	r0, r3
 800d084:	f7ff fdb0 	bl	800cbe8 <ptr_to_mem>
 800d088:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	791b      	ldrb	r3, [r3, #4]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d13f      	bne.n	800d112 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d09a:	d106      	bne.n	800d0aa <mem_trim+0xfa>
 800d09c:	4b42      	ldr	r3, [pc, #264]	@ (800d1a8 <mem_trim+0x1f8>)
 800d09e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800d0a2:	4946      	ldr	r1, [pc, #280]	@ (800d1bc <mem_trim+0x20c>)
 800d0a4:	4842      	ldr	r0, [pc, #264]	@ (800d1b0 <mem_trim+0x200>)
 800d0a6:	f009 fc95 	bl	80169d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d0b0:	8afa      	ldrh	r2, [r7, #22]
 800d0b2:	8bfb      	ldrh	r3, [r7, #30]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	3308      	adds	r3, #8
 800d0ba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d0bc:	4b40      	ldr	r3, [pc, #256]	@ (800d1c0 <mem_trim+0x210>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	693a      	ldr	r2, [r7, #16]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d106      	bne.n	800d0d4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d0c6:	89fb      	ldrh	r3, [r7, #14]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff fd8d 	bl	800cbe8 <ptr_to_mem>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	4a3b      	ldr	r2, [pc, #236]	@ (800d1c0 <mem_trim+0x210>)
 800d0d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d0d4:	89fb      	ldrh	r3, [r7, #14]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fd86 	bl	800cbe8 <ptr_to_mem>
 800d0dc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	89ba      	ldrh	r2, [r7, #12]
 800d0e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	8afa      	ldrh	r2, [r7, #22]
 800d0ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	89fa      	ldrh	r2, [r7, #14]
 800d0f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d0fe:	d047      	beq.n	800d190 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff fd6f 	bl	800cbe8 <ptr_to_mem>
 800d10a:	4602      	mov	r2, r0
 800d10c:	89fb      	ldrh	r3, [r7, #14]
 800d10e:	8053      	strh	r3, [r2, #2]
 800d110:	e03e      	b.n	800d190 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d112:	8bfb      	ldrh	r3, [r7, #30]
 800d114:	f103 0214 	add.w	r2, r3, #20
 800d118:	8abb      	ldrh	r3, [r7, #20]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d838      	bhi.n	800d190 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d11e:	8afa      	ldrh	r2, [r7, #22]
 800d120:	8bfb      	ldrh	r3, [r7, #30]
 800d122:	4413      	add	r3, r2
 800d124:	b29b      	uxth	r3, r3
 800d126:	3308      	adds	r3, #8
 800d128:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d12a:	69bb      	ldr	r3, [r7, #24]
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d132:	d106      	bne.n	800d142 <mem_trim+0x192>
 800d134:	4b1c      	ldr	r3, [pc, #112]	@ (800d1a8 <mem_trim+0x1f8>)
 800d136:	f240 3216 	movw	r2, #790	@ 0x316
 800d13a:	4920      	ldr	r1, [pc, #128]	@ (800d1bc <mem_trim+0x20c>)
 800d13c:	481c      	ldr	r0, [pc, #112]	@ (800d1b0 <mem_trim+0x200>)
 800d13e:	f009 fc49 	bl	80169d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d142:	89fb      	ldrh	r3, [r7, #14]
 800d144:	4618      	mov	r0, r3
 800d146:	f7ff fd4f 	bl	800cbe8 <ptr_to_mem>
 800d14a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d14c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1c0 <mem_trim+0x210>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	429a      	cmp	r2, r3
 800d154:	d202      	bcs.n	800d15c <mem_trim+0x1ac>
      lfree = mem2;
 800d156:	4a1a      	ldr	r2, [pc, #104]	@ (800d1c0 <mem_trim+0x210>)
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	2200      	movs	r2, #0
 800d160:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	881a      	ldrh	r2, [r3, #0]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	8afa      	ldrh	r2, [r7, #22]
 800d16e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	89fa      	ldrh	r2, [r7, #14]
 800d174:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	881b      	ldrh	r3, [r3, #0]
 800d17a:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d17e:	d007      	beq.n	800d190 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	881b      	ldrh	r3, [r3, #0]
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fd2f 	bl	800cbe8 <ptr_to_mem>
 800d18a:	4602      	mov	r2, r0
 800d18c:	89fb      	ldrh	r3, [r7, #14]
 800d18e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d190:	4809      	ldr	r0, [pc, #36]	@ (800d1b8 <mem_trim+0x208>)
 800d192:	f008 fdbc 	bl	8015d0e <sys_mutex_unlock>
  return rmem;
 800d196:	687b      	ldr	r3, [r7, #4]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3720      	adds	r7, #32
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	2000cb44 	.word	0x2000cb44
 800d1a4:	2000cb48 	.word	0x2000cb48
 800d1a8:	08017fa0 	.word	0x08017fa0
 800d1ac:	0801812c 	.word	0x0801812c
 800d1b0:	08017fe8 	.word	0x08017fe8
 800d1b4:	08018144 	.word	0x08018144
 800d1b8:	2000cb4c 	.word	0x2000cb4c
 800d1bc:	08018164 	.word	0x08018164
 800d1c0:	2000cb50 	.word	0x2000cb50

0800d1c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b088      	sub	sp, #32
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d1ce:	88fb      	ldrh	r3, [r7, #6]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d101      	bne.n	800d1d8 <mem_malloc+0x14>
    return NULL;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	e0e2      	b.n	800d39e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d1d8:	88fb      	ldrh	r3, [r7, #6]
 800d1da:	3303      	adds	r3, #3
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	f023 0303 	bic.w	r3, r3, #3
 800d1e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d1e4:	8bbb      	ldrh	r3, [r7, #28]
 800d1e6:	2b0b      	cmp	r3, #11
 800d1e8:	d801      	bhi.n	800d1ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d1ee:	8bbb      	ldrh	r3, [r7, #28]
 800d1f0:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d1f4:	d803      	bhi.n	800d1fe <mem_malloc+0x3a>
 800d1f6:	8bba      	ldrh	r2, [r7, #28]
 800d1f8:	88fb      	ldrh	r3, [r7, #6]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d201      	bcs.n	800d202 <mem_malloc+0x3e>
    return NULL;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e0cd      	b.n	800d39e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d202:	4869      	ldr	r0, [pc, #420]	@ (800d3a8 <mem_malloc+0x1e4>)
 800d204:	f008 fd74 	bl	8015cf0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d208:	4b68      	ldr	r3, [pc, #416]	@ (800d3ac <mem_malloc+0x1e8>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7ff fcfd 	bl	800cc0c <mem_to_ptr>
 800d212:	4603      	mov	r3, r0
 800d214:	83fb      	strh	r3, [r7, #30]
 800d216:	e0b7      	b.n	800d388 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d218:	8bfb      	ldrh	r3, [r7, #30]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff fce4 	bl	800cbe8 <ptr_to_mem>
 800d220:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	791b      	ldrb	r3, [r3, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f040 80a7 	bne.w	800d37a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	881b      	ldrh	r3, [r3, #0]
 800d230:	461a      	mov	r2, r3
 800d232:	8bfb      	ldrh	r3, [r7, #30]
 800d234:	1ad3      	subs	r3, r2, r3
 800d236:	f1a3 0208 	sub.w	r2, r3, #8
 800d23a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d23c:	429a      	cmp	r2, r3
 800d23e:	f0c0 809c 	bcc.w	800d37a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	461a      	mov	r2, r3
 800d248:	8bfb      	ldrh	r3, [r7, #30]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	f1a3 0208 	sub.w	r2, r3, #8
 800d250:	8bbb      	ldrh	r3, [r7, #28]
 800d252:	3314      	adds	r3, #20
 800d254:	429a      	cmp	r2, r3
 800d256:	d333      	bcc.n	800d2c0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d258:	8bfa      	ldrh	r2, [r7, #30]
 800d25a:	8bbb      	ldrh	r3, [r7, #28]
 800d25c:	4413      	add	r3, r2
 800d25e:	b29b      	uxth	r3, r3
 800d260:	3308      	adds	r3, #8
 800d262:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d264:	8a7b      	ldrh	r3, [r7, #18]
 800d266:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d26a:	d106      	bne.n	800d27a <mem_malloc+0xb6>
 800d26c:	4b50      	ldr	r3, [pc, #320]	@ (800d3b0 <mem_malloc+0x1ec>)
 800d26e:	f240 3287 	movw	r2, #903	@ 0x387
 800d272:	4950      	ldr	r1, [pc, #320]	@ (800d3b4 <mem_malloc+0x1f0>)
 800d274:	4850      	ldr	r0, [pc, #320]	@ (800d3b8 <mem_malloc+0x1f4>)
 800d276:	f009 fbad 	bl	80169d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d27a:	8a7b      	ldrh	r3, [r7, #18]
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fcb3 	bl	800cbe8 <ptr_to_mem>
 800d282:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	881a      	ldrh	r2, [r3, #0]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	8bfa      	ldrh	r2, [r7, #30]
 800d296:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	8a7a      	ldrh	r2, [r7, #18]
 800d29c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 800d2ac:	d00b      	beq.n	800d2c6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7ff fc98 	bl	800cbe8 <ptr_to_mem>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	8a7b      	ldrh	r3, [r7, #18]
 800d2bc:	8053      	strh	r3, [r2, #2]
 800d2be:	e002      	b.n	800d2c6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d2c6:	4b39      	ldr	r3, [pc, #228]	@ (800d3ac <mem_malloc+0x1e8>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d127      	bne.n	800d320 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d2d0:	4b36      	ldr	r3, [pc, #216]	@ (800d3ac <mem_malloc+0x1e8>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d2d6:	e005      	b.n	800d2e4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	881b      	ldrh	r3, [r3, #0]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fc83 	bl	800cbe8 <ptr_to_mem>
 800d2e2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	791b      	ldrb	r3, [r3, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d004      	beq.n	800d2f6 <mem_malloc+0x132>
 800d2ec:	4b33      	ldr	r3, [pc, #204]	@ (800d3bc <mem_malloc+0x1f8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d1f0      	bne.n	800d2d8 <mem_malloc+0x114>
          }
          lfree = cur;
 800d2f6:	4a2d      	ldr	r2, [pc, #180]	@ (800d3ac <mem_malloc+0x1e8>)
 800d2f8:	69bb      	ldr	r3, [r7, #24]
 800d2fa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d2fc:	4b2b      	ldr	r3, [pc, #172]	@ (800d3ac <mem_malloc+0x1e8>)
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	4b2e      	ldr	r3, [pc, #184]	@ (800d3bc <mem_malloc+0x1f8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	429a      	cmp	r2, r3
 800d306:	d00b      	beq.n	800d320 <mem_malloc+0x15c>
 800d308:	4b28      	ldr	r3, [pc, #160]	@ (800d3ac <mem_malloc+0x1e8>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <mem_malloc+0x15c>
 800d312:	4b27      	ldr	r3, [pc, #156]	@ (800d3b0 <mem_malloc+0x1ec>)
 800d314:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800d318:	4929      	ldr	r1, [pc, #164]	@ (800d3c0 <mem_malloc+0x1fc>)
 800d31a:	4827      	ldr	r0, [pc, #156]	@ (800d3b8 <mem_malloc+0x1f4>)
 800d31c:	f009 fb5a 	bl	80169d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d320:	4821      	ldr	r0, [pc, #132]	@ (800d3a8 <mem_malloc+0x1e4>)
 800d322:	f008 fcf4 	bl	8015d0e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d326:	8bba      	ldrh	r2, [r7, #28]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	4413      	add	r3, r2
 800d32c:	3308      	adds	r3, #8
 800d32e:	4a23      	ldr	r2, [pc, #140]	@ (800d3bc <mem_malloc+0x1f8>)
 800d330:	6812      	ldr	r2, [r2, #0]
 800d332:	4293      	cmp	r3, r2
 800d334:	d906      	bls.n	800d344 <mem_malloc+0x180>
 800d336:	4b1e      	ldr	r3, [pc, #120]	@ (800d3b0 <mem_malloc+0x1ec>)
 800d338:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800d33c:	4921      	ldr	r1, [pc, #132]	@ (800d3c4 <mem_malloc+0x200>)
 800d33e:	481e      	ldr	r0, [pc, #120]	@ (800d3b8 <mem_malloc+0x1f4>)
 800d340:	f009 fb48 	bl	80169d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	f003 0303 	and.w	r3, r3, #3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d006      	beq.n	800d35c <mem_malloc+0x198>
 800d34e:	4b18      	ldr	r3, [pc, #96]	@ (800d3b0 <mem_malloc+0x1ec>)
 800d350:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800d354:	491c      	ldr	r1, [pc, #112]	@ (800d3c8 <mem_malloc+0x204>)
 800d356:	4818      	ldr	r0, [pc, #96]	@ (800d3b8 <mem_malloc+0x1f4>)
 800d358:	f009 fb3c 	bl	80169d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	f003 0303 	and.w	r3, r3, #3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d006      	beq.n	800d374 <mem_malloc+0x1b0>
 800d366:	4b12      	ldr	r3, [pc, #72]	@ (800d3b0 <mem_malloc+0x1ec>)
 800d368:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800d36c:	4917      	ldr	r1, [pc, #92]	@ (800d3cc <mem_malloc+0x208>)
 800d36e:	4812      	ldr	r0, [pc, #72]	@ (800d3b8 <mem_malloc+0x1f4>)
 800d370:	f009 fb30 	bl	80169d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	3308      	adds	r3, #8
 800d378:	e011      	b.n	800d39e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d37a:	8bfb      	ldrh	r3, [r7, #30]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff fc33 	bl	800cbe8 <ptr_to_mem>
 800d382:	4603      	mov	r3, r0
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d388:	8bfa      	ldrh	r2, [r7, #30]
 800d38a:	8bbb      	ldrh	r3, [r7, #28]
 800d38c:	f5c3 5370 	rsb	r3, r3, #15360	@ 0x3c00
 800d390:	429a      	cmp	r2, r3
 800d392:	f4ff af41 	bcc.w	800d218 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d396:	4804      	ldr	r0, [pc, #16]	@ (800d3a8 <mem_malloc+0x1e4>)
 800d398:	f008 fcb9 	bl	8015d0e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3720      	adds	r7, #32
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	2000cb4c 	.word	0x2000cb4c
 800d3ac:	2000cb50 	.word	0x2000cb50
 800d3b0:	08017fa0 	.word	0x08017fa0
 800d3b4:	08018164 	.word	0x08018164
 800d3b8:	08017fe8 	.word	0x08017fe8
 800d3bc:	2000cb48 	.word	0x2000cb48
 800d3c0:	08018178 	.word	0x08018178
 800d3c4:	08018194 	.word	0x08018194
 800d3c8:	080181c4 	.word	0x080181c4
 800d3cc:	080181f4 	.word	0x080181f4

0800d3d0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	689b      	ldr	r3, [r3, #8]
 800d3e4:	3303      	adds	r3, #3
 800d3e6:	f023 0303 	bic.w	r3, r3, #3
 800d3ea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	60fb      	str	r3, [r7, #12]
 800d3f0:	e011      	b.n	800d416 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	889b      	ldrh	r3, [r3, #4]
 800d408:	461a      	mov	r2, r3
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	4413      	add	r3, r2
 800d40e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3301      	adds	r3, #1
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	88db      	ldrh	r3, [r3, #6]
 800d41a:	461a      	mov	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4293      	cmp	r3, r2
 800d420:	dbe7      	blt.n	800d3f2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d422:	bf00      	nop
 800d424:	bf00      	nop
 800d426:	3714      	adds	r7, #20
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d436:	2300      	movs	r3, #0
 800d438:	80fb      	strh	r3, [r7, #6]
 800d43a:	e009      	b.n	800d450 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d43c:	88fb      	ldrh	r3, [r7, #6]
 800d43e:	4a08      	ldr	r2, [pc, #32]	@ (800d460 <memp_init+0x30>)
 800d440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff ffc3 	bl	800d3d0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	3301      	adds	r3, #1
 800d44e:	80fb      	strh	r3, [r7, #6]
 800d450:	88fb      	ldrh	r3, [r7, #6]
 800d452:	2b0c      	cmp	r3, #12
 800d454:	d9f2      	bls.n	800d43c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d456:	bf00      	nop
 800d458:	bf00      	nop
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801af38 	.word	0x0801af38

0800d464 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d46c:	f008 fc82 	bl	8015d74 <sys_arch_protect>
 800d470:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d015      	beq.n	800d4ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	6812      	ldr	r2, [r2, #0]
 800d488:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	f003 0303 	and.w	r3, r3, #3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d006      	beq.n	800d4a2 <do_memp_malloc_pool+0x3e>
 800d494:	4b09      	ldr	r3, [pc, #36]	@ (800d4bc <do_memp_malloc_pool+0x58>)
 800d496:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d49a:	4909      	ldr	r1, [pc, #36]	@ (800d4c0 <do_memp_malloc_pool+0x5c>)
 800d49c:	4809      	ldr	r0, [pc, #36]	@ (800d4c4 <do_memp_malloc_pool+0x60>)
 800d49e:	f009 fa99 	bl	80169d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f008 fc74 	bl	8015d90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	e003      	b.n	800d4b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f008 fc6f 	bl	8015d90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	080182b0 	.word	0x080182b0
 800d4c0:	080182e0 	.word	0x080182e0
 800d4c4:	08018304 	.word	0x08018304

0800d4c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <memp_malloc_pool+0x1c>
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d500 <memp_malloc_pool+0x38>)
 800d4d8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d4dc:	4909      	ldr	r1, [pc, #36]	@ (800d504 <memp_malloc_pool+0x3c>)
 800d4de:	480a      	ldr	r0, [pc, #40]	@ (800d508 <memp_malloc_pool+0x40>)
 800d4e0:	f009 fa78 	bl	80169d4 <iprintf>
  if (desc == NULL) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <memp_malloc_pool+0x26>
    return NULL;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e003      	b.n	800d4f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ffb8 	bl	800d464 <do_memp_malloc_pool>
 800d4f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3708      	adds	r7, #8
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	080182b0 	.word	0x080182b0
 800d504:	0801832c 	.word	0x0801832c
 800d508:	08018304 	.word	0x08018304

0800d50c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	2b0c      	cmp	r3, #12
 800d51a:	d908      	bls.n	800d52e <memp_malloc+0x22>
 800d51c:	4b0a      	ldr	r3, [pc, #40]	@ (800d548 <memp_malloc+0x3c>)
 800d51e:	f240 1257 	movw	r2, #343	@ 0x157
 800d522:	490a      	ldr	r1, [pc, #40]	@ (800d54c <memp_malloc+0x40>)
 800d524:	480a      	ldr	r0, [pc, #40]	@ (800d550 <memp_malloc+0x44>)
 800d526:	f009 fa55 	bl	80169d4 <iprintf>
 800d52a:	2300      	movs	r3, #0
 800d52c:	e008      	b.n	800d540 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d52e:	79fb      	ldrb	r3, [r7, #7]
 800d530:	4a08      	ldr	r2, [pc, #32]	@ (800d554 <memp_malloc+0x48>)
 800d532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff ff94 	bl	800d464 <do_memp_malloc_pool>
 800d53c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d53e:	68fb      	ldr	r3, [r7, #12]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	080182b0 	.word	0x080182b0
 800d54c:	08018340 	.word	0x08018340
 800d550:	08018304 	.word	0x08018304
 800d554:	0801af38 	.word	0x0801af38

0800d558 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	f003 0303 	and.w	r3, r3, #3
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <do_memp_free_pool+0x22>
 800d56c:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a4 <do_memp_free_pool+0x4c>)
 800d56e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d572:	490d      	ldr	r1, [pc, #52]	@ (800d5a8 <do_memp_free_pool+0x50>)
 800d574:	480d      	ldr	r0, [pc, #52]	@ (800d5ac <do_memp_free_pool+0x54>)
 800d576:	f009 fa2d 	bl	80169d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d57e:	f008 fbf9 	bl	8015d74 <sys_arch_protect>
 800d582:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d596:	68b8      	ldr	r0, [r7, #8]
 800d598:	f008 fbfa 	bl	8015d90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d59c:	bf00      	nop
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	080182b0 	.word	0x080182b0
 800d5a8:	08018360 	.word	0x08018360
 800d5ac:	08018304 	.word	0x08018304

0800d5b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <memp_free_pool+0x1e>
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ec <memp_free_pool+0x3c>)
 800d5c2:	f240 1295 	movw	r2, #405	@ 0x195
 800d5c6:	490a      	ldr	r1, [pc, #40]	@ (800d5f0 <memp_free_pool+0x40>)
 800d5c8:	480a      	ldr	r0, [pc, #40]	@ (800d5f4 <memp_free_pool+0x44>)
 800d5ca:	f009 fa03 	bl	80169d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d007      	beq.n	800d5e4 <memp_free_pool+0x34>
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d004      	beq.n	800d5e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff ffbb 	bl	800d558 <do_memp_free_pool>
 800d5e2:	e000      	b.n	800d5e6 <memp_free_pool+0x36>
    return;
 800d5e4:	bf00      	nop
}
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	080182b0 	.word	0x080182b0
 800d5f0:	0801832c 	.word	0x0801832c
 800d5f4:	08018304 	.word	0x08018304

0800d5f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	4603      	mov	r3, r0
 800d600:	6039      	str	r1, [r7, #0]
 800d602:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	2b0c      	cmp	r3, #12
 800d608:	d907      	bls.n	800d61a <memp_free+0x22>
 800d60a:	4b0c      	ldr	r3, [pc, #48]	@ (800d63c <memp_free+0x44>)
 800d60c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d610:	490b      	ldr	r1, [pc, #44]	@ (800d640 <memp_free+0x48>)
 800d612:	480c      	ldr	r0, [pc, #48]	@ (800d644 <memp_free+0x4c>)
 800d614:	f009 f9de 	bl	80169d4 <iprintf>
 800d618:	e00c      	b.n	800d634 <memp_free+0x3c>

  if (mem == NULL) {
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d008      	beq.n	800d632 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	4a09      	ldr	r2, [pc, #36]	@ (800d648 <memp_free+0x50>)
 800d624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff ff94 	bl	800d558 <do_memp_free_pool>
 800d630:	e000      	b.n	800d634 <memp_free+0x3c>
    return;
 800d632:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	080182b0 	.word	0x080182b0
 800d640:	08018380 	.word	0x08018380
 800d644:	08018304 	.word	0x08018304
 800d648:	0801af38 	.word	0x0801af38

0800d64c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d64c:	b480      	push	{r7}
 800d64e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d650:	bf00      	nop
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
	...

0800d65c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af02      	add	r7, sp, #8
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	607a      	str	r2, [r7, #4]
 800d668:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d108      	bne.n	800d682 <netif_add+0x26>
 800d670:	4b96      	ldr	r3, [pc, #600]	@ (800d8cc <netif_add+0x270>)
 800d672:	f240 1227 	movw	r2, #295	@ 0x127
 800d676:	4996      	ldr	r1, [pc, #600]	@ (800d8d0 <netif_add+0x274>)
 800d678:	4896      	ldr	r0, [pc, #600]	@ (800d8d4 <netif_add+0x278>)
 800d67a:	f009 f9ab 	bl	80169d4 <iprintf>
 800d67e:	2300      	movs	r3, #0
 800d680:	e14c      	b.n	800d91c <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d684:	2b00      	cmp	r3, #0
 800d686:	d108      	bne.n	800d69a <netif_add+0x3e>
 800d688:	4b90      	ldr	r3, [pc, #576]	@ (800d8cc <netif_add+0x270>)
 800d68a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d68e:	4992      	ldr	r1, [pc, #584]	@ (800d8d8 <netif_add+0x27c>)
 800d690:	4890      	ldr	r0, [pc, #576]	@ (800d8d4 <netif_add+0x278>)
 800d692:	f009 f99f 	bl	80169d4 <iprintf>
 800d696:	2300      	movs	r3, #0
 800d698:	e140      	b.n	800d91c <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d101      	bne.n	800d6a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d6a0:	4b8e      	ldr	r3, [pc, #568]	@ (800d8dc <netif_add+0x280>)
 800d6a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d6aa:	4b8c      	ldr	r3, [pc, #560]	@ (800d8dc <netif_add+0x280>)
 800d6ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d101      	bne.n	800d6b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d6b4:	4b89      	ldr	r3, [pc, #548]	@ (800d8dc <netif_add+0x280>)
 800d6b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	4a84      	ldr	r2, [pc, #528]	@ (800d8e0 <netif_add+0x284>)
 800d6ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6a3a      	ldr	r2, [r7, #32]
 800d6e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d6ea:	4b7e      	ldr	r3, [pc, #504]	@ (800d8e4 <netif_add+0x288>)
 800d6ec:	781a      	ldrb	r2, [r3, #0]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 f9f5 	bl	800daf0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	4798      	blx	r3
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d001      	beq.n	800d716 <netif_add+0xba>
    return NULL;
 800d712:	2300      	movs	r3, #0
 800d714:	e102      	b.n	800d91c <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d71c:	2bff      	cmp	r3, #255	@ 0xff
 800d71e:	d103      	bne.n	800d728 <netif_add+0xcc>
        netif->num = 0;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d72c:	4b6e      	ldr	r3, [pc, #440]	@ (800d8e8 <netif_add+0x28c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	617b      	str	r3, [r7, #20]
 800d732:	e02b      	b.n	800d78c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d734:	697a      	ldr	r2, [r7, #20]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d106      	bne.n	800d74a <netif_add+0xee>
 800d73c:	4b63      	ldr	r3, [pc, #396]	@ (800d8cc <netif_add+0x270>)
 800d73e:	f240 128b 	movw	r2, #395	@ 0x18b
 800d742:	496a      	ldr	r1, [pc, #424]	@ (800d8ec <netif_add+0x290>)
 800d744:	4863      	ldr	r0, [pc, #396]	@ (800d8d4 <netif_add+0x278>)
 800d746:	f009 f945 	bl	80169d4 <iprintf>
        num_netifs++;
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	3301      	adds	r3, #1
 800d74e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2bff      	cmp	r3, #255	@ 0xff
 800d754:	dd06      	ble.n	800d764 <netif_add+0x108>
 800d756:	4b5d      	ldr	r3, [pc, #372]	@ (800d8cc <netif_add+0x270>)
 800d758:	f240 128d 	movw	r2, #397	@ 0x18d
 800d75c:	4964      	ldr	r1, [pc, #400]	@ (800d8f0 <netif_add+0x294>)
 800d75e:	485d      	ldr	r0, [pc, #372]	@ (800d8d4 <netif_add+0x278>)
 800d760:	f009 f938 	bl	80169d4 <iprintf>
        if (netif2->num == netif->num) {
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d770:	429a      	cmp	r2, r3
 800d772:	d108      	bne.n	800d786 <netif_add+0x12a>
          netif->num++;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d77a:	3301      	adds	r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d784:	e005      	b.n	800d792 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	617b      	str	r3, [r7, #20]
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1d0      	bne.n	800d734 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1be      	bne.n	800d716 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d79e:	2bfe      	cmp	r3, #254	@ 0xfe
 800d7a0:	d103      	bne.n	800d7aa <netif_add+0x14e>
    netif_num = 0;
 800d7a2:	4b50      	ldr	r3, [pc, #320]	@ (800d8e4 <netif_add+0x288>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	701a      	strb	r2, [r3, #0]
 800d7a8:	e006      	b.n	800d7b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	4b4b      	ldr	r3, [pc, #300]	@ (800d8e4 <netif_add+0x288>)
 800d7b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d7b8:	4b4b      	ldr	r3, [pc, #300]	@ (800d8e8 <netif_add+0x28c>)
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d7c0:	4a49      	ldr	r2, [pc, #292]	@ (800d8e8 <netif_add+0x28c>)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d7d4:	461a      	mov	r2, r3
 800d7d6:	4847      	ldr	r0, [pc, #284]	@ (800d8f4 <netif_add+0x298>)
 800d7d8:	f009 f8fc 	bl	80169d4 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800d7dc:	4846      	ldr	r0, [pc, #280]	@ (800d8f8 <netif_add+0x29c>)
 800d7de:	f009 f8f9 	bl	80169d4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <netif_add+0x194>
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	e000      	b.n	800d7f2 <netif_add+0x196>
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d004      	beq.n	800d802 <netif_add+0x1a6>
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	e000      	b.n	800d804 <netif_add+0x1a8>
 800d802:	2200      	movs	r2, #0
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d004      	beq.n	800d814 <netif_add+0x1b8>
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	3302      	adds	r3, #2
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	4618      	mov	r0, r3
 800d812:	e000      	b.n	800d816 <netif_add+0x1ba>
 800d814:	2000      	movs	r0, #0
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <netif_add+0x1c8>
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	3303      	adds	r3, #3
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	e000      	b.n	800d826 <netif_add+0x1ca>
 800d824:	2300      	movs	r3, #0
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	4603      	mov	r3, r0
 800d82a:	4834      	ldr	r0, [pc, #208]	@ (800d8fc <netif_add+0x2a0>)
 800d82c:	f009 f8d2 	bl	80169d4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800d830:	4833      	ldr	r0, [pc, #204]	@ (800d900 <netif_add+0x2a4>)
 800d832:	f009 f8cf 	bl	80169d4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d003      	beq.n	800d844 <netif_add+0x1e8>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	4619      	mov	r1, r3
 800d842:	e000      	b.n	800d846 <netif_add+0x1ea>
 800d844:	2100      	movs	r1, #0
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d004      	beq.n	800d856 <netif_add+0x1fa>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3301      	adds	r3, #1
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	e000      	b.n	800d858 <netif_add+0x1fc>
 800d856:	2200      	movs	r2, #0
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d004      	beq.n	800d868 <netif_add+0x20c>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	3302      	adds	r3, #2
 800d862:	781b      	ldrb	r3, [r3, #0]
 800d864:	4618      	mov	r0, r3
 800d866:	e000      	b.n	800d86a <netif_add+0x20e>
 800d868:	2000      	movs	r0, #0
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d003      	beq.n	800d878 <netif_add+0x21c>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3303      	adds	r3, #3
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	e000      	b.n	800d87a <netif_add+0x21e>
 800d878:	2300      	movs	r3, #0
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	4603      	mov	r3, r0
 800d87e:	481f      	ldr	r0, [pc, #124]	@ (800d8fc <netif_add+0x2a0>)
 800d880:	f009 f8a8 	bl	80169d4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800d884:	481f      	ldr	r0, [pc, #124]	@ (800d904 <netif_add+0x2a8>)
 800d886:	f009 f8a5 	bl	80169d4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d003      	beq.n	800d898 <netif_add+0x23c>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	4619      	mov	r1, r3
 800d896:	e000      	b.n	800d89a <netif_add+0x23e>
 800d898:	2100      	movs	r1, #0
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d004      	beq.n	800d8aa <netif_add+0x24e>
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	e000      	b.n	800d8ac <netif_add+0x250>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d004      	beq.n	800d8bc <netif_add+0x260>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	3302      	adds	r3, #2
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	e000      	b.n	800d8be <netif_add+0x262>
 800d8bc:	2000      	movs	r0, #0
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d021      	beq.n	800d908 <netif_add+0x2ac>
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	3303      	adds	r3, #3
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	e01e      	b.n	800d90a <netif_add+0x2ae>
 800d8cc:	0801839c 	.word	0x0801839c
 800d8d0:	08018430 	.word	0x08018430
 800d8d4:	080183ec 	.word	0x080183ec
 800d8d8:	0801844c 	.word	0x0801844c
 800d8dc:	0801afa4 	.word	0x0801afa4
 800d8e0:	0800ddbb 	.word	0x0800ddbb
 800d8e4:	20013c58 	.word	0x20013c58
 800d8e8:	20013c50 	.word	0x20013c50
 800d8ec:	08018470 	.word	0x08018470
 800d8f0:	08018484 	.word	0x08018484
 800d8f4:	080184b4 	.word	0x080184b4
 800d8f8:	080184d4 	.word	0x080184d4
 800d8fc:	080184dc 	.word	0x080184dc
 800d900:	080184ec 	.word	0x080184ec
 800d904:	080184f8 	.word	0x080184f8
 800d908:	2300      	movs	r3, #0
 800d90a:	9300      	str	r3, [sp, #0]
 800d90c:	4603      	mov	r3, r0
 800d90e:	4805      	ldr	r0, [pc, #20]	@ (800d924 <netif_add+0x2c8>)
 800d910:	f009 f860 	bl	80169d4 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800d914:	200a      	movs	r0, #10
 800d916:	f009 f86f 	bl	80169f8 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d91a:	68fb      	ldr	r3, [r7, #12]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3718      	adds	r7, #24
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	080184dc 	.word	0x080184dc

0800d928 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f002 fb95 	bl	8010064 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f006 fd6b 	bl	8014418 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d942:	bf00      	nop
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d106      	bne.n	800d96c <netif_do_set_ipaddr+0x20>
 800d95e:	4b1e      	ldr	r3, [pc, #120]	@ (800d9d8 <netif_do_set_ipaddr+0x8c>)
 800d960:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d964:	491d      	ldr	r1, [pc, #116]	@ (800d9dc <netif_do_set_ipaddr+0x90>)
 800d966:	481e      	ldr	r0, [pc, #120]	@ (800d9e0 <netif_do_set_ipaddr+0x94>)
 800d968:	f009 f834 	bl	80169d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <netif_do_set_ipaddr+0x34>
 800d972:	4b19      	ldr	r3, [pc, #100]	@ (800d9d8 <netif_do_set_ipaddr+0x8c>)
 800d974:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d978:	4918      	ldr	r1, [pc, #96]	@ (800d9dc <netif_do_set_ipaddr+0x90>)
 800d97a:	4819      	ldr	r0, [pc, #100]	@ (800d9e0 <netif_do_set_ipaddr+0x94>)
 800d97c:	f009 f82a 	bl	80169d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	3304      	adds	r3, #4
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d01f      	beq.n	800d9ce <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	3304      	adds	r3, #4
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800d99e:	4811      	ldr	r0, [pc, #68]	@ (800d9e4 <netif_do_set_ipaddr+0x98>)
 800d9a0:	f009 f888 	bl	8016ab4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d9a4:	f107 0314 	add.w	r3, r7, #20
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff ffbc 	bl	800d928 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <netif_do_set_ipaddr+0x70>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	e000      	b.n	800d9be <netif_do_set_ipaddr+0x72>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	68f8      	ldr	r0, [r7, #12]
 800d9c6:	f000 f92d 	bl	800dc24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e000      	b.n	800d9d0 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	0801839c 	.word	0x0801839c
 800d9dc:	08018500 	.word	0x08018500
 800d9e0:	080183ec 	.word	0x080183ec
 800d9e4:	08018510 	.word	0x08018510

0800d9e8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d9e8:	b5b0      	push	{r4, r5, r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af04      	add	r7, sp, #16
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3308      	adds	r3, #8
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d02d      	beq.n	800da5e <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <netif_do_set_netmask+0x26>
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	e000      	b.n	800da10 <netif_do_set_netmask+0x28>
 800da0e:	2300      	movs	r3, #0
 800da10:	68fa      	ldr	r2, [r7, #12]
 800da12:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800da1a:	4618      	mov	r0, r3
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800da22:	461c      	mov	r4, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	3308      	adds	r3, #8
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	461d      	mov	r5, r3
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3308      	adds	r3, #8
 800da30:	3301      	adds	r3, #1
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	461a      	mov	r2, r3
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	3308      	adds	r3, #8
 800da3a:	3302      	adds	r3, #2
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	4619      	mov	r1, r3
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3308      	adds	r3, #8
 800da44:	3303      	adds	r3, #3
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	9302      	str	r3, [sp, #8]
 800da4a:	9101      	str	r1, [sp, #4]
 800da4c:	9200      	str	r2, [sp, #0]
 800da4e:	462b      	mov	r3, r5
 800da50:	4622      	mov	r2, r4
 800da52:	4601      	mov	r1, r0
 800da54:	4804      	ldr	r0, [pc, #16]	@ (800da68 <netif_do_set_netmask+0x80>)
 800da56:	f008 ffbd 	bl	80169d4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800da5a:	2301      	movs	r3, #1
 800da5c:	e000      	b.n	800da60 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	3710      	adds	r7, #16
 800da64:	46bd      	mov	sp, r7
 800da66:	bdb0      	pop	{r4, r5, r7, pc}
 800da68:	08018560 	.word	0x08018560

0800da6c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800da6c:	b5b0      	push	{r4, r5, r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af04      	add	r7, sp, #16
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	330c      	adds	r3, #12
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	429a      	cmp	r2, r3
 800da84:	d02d      	beq.n	800dae2 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <netif_do_set_gw+0x26>
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	e000      	b.n	800da94 <netif_do_set_gw+0x28>
 800da92:	2300      	movs	r3, #0
 800da94:	68fa      	ldr	r2, [r7, #12]
 800da96:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800da9e:	4618      	mov	r0, r3
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800daa6:	461c      	mov	r4, r3
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	330c      	adds	r3, #12
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	461d      	mov	r5, r3
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	330c      	adds	r3, #12
 800dab4:	3301      	adds	r3, #1
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	461a      	mov	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	330c      	adds	r3, #12
 800dabe:	3302      	adds	r3, #2
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	4619      	mov	r1, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	330c      	adds	r3, #12
 800dac8:	3303      	adds	r3, #3
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	9302      	str	r3, [sp, #8]
 800dace:	9101      	str	r1, [sp, #4]
 800dad0:	9200      	str	r2, [sp, #0]
 800dad2:	462b      	mov	r3, r5
 800dad4:	4622      	mov	r2, r4
 800dad6:	4601      	mov	r1, r0
 800dad8:	4804      	ldr	r0, [pc, #16]	@ (800daec <netif_do_set_gw+0x80>)
 800dada:	f008 ff7b 	bl	80169d4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dade:	2301      	movs	r3, #1
 800dae0:	e000      	b.n	800dae4 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bdb0      	pop	{r4, r5, r7, pc}
 800daec:	080185c0 	.word	0x080185c0

0800daf0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dafe:	2300      	movs	r3, #0
 800db00:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db02:	2300      	movs	r3, #0
 800db04:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800db0c:	4b1c      	ldr	r3, [pc, #112]	@ (800db80 <netif_set_addr+0x90>)
 800db0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d101      	bne.n	800db1a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800db16:	4b1a      	ldr	r3, [pc, #104]	@ (800db80 <netif_set_addr+0x90>)
 800db18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d101      	bne.n	800db24 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800db20:	4b17      	ldr	r3, [pc, #92]	@ (800db80 <netif_set_addr+0x90>)
 800db22:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <netif_set_addr+0x42>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <netif_set_addr+0x46>
 800db32:	2301      	movs	r3, #1
 800db34:	e000      	b.n	800db38 <netif_set_addr+0x48>
 800db36:	2300      	movs	r3, #0
 800db38:	617b      	str	r3, [r7, #20]
  if (remove) {
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d006      	beq.n	800db4e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db40:	f107 0310 	add.w	r3, r7, #16
 800db44:	461a      	mov	r2, r3
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f7ff feff 	bl	800d94c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800db4e:	69fa      	ldr	r2, [r7, #28]
 800db50:	6879      	ldr	r1, [r7, #4]
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f7ff ff48 	bl	800d9e8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800db58:	69ba      	ldr	r2, [r7, #24]
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f7ff ff85 	bl	800da6c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d106      	bne.n	800db76 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	461a      	mov	r2, r3
 800db6e:	68b9      	ldr	r1, [r7, #8]
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f7ff feeb 	bl	800d94c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800db76:	bf00      	nop
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	0801afa4 	.word	0x0801afa4

0800db84 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800db8c:	4a0d      	ldr	r2, [pc, #52]	@ (800dbc4 <netif_set_default+0x40>)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d004      	beq.n	800dba2 <netif_set_default+0x1e>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800db9e:	4619      	mov	r1, r3
 800dba0:	e000      	b.n	800dba4 <netif_set_default+0x20>
 800dba2:	2127      	movs	r1, #39	@ 0x27
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <netif_set_default+0x2e>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dbb0:	e000      	b.n	800dbb4 <netif_set_default+0x30>
 800dbb2:	2327      	movs	r3, #39	@ 0x27
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4804      	ldr	r0, [pc, #16]	@ (800dbc8 <netif_set_default+0x44>)
 800dbb8:	f008 ff0c 	bl	80169d4 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20013c54 	.word	0x20013c54
 800dbc8:	08018634 	.word	0x08018634

0800dbcc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b082      	sub	sp, #8
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d107      	bne.n	800dbea <netif_set_up+0x1e>
 800dbda:	4b0f      	ldr	r3, [pc, #60]	@ (800dc18 <netif_set_up+0x4c>)
 800dbdc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800dbe0:	490e      	ldr	r1, [pc, #56]	@ (800dc1c <netif_set_up+0x50>)
 800dbe2:	480f      	ldr	r0, [pc, #60]	@ (800dc20 <netif_set_up+0x54>)
 800dbe4:	f008 fef6 	bl	80169d4 <iprintf>
 800dbe8:	e013      	b.n	800dc12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d10c      	bne.n	800dc12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dbfe:	f043 0301 	orr.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc0a:	2103      	movs	r1, #3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f809 	bl	800dc24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	0801839c 	.word	0x0801839c
 800dc1c:	0801865c 	.word	0x0801865c
 800dc20:	080183ec 	.word	0x080183ec

0800dc24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <netif_issue_reports+0x20>
 800dc36:	4b0f      	ldr	r3, [pc, #60]	@ (800dc74 <netif_issue_reports+0x50>)
 800dc38:	f240 326d 	movw	r2, #877	@ 0x36d
 800dc3c:	490e      	ldr	r1, [pc, #56]	@ (800dc78 <netif_issue_reports+0x54>)
 800dc3e:	480f      	ldr	r0, [pc, #60]	@ (800dc7c <netif_issue_reports+0x58>)
 800dc40:	f008 fec8 	bl	80169d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00b      	beq.n	800dc6a <netif_issue_reports+0x46>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dc58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d004      	beq.n	800dc6a <netif_issue_reports+0x46>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dc60:	78fb      	ldrb	r3, [r7, #3]
 800dc62:	f003 0301 	and.w	r3, r3, #1
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	e000      	b.n	800dc6c <netif_issue_reports+0x48>
    return;
 800dc6a:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	0801839c 	.word	0x0801839c
 800dc78:	08018678 	.word	0x08018678
 800dc7c:	080183ec 	.word	0x080183ec

0800dc80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d107      	bne.n	800dc9e <netif_set_down+0x1e>
 800dc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc4 <netif_set_down+0x44>)
 800dc90:	f240 329b 	movw	r2, #923	@ 0x39b
 800dc94:	490c      	ldr	r1, [pc, #48]	@ (800dcc8 <netif_set_down+0x48>)
 800dc96:	480d      	ldr	r0, [pc, #52]	@ (800dccc <netif_set_down+0x4c>)
 800dc98:	f008 fe9c 	bl	80169d4 <iprintf>
 800dc9c:	e00f      	b.n	800dcbe <netif_set_down+0x3e>

  if (netif->flags & NETIF_FLAG_UP) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d008      	beq.n	800dcbe <netif_set_down+0x3e>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcb2:	f023 0301 	bic.w	r3, r3, #1
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	0801839c 	.word	0x0801839c
 800dcc8:	0801869c 	.word	0x0801869c
 800dccc:	080183ec 	.word	0x080183ec

0800dcd0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d107      	bne.n	800dcee <netif_set_link_up+0x1e>
 800dcde:	4b13      	ldr	r3, [pc, #76]	@ (800dd2c <netif_set_link_up+0x5c>)
 800dce0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800dce4:	4912      	ldr	r1, [pc, #72]	@ (800dd30 <netif_set_link_up+0x60>)
 800dce6:	4813      	ldr	r0, [pc, #76]	@ (800dd34 <netif_set_link_up+0x64>)
 800dce8:	f008 fe74 	bl	80169d4 <iprintf>
 800dcec:	e01b      	b.n	800dd26 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d114      	bne.n	800dd26 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd02:	f043 0304 	orr.w	r3, r3, #4
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd0e:	2103      	movs	r1, #3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff ff87 	bl	800dc24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	69db      	ldr	r3, [r3, #28]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <netif_set_link_up+0x56>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	69db      	ldr	r3, [r3, #28]
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	0801839c 	.word	0x0801839c
 800dd30:	080186bc 	.word	0x080186bc
 800dd34:	080183ec 	.word	0x080183ec

0800dd38 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d107      	bne.n	800dd56 <netif_set_link_down+0x1e>
 800dd46:	4b11      	ldr	r3, [pc, #68]	@ (800dd8c <netif_set_link_down+0x54>)
 800dd48:	f240 4206 	movw	r2, #1030	@ 0x406
 800dd4c:	4910      	ldr	r1, [pc, #64]	@ (800dd90 <netif_set_link_down+0x58>)
 800dd4e:	4811      	ldr	r0, [pc, #68]	@ (800dd94 <netif_set_link_down+0x5c>)
 800dd50:	f008 fe40 	bl	80169d4 <iprintf>
 800dd54:	e017      	b.n	800dd86 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd5c:	f003 0304 	and.w	r3, r3, #4
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d010      	beq.n	800dd86 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dd6a:	f023 0304 	bic.w	r3, r3, #4
 800dd6e:	b2da      	uxtb	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	69db      	ldr	r3, [r3, #28]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <netif_set_link_down+0x4e>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	69db      	ldr	r3, [r3, #28]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	0801839c 	.word	0x0801839c
 800dd90:	080186e0 	.word	0x080186e0
 800dd94:	080183ec 	.word	0x080183ec

0800dd98 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b083      	sub	sp, #12
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	683a      	ldr	r2, [r7, #0]
 800ddac:	61da      	str	r2, [r3, #28]
  }
}
 800ddae:	bf00      	nop
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ddba:	b480      	push	{r7}
 800ddbc:	b085      	sub	sp, #20
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ddc6:	f06f 030b 	mvn.w	r3, #11
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3714      	adds	r7, #20
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
	...

0800ddd8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	4603      	mov	r3, r0
 800dde0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800dde2:	79fb      	ldrb	r3, [r7, #7]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d013      	beq.n	800de10 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800dde8:	4b0d      	ldr	r3, [pc, #52]	@ (800de20 <netif_get_by_index+0x48>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	60fb      	str	r3, [r7, #12]
 800ddee:	e00c      	b.n	800de0a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	79fa      	ldrb	r2, [r7, #7]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d101      	bne.n	800de04 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	e006      	b.n	800de12 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	60fb      	str	r3, [r7, #12]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1ef      	bne.n	800ddf0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	20013c50 	.word	0x20013c50

0800de24 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800de2a:	f007 ffa3 	bl	8015d74 <sys_arch_protect>
 800de2e:	6038      	str	r0, [r7, #0]
 800de30:	4b0d      	ldr	r3, [pc, #52]	@ (800de68 <pbuf_free_ooseq+0x44>)
 800de32:	2200      	movs	r2, #0
 800de34:	701a      	strb	r2, [r3, #0]
 800de36:	6838      	ldr	r0, [r7, #0]
 800de38:	f007 ffaa 	bl	8015d90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de3c:	4b0b      	ldr	r3, [pc, #44]	@ (800de6c <pbuf_free_ooseq+0x48>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	e00a      	b.n	800de5a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d003      	beq.n	800de54 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f002 f947 	bl	80100e0 <tcp_free_ooseq>
      return;
 800de52:	e005      	b.n	800de60 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	607b      	str	r3, [r7, #4]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1f1      	bne.n	800de44 <pbuf_free_ooseq+0x20>
    }
  }
}
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20013c59 	.word	0x20013c59
 800de6c:	20013c68 	.word	0x20013c68

0800de70 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800de78:	f7ff ffd4 	bl	800de24 <pbuf_free_ooseq>
}
 800de7c:	bf00      	nop
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800de8a:	f007 ff73 	bl	8015d74 <sys_arch_protect>
 800de8e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800de90:	4b0f      	ldr	r3, [pc, #60]	@ (800ded0 <pbuf_pool_is_empty+0x4c>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800de96:	4b0e      	ldr	r3, [pc, #56]	@ (800ded0 <pbuf_pool_is_empty+0x4c>)
 800de98:	2201      	movs	r2, #1
 800de9a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f007 ff77 	bl	8015d90 <sys_arch_unprotect>

  if (!queued) {
 800dea2:	78fb      	ldrb	r3, [r7, #3]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d10f      	bne.n	800dec8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dea8:	2100      	movs	r1, #0
 800deaa:	480a      	ldr	r0, [pc, #40]	@ (800ded4 <pbuf_pool_is_empty+0x50>)
 800deac:	f7fe fdcc 	bl	800ca48 <tcpip_try_callback>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d008      	beq.n	800dec8 <pbuf_pool_is_empty+0x44>
 800deb6:	f007 ff5d 	bl	8015d74 <sys_arch_protect>
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <pbuf_pool_is_empty+0x4c>)
 800debe:	2200      	movs	r2, #0
 800dec0:	701a      	strb	r2, [r3, #0]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f007 ff64 	bl	8015d90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dec8:	bf00      	nop
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	20013c59 	.word	0x20013c59
 800ded4:	0800de71 	.word	0x0800de71

0800ded8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	4611      	mov	r1, r2
 800dee4:	461a      	mov	r2, r3
 800dee6:	460b      	mov	r3, r1
 800dee8:	80fb      	strh	r3, [r7, #6]
 800deea:	4613      	mov	r3, r2
 800deec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	2200      	movs	r2, #0
 800def2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	88fa      	ldrh	r2, [r7, #6]
 800defe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	88ba      	ldrh	r2, [r7, #4]
 800df04:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df06:	8b3b      	ldrh	r3, [r7, #24]
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	7f3a      	ldrb	r2, [r7, #28]
 800df12:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2201      	movs	r2, #1
 800df18:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	73da      	strb	r2, [r3, #15]
}
 800df20:	bf00      	nop
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08c      	sub	sp, #48	@ 0x30
 800df30:	af02      	add	r7, sp, #8
 800df32:	4603      	mov	r3, r0
 800df34:	71fb      	strb	r3, [r7, #7]
 800df36:	460b      	mov	r3, r1
 800df38:	80bb      	strh	r3, [r7, #4]
 800df3a:	4613      	mov	r3, r2
 800df3c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800df42:	887b      	ldrh	r3, [r7, #2]
 800df44:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df48:	d07f      	beq.n	800e04a <pbuf_alloc+0x11e>
 800df4a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800df4e:	f300 80c8 	bgt.w	800e0e2 <pbuf_alloc+0x1b6>
 800df52:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df56:	d010      	beq.n	800df7a <pbuf_alloc+0x4e>
 800df58:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800df5c:	f300 80c1 	bgt.w	800e0e2 <pbuf_alloc+0x1b6>
 800df60:	2b01      	cmp	r3, #1
 800df62:	d002      	beq.n	800df6a <pbuf_alloc+0x3e>
 800df64:	2b41      	cmp	r3, #65	@ 0x41
 800df66:	f040 80bc 	bne.w	800e0e2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800df6a:	887a      	ldrh	r2, [r7, #2]
 800df6c:	88bb      	ldrh	r3, [r7, #4]
 800df6e:	4619      	mov	r1, r3
 800df70:	2000      	movs	r0, #0
 800df72:	f000 f8d1 	bl	800e118 <pbuf_alloc_reference>
 800df76:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800df78:	e0bd      	b.n	800e0f6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800df7a:	2300      	movs	r3, #0
 800df7c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800df82:	88bb      	ldrh	r3, [r7, #4]
 800df84:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800df86:	200c      	movs	r0, #12
 800df88:	f7ff fac0 	bl	800d50c <memp_malloc>
 800df8c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d109      	bne.n	800dfa8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800df94:	f7ff ff76 	bl	800de84 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800df98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800df9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfa0:	f000 faa8 	bl	800e4f4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	e0a7      	b.n	800e0f8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dfa8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfaa:	3303      	adds	r3, #3
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	f023 0303 	bic.w	r3, r3, #3
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	8b7a      	ldrh	r2, [r7, #26]
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	bf28      	it	cs
 800dfc0:	4613      	movcs	r3, r2
 800dfc2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dfc4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dfc6:	3310      	adds	r3, #16
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	4413      	add	r3, r2
 800dfcc:	3303      	adds	r3, #3
 800dfce:	f023 0303 	bic.w	r3, r3, #3
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	89f9      	ldrh	r1, [r7, #14]
 800dfd6:	8b7a      	ldrh	r2, [r7, #26]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9301      	str	r3, [sp, #4]
 800dfdc:	887b      	ldrh	r3, [r7, #2]
 800dfde:	9300      	str	r3, [sp, #0]
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	4601      	mov	r1, r0
 800dfe4:	6938      	ldr	r0, [r7, #16]
 800dfe6:	f7ff ff77 	bl	800ded8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	f003 0303 	and.w	r3, r3, #3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d006      	beq.n	800e004 <pbuf_alloc+0xd8>
 800dff6:	4b42      	ldr	r3, [pc, #264]	@ (800e100 <pbuf_alloc+0x1d4>)
 800dff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dffc:	4941      	ldr	r1, [pc, #260]	@ (800e104 <pbuf_alloc+0x1d8>)
 800dffe:	4842      	ldr	r0, [pc, #264]	@ (800e108 <pbuf_alloc+0x1dc>)
 800e000:	f008 fce8 	bl	80169d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e006:	3303      	adds	r3, #3
 800e008:	f023 0303 	bic.w	r3, r3, #3
 800e00c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800e010:	d106      	bne.n	800e020 <pbuf_alloc+0xf4>
 800e012:	4b3b      	ldr	r3, [pc, #236]	@ (800e100 <pbuf_alloc+0x1d4>)
 800e014:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800e018:	493c      	ldr	r1, [pc, #240]	@ (800e10c <pbuf_alloc+0x1e0>)
 800e01a:	483b      	ldr	r0, [pc, #236]	@ (800e108 <pbuf_alloc+0x1dc>)
 800e01c:	f008 fcda 	bl	80169d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e022:	2b00      	cmp	r3, #0
 800e024:	d102      	bne.n	800e02c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	627b      	str	r3, [r7, #36]	@ 0x24
 800e02a:	e002      	b.n	800e032 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e036:	8b7a      	ldrh	r2, [r7, #26]
 800e038:	89fb      	ldrh	r3, [r7, #14]
 800e03a:	1ad3      	subs	r3, r2, r3
 800e03c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e03e:	2300      	movs	r3, #0
 800e040:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800e042:	8b7b      	ldrh	r3, [r7, #26]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d19e      	bne.n	800df86 <pbuf_alloc+0x5a>
      break;
 800e048:	e055      	b.n	800e0f6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e04a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e04c:	3303      	adds	r3, #3
 800e04e:	b29b      	uxth	r3, r3
 800e050:	f023 0303 	bic.w	r3, r3, #3
 800e054:	b29a      	uxth	r2, r3
 800e056:	88bb      	ldrh	r3, [r7, #4]
 800e058:	3303      	adds	r3, #3
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	f023 0303 	bic.w	r3, r3, #3
 800e060:	b29b      	uxth	r3, r3
 800e062:	4413      	add	r3, r2
 800e064:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e066:	8b3b      	ldrh	r3, [r7, #24]
 800e068:	3310      	adds	r3, #16
 800e06a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e06c:	8b3a      	ldrh	r2, [r7, #24]
 800e06e:	88bb      	ldrh	r3, [r7, #4]
 800e070:	3303      	adds	r3, #3
 800e072:	f023 0303 	bic.w	r3, r3, #3
 800e076:	429a      	cmp	r2, r3
 800e078:	d306      	bcc.n	800e088 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e07a:	8afa      	ldrh	r2, [r7, #22]
 800e07c:	88bb      	ldrh	r3, [r7, #4]
 800e07e:	3303      	adds	r3, #3
 800e080:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e084:	429a      	cmp	r2, r3
 800e086:	d201      	bcs.n	800e08c <pbuf_alloc+0x160>
        return NULL;
 800e088:	2300      	movs	r3, #0
 800e08a:	e035      	b.n	800e0f8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e08c:	8afb      	ldrh	r3, [r7, #22]
 800e08e:	4618      	mov	r0, r3
 800e090:	f7ff f898 	bl	800d1c4 <mem_malloc>
 800e094:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d101      	bne.n	800e0a0 <pbuf_alloc+0x174>
        return NULL;
 800e09c:	2300      	movs	r3, #0
 800e09e:	e02b      	b.n	800e0f8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e0a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e0a2:	3310      	adds	r3, #16
 800e0a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0a6:	4413      	add	r3, r2
 800e0a8:	3303      	adds	r3, #3
 800e0aa:	f023 0303 	bic.w	r3, r3, #3
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	88b9      	ldrh	r1, [r7, #4]
 800e0b2:	88ba      	ldrh	r2, [r7, #4]
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	9301      	str	r3, [sp, #4]
 800e0b8:	887b      	ldrh	r3, [r7, #2]
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	4601      	mov	r1, r0
 800e0c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0c2:	f7ff ff09 	bl	800ded8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	f003 0303 	and.w	r3, r3, #3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d010      	beq.n	800e0f4 <pbuf_alloc+0x1c8>
 800e0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800e100 <pbuf_alloc+0x1d4>)
 800e0d4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800e0d8:	490d      	ldr	r1, [pc, #52]	@ (800e110 <pbuf_alloc+0x1e4>)
 800e0da:	480b      	ldr	r0, [pc, #44]	@ (800e108 <pbuf_alloc+0x1dc>)
 800e0dc:	f008 fc7a 	bl	80169d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e0e0:	e008      	b.n	800e0f4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e0e2:	4b07      	ldr	r3, [pc, #28]	@ (800e100 <pbuf_alloc+0x1d4>)
 800e0e4:	f240 1227 	movw	r2, #295	@ 0x127
 800e0e8:	490a      	ldr	r1, [pc, #40]	@ (800e114 <pbuf_alloc+0x1e8>)
 800e0ea:	4807      	ldr	r0, [pc, #28]	@ (800e108 <pbuf_alloc+0x1dc>)
 800e0ec:	f008 fc72 	bl	80169d4 <iprintf>
      return NULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	e001      	b.n	800e0f8 <pbuf_alloc+0x1cc>
      break;
 800e0f4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3728      	adds	r7, #40	@ 0x28
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	0801873c 	.word	0x0801873c
 800e104:	0801876c 	.word	0x0801876c
 800e108:	0801879c 	.word	0x0801879c
 800e10c:	080187c4 	.word	0x080187c4
 800e110:	080187f8 	.word	0x080187f8
 800e114:	08018824 	.word	0x08018824

0800e118 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af02      	add	r7, sp, #8
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	807b      	strh	r3, [r7, #2]
 800e124:	4613      	mov	r3, r2
 800e126:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e128:	883b      	ldrh	r3, [r7, #0]
 800e12a:	2b41      	cmp	r3, #65	@ 0x41
 800e12c:	d009      	beq.n	800e142 <pbuf_alloc_reference+0x2a>
 800e12e:	883b      	ldrh	r3, [r7, #0]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d006      	beq.n	800e142 <pbuf_alloc_reference+0x2a>
 800e134:	4b0f      	ldr	r3, [pc, #60]	@ (800e174 <pbuf_alloc_reference+0x5c>)
 800e136:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800e13a:	490f      	ldr	r1, [pc, #60]	@ (800e178 <pbuf_alloc_reference+0x60>)
 800e13c:	480f      	ldr	r0, [pc, #60]	@ (800e17c <pbuf_alloc_reference+0x64>)
 800e13e:	f008 fc49 	bl	80169d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e142:	200b      	movs	r0, #11
 800e144:	f7ff f9e2 	bl	800d50c <memp_malloc>
 800e148:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e150:	2300      	movs	r3, #0
 800e152:	e00b      	b.n	800e16c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e154:	8879      	ldrh	r1, [r7, #2]
 800e156:	887a      	ldrh	r2, [r7, #2]
 800e158:	2300      	movs	r3, #0
 800e15a:	9301      	str	r3, [sp, #4]
 800e15c:	883b      	ldrh	r3, [r7, #0]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	460b      	mov	r3, r1
 800e162:	6879      	ldr	r1, [r7, #4]
 800e164:	68f8      	ldr	r0, [r7, #12]
 800e166:	f7ff feb7 	bl	800ded8 <pbuf_init_alloced_pbuf>
  return p;
 800e16a:	68fb      	ldr	r3, [r7, #12]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	0801873c 	.word	0x0801873c
 800e178:	08018840 	.word	0x08018840
 800e17c:	0801879c 	.word	0x0801879c

0800e180 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b088      	sub	sp, #32
 800e184:	af02      	add	r7, sp, #8
 800e186:	607b      	str	r3, [r7, #4]
 800e188:	4603      	mov	r3, r0
 800e18a:	73fb      	strb	r3, [r7, #15]
 800e18c:	460b      	mov	r3, r1
 800e18e:	81bb      	strh	r3, [r7, #12]
 800e190:	4613      	mov	r3, r2
 800e192:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e194:	7bfb      	ldrb	r3, [r7, #15]
 800e196:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e198:	8a7b      	ldrh	r3, [r7, #18]
 800e19a:	3303      	adds	r3, #3
 800e19c:	f023 0203 	bic.w	r2, r3, #3
 800e1a0:	89bb      	ldrh	r3, [r7, #12]
 800e1a2:	441a      	add	r2, r3
 800e1a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d901      	bls.n	800e1ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	e018      	b.n	800e1e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e1ae:	6a3b      	ldr	r3, [r7, #32]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d007      	beq.n	800e1c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e1b4:	8a7b      	ldrh	r3, [r7, #18]
 800e1b6:	3303      	adds	r3, #3
 800e1b8:	f023 0303 	bic.w	r3, r3, #3
 800e1bc:	6a3a      	ldr	r2, [r7, #32]
 800e1be:	4413      	add	r3, r2
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	e001      	b.n	800e1c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	89b9      	ldrh	r1, [r7, #12]
 800e1cc:	89ba      	ldrh	r2, [r7, #12]
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	9301      	str	r3, [sp, #4]
 800e1d2:	897b      	ldrh	r3, [r7, #10]
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	6979      	ldr	r1, [r7, #20]
 800e1da:	f7ff fe7d 	bl	800ded8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e1de:	687b      	ldr	r3, [r7, #4]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3718      	adds	r7, #24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d106      	bne.n	800e208 <pbuf_realloc+0x20>
 800e1fa:	4b3a      	ldr	r3, [pc, #232]	@ (800e2e4 <pbuf_realloc+0xfc>)
 800e1fc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800e200:	4939      	ldr	r1, [pc, #228]	@ (800e2e8 <pbuf_realloc+0x100>)
 800e202:	483a      	ldr	r0, [pc, #232]	@ (800e2ec <pbuf_realloc+0x104>)
 800e204:	f008 fbe6 	bl	80169d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	891b      	ldrh	r3, [r3, #8]
 800e20c:	887a      	ldrh	r2, [r7, #2]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d263      	bcs.n	800e2da <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	891a      	ldrh	r2, [r3, #8]
 800e216:	887b      	ldrh	r3, [r7, #2]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e21c:	887b      	ldrh	r3, [r7, #2]
 800e21e:	817b      	strh	r3, [r7, #10]
  q = p;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e224:	e018      	b.n	800e258 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	897a      	ldrh	r2, [r7, #10]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	891a      	ldrh	r2, [r3, #8]
 800e234:	893b      	ldrh	r3, [r7, #8]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	b29a      	uxth	r2, r3
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d106      	bne.n	800e258 <pbuf_realloc+0x70>
 800e24a:	4b26      	ldr	r3, [pc, #152]	@ (800e2e4 <pbuf_realloc+0xfc>)
 800e24c:	f240 12af 	movw	r2, #431	@ 0x1af
 800e250:	4927      	ldr	r1, [pc, #156]	@ (800e2f0 <pbuf_realloc+0x108>)
 800e252:	4826      	ldr	r0, [pc, #152]	@ (800e2ec <pbuf_realloc+0x104>)
 800e254:	f008 fbbe 	bl	80169d4 <iprintf>
  while (rem_len > q->len) {
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	895b      	ldrh	r3, [r3, #10]
 800e25c:	897a      	ldrh	r2, [r7, #10]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d8e1      	bhi.n	800e226 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	7b1b      	ldrb	r3, [r3, #12]
 800e266:	f003 030f 	and.w	r3, r3, #15
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d121      	bne.n	800e2b2 <pbuf_realloc+0xca>
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	895b      	ldrh	r3, [r3, #10]
 800e272:	897a      	ldrh	r2, [r7, #10]
 800e274:	429a      	cmp	r2, r3
 800e276:	d01c      	beq.n	800e2b2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	7b5b      	ldrb	r3, [r3, #13]
 800e27c:	f003 0302 	and.w	r3, r3, #2
 800e280:	2b00      	cmp	r3, #0
 800e282:	d116      	bne.n	800e2b2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	685a      	ldr	r2, [r3, #4]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	1ad3      	subs	r3, r2, r3
 800e28c:	b29a      	uxth	r2, r3
 800e28e:	897b      	ldrh	r3, [r7, #10]
 800e290:	4413      	add	r3, r2
 800e292:	b29b      	uxth	r3, r3
 800e294:	4619      	mov	r1, r3
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f7fe fe8a 	bl	800cfb0 <mem_trim>
 800e29c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <pbuf_realloc+0xca>
 800e2a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e4 <pbuf_realloc+0xfc>)
 800e2a6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800e2aa:	4912      	ldr	r1, [pc, #72]	@ (800e2f4 <pbuf_realloc+0x10c>)
 800e2ac:	480f      	ldr	r0, [pc, #60]	@ (800e2ec <pbuf_realloc+0x104>)
 800e2ae:	f008 fb91 	bl	80169d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	897a      	ldrh	r2, [r7, #10]
 800e2b6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	895a      	ldrh	r2, [r3, #10]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d004      	beq.n	800e2d2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 f911 	bl	800e4f4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	601a      	str	r2, [r3, #0]
 800e2d8:	e000      	b.n	800e2dc <pbuf_realloc+0xf4>
    return;
 800e2da:	bf00      	nop

}
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	0801873c 	.word	0x0801873c
 800e2e8:	08018854 	.word	0x08018854
 800e2ec:	0801879c 	.word	0x0801879c
 800e2f0:	0801886c 	.word	0x0801886c
 800e2f4:	08018884 	.word	0x08018884

0800e2f8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	60b9      	str	r1, [r7, #8]
 800e302:	4613      	mov	r3, r2
 800e304:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d106      	bne.n	800e31a <pbuf_add_header_impl+0x22>
 800e30c:	4b2b      	ldr	r3, [pc, #172]	@ (800e3bc <pbuf_add_header_impl+0xc4>)
 800e30e:	f240 12df 	movw	r2, #479	@ 0x1df
 800e312:	492b      	ldr	r1, [pc, #172]	@ (800e3c0 <pbuf_add_header_impl+0xc8>)
 800e314:	482b      	ldr	r0, [pc, #172]	@ (800e3c4 <pbuf_add_header_impl+0xcc>)
 800e316:	f008 fb5d 	bl	80169d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <pbuf_add_header_impl+0x30>
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e326:	d301      	bcc.n	800e32c <pbuf_add_header_impl+0x34>
    return 1;
 800e328:	2301      	movs	r3, #1
 800e32a:	e043      	b.n	800e3b4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <pbuf_add_header_impl+0x3e>
    return 0;
 800e332:	2300      	movs	r3, #0
 800e334:	e03e      	b.n	800e3b4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	891a      	ldrh	r2, [r3, #8]
 800e33e:	8a7b      	ldrh	r3, [r7, #18]
 800e340:	4413      	add	r3, r2
 800e342:	b29b      	uxth	r3, r3
 800e344:	8a7a      	ldrh	r2, [r7, #18]
 800e346:	429a      	cmp	r2, r3
 800e348:	d901      	bls.n	800e34e <pbuf_add_header_impl+0x56>
    return 1;
 800e34a:	2301      	movs	r3, #1
 800e34c:	e032      	b.n	800e3b4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	7b1b      	ldrb	r3, [r3, #12]
 800e352:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e354:	8a3b      	ldrh	r3, [r7, #16]
 800e356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d00c      	beq.n	800e378 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	685a      	ldr	r2, [r3, #4]
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	425b      	negs	r3, r3
 800e366:	4413      	add	r3, r2
 800e368:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3310      	adds	r3, #16
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	429a      	cmp	r2, r3
 800e372:	d20d      	bcs.n	800e390 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e374:	2301      	movs	r3, #1
 800e376:	e01d      	b.n	800e3b4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d006      	beq.n	800e38c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	685a      	ldr	r2, [r3, #4]
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	425b      	negs	r3, r3
 800e386:	4413      	add	r3, r2
 800e388:	617b      	str	r3, [r7, #20]
 800e38a:	e001      	b.n	800e390 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e38c:	2301      	movs	r3, #1
 800e38e:	e011      	b.n	800e3b4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	697a      	ldr	r2, [r7, #20]
 800e394:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	895a      	ldrh	r2, [r3, #10]
 800e39a:	8a7b      	ldrh	r3, [r7, #18]
 800e39c:	4413      	add	r3, r2
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	891a      	ldrh	r2, [r3, #8]
 800e3a8:	8a7b      	ldrh	r3, [r7, #18]
 800e3aa:	4413      	add	r3, r2
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	811a      	strh	r2, [r3, #8]


  return 0;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3718      	adds	r7, #24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	0801873c 	.word	0x0801873c
 800e3c0:	080188a0 	.word	0x080188a0
 800e3c4:	0801879c 	.word	0x0801879c

0800e3c8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff ff8e 	bl	800e2f8 <pbuf_add_header_impl>
 800e3dc:	4603      	mov	r3, r0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}
	...

0800e3e8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
 800e3f0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <pbuf_remove_header+0x1e>
 800e3f8:	4b20      	ldr	r3, [pc, #128]	@ (800e47c <pbuf_remove_header+0x94>)
 800e3fa:	f240 224b 	movw	r2, #587	@ 0x24b
 800e3fe:	4920      	ldr	r1, [pc, #128]	@ (800e480 <pbuf_remove_header+0x98>)
 800e400:	4820      	ldr	r0, [pc, #128]	@ (800e484 <pbuf_remove_header+0x9c>)
 800e402:	f008 fae7 	bl	80169d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d003      	beq.n	800e414 <pbuf_remove_header+0x2c>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e412:	d301      	bcc.n	800e418 <pbuf_remove_header+0x30>
    return 1;
 800e414:	2301      	movs	r3, #1
 800e416:	e02c      	b.n	800e472 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <pbuf_remove_header+0x3a>
    return 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	e027      	b.n	800e472 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	895b      	ldrh	r3, [r3, #10]
 800e42a:	89fa      	ldrh	r2, [r7, #14]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d908      	bls.n	800e442 <pbuf_remove_header+0x5a>
 800e430:	4b12      	ldr	r3, [pc, #72]	@ (800e47c <pbuf_remove_header+0x94>)
 800e432:	f240 2255 	movw	r2, #597	@ 0x255
 800e436:	4914      	ldr	r1, [pc, #80]	@ (800e488 <pbuf_remove_header+0xa0>)
 800e438:	4812      	ldr	r0, [pc, #72]	@ (800e484 <pbuf_remove_header+0x9c>)
 800e43a:	f008 facb 	bl	80169d4 <iprintf>
 800e43e:	2301      	movs	r3, #1
 800e440:	e017      	b.n	800e472 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685a      	ldr	r2, [r3, #4]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	441a      	add	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	895a      	ldrh	r2, [r3, #10]
 800e458:	89fb      	ldrh	r3, [r7, #14]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	891a      	ldrh	r2, [r3, #8]
 800e466:	89fb      	ldrh	r3, [r7, #14]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	0801873c 	.word	0x0801873c
 800e480:	080188a0 	.word	0x080188a0
 800e484:	0801879c 	.word	0x0801879c
 800e488:	080188ac 	.word	0x080188ac

0800e48c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	807b      	strh	r3, [r7, #2]
 800e498:	4613      	mov	r3, r2
 800e49a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e49c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da08      	bge.n	800e4b6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e4a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a8:	425b      	negs	r3, r3
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f7ff ff9b 	bl	800e3e8 <pbuf_remove_header>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	e007      	b.n	800e4c6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e4b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4ba:	787a      	ldrb	r2, [r7, #1]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7ff ff1a 	bl	800e2f8 <pbuf_add_header_impl>
 800e4c4:	4603      	mov	r3, r0
  }
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b082      	sub	sp, #8
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e4da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	4619      	mov	r1, r3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff ffd2 	bl	800e48c <pbuf_header_impl>
 800e4e8:	4603      	mov	r3, r0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3708      	adds	r7, #8
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
	...

0800e4f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b088      	sub	sp, #32
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10b      	bne.n	800e51a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d106      	bne.n	800e516 <pbuf_free+0x22>
 800e508:	4b3b      	ldr	r3, [pc, #236]	@ (800e5f8 <pbuf_free+0x104>)
 800e50a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800e50e:	493b      	ldr	r1, [pc, #236]	@ (800e5fc <pbuf_free+0x108>)
 800e510:	483b      	ldr	r0, [pc, #236]	@ (800e600 <pbuf_free+0x10c>)
 800e512:	f008 fa5f 	bl	80169d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e516:	2300      	movs	r3, #0
 800e518:	e069      	b.n	800e5ee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e51e:	e062      	b.n	800e5e6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e520:	f007 fc28 	bl	8015d74 <sys_arch_protect>
 800e524:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	7b9b      	ldrb	r3, [r3, #14]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d106      	bne.n	800e53c <pbuf_free+0x48>
 800e52e:	4b32      	ldr	r3, [pc, #200]	@ (800e5f8 <pbuf_free+0x104>)
 800e530:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800e534:	4933      	ldr	r1, [pc, #204]	@ (800e604 <pbuf_free+0x110>)
 800e536:	4832      	ldr	r0, [pc, #200]	@ (800e600 <pbuf_free+0x10c>)
 800e538:	f008 fa4c 	bl	80169d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	7b9b      	ldrb	r3, [r3, #14]
 800e540:	3b01      	subs	r3, #1
 800e542:	b2da      	uxtb	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	739a      	strb	r2, [r3, #14]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7b9b      	ldrb	r3, [r3, #14]
 800e54c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e54e:	69b8      	ldr	r0, [r7, #24]
 800e550:	f007 fc1e 	bl	8015d90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d143      	bne.n	800e5e2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	7b1b      	ldrb	r3, [r3, #12]
 800e564:	f003 030f 	and.w	r3, r3, #15
 800e568:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7b5b      	ldrb	r3, [r3, #13]
 800e56e:	f003 0302 	and.w	r3, r3, #2
 800e572:	2b00      	cmp	r3, #0
 800e574:	d011      	beq.n	800e59a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d106      	bne.n	800e590 <pbuf_free+0x9c>
 800e582:	4b1d      	ldr	r3, [pc, #116]	@ (800e5f8 <pbuf_free+0x104>)
 800e584:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800e588:	491f      	ldr	r1, [pc, #124]	@ (800e608 <pbuf_free+0x114>)
 800e58a:	481d      	ldr	r0, [pc, #116]	@ (800e600 <pbuf_free+0x10c>)
 800e58c:	f008 fa22 	bl	80169d4 <iprintf>
        pc->custom_free_function(p);
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	691b      	ldr	r3, [r3, #16]
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	4798      	blx	r3
 800e598:	e01d      	b.n	800e5d6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e59a:	7bfb      	ldrb	r3, [r7, #15]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d104      	bne.n	800e5aa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e5a0:	6879      	ldr	r1, [r7, #4]
 800e5a2:	200c      	movs	r0, #12
 800e5a4:	f7ff f828 	bl	800d5f8 <memp_free>
 800e5a8:	e015      	b.n	800e5d6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d104      	bne.n	800e5ba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e5b0:	6879      	ldr	r1, [r7, #4]
 800e5b2:	200b      	movs	r0, #11
 800e5b4:	f7ff f820 	bl	800d5f8 <memp_free>
 800e5b8:	e00d      	b.n	800e5d6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e5ba:	7bfb      	ldrb	r3, [r7, #15]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d103      	bne.n	800e5c8 <pbuf_free+0xd4>
          mem_free(p);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7fe fc65 	bl	800ce90 <mem_free>
 800e5c6:	e006      	b.n	800e5d6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e5c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e5f8 <pbuf_free+0x104>)
 800e5ca:	f240 320f 	movw	r2, #783	@ 0x30f
 800e5ce:	490f      	ldr	r1, [pc, #60]	@ (800e60c <pbuf_free+0x118>)
 800e5d0:	480b      	ldr	r0, [pc, #44]	@ (800e600 <pbuf_free+0x10c>)
 800e5d2:	f008 f9ff 	bl	80169d4 <iprintf>
        }
      }
      count++;
 800e5d6:	7ffb      	ldrb	r3, [r7, #31]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e5dc:	693b      	ldr	r3, [r7, #16]
 800e5de:	607b      	str	r3, [r7, #4]
 800e5e0:	e001      	b.n	800e5e6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d199      	bne.n	800e520 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e5ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3720      	adds	r7, #32
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}
 800e5f6:	bf00      	nop
 800e5f8:	0801873c 	.word	0x0801873c
 800e5fc:	080188a0 	.word	0x080188a0
 800e600:	0801879c 	.word	0x0801879c
 800e604:	080188cc 	.word	0x080188cc
 800e608:	080188e4 	.word	0x080188e4
 800e60c:	08018908 	.word	0x08018908

0800e610 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e618:	2300      	movs	r3, #0
 800e61a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e61c:	e005      	b.n	800e62a <pbuf_clen+0x1a>
    ++len;
 800e61e:	89fb      	ldrh	r3, [r7, #14]
 800e620:	3301      	adds	r3, #1
 800e622:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d1f6      	bne.n	800e61e <pbuf_clen+0xe>
  }
  return len;
 800e630:	89fb      	ldrh	r3, [r7, #14]
}
 800e632:	4618      	mov	r0, r3
 800e634:	3714      	adds	r7, #20
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d016      	beq.n	800e67c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e64e:	f007 fb91 	bl	8015d74 <sys_arch_protect>
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	7b9b      	ldrb	r3, [r3, #14]
 800e658:	3301      	adds	r3, #1
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	739a      	strb	r2, [r3, #14]
 800e660:	68f8      	ldr	r0, [r7, #12]
 800e662:	f007 fb95 	bl	8015d90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	7b9b      	ldrb	r3, [r3, #14]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d106      	bne.n	800e67c <pbuf_ref+0x3c>
 800e66e:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <pbuf_ref+0x44>)
 800e670:	f240 3242 	movw	r2, #834	@ 0x342
 800e674:	4904      	ldr	r1, [pc, #16]	@ (800e688 <pbuf_ref+0x48>)
 800e676:	4805      	ldr	r0, [pc, #20]	@ (800e68c <pbuf_ref+0x4c>)
 800e678:	f008 f9ac 	bl	80169d4 <iprintf>
  }
}
 800e67c:	bf00      	nop
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	0801873c 	.word	0x0801873c
 800e688:	0801891c 	.word	0x0801891c
 800e68c:	0801879c 	.word	0x0801879c

0800e690 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <pbuf_cat+0x16>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d107      	bne.n	800e6b6 <pbuf_cat+0x26>
 800e6a6:	4b20      	ldr	r3, [pc, #128]	@ (800e728 <pbuf_cat+0x98>)
 800e6a8:	f240 3259 	movw	r2, #857	@ 0x359
 800e6ac:	491f      	ldr	r1, [pc, #124]	@ (800e72c <pbuf_cat+0x9c>)
 800e6ae:	4820      	ldr	r0, [pc, #128]	@ (800e730 <pbuf_cat+0xa0>)
 800e6b0:	f008 f990 	bl	80169d4 <iprintf>
 800e6b4:	e034      	b.n	800e720 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	60fb      	str	r3, [r7, #12]
 800e6ba:	e00a      	b.n	800e6d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	891a      	ldrh	r2, [r3, #8]
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	891b      	ldrh	r3, [r3, #8]
 800e6c4:	4413      	add	r3, r2
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1f0      	bne.n	800e6bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	891a      	ldrh	r2, [r3, #8]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	895b      	ldrh	r3, [r3, #10]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d006      	beq.n	800e6f4 <pbuf_cat+0x64>
 800e6e6:	4b10      	ldr	r3, [pc, #64]	@ (800e728 <pbuf_cat+0x98>)
 800e6e8:	f240 3262 	movw	r2, #866	@ 0x362
 800e6ec:	4911      	ldr	r1, [pc, #68]	@ (800e734 <pbuf_cat+0xa4>)
 800e6ee:	4810      	ldr	r0, [pc, #64]	@ (800e730 <pbuf_cat+0xa0>)
 800e6f0:	f008 f970 	bl	80169d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d006      	beq.n	800e70a <pbuf_cat+0x7a>
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800e728 <pbuf_cat+0x98>)
 800e6fe:	f240 3263 	movw	r2, #867	@ 0x363
 800e702:	490d      	ldr	r1, [pc, #52]	@ (800e738 <pbuf_cat+0xa8>)
 800e704:	480a      	ldr	r0, [pc, #40]	@ (800e730 <pbuf_cat+0xa0>)
 800e706:	f008 f965 	bl	80169d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	891a      	ldrh	r2, [r3, #8]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	891b      	ldrh	r3, [r3, #8]
 800e712:	4413      	add	r3, r2
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	683a      	ldr	r2, [r7, #0]
 800e71e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	0801873c 	.word	0x0801873c
 800e72c:	08018930 	.word	0x08018930
 800e730:	0801879c 	.word	0x0801879c
 800e734:	08018968 	.word	0x08018968
 800e738:	08018998 	.word	0x08018998

0800e73c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b086      	sub	sp, #24
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
 800e74a:	2300      	movs	r3, #0
 800e74c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d008      	beq.n	800e766 <pbuf_copy+0x2a>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d005      	beq.n	800e766 <pbuf_copy+0x2a>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	891a      	ldrh	r2, [r3, #8]
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	891b      	ldrh	r3, [r3, #8]
 800e762:	429a      	cmp	r2, r3
 800e764:	d209      	bcs.n	800e77a <pbuf_copy+0x3e>
 800e766:	4b57      	ldr	r3, [pc, #348]	@ (800e8c4 <pbuf_copy+0x188>)
 800e768:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e76c:	4956      	ldr	r1, [pc, #344]	@ (800e8c8 <pbuf_copy+0x18c>)
 800e76e:	4857      	ldr	r0, [pc, #348]	@ (800e8cc <pbuf_copy+0x190>)
 800e770:	f008 f930 	bl	80169d4 <iprintf>
 800e774:	f06f 030f 	mvn.w	r3, #15
 800e778:	e09f      	b.n	800e8ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	895b      	ldrh	r3, [r3, #10]
 800e77e:	461a      	mov	r2, r3
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	1ad2      	subs	r2, r2, r3
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	895b      	ldrh	r3, [r3, #10]
 800e788:	4619      	mov	r1, r3
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	1acb      	subs	r3, r1, r3
 800e78e:	429a      	cmp	r2, r3
 800e790:	d306      	bcc.n	800e7a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	895b      	ldrh	r3, [r3, #10]
 800e796:	461a      	mov	r2, r3
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	1ad3      	subs	r3, r2, r3
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	e005      	b.n	800e7ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	895b      	ldrh	r3, [r3, #10]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	685a      	ldr	r2, [r3, #4]
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	18d0      	adds	r0, r2, r3
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	693b      	ldr	r3, [r7, #16]
 800e7ba:	4413      	add	r3, r2
 800e7bc:	68fa      	ldr	r2, [r7, #12]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f008 fb8b 	bl	8016eda <memcpy>
    offset_to += len;
 800e7c4:	697a      	ldr	r2, [r7, #20]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e7cc:	693a      	ldr	r2, [r7, #16]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	895b      	ldrh	r3, [r3, #10]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d906      	bls.n	800e7ee <pbuf_copy+0xb2>
 800e7e0:	4b38      	ldr	r3, [pc, #224]	@ (800e8c4 <pbuf_copy+0x188>)
 800e7e2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e7e6:	493a      	ldr	r1, [pc, #232]	@ (800e8d0 <pbuf_copy+0x194>)
 800e7e8:	4838      	ldr	r0, [pc, #224]	@ (800e8cc <pbuf_copy+0x190>)
 800e7ea:	f008 f8f3 	bl	80169d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	895b      	ldrh	r3, [r3, #10]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d906      	bls.n	800e808 <pbuf_copy+0xcc>
 800e7fa:	4b32      	ldr	r3, [pc, #200]	@ (800e8c4 <pbuf_copy+0x188>)
 800e7fc:	f240 32da 	movw	r2, #986	@ 0x3da
 800e800:	4934      	ldr	r1, [pc, #208]	@ (800e8d4 <pbuf_copy+0x198>)
 800e802:	4832      	ldr	r0, [pc, #200]	@ (800e8cc <pbuf_copy+0x190>)
 800e804:	f008 f8e6 	bl	80169d4 <iprintf>
    if (offset_from >= p_from->len) {
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	895b      	ldrh	r3, [r3, #10]
 800e80c:	461a      	mov	r2, r3
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	4293      	cmp	r3, r2
 800e812:	d304      	bcc.n	800e81e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e814:	2300      	movs	r3, #0
 800e816:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	895b      	ldrh	r3, [r3, #10]
 800e822:	461a      	mov	r2, r3
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	4293      	cmp	r3, r2
 800e828:	d114      	bne.n	800e854 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e82a:	2300      	movs	r3, #0
 800e82c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d10c      	bne.n	800e854 <pbuf_copy+0x118>
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d009      	beq.n	800e854 <pbuf_copy+0x118>
 800e840:	4b20      	ldr	r3, [pc, #128]	@ (800e8c4 <pbuf_copy+0x188>)
 800e842:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e846:	4924      	ldr	r1, [pc, #144]	@ (800e8d8 <pbuf_copy+0x19c>)
 800e848:	4820      	ldr	r0, [pc, #128]	@ (800e8cc <pbuf_copy+0x190>)
 800e84a:	f008 f8c3 	bl	80169d4 <iprintf>
 800e84e:	f06f 030f 	mvn.w	r3, #15
 800e852:	e032      	b.n	800e8ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d013      	beq.n	800e882 <pbuf_copy+0x146>
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	895a      	ldrh	r2, [r3, #10]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	891b      	ldrh	r3, [r3, #8]
 800e862:	429a      	cmp	r2, r3
 800e864:	d10d      	bne.n	800e882 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d009      	beq.n	800e882 <pbuf_copy+0x146>
 800e86e:	4b15      	ldr	r3, [pc, #84]	@ (800e8c4 <pbuf_copy+0x188>)
 800e870:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e874:	4919      	ldr	r1, [pc, #100]	@ (800e8dc <pbuf_copy+0x1a0>)
 800e876:	4815      	ldr	r0, [pc, #84]	@ (800e8cc <pbuf_copy+0x190>)
 800e878:	f008 f8ac 	bl	80169d4 <iprintf>
 800e87c:	f06f 0305 	mvn.w	r3, #5
 800e880:	e01b      	b.n	800e8ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d013      	beq.n	800e8b0 <pbuf_copy+0x174>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	895a      	ldrh	r2, [r3, #10]
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	891b      	ldrh	r3, [r3, #8]
 800e890:	429a      	cmp	r2, r3
 800e892:	d10d      	bne.n	800e8b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d009      	beq.n	800e8b0 <pbuf_copy+0x174>
 800e89c:	4b09      	ldr	r3, [pc, #36]	@ (800e8c4 <pbuf_copy+0x188>)
 800e89e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e8a2:	490e      	ldr	r1, [pc, #56]	@ (800e8dc <pbuf_copy+0x1a0>)
 800e8a4:	4809      	ldr	r0, [pc, #36]	@ (800e8cc <pbuf_copy+0x190>)
 800e8a6:	f008 f895 	bl	80169d4 <iprintf>
 800e8aa:	f06f 0305 	mvn.w	r3, #5
 800e8ae:	e004      	b.n	800e8ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	f47f af61 	bne.w	800e77a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3718      	adds	r7, #24
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	0801873c 	.word	0x0801873c
 800e8c8:	080189e4 	.word	0x080189e4
 800e8cc:	0801879c 	.word	0x0801879c
 800e8d0:	08018a14 	.word	0x08018a14
 800e8d4:	08018a2c 	.word	0x08018a2c
 800e8d8:	08018a48 	.word	0x08018a48
 800e8dc:	08018a58 	.word	0x08018a58

0800e8e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b088      	sub	sp, #32
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	80fb      	strh	r3, [r7, #6]
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <pbuf_copy_partial+0x36>
 800e904:	4b2b      	ldr	r3, [pc, #172]	@ (800e9b4 <pbuf_copy_partial+0xd4>)
 800e906:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e90a:	492b      	ldr	r1, [pc, #172]	@ (800e9b8 <pbuf_copy_partial+0xd8>)
 800e90c:	482b      	ldr	r0, [pc, #172]	@ (800e9bc <pbuf_copy_partial+0xdc>)
 800e90e:	f008 f861 	bl	80169d4 <iprintf>
 800e912:	2300      	movs	r3, #0
 800e914:	e04a      	b.n	800e9ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d108      	bne.n	800e92e <pbuf_copy_partial+0x4e>
 800e91c:	4b25      	ldr	r3, [pc, #148]	@ (800e9b4 <pbuf_copy_partial+0xd4>)
 800e91e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e922:	4927      	ldr	r1, [pc, #156]	@ (800e9c0 <pbuf_copy_partial+0xe0>)
 800e924:	4825      	ldr	r0, [pc, #148]	@ (800e9bc <pbuf_copy_partial+0xdc>)
 800e926:	f008 f855 	bl	80169d4 <iprintf>
 800e92a:	2300      	movs	r3, #0
 800e92c:	e03e      	b.n	800e9ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	61fb      	str	r3, [r7, #28]
 800e932:	e034      	b.n	800e99e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e934:	88bb      	ldrh	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00a      	beq.n	800e950 <pbuf_copy_partial+0x70>
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	895b      	ldrh	r3, [r3, #10]
 800e93e:	88ba      	ldrh	r2, [r7, #4]
 800e940:	429a      	cmp	r2, r3
 800e942:	d305      	bcc.n	800e950 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	895b      	ldrh	r3, [r3, #10]
 800e948:	88ba      	ldrh	r2, [r7, #4]
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	80bb      	strh	r3, [r7, #4]
 800e94e:	e023      	b.n	800e998 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	895a      	ldrh	r2, [r3, #10]
 800e954:	88bb      	ldrh	r3, [r7, #4]
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e95a:	8b3a      	ldrh	r2, [r7, #24]
 800e95c:	88fb      	ldrh	r3, [r7, #6]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d901      	bls.n	800e966 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e962:	88fb      	ldrh	r3, [r7, #6]
 800e964:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e966:	8b7b      	ldrh	r3, [r7, #26]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	18d0      	adds	r0, r2, r3
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	88bb      	ldrh	r3, [r7, #4]
 800e972:	4413      	add	r3, r2
 800e974:	8b3a      	ldrh	r2, [r7, #24]
 800e976:	4619      	mov	r1, r3
 800e978:	f008 faaf 	bl	8016eda <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e97c:	8afa      	ldrh	r2, [r7, #22]
 800e97e:	8b3b      	ldrh	r3, [r7, #24]
 800e980:	4413      	add	r3, r2
 800e982:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e984:	8b7a      	ldrh	r2, [r7, #26]
 800e986:	8b3b      	ldrh	r3, [r7, #24]
 800e988:	4413      	add	r3, r2
 800e98a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e98c:	88fa      	ldrh	r2, [r7, #6]
 800e98e:	8b3b      	ldrh	r3, [r7, #24]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e994:	2300      	movs	r3, #0
 800e996:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	61fb      	str	r3, [r7, #28]
 800e99e:	88fb      	ldrh	r3, [r7, #6]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <pbuf_copy_partial+0xca>
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1c4      	bne.n	800e934 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e9aa:	8afb      	ldrh	r3, [r7, #22]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	0801873c 	.word	0x0801873c
 800e9b8:	08018a84 	.word	0x08018a84
 800e9bc:	0801879c 	.word	0x0801879c
 800e9c0:	08018aa4 	.word	0x08018aa4

0800e9c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e9c8:	f007 ff04 	bl	80167d4 <rand>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	4b01      	ldr	r3, [pc, #4]	@ (800e9e4 <tcp_init+0x20>)
 800e9de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e9e0:	bf00      	nop
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	2000009c 	.word	0x2000009c

0800e9e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	7d1b      	ldrb	r3, [r3, #20]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d105      	bne.n	800ea04 <tcp_free+0x1c>
 800e9f8:	4b06      	ldr	r3, [pc, #24]	@ (800ea14 <tcp_free+0x2c>)
 800e9fa:	22d4      	movs	r2, #212	@ 0xd4
 800e9fc:	4906      	ldr	r1, [pc, #24]	@ (800ea18 <tcp_free+0x30>)
 800e9fe:	4807      	ldr	r0, [pc, #28]	@ (800ea1c <tcp_free+0x34>)
 800ea00:	f007 ffe8 	bl	80169d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ea04:	6879      	ldr	r1, [r7, #4]
 800ea06:	2001      	movs	r0, #1
 800ea08:	f7fe fdf6 	bl	800d5f8 <memp_free>
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	08018c3c 	.word	0x08018c3c
 800ea18:	08018c6c 	.word	0x08018c6c
 800ea1c:	08018c80 	.word	0x08018c80

0800ea20 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d105      	bne.n	800ea3c <tcp_free_listen+0x1c>
 800ea30:	4b06      	ldr	r3, [pc, #24]	@ (800ea4c <tcp_free_listen+0x2c>)
 800ea32:	22df      	movs	r2, #223	@ 0xdf
 800ea34:	4906      	ldr	r1, [pc, #24]	@ (800ea50 <tcp_free_listen+0x30>)
 800ea36:	4807      	ldr	r0, [pc, #28]	@ (800ea54 <tcp_free_listen+0x34>)
 800ea38:	f007 ffcc 	bl	80169d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	2002      	movs	r0, #2
 800ea40:	f7fe fdda 	bl	800d5f8 <memp_free>
}
 800ea44:	bf00      	nop
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}
 800ea4c:	08018c3c 	.word	0x08018c3c
 800ea50:	08018ca8 	.word	0x08018ca8
 800ea54:	08018c80 	.word	0x08018c80

0800ea58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ea5c:	f000 fea4 	bl	800f7a8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ea60:	4b07      	ldr	r3, [pc, #28]	@ (800ea80 <tcp_tmr+0x28>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	3301      	adds	r3, #1
 800ea66:	b2da      	uxtb	r2, r3
 800ea68:	4b05      	ldr	r3, [pc, #20]	@ (800ea80 <tcp_tmr+0x28>)
 800ea6a:	701a      	strb	r2, [r3, #0]
 800ea6c:	4b04      	ldr	r3, [pc, #16]	@ (800ea80 <tcp_tmr+0x28>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ea78:	f000 fb54 	bl	800f124 <tcp_slowtmr>
  }
}
 800ea7c:	bf00      	nop
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20013c71 	.word	0x20013c71

0800ea84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d105      	bne.n	800eaa0 <tcp_remove_listener+0x1c>
 800ea94:	4b0d      	ldr	r3, [pc, #52]	@ (800eacc <tcp_remove_listener+0x48>)
 800ea96:	22ff      	movs	r2, #255	@ 0xff
 800ea98:	490d      	ldr	r1, [pc, #52]	@ (800ead0 <tcp_remove_listener+0x4c>)
 800ea9a:	480e      	ldr	r0, [pc, #56]	@ (800ead4 <tcp_remove_listener+0x50>)
 800ea9c:	f007 ff9a 	bl	80169d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	e00a      	b.n	800eabc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d102      	bne.n	800eab6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d1f1      	bne.n	800eaa6 <tcp_remove_listener+0x22>
    }
  }
}
 800eac2:	bf00      	nop
 800eac4:	bf00      	nop
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	08018c3c 	.word	0x08018c3c
 800ead0:	08018cc4 	.word	0x08018cc4
 800ead4:	08018c80 	.word	0x08018c80

0800ead8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <tcp_listen_closed+0x1c>
 800eae6:	4b14      	ldr	r3, [pc, #80]	@ (800eb38 <tcp_listen_closed+0x60>)
 800eae8:	f240 1211 	movw	r2, #273	@ 0x111
 800eaec:	4913      	ldr	r1, [pc, #76]	@ (800eb3c <tcp_listen_closed+0x64>)
 800eaee:	4814      	ldr	r0, [pc, #80]	@ (800eb40 <tcp_listen_closed+0x68>)
 800eaf0:	f007 ff70 	bl	80169d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7d1b      	ldrb	r3, [r3, #20]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d006      	beq.n	800eb0a <tcp_listen_closed+0x32>
 800eafc:	4b0e      	ldr	r3, [pc, #56]	@ (800eb38 <tcp_listen_closed+0x60>)
 800eafe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800eb02:	4910      	ldr	r1, [pc, #64]	@ (800eb44 <tcp_listen_closed+0x6c>)
 800eb04:	480e      	ldr	r0, [pc, #56]	@ (800eb40 <tcp_listen_closed+0x68>)
 800eb06:	f007 ff65 	bl	80169d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	e00b      	b.n	800eb28 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb10:	4a0d      	ldr	r2, [pc, #52]	@ (800eb48 <tcp_listen_closed+0x70>)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	6879      	ldr	r1, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff ffb1 	bl	800ea84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	3301      	adds	r3, #1
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	d9f0      	bls.n	800eb10 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08018c3c 	.word	0x08018c3c
 800eb3c:	08018cec 	.word	0x08018cec
 800eb40:	08018c80 	.word	0x08018c80
 800eb44:	08018cf8 	.word	0x08018cf8
 800eb48:	0801af84 	.word	0x0801af84

0800eb4c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eb4c:	b5b0      	push	{r4, r5, r7, lr}
 800eb4e:	b088      	sub	sp, #32
 800eb50:	af04      	add	r7, sp, #16
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d106      	bne.n	800eb6c <tcp_close_shutdown+0x20>
 800eb5e:	4b63      	ldr	r3, [pc, #396]	@ (800ecec <tcp_close_shutdown+0x1a0>)
 800eb60:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800eb64:	4962      	ldr	r1, [pc, #392]	@ (800ecf0 <tcp_close_shutdown+0x1a4>)
 800eb66:	4863      	ldr	r0, [pc, #396]	@ (800ecf4 <tcp_close_shutdown+0x1a8>)
 800eb68:	f007 ff34 	bl	80169d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800eb6c:	78fb      	ldrb	r3, [r7, #3]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d066      	beq.n	800ec40 <tcp_close_shutdown+0xf4>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7d1b      	ldrb	r3, [r3, #20]
 800eb76:	2b04      	cmp	r3, #4
 800eb78:	d003      	beq.n	800eb82 <tcp_close_shutdown+0x36>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	7d1b      	ldrb	r3, [r3, #20]
 800eb7e:	2b07      	cmp	r3, #7
 800eb80:	d15e      	bne.n	800ec40 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d104      	bne.n	800eb94 <tcp_close_shutdown+0x48>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800eb92:	d055      	beq.n	800ec40 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	8b5b      	ldrh	r3, [r3, #26]
 800eb98:	f003 0310 	and.w	r3, r3, #16
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d106      	bne.n	800ebae <tcp_close_shutdown+0x62>
 800eba0:	4b52      	ldr	r3, [pc, #328]	@ (800ecec <tcp_close_shutdown+0x1a0>)
 800eba2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800eba6:	4954      	ldr	r1, [pc, #336]	@ (800ecf8 <tcp_close_shutdown+0x1ac>)
 800eba8:	4852      	ldr	r0, [pc, #328]	@ (800ecf4 <tcp_close_shutdown+0x1a8>)
 800ebaa:	f007 ff13 	bl	80169d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ebb6:	687d      	ldr	r5, [r7, #4]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	3304      	adds	r3, #4
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	8ad2      	ldrh	r2, [r2, #22]
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	8b09      	ldrh	r1, [r1, #24]
 800ebc4:	9102      	str	r1, [sp, #8]
 800ebc6:	9201      	str	r2, [sp, #4]
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	462b      	mov	r3, r5
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4601      	mov	r1, r0
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f004 fea7 	bl	8013924 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f001 f8c8 	bl	800fd6c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ebdc:	4b47      	ldr	r3, [pc, #284]	@ (800ecfc <tcp_close_shutdown+0x1b0>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d105      	bne.n	800ebf2 <tcp_close_shutdown+0xa6>
 800ebe6:	4b45      	ldr	r3, [pc, #276]	@ (800ecfc <tcp_close_shutdown+0x1b0>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	4a43      	ldr	r2, [pc, #268]	@ (800ecfc <tcp_close_shutdown+0x1b0>)
 800ebee:	6013      	str	r3, [r2, #0]
 800ebf0:	e013      	b.n	800ec1a <tcp_close_shutdown+0xce>
 800ebf2:	4b42      	ldr	r3, [pc, #264]	@ (800ecfc <tcp_close_shutdown+0x1b0>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	60fb      	str	r3, [r7, #12]
 800ebf8:	e00c      	b.n	800ec14 <tcp_close_shutdown+0xc8>
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d104      	bne.n	800ec0e <tcp_close_shutdown+0xc2>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	68da      	ldr	r2, [r3, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	60da      	str	r2, [r3, #12]
 800ec0c:	e005      	b.n	800ec1a <tcp_close_shutdown+0xce>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1ef      	bne.n	800ebfa <tcp_close_shutdown+0xae>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	60da      	str	r2, [r3, #12]
 800ec20:	4b37      	ldr	r3, [pc, #220]	@ (800ed00 <tcp_close_shutdown+0x1b4>)
 800ec22:	2201      	movs	r2, #1
 800ec24:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ec26:	4b37      	ldr	r3, [pc, #220]	@ (800ed04 <tcp_close_shutdown+0x1b8>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d102      	bne.n	800ec36 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ec30:	f003 fd62 	bl	80126f8 <tcp_trigger_input_pcb_close>
 800ec34:	e002      	b.n	800ec3c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff fed6 	bl	800e9e8 <tcp_free>
      }
      return ERR_OK;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	e050      	b.n	800ece2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7d1b      	ldrb	r3, [r3, #20]
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d03b      	beq.n	800ecc0 <tcp_close_shutdown+0x174>
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	dc44      	bgt.n	800ecd6 <tcp_close_shutdown+0x18a>
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <tcp_close_shutdown+0x10a>
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d02a      	beq.n	800ecaa <tcp_close_shutdown+0x15e>
 800ec54:	e03f      	b.n	800ecd6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	8adb      	ldrh	r3, [r3, #22]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d021      	beq.n	800eca2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec5e:	4b2a      	ldr	r3, [pc, #168]	@ (800ed08 <tcp_close_shutdown+0x1bc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d105      	bne.n	800ec74 <tcp_close_shutdown+0x128>
 800ec68:	4b27      	ldr	r3, [pc, #156]	@ (800ed08 <tcp_close_shutdown+0x1bc>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68db      	ldr	r3, [r3, #12]
 800ec6e:	4a26      	ldr	r2, [pc, #152]	@ (800ed08 <tcp_close_shutdown+0x1bc>)
 800ec70:	6013      	str	r3, [r2, #0]
 800ec72:	e013      	b.n	800ec9c <tcp_close_shutdown+0x150>
 800ec74:	4b24      	ldr	r3, [pc, #144]	@ (800ed08 <tcp_close_shutdown+0x1bc>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	60bb      	str	r3, [r7, #8]
 800ec7a:	e00c      	b.n	800ec96 <tcp_close_shutdown+0x14a>
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	68db      	ldr	r3, [r3, #12]
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d104      	bne.n	800ec90 <tcp_close_shutdown+0x144>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	68da      	ldr	r2, [r3, #12]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	60da      	str	r2, [r3, #12]
 800ec8e:	e005      	b.n	800ec9c <tcp_close_shutdown+0x150>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	60bb      	str	r3, [r7, #8]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1ef      	bne.n	800ec7c <tcp_close_shutdown+0x130>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff fea0 	bl	800e9e8 <tcp_free>
      break;
 800eca8:	e01a      	b.n	800ece0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f7ff ff14 	bl	800ead8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ecb0:	6879      	ldr	r1, [r7, #4]
 800ecb2:	4816      	ldr	r0, [pc, #88]	@ (800ed0c <tcp_close_shutdown+0x1c0>)
 800ecb4:	f001 f8aa 	bl	800fe0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7ff feb1 	bl	800ea20 <tcp_free_listen>
      break;
 800ecbe:	e00f      	b.n	800ece0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ecc0:	6879      	ldr	r1, [r7, #4]
 800ecc2:	480e      	ldr	r0, [pc, #56]	@ (800ecfc <tcp_close_shutdown+0x1b0>)
 800ecc4:	f001 f8a2 	bl	800fe0c <tcp_pcb_remove>
 800ecc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed00 <tcp_close_shutdown+0x1b4>)
 800ecca:	2201      	movs	r2, #1
 800eccc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7ff fe8a 	bl	800e9e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ecd4:	e004      	b.n	800ece0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f81a 	bl	800ed10 <tcp_close_shutdown_fin>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	e000      	b.n	800ece2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ece0:	2300      	movs	r3, #0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bdb0      	pop	{r4, r5, r7, pc}
 800ecea:	bf00      	nop
 800ecec:	08018c3c 	.word	0x08018c3c
 800ecf0:	08018d10 	.word	0x08018d10
 800ecf4:	08018c80 	.word	0x08018c80
 800ecf8:	08018d30 	.word	0x08018d30
 800ecfc:	20013c68 	.word	0x20013c68
 800ed00:	20013c70 	.word	0x20013c70
 800ed04:	20013cac 	.word	0x20013cac
 800ed08:	20013c60 	.word	0x20013c60
 800ed0c:	20013c64 	.word	0x20013c64

0800ed10 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <tcp_close_shutdown_fin+0x1c>
 800ed1e:	4b2e      	ldr	r3, [pc, #184]	@ (800edd8 <tcp_close_shutdown_fin+0xc8>)
 800ed20:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ed24:	492d      	ldr	r1, [pc, #180]	@ (800eddc <tcp_close_shutdown_fin+0xcc>)
 800ed26:	482e      	ldr	r0, [pc, #184]	@ (800ede0 <tcp_close_shutdown_fin+0xd0>)
 800ed28:	f007 fe54 	bl	80169d4 <iprintf>

  switch (pcb->state) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	7d1b      	ldrb	r3, [r3, #20]
 800ed30:	2b07      	cmp	r3, #7
 800ed32:	d020      	beq.n	800ed76 <tcp_close_shutdown_fin+0x66>
 800ed34:	2b07      	cmp	r3, #7
 800ed36:	dc2b      	bgt.n	800ed90 <tcp_close_shutdown_fin+0x80>
 800ed38:	2b03      	cmp	r3, #3
 800ed3a:	d002      	beq.n	800ed42 <tcp_close_shutdown_fin+0x32>
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	d00d      	beq.n	800ed5c <tcp_close_shutdown_fin+0x4c>
 800ed40:	e026      	b.n	800ed90 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f003 fef0 	bl	8012b28 <tcp_send_fin>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d11f      	bne.n	800ed94 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2205      	movs	r2, #5
 800ed58:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed5a:	e01b      	b.n	800ed94 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f003 fee3 	bl	8012b28 <tcp_send_fin>
 800ed62:	4603      	mov	r3, r0
 800ed64:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d114      	bne.n	800ed98 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2205      	movs	r2, #5
 800ed72:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed74:	e010      	b.n	800ed98 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f003 fed6 	bl	8012b28 <tcp_send_fin>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d109      	bne.n	800ed9c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2209      	movs	r2, #9
 800ed8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed8e:	e005      	b.n	800ed9c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ed90:	2300      	movs	r3, #0
 800ed92:	e01c      	b.n	800edce <tcp_close_shutdown_fin+0xbe>
      break;
 800ed94:	bf00      	nop
 800ed96:	e002      	b.n	800ed9e <tcp_close_shutdown_fin+0x8e>
      break;
 800ed98:	bf00      	nop
 800ed9a:	e000      	b.n	800ed9e <tcp_close_shutdown_fin+0x8e>
      break;
 800ed9c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ed9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d103      	bne.n	800edae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f003 fffc 	bl	8012da4 <tcp_output>
 800edac:	e00d      	b.n	800edca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800edae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb6:	d108      	bne.n	800edca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	8b5b      	ldrh	r3, [r3, #26]
 800edbc:	f043 0308 	orr.w	r3, r3, #8
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800edc6:	2300      	movs	r3, #0
 800edc8:	e001      	b.n	800edce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800edca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	08018c3c 	.word	0x08018c3c
 800eddc:	08018cec 	.word	0x08018cec
 800ede0:	08018c80 	.word	0x08018c80

0800ede4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d109      	bne.n	800ee06 <tcp_close+0x22>
 800edf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ee30 <tcp_close+0x4c>)
 800edf4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800edf8:	490e      	ldr	r1, [pc, #56]	@ (800ee34 <tcp_close+0x50>)
 800edfa:	480f      	ldr	r0, [pc, #60]	@ (800ee38 <tcp_close+0x54>)
 800edfc:	f007 fdea 	bl	80169d4 <iprintf>
 800ee00:	f06f 030f 	mvn.w	r3, #15
 800ee04:	e00f      	b.n	800ee26 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	7d1b      	ldrb	r3, [r3, #20]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d006      	beq.n	800ee1c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	8b5b      	ldrh	r3, [r3, #26]
 800ee12:	f043 0310 	orr.w	r3, r3, #16
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ee1c:	2101      	movs	r1, #1
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f7ff fe94 	bl	800eb4c <tcp_close_shutdown>
 800ee24:	4603      	mov	r3, r0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}
 800ee2e:	bf00      	nop
 800ee30:	08018c3c 	.word	0x08018c3c
 800ee34:	08018d4c 	.word	0x08018d4c
 800ee38:	08018c80 	.word	0x08018c80

0800ee3c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b08e      	sub	sp, #56	@ 0x38
 800ee40:	af04      	add	r7, sp, #16
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d107      	bne.n	800ee5c <tcp_abandon+0x20>
 800ee4c:	4b52      	ldr	r3, [pc, #328]	@ (800ef98 <tcp_abandon+0x15c>)
 800ee4e:	f240 223d 	movw	r2, #573	@ 0x23d
 800ee52:	4952      	ldr	r1, [pc, #328]	@ (800ef9c <tcp_abandon+0x160>)
 800ee54:	4852      	ldr	r0, [pc, #328]	@ (800efa0 <tcp_abandon+0x164>)
 800ee56:	f007 fdbd 	bl	80169d4 <iprintf>
 800ee5a:	e099      	b.n	800ef90 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	7d1b      	ldrb	r3, [r3, #20]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d106      	bne.n	800ee72 <tcp_abandon+0x36>
 800ee64:	4b4c      	ldr	r3, [pc, #304]	@ (800ef98 <tcp_abandon+0x15c>)
 800ee66:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ee6a:	494e      	ldr	r1, [pc, #312]	@ (800efa4 <tcp_abandon+0x168>)
 800ee6c:	484c      	ldr	r0, [pc, #304]	@ (800efa0 <tcp_abandon+0x164>)
 800ee6e:	f007 fdb1 	bl	80169d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	7d1b      	ldrb	r3, [r3, #20]
 800ee76:	2b0a      	cmp	r3, #10
 800ee78:	d107      	bne.n	800ee8a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ee7a:	6879      	ldr	r1, [r7, #4]
 800ee7c:	484a      	ldr	r0, [pc, #296]	@ (800efa8 <tcp_abandon+0x16c>)
 800ee7e:	f000 ffc5 	bl	800fe0c <tcp_pcb_remove>
    tcp_free(pcb);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff fdb0 	bl	800e9e8 <tcp_free>
 800ee88:	e082      	b.n	800ef90 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee96:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eea4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	7d1b      	ldrb	r3, [r3, #20]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d126      	bne.n	800ef02 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8adb      	ldrh	r3, [r3, #22]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d02e      	beq.n	800ef1a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eebc:	4b3b      	ldr	r3, [pc, #236]	@ (800efac <tcp_abandon+0x170>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d105      	bne.n	800eed2 <tcp_abandon+0x96>
 800eec6:	4b39      	ldr	r3, [pc, #228]	@ (800efac <tcp_abandon+0x170>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	4a37      	ldr	r2, [pc, #220]	@ (800efac <tcp_abandon+0x170>)
 800eece:	6013      	str	r3, [r2, #0]
 800eed0:	e013      	b.n	800eefa <tcp_abandon+0xbe>
 800eed2:	4b36      	ldr	r3, [pc, #216]	@ (800efac <tcp_abandon+0x170>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	61fb      	str	r3, [r7, #28]
 800eed8:	e00c      	b.n	800eef4 <tcp_abandon+0xb8>
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d104      	bne.n	800eeee <tcp_abandon+0xb2>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	68da      	ldr	r2, [r3, #12]
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	60da      	str	r2, [r3, #12]
 800eeec:	e005      	b.n	800eefa <tcp_abandon+0xbe>
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	61fb      	str	r3, [r7, #28]
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d1ef      	bne.n	800eeda <tcp_abandon+0x9e>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	60da      	str	r2, [r3, #12]
 800ef00:	e00b      	b.n	800ef1a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	8adb      	ldrh	r3, [r3, #22]
 800ef0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ef0c:	6879      	ldr	r1, [r7, #4]
 800ef0e:	4828      	ldr	r0, [pc, #160]	@ (800efb0 <tcp_abandon+0x174>)
 800ef10:	f000 ff7c 	bl	800fe0c <tcp_pcb_remove>
 800ef14:	4b27      	ldr	r3, [pc, #156]	@ (800efb4 <tcp_abandon+0x178>)
 800ef16:	2201      	movs	r2, #1
 800ef18:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d004      	beq.n	800ef2c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 fd1e 	bl	800f968 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d004      	beq.n	800ef3e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f000 fd15 	bl	800f968 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d004      	beq.n	800ef50 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 fd0c 	bl	800f968 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ef50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00e      	beq.n	800ef74 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	8b12      	ldrh	r2, [r2, #24]
 800ef60:	9202      	str	r2, [sp, #8]
 800ef62:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ef64:	9201      	str	r2, [sp, #4]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	69b9      	ldr	r1, [r7, #24]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f004 fcd8 	bl	8013924 <tcp_rst>
    }
    last_state = pcb->state;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff fd34 	bl	800e9e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d004      	beq.n	800ef90 <tcp_abandon+0x154>
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	f06f 010c 	mvn.w	r1, #12
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	4798      	blx	r3
  }
}
 800ef90:	3728      	adds	r7, #40	@ 0x28
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	08018c3c 	.word	0x08018c3c
 800ef9c:	08018d80 	.word	0x08018d80
 800efa0:	08018c80 	.word	0x08018c80
 800efa4:	08018d9c 	.word	0x08018d9c
 800efa8:	20013c6c 	.word	0x20013c6c
 800efac:	20013c60 	.word	0x20013c60
 800efb0:	20013c68 	.word	0x20013c68
 800efb4:	20013c70 	.word	0x20013c70

0800efb8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800efc0:	2101      	movs	r1, #1
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff ff3a 	bl	800ee3c <tcp_abandon>
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d106      	bne.n	800efec <tcp_update_rcv_ann_wnd+0x1c>
 800efde:	4b25      	ldr	r3, [pc, #148]	@ (800f074 <tcp_update_rcv_ann_wnd+0xa4>)
 800efe0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800efe4:	4924      	ldr	r1, [pc, #144]	@ (800f078 <tcp_update_rcv_ann_wnd+0xa8>)
 800efe6:	4825      	ldr	r0, [pc, #148]	@ (800f07c <tcp_update_rcv_ann_wnd+0xac>)
 800efe8:	f007 fcf4 	bl	80169d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800eff4:	4413      	add	r3, r2
 800eff6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800f000:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800f004:	bf28      	it	cs
 800f006:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800f00a:	b292      	uxth	r2, r2
 800f00c:	4413      	add	r3, r2
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	1ad3      	subs	r3, r2, r3
 800f012:	2b00      	cmp	r3, #0
 800f014:	db08      	blt.n	800f028 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	e020      	b.n	800f06a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	dd03      	ble.n	800f03e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f03c:	e014      	b.n	800f068 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f050:	d306      	bcc.n	800f060 <tcp_update_rcv_ann_wnd+0x90>
 800f052:	4b08      	ldr	r3, [pc, #32]	@ (800f074 <tcp_update_rcv_ann_wnd+0xa4>)
 800f054:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800f058:	4909      	ldr	r1, [pc, #36]	@ (800f080 <tcp_update_rcv_ann_wnd+0xb0>)
 800f05a:	4808      	ldr	r0, [pc, #32]	@ (800f07c <tcp_update_rcv_ann_wnd+0xac>)
 800f05c:	f007 fcba 	bl	80169d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	b29a      	uxth	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800f068:	2300      	movs	r3, #0
  }
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	08018c3c 	.word	0x08018c3c
 800f078:	08018e98 	.word	0x08018e98
 800f07c:	08018c80 	.word	0x08018c80
 800f080:	08018ebc 	.word	0x08018ebc

0800f084 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d107      	bne.n	800f0a6 <tcp_recved+0x22>
 800f096:	4b1f      	ldr	r3, [pc, #124]	@ (800f114 <tcp_recved+0x90>)
 800f098:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800f09c:	491e      	ldr	r1, [pc, #120]	@ (800f118 <tcp_recved+0x94>)
 800f09e:	481f      	ldr	r0, [pc, #124]	@ (800f11c <tcp_recved+0x98>)
 800f0a0:	f007 fc98 	bl	80169d4 <iprintf>
 800f0a4:	e032      	b.n	800f10c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	7d1b      	ldrb	r3, [r3, #20]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d106      	bne.n	800f0bc <tcp_recved+0x38>
 800f0ae:	4b19      	ldr	r3, [pc, #100]	@ (800f114 <tcp_recved+0x90>)
 800f0b0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800f0b4:	491a      	ldr	r1, [pc, #104]	@ (800f120 <tcp_recved+0x9c>)
 800f0b6:	4819      	ldr	r0, [pc, #100]	@ (800f11c <tcp_recved+0x98>)
 800f0b8:	f007 fc8c 	bl	80169d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f0c0:	887b      	ldrh	r3, [r7, #2]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f0c6:	89fb      	ldrh	r3, [r7, #14]
 800f0c8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f0cc:	d804      	bhi.n	800f0d8 <tcp_recved+0x54>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0d2:	89fa      	ldrh	r2, [r7, #14]
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	d204      	bcs.n	800f0e2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f0de:	851a      	strh	r2, [r3, #40]	@ 0x28
 800f0e0:	e002      	b.n	800f0e8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	89fa      	ldrh	r2, [r7, #14]
 800f0e6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ff71 	bl	800efd0 <tcp_update_rcv_ann_wnd>
 800f0ee:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f0f6:	d309      	bcc.n	800f10c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	8b5b      	ldrh	r3, [r3, #26]
 800f0fc:	f043 0302 	orr.w	r3, r3, #2
 800f100:	b29a      	uxth	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f003 fe4c 	bl	8012da4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	08018c3c 	.word	0x08018c3c
 800f118:	08018ed8 	.word	0x08018ed8
 800f11c:	08018c80 	.word	0x08018c80
 800f120:	08018ef0 	.word	0x08018ef0

0800f124 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f124:	b5b0      	push	{r4, r5, r7, lr}
 800f126:	b090      	sub	sp, #64	@ 0x40
 800f128:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800f130:	4b95      	ldr	r3, [pc, #596]	@ (800f388 <tcp_slowtmr+0x264>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3301      	adds	r3, #1
 800f136:	4a94      	ldr	r2, [pc, #592]	@ (800f388 <tcp_slowtmr+0x264>)
 800f138:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f13a:	4b94      	ldr	r3, [pc, #592]	@ (800f38c <tcp_slowtmr+0x268>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	3301      	adds	r3, #1
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b92      	ldr	r3, [pc, #584]	@ (800f38c <tcp_slowtmr+0x268>)
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	e000      	b.n	800f14a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800f148:	bf00      	nop
  prev = NULL;
 800f14a:	2300      	movs	r3, #0
 800f14c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800f14e:	4b90      	ldr	r3, [pc, #576]	@ (800f390 <tcp_slowtmr+0x26c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f154:	e29f      	b.n	800f696 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f158:	7d1b      	ldrb	r3, [r3, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d106      	bne.n	800f16c <tcp_slowtmr+0x48>
 800f15e:	4b8d      	ldr	r3, [pc, #564]	@ (800f394 <tcp_slowtmr+0x270>)
 800f160:	f240 42be 	movw	r2, #1214	@ 0x4be
 800f164:	498c      	ldr	r1, [pc, #560]	@ (800f398 <tcp_slowtmr+0x274>)
 800f166:	488d      	ldr	r0, [pc, #564]	@ (800f39c <tcp_slowtmr+0x278>)
 800f168:	f007 fc34 	bl	80169d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16e:	7d1b      	ldrb	r3, [r3, #20]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d106      	bne.n	800f182 <tcp_slowtmr+0x5e>
 800f174:	4b87      	ldr	r3, [pc, #540]	@ (800f394 <tcp_slowtmr+0x270>)
 800f176:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800f17a:	4989      	ldr	r1, [pc, #548]	@ (800f3a0 <tcp_slowtmr+0x27c>)
 800f17c:	4887      	ldr	r0, [pc, #540]	@ (800f39c <tcp_slowtmr+0x278>)
 800f17e:	f007 fc29 	bl	80169d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f184:	7d1b      	ldrb	r3, [r3, #20]
 800f186:	2b0a      	cmp	r3, #10
 800f188:	d106      	bne.n	800f198 <tcp_slowtmr+0x74>
 800f18a:	4b82      	ldr	r3, [pc, #520]	@ (800f394 <tcp_slowtmr+0x270>)
 800f18c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800f190:	4984      	ldr	r1, [pc, #528]	@ (800f3a4 <tcp_slowtmr+0x280>)
 800f192:	4882      	ldr	r0, [pc, #520]	@ (800f39c <tcp_slowtmr+0x278>)
 800f194:	f007 fc1e 	bl	80169d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f19a:	7f9a      	ldrb	r2, [r3, #30]
 800f19c:	4b7b      	ldr	r3, [pc, #492]	@ (800f38c <tcp_slowtmr+0x268>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d105      	bne.n	800f1b0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800f1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800f1ae:	e272      	b.n	800f696 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800f1b0:	4b76      	ldr	r3, [pc, #472]	@ (800f38c <tcp_slowtmr+0x268>)
 800f1b2:	781a      	ldrb	r2, [r3, #0]
 800f1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
 800f1c8:	2b02      	cmp	r3, #2
 800f1ca:	d10a      	bne.n	800f1e2 <tcp_slowtmr+0xbe>
 800f1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1d2:	2b05      	cmp	r3, #5
 800f1d4:	d905      	bls.n	800f1e2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800f1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1da:	3301      	adds	r3, #1
 800f1dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800f1e0:	e11e      	b.n	800f420 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f1e8:	2b0b      	cmp	r3, #11
 800f1ea:	d905      	bls.n	800f1f8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800f1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f1f6:	e113      	b.n	800f420 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800f1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d075      	beq.n	800f2ee <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f206:	2b00      	cmp	r3, #0
 800f208:	d006      	beq.n	800f218 <tcp_slowtmr+0xf4>
 800f20a:	4b62      	ldr	r3, [pc, #392]	@ (800f394 <tcp_slowtmr+0x270>)
 800f20c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800f210:	4965      	ldr	r1, [pc, #404]	@ (800f3a8 <tcp_slowtmr+0x284>)
 800f212:	4862      	ldr	r0, [pc, #392]	@ (800f39c <tcp_slowtmr+0x278>)
 800f214:	f007 fbde 	bl	80169d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d106      	bne.n	800f22e <tcp_slowtmr+0x10a>
 800f220:	4b5c      	ldr	r3, [pc, #368]	@ (800f394 <tcp_slowtmr+0x270>)
 800f222:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f226:	4961      	ldr	r1, [pc, #388]	@ (800f3ac <tcp_slowtmr+0x288>)
 800f228:	485c      	ldr	r0, [pc, #368]	@ (800f39c <tcp_slowtmr+0x278>)
 800f22a:	f007 fbd3 	bl	80169d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f230:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f234:	2b0b      	cmp	r3, #11
 800f236:	d905      	bls.n	800f244 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800f238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f23c:	3301      	adds	r3, #1
 800f23e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f242:	e0ed      	b.n	800f420 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f246:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f24a:	3b01      	subs	r3, #1
 800f24c:	4a58      	ldr	r2, [pc, #352]	@ (800f3b0 <tcp_slowtmr+0x28c>)
 800f24e:	5cd3      	ldrb	r3, [r2, r3]
 800f250:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f254:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f258:	7c7a      	ldrb	r2, [r7, #17]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d907      	bls.n	800f26e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800f25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f260:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f264:	3301      	adds	r3, #1
 800f266:	b2da      	uxtb	r2, r3
 800f268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800f26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f270:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800f274:	7c7a      	ldrb	r2, [r7, #17]
 800f276:	429a      	cmp	r2, r3
 800f278:	f200 80d2 	bhi.w	800f420 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800f27c:	2301      	movs	r3, #1
 800f27e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800f280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f286:	2b00      	cmp	r3, #0
 800f288:	d108      	bne.n	800f29c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f28a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f28c:	f004 fc3e 	bl	8013b0c <tcp_zero_window_probe>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d014      	beq.n	800f2c0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800f296:	2300      	movs	r3, #0
 800f298:	623b      	str	r3, [r7, #32]
 800f29a:	e011      	b.n	800f2c0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2a6:	f003 faf3 	bl	8012890 <tcp_split_unsent_seg>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d107      	bne.n	800f2c0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f2b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2b2:	f003 fd77 	bl	8012da4 <tcp_output>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d101      	bne.n	800f2c0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80ac 	beq.w	800f420 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f2d6:	2b06      	cmp	r3, #6
 800f2d8:	f200 80a2 	bhi.w	800f420 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2de:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b2da      	uxtb	r2, r3
 800f2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f2ec:	e098      	b.n	800f420 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f2ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	db0f      	blt.n	800f318 <tcp_slowtmr+0x1f4>
 800f2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f2fe:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f302:	4293      	cmp	r3, r2
 800f304:	d008      	beq.n	800f318 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f30c:	b29b      	uxth	r3, r3
 800f30e:	3301      	adds	r3, #1
 800f310:	b29b      	uxth	r3, r3
 800f312:	b21a      	sxth	r2, r3
 800f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f316:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f320:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f324:	429a      	cmp	r2, r3
 800f326:	db7b      	blt.n	800f420 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f32a:	f004 f831 	bl	8013390 <tcp_rexmit_rto_prepare>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <tcp_slowtmr+0x220>
 800f334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d171      	bne.n	800f420 <tcp_slowtmr+0x2fc>
 800f33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f340:	2b00      	cmp	r3, #0
 800f342:	d06d      	beq.n	800f420 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f346:	7d1b      	ldrb	r3, [r3, #20]
 800f348:	2b02      	cmp	r3, #2
 800f34a:	d03a      	beq.n	800f3c2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f352:	2b0c      	cmp	r3, #12
 800f354:	bf28      	it	cs
 800f356:	230c      	movcs	r3, #12
 800f358:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f360:	10db      	asrs	r3, r3, #3
 800f362:	b21b      	sxth	r3, r3
 800f364:	461a      	mov	r2, r3
 800f366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f368:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f36c:	4413      	add	r3, r2
 800f36e:	7efa      	ldrb	r2, [r7, #27]
 800f370:	4910      	ldr	r1, [pc, #64]	@ (800f3b4 <tcp_slowtmr+0x290>)
 800f372:	5c8a      	ldrb	r2, [r1, r2]
 800f374:	4093      	lsls	r3, r2
 800f376:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f37e:	4293      	cmp	r3, r2
 800f380:	dc1a      	bgt.n	800f3b8 <tcp_slowtmr+0x294>
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	b21a      	sxth	r2, r3
 800f386:	e019      	b.n	800f3bc <tcp_slowtmr+0x298>
 800f388:	20013c5c 	.word	0x20013c5c
 800f38c:	20013c72 	.word	0x20013c72
 800f390:	20013c68 	.word	0x20013c68
 800f394:	08018c3c 	.word	0x08018c3c
 800f398:	08018f80 	.word	0x08018f80
 800f39c:	08018c80 	.word	0x08018c80
 800f3a0:	08018fac 	.word	0x08018fac
 800f3a4:	08018fd8 	.word	0x08018fd8
 800f3a8:	08019008 	.word	0x08019008
 800f3ac:	0801903c 	.word	0x0801903c
 800f3b0:	0801af7c 	.word	0x0801af7c
 800f3b4:	0801af6c 	.word	0x0801af6c
 800f3b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	bf28      	it	cs
 800f3d8:	4613      	movcs	r3, r2
 800f3da:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f3dc:	8a7b      	ldrh	r3, [r7, #18]
 800f3de:	085b      	lsrs	r3, r3, #1
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3e4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d206      	bcs.n	800f408 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3fe:	005b      	lsls	r3, r3, #1
 800f400:	b29a      	uxth	r2, r3
 800f402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f404:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f40e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f414:	2200      	movs	r2, #0
 800f416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f41a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f41c:	f004 f832 	bl	8013484 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f422:	7d1b      	ldrb	r3, [r3, #20]
 800f424:	2b06      	cmp	r3, #6
 800f426:	d111      	bne.n	800f44c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f42a:	8b5b      	ldrh	r3, [r3, #26]
 800f42c:	f003 0310 	and.w	r3, r3, #16
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00b      	beq.n	800f44c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f434:	4b9d      	ldr	r3, [pc, #628]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43a:	6a1b      	ldr	r3, [r3, #32]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	2b28      	cmp	r3, #40	@ 0x28
 800f440:	d904      	bls.n	800f44c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f446:	3301      	adds	r3, #1
 800f448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f44e:	7a5b      	ldrb	r3, [r3, #9]
 800f450:	f003 0308 	and.w	r3, r3, #8
 800f454:	2b00      	cmp	r3, #0
 800f456:	d04c      	beq.n	800f4f2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f45c:	2b04      	cmp	r3, #4
 800f45e:	d003      	beq.n	800f468 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f462:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f464:	2b07      	cmp	r3, #7
 800f466:	d144      	bne.n	800f4f2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f468:	4b90      	ldr	r3, [pc, #576]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f478:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800f47c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800f480:	498b      	ldr	r1, [pc, #556]	@ (800f6b0 <tcp_slowtmr+0x58c>)
 800f482:	fba1 1303 	umull	r1, r3, r1, r3
 800f486:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f488:	429a      	cmp	r2, r3
 800f48a:	d90a      	bls.n	800f4a2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800f48c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f490:	3301      	adds	r3, #1
 800f492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f496:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f49a:	3301      	adds	r3, #1
 800f49c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f4a0:	e027      	b.n	800f4f2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4a2:	4b82      	ldr	r3, [pc, #520]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f4a4:	681a      	ldr	r2, [r3, #0]
 800f4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4a8:	6a1b      	ldr	r3, [r3, #32]
 800f4aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4b4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	4b7e      	ldr	r3, [pc, #504]	@ (800f6b4 <tcp_slowtmr+0x590>)
 800f4bc:	fb00 f303 	mul.w	r3, r0, r3
 800f4c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f4c2:	497b      	ldr	r1, [pc, #492]	@ (800f6b0 <tcp_slowtmr+0x58c>)
 800f4c4:	fba1 1303 	umull	r1, r3, r1, r3
 800f4c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d911      	bls.n	800f4f2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800f4ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f4d0:	f004 fadc 	bl	8013a8c <tcp_keepalive>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f4da:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d107      	bne.n	800f4f2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800f4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d011      	beq.n	800f51e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f4fa:	4b6c      	ldr	r3, [pc, #432]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	1ad2      	subs	r2, r2, r3
 800f504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f506:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f50a:	4619      	mov	r1, r3
 800f50c:	460b      	mov	r3, r1
 800f50e:	005b      	lsls	r3, r3, #1
 800f510:	440b      	add	r3, r1
 800f512:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f514:	429a      	cmp	r2, r3
 800f516:	d302      	bcc.n	800f51e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800f518:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f51a:	f000 fde1 	bl	80100e0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f51e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f520:	7d1b      	ldrb	r3, [r3, #20]
 800f522:	2b03      	cmp	r3, #3
 800f524:	d10b      	bne.n	800f53e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f526:	4b61      	ldr	r3, [pc, #388]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	1ad3      	subs	r3, r2, r3
 800f530:	2b28      	cmp	r3, #40	@ 0x28
 800f532:	d904      	bls.n	800f53e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800f534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f538:	3301      	adds	r3, #1
 800f53a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f540:	7d1b      	ldrb	r3, [r3, #20]
 800f542:	2b09      	cmp	r3, #9
 800f544:	d10b      	bne.n	800f55e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f546:	4b59      	ldr	r3, [pc, #356]	@ (800f6ac <tcp_slowtmr+0x588>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	2bf0      	cmp	r3, #240	@ 0xf0
 800f552:	d904      	bls.n	800f55e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800f554:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f558:	3301      	adds	r3, #1
 800f55a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f55e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f562:	2b00      	cmp	r3, #0
 800f564:	d060      	beq.n	800f628 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800f566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f56c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f56e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f570:	f000 fbfc 	bl	800fd6c <tcp_pcb_purge>
      if (prev != NULL) {
 800f574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f576:	2b00      	cmp	r3, #0
 800f578:	d010      	beq.n	800f59c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f57a:	4b4f      	ldr	r3, [pc, #316]	@ (800f6b8 <tcp_slowtmr+0x594>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f580:	429a      	cmp	r2, r3
 800f582:	d106      	bne.n	800f592 <tcp_slowtmr+0x46e>
 800f584:	4b4d      	ldr	r3, [pc, #308]	@ (800f6bc <tcp_slowtmr+0x598>)
 800f586:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f58a:	494d      	ldr	r1, [pc, #308]	@ (800f6c0 <tcp_slowtmr+0x59c>)
 800f58c:	484d      	ldr	r0, [pc, #308]	@ (800f6c4 <tcp_slowtmr+0x5a0>)
 800f58e:	f007 fa21 	bl	80169d4 <iprintf>
        prev->next = pcb->next;
 800f592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f594:	68da      	ldr	r2, [r3, #12]
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	60da      	str	r2, [r3, #12]
 800f59a:	e00f      	b.n	800f5bc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f59c:	4b46      	ldr	r3, [pc, #280]	@ (800f6b8 <tcp_slowtmr+0x594>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d006      	beq.n	800f5b4 <tcp_slowtmr+0x490>
 800f5a6:	4b45      	ldr	r3, [pc, #276]	@ (800f6bc <tcp_slowtmr+0x598>)
 800f5a8:	f240 5271 	movw	r2, #1393	@ 0x571
 800f5ac:	4946      	ldr	r1, [pc, #280]	@ (800f6c8 <tcp_slowtmr+0x5a4>)
 800f5ae:	4845      	ldr	r0, [pc, #276]	@ (800f6c4 <tcp_slowtmr+0x5a0>)
 800f5b0:	f007 fa10 	bl	80169d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5b6:	68db      	ldr	r3, [r3, #12]
 800f5b8:	4a3f      	ldr	r2, [pc, #252]	@ (800f6b8 <tcp_slowtmr+0x594>)
 800f5ba:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f5bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d013      	beq.n	800f5ec <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f5cc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f5ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5d4:	8ad2      	ldrh	r2, [r2, #22]
 800f5d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f5d8:	8b09      	ldrh	r1, [r1, #24]
 800f5da:	9102      	str	r1, [sp, #8]
 800f5dc:	9201      	str	r2, [sp, #4]
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	462b      	mov	r3, r5
 800f5e2:	4622      	mov	r2, r4
 800f5e4:	4601      	mov	r1, r0
 800f5e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5e8:	f004 f99c 	bl	8013924 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f4:	7d1b      	ldrb	r3, [r3, #20]
 800f5f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7ff f9f0 	bl	800e9e8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f608:	4b30      	ldr	r3, [pc, #192]	@ (800f6cc <tcp_slowtmr+0x5a8>)
 800f60a:	2200      	movs	r2, #0
 800f60c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d004      	beq.n	800f61e <tcp_slowtmr+0x4fa>
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f06f 010c 	mvn.w	r1, #12
 800f61a:	68b8      	ldr	r0, [r7, #8]
 800f61c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f61e:	4b2b      	ldr	r3, [pc, #172]	@ (800f6cc <tcp_slowtmr+0x5a8>)
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d037      	beq.n	800f696 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800f626:	e590      	b.n	800f14a <tcp_slowtmr+0x26>
      prev = pcb;
 800f628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	7f1b      	ldrb	r3, [r3, #28]
 800f636:	3301      	adds	r3, #1
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f640:	7f1a      	ldrb	r2, [r3, #28]
 800f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f644:	7f5b      	ldrb	r3, [r3, #29]
 800f646:	429a      	cmp	r2, r3
 800f648:	d325      	bcc.n	800f696 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64c:	2200      	movs	r2, #0
 800f64e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f650:	4b1e      	ldr	r3, [pc, #120]	@ (800f6cc <tcp_slowtmr+0x5a8>)
 800f652:	2200      	movs	r2, #0
 800f654:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00b      	beq.n	800f678 <tcp_slowtmr+0x554>
 800f660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f668:	6912      	ldr	r2, [r2, #16]
 800f66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f66c:	4610      	mov	r0, r2
 800f66e:	4798      	blx	r3
 800f670:	4603      	mov	r3, r0
 800f672:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f676:	e002      	b.n	800f67e <tcp_slowtmr+0x55a>
 800f678:	2300      	movs	r3, #0
 800f67a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f67e:	4b13      	ldr	r3, [pc, #76]	@ (800f6cc <tcp_slowtmr+0x5a8>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	f47f ad60 	bne.w	800f148 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f688:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d102      	bne.n	800f696 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800f690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f692:	f003 fb87 	bl	8012da4 <tcp_output>
  while (pcb != NULL) {
 800f696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f47f ad5c 	bne.w	800f156 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f6a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f6d0 <tcp_slowtmr+0x5ac>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f6a8:	e067      	b.n	800f77a <tcp_slowtmr+0x656>
 800f6aa:	bf00      	nop
 800f6ac:	20013c5c 	.word	0x20013c5c
 800f6b0:	10624dd3 	.word	0x10624dd3
 800f6b4:	000124f8 	.word	0x000124f8
 800f6b8:	20013c68 	.word	0x20013c68
 800f6bc:	08018c3c 	.word	0x08018c3c
 800f6c0:	08019074 	.word	0x08019074
 800f6c4:	08018c80 	.word	0x08018c80
 800f6c8:	080190a0 	.word	0x080190a0
 800f6cc:	20013c70 	.word	0x20013c70
 800f6d0:	20013c6c 	.word	0x20013c6c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6d6:	7d1b      	ldrb	r3, [r3, #20]
 800f6d8:	2b0a      	cmp	r3, #10
 800f6da:	d006      	beq.n	800f6ea <tcp_slowtmr+0x5c6>
 800f6dc:	4b2b      	ldr	r3, [pc, #172]	@ (800f78c <tcp_slowtmr+0x668>)
 800f6de:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f6e2:	492b      	ldr	r1, [pc, #172]	@ (800f790 <tcp_slowtmr+0x66c>)
 800f6e4:	482b      	ldr	r0, [pc, #172]	@ (800f794 <tcp_slowtmr+0x670>)
 800f6e6:	f007 f975 	bl	80169d4 <iprintf>
    pcb_remove = 0;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f6f0:	4b29      	ldr	r3, [pc, #164]	@ (800f798 <tcp_slowtmr+0x674>)
 800f6f2:	681a      	ldr	r2, [r3, #0]
 800f6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	2bf0      	cmp	r3, #240	@ 0xf0
 800f6fc:	d904      	bls.n	800f708 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f6fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f702:	3301      	adds	r3, #1
 800f704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d02f      	beq.n	800f770 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f712:	f000 fb2b 	bl	800fd6c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d010      	beq.n	800f73e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f71c:	4b1f      	ldr	r3, [pc, #124]	@ (800f79c <tcp_slowtmr+0x678>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f722:	429a      	cmp	r2, r3
 800f724:	d106      	bne.n	800f734 <tcp_slowtmr+0x610>
 800f726:	4b19      	ldr	r3, [pc, #100]	@ (800f78c <tcp_slowtmr+0x668>)
 800f728:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f72c:	491c      	ldr	r1, [pc, #112]	@ (800f7a0 <tcp_slowtmr+0x67c>)
 800f72e:	4819      	ldr	r0, [pc, #100]	@ (800f794 <tcp_slowtmr+0x670>)
 800f730:	f007 f950 	bl	80169d4 <iprintf>
        prev->next = pcb->next;
 800f734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f736:	68da      	ldr	r2, [r3, #12]
 800f738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f73a:	60da      	str	r2, [r3, #12]
 800f73c:	e00f      	b.n	800f75e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f73e:	4b17      	ldr	r3, [pc, #92]	@ (800f79c <tcp_slowtmr+0x678>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f744:	429a      	cmp	r2, r3
 800f746:	d006      	beq.n	800f756 <tcp_slowtmr+0x632>
 800f748:	4b10      	ldr	r3, [pc, #64]	@ (800f78c <tcp_slowtmr+0x668>)
 800f74a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f74e:	4915      	ldr	r1, [pc, #84]	@ (800f7a4 <tcp_slowtmr+0x680>)
 800f750:	4810      	ldr	r0, [pc, #64]	@ (800f794 <tcp_slowtmr+0x670>)
 800f752:	f007 f93f 	bl	80169d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	4a10      	ldr	r2, [pc, #64]	@ (800f79c <tcp_slowtmr+0x678>)
 800f75c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f760:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f768:	69f8      	ldr	r0, [r7, #28]
 800f76a:	f7ff f93d 	bl	800e9e8 <tcp_free>
 800f76e:	e004      	b.n	800f77a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f772:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f77a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1a9      	bne.n	800f6d4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f780:	bf00      	nop
 800f782:	bf00      	nop
 800f784:	3730      	adds	r7, #48	@ 0x30
 800f786:	46bd      	mov	sp, r7
 800f788:	bdb0      	pop	{r4, r5, r7, pc}
 800f78a:	bf00      	nop
 800f78c:	08018c3c 	.word	0x08018c3c
 800f790:	080190cc 	.word	0x080190cc
 800f794:	08018c80 	.word	0x08018c80
 800f798:	20013c5c 	.word	0x20013c5c
 800f79c:	20013c6c 	.word	0x20013c6c
 800f7a0:	080190fc 	.word	0x080190fc
 800f7a4:	08019124 	.word	0x08019124

0800f7a8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f7ae:	4b2d      	ldr	r3, [pc, #180]	@ (800f864 <tcp_fasttmr+0xbc>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	b2da      	uxtb	r2, r3
 800f7b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f864 <tcp_fasttmr+0xbc>)
 800f7b8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f7ba:	4b2b      	ldr	r3, [pc, #172]	@ (800f868 <tcp_fasttmr+0xc0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f7c0:	e048      	b.n	800f854 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	7f9a      	ldrb	r2, [r3, #30]
 800f7c6:	4b27      	ldr	r3, [pc, #156]	@ (800f864 <tcp_fasttmr+0xbc>)
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d03f      	beq.n	800f84e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f7ce:	4b25      	ldr	r3, [pc, #148]	@ (800f864 <tcp_fasttmr+0xbc>)
 800f7d0:	781a      	ldrb	r2, [r3, #0]
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	8b5b      	ldrh	r3, [r3, #26]
 800f7da:	f003 0301 	and.w	r3, r3, #1
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d010      	beq.n	800f804 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	8b5b      	ldrh	r3, [r3, #26]
 800f7e6:	f043 0302 	orr.w	r3, r3, #2
 800f7ea:	b29a      	uxth	r2, r3
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f003 fad7 	bl	8012da4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	8b5b      	ldrh	r3, [r3, #26]
 800f7fa:	f023 0303 	bic.w	r3, r3, #3
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	8b5b      	ldrh	r3, [r3, #26]
 800f808:	f003 0308 	and.w	r3, r3, #8
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d009      	beq.n	800f824 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	8b5b      	ldrh	r3, [r3, #26]
 800f814:	f023 0308 	bic.w	r3, r3, #8
 800f818:	b29a      	uxth	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff fa76 	bl	800ed10 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00a      	beq.n	800f848 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f832:	4b0e      	ldr	r3, [pc, #56]	@ (800f86c <tcp_fasttmr+0xc4>)
 800f834:	2200      	movs	r2, #0
 800f836:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f000 f819 	bl	800f870 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f83e:	4b0b      	ldr	r3, [pc, #44]	@ (800f86c <tcp_fasttmr+0xc4>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d000      	beq.n	800f848 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f846:	e7b8      	b.n	800f7ba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	607b      	str	r3, [r7, #4]
 800f84c:	e002      	b.n	800f854 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d1b3      	bne.n	800f7c2 <tcp_fasttmr+0x1a>
    }
  }
}
 800f85a:	bf00      	nop
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	20013c72 	.word	0x20013c72
 800f868:	20013c68 	.word	0x20013c68
 800f86c:	20013c70 	.word	0x20013c70

0800f870 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f870:	b590      	push	{r4, r7, lr}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <tcp_process_refused_data+0x22>
 800f87e:	4b37      	ldr	r3, [pc, #220]	@ (800f95c <tcp_process_refused_data+0xec>)
 800f880:	f240 6209 	movw	r2, #1545	@ 0x609
 800f884:	4936      	ldr	r1, [pc, #216]	@ (800f960 <tcp_process_refused_data+0xf0>)
 800f886:	4837      	ldr	r0, [pc, #220]	@ (800f964 <tcp_process_refused_data+0xf4>)
 800f888:	f007 f8a4 	bl	80169d4 <iprintf>
 800f88c:	f06f 030f 	mvn.w	r3, #15
 800f890:	e060      	b.n	800f954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f896:	7b5b      	ldrb	r3, [r3, #13]
 800f898:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f89e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <tcp_process_refused_data+0x58>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6918      	ldr	r0, [r3, #16]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	6879      	ldr	r1, [r7, #4]
 800f8c0:	47a0      	blx	r4
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	73fb      	strb	r3, [r7, #15]
 800f8c6:	e007      	b.n	800f8d8 <tcp_process_refused_data+0x68>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	6879      	ldr	r1, [r7, #4]
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	f000 f8a4 	bl	800fa1c <tcp_recv_null>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d12a      	bne.n	800f936 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f8e0:	7bbb      	ldrb	r3, [r7, #14]
 800f8e2:	f003 0320 	and.w	r3, r3, #32
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d033      	beq.n	800f952 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8ee:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f8f2:	d005      	beq.n	800f900 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00b      	beq.n	800f922 <tcp_process_refused_data+0xb2>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6918      	ldr	r0, [r3, #16]
 800f914:	2300      	movs	r3, #0
 800f916:	2200      	movs	r2, #0
 800f918:	6879      	ldr	r1, [r7, #4]
 800f91a:	47a0      	blx	r4
 800f91c:	4603      	mov	r3, r0
 800f91e:	73fb      	strb	r3, [r7, #15]
 800f920:	e001      	b.n	800f926 <tcp_process_refused_data+0xb6>
 800f922:	2300      	movs	r3, #0
 800f924:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f92a:	f113 0f0d 	cmn.w	r3, #13
 800f92e:	d110      	bne.n	800f952 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f930:	f06f 030c 	mvn.w	r3, #12
 800f934:	e00e      	b.n	800f954 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f93a:	f113 0f0d 	cmn.w	r3, #13
 800f93e:	d102      	bne.n	800f946 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f940:	f06f 030c 	mvn.w	r3, #12
 800f944:	e006      	b.n	800f954 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68ba      	ldr	r2, [r7, #8]
 800f94a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f94c:	f06f 0304 	mvn.w	r3, #4
 800f950:	e000      	b.n	800f954 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd90      	pop	{r4, r7, pc}
 800f95c:	08018c3c 	.word	0x08018c3c
 800f960:	0801914c 	.word	0x0801914c
 800f964:	08018c80 	.word	0x08018c80

0800f968 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f970:	e007      	b.n	800f982 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f000 f80a 	bl	800f992 <tcp_seg_free>
    seg = next;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f4      	bne.n	800f972 <tcp_segs_free+0xa>
  }
}
 800f988:	bf00      	nop
 800f98a:	bf00      	nop
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b082      	sub	sp, #8
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00c      	beq.n	800f9ba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d004      	beq.n	800f9b2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7fe fda1 	bl	800e4f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f9b2:	6879      	ldr	r1, [r7, #4]
 800f9b4:	2003      	movs	r0, #3
 800f9b6:	f7fd fe1f 	bl	800d5f8 <memp_free>
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	3708      	adds	r7, #8
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
	...

0800f9c4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d106      	bne.n	800f9e0 <tcp_seg_copy+0x1c>
 800f9d2:	4b0f      	ldr	r3, [pc, #60]	@ (800fa10 <tcp_seg_copy+0x4c>)
 800f9d4:	f240 6282 	movw	r2, #1666	@ 0x682
 800f9d8:	490e      	ldr	r1, [pc, #56]	@ (800fa14 <tcp_seg_copy+0x50>)
 800f9da:	480f      	ldr	r0, [pc, #60]	@ (800fa18 <tcp_seg_copy+0x54>)
 800f9dc:	f006 fffa 	bl	80169d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f9e0:	2003      	movs	r0, #3
 800f9e2:	f7fd fd93 	bl	800d50c <memp_malloc>
 800f9e6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <tcp_seg_copy+0x2e>
    return NULL;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	e00a      	b.n	800fa08 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f9f2:	2214      	movs	r2, #20
 800f9f4:	6879      	ldr	r1, [r7, #4]
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f007 fa6f 	bl	8016eda <memcpy>
  pbuf_ref(cseg->p);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	4618      	mov	r0, r3
 800fa02:	f7fe fe1d 	bl	800e640 <pbuf_ref>
  return cseg;
 800fa06:	68fb      	ldr	r3, [r7, #12]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	08018c3c 	.word	0x08018c3c
 800fa14:	08019190 	.word	0x08019190
 800fa18:	08018c80 	.word	0x08018c80

0800fa1c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
 800fa28:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d109      	bne.n	800fa44 <tcp_recv_null+0x28>
 800fa30:	4b12      	ldr	r3, [pc, #72]	@ (800fa7c <tcp_recv_null+0x60>)
 800fa32:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fa36:	4912      	ldr	r1, [pc, #72]	@ (800fa80 <tcp_recv_null+0x64>)
 800fa38:	4812      	ldr	r0, [pc, #72]	@ (800fa84 <tcp_recv_null+0x68>)
 800fa3a:	f006 ffcb 	bl	80169d4 <iprintf>
 800fa3e:	f06f 030f 	mvn.w	r3, #15
 800fa42:	e016      	b.n	800fa72 <tcp_recv_null+0x56>

  if (p != NULL) {
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d009      	beq.n	800fa5e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	891b      	ldrh	r3, [r3, #8]
 800fa4e:	4619      	mov	r1, r3
 800fa50:	68b8      	ldr	r0, [r7, #8]
 800fa52:	f7ff fb17 	bl	800f084 <tcp_recved>
    pbuf_free(p);
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7fe fd4c 	bl	800e4f4 <pbuf_free>
 800fa5c:	e008      	b.n	800fa70 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fa5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d104      	bne.n	800fa70 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fa66:	68b8      	ldr	r0, [r7, #8]
 800fa68:	f7ff f9bc 	bl	800ede4 <tcp_close>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	e000      	b.n	800fa72 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	08018c3c 	.word	0x08018c3c
 800fa80:	080191ac 	.word	0x080191ac
 800fa84:	08018c80 	.word	0x08018c80

0800fa88 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800fa92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	db01      	blt.n	800fa9e <tcp_kill_prio+0x16>
 800fa9a:	79fb      	ldrb	r3, [r7, #7]
 800fa9c:	e000      	b.n	800faa0 <tcp_kill_prio+0x18>
 800fa9e:	237f      	movs	r3, #127	@ 0x7f
 800faa0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800faa2:	7afb      	ldrb	r3, [r7, #11]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d034      	beq.n	800fb12 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800faa8:	7afb      	ldrb	r3, [r7, #11]
 800faaa:	3b01      	subs	r3, #1
 800faac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fab6:	4b19      	ldr	r3, [pc, #100]	@ (800fb1c <tcp_kill_prio+0x94>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	617b      	str	r3, [r7, #20]
 800fabc:	e01f      	b.n	800fafe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	7d5b      	ldrb	r3, [r3, #21]
 800fac2:	7afa      	ldrb	r2, [r7, #11]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d80c      	bhi.n	800fae2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fac8:	697b      	ldr	r3, [r7, #20]
 800faca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800facc:	7afa      	ldrb	r2, [r7, #11]
 800face:	429a      	cmp	r2, r3
 800fad0:	d112      	bne.n	800faf8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fad2:	4b13      	ldr	r3, [pc, #76]	@ (800fb20 <tcp_kill_prio+0x98>)
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d80a      	bhi.n	800faf8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800fae2:	4b0f      	ldr	r3, [pc, #60]	@ (800fb20 <tcp_kill_prio+0x98>)
 800fae4:	681a      	ldr	r2, [r3, #0]
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	6a1b      	ldr	r3, [r3, #32]
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	7d5b      	ldrb	r3, [r3, #21]
 800faf6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	617b      	str	r3, [r7, #20]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d1dc      	bne.n	800fabe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d004      	beq.n	800fb14 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fb0a:	6938      	ldr	r0, [r7, #16]
 800fb0c:	f7ff fa54 	bl	800efb8 <tcp_abort>
 800fb10:	e000      	b.n	800fb14 <tcp_kill_prio+0x8c>
    return;
 800fb12:	bf00      	nop
  }
}
 800fb14:	3718      	adds	r7, #24
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20013c68 	.word	0x20013c68
 800fb20:	20013c5c 	.word	0x20013c5c

0800fb24 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b086      	sub	sp, #24
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	2b08      	cmp	r3, #8
 800fb32:	d009      	beq.n	800fb48 <tcp_kill_state+0x24>
 800fb34:	79fb      	ldrb	r3, [r7, #7]
 800fb36:	2b09      	cmp	r3, #9
 800fb38:	d006      	beq.n	800fb48 <tcp_kill_state+0x24>
 800fb3a:	4b1a      	ldr	r3, [pc, #104]	@ (800fba4 <tcp_kill_state+0x80>)
 800fb3c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800fb40:	4919      	ldr	r1, [pc, #100]	@ (800fba8 <tcp_kill_state+0x84>)
 800fb42:	481a      	ldr	r0, [pc, #104]	@ (800fbac <tcp_kill_state+0x88>)
 800fb44:	f006 ff46 	bl	80169d4 <iprintf>

  inactivity = 0;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb50:	4b17      	ldr	r3, [pc, #92]	@ (800fbb0 <tcp_kill_state+0x8c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	617b      	str	r3, [r7, #20]
 800fb56:	e017      	b.n	800fb88 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	7d1b      	ldrb	r3, [r3, #20]
 800fb5c:	79fa      	ldrb	r2, [r7, #7]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d10f      	bne.n	800fb82 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fb62:	4b14      	ldr	r3, [pc, #80]	@ (800fbb4 <tcp_kill_state+0x90>)
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d807      	bhi.n	800fb82 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800fb72:	4b10      	ldr	r3, [pc, #64]	@ (800fbb4 <tcp_kill_state+0x90>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	617b      	str	r3, [r7, #20]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e4      	bne.n	800fb58 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d003      	beq.n	800fb9c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800fb94:	2100      	movs	r1, #0
 800fb96:	6938      	ldr	r0, [r7, #16]
 800fb98:	f7ff f950 	bl	800ee3c <tcp_abandon>
  }
}
 800fb9c:	bf00      	nop
 800fb9e:	3718      	adds	r7, #24
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	08018c3c 	.word	0x08018c3c
 800fba8:	080191c8 	.word	0x080191c8
 800fbac:	08018c80 	.word	0x08018c80
 800fbb0:	20013c68 	.word	0x20013c68
 800fbb4:	20013c5c 	.word	0x20013c5c

0800fbb8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc6:	4b12      	ldr	r3, [pc, #72]	@ (800fc10 <tcp_kill_timewait+0x58>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60fb      	str	r3, [r7, #12]
 800fbcc:	e012      	b.n	800fbf4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fbce:	4b11      	ldr	r3, [pc, #68]	@ (800fc14 <tcp_kill_timewait+0x5c>)
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6a1b      	ldr	r3, [r3, #32]
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d807      	bhi.n	800fbee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800fbde:	4b0d      	ldr	r3, [pc, #52]	@ (800fc14 <tcp_kill_timewait+0x5c>)
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	60fb      	str	r3, [r7, #12]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1e9      	bne.n	800fbce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800fc00:	68b8      	ldr	r0, [r7, #8]
 800fc02:	f7ff f9d9 	bl	800efb8 <tcp_abort>
  }
}
 800fc06:	bf00      	nop
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20013c6c 	.word	0x20013c6c
 800fc14:	20013c5c 	.word	0x20013c5c

0800fc18 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800fc1e:	4b10      	ldr	r3, [pc, #64]	@ (800fc60 <tcp_handle_closepend+0x48>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc24:	e014      	b.n	800fc50 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8b5b      	ldrh	r3, [r3, #26]
 800fc30:	f003 0308 	and.w	r3, r3, #8
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d009      	beq.n	800fc4c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8b5b      	ldrh	r3, [r3, #26]
 800fc3c:	f023 0308 	bic.w	r3, r3, #8
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f7ff f862 	bl	800ed10 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d1e7      	bne.n	800fc26 <tcp_handle_closepend+0xe>
  }
}
 800fc56:	bf00      	nop
 800fc58:	bf00      	nop
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	20013c68 	.word	0x20013c68

0800fc64 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fc6e:	2001      	movs	r0, #1
 800fc70:	f7fd fc4c 	bl	800d50c <memp_malloc>
 800fc74:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d126      	bne.n	800fcca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fc7c:	f7ff ffcc 	bl	800fc18 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fc80:	f7ff ff9a 	bl	800fbb8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fc84:	2001      	movs	r0, #1
 800fc86:	f7fd fc41 	bl	800d50c <memp_malloc>
 800fc8a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d11b      	bne.n	800fcca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fc92:	2009      	movs	r0, #9
 800fc94:	f7ff ff46 	bl	800fb24 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fc98:	2001      	movs	r0, #1
 800fc9a:	f7fd fc37 	bl	800d50c <memp_malloc>
 800fc9e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d111      	bne.n	800fcca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fca6:	2008      	movs	r0, #8
 800fca8:	f7ff ff3c 	bl	800fb24 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcac:	2001      	movs	r0, #1
 800fcae:	f7fd fc2d 	bl	800d50c <memp_malloc>
 800fcb2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d107      	bne.n	800fcca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fcba:	79fb      	ldrb	r3, [r7, #7]
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7ff fee3 	bl	800fa88 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fcc2:	2001      	movs	r0, #1
 800fcc4:	f7fd fc22 	bl	800d50c <memp_malloc>
 800fcc8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d03f      	beq.n	800fd50 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fcd0:	229c      	movs	r2, #156	@ 0x9c
 800fcd2:	2100      	movs	r1, #0
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f007 f82d 	bl	8016d34 <memset>
    pcb->prio = prio;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	79fa      	ldrb	r2, [r7, #7]
 800fcde:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fce6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fcf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	22ff      	movs	r2, #255	@ 0xff
 800fcfe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fd06:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2206      	movs	r2, #6
 800fd0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	2206      	movs	r2, #6
 800fd14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd1c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2201      	movs	r2, #1
 800fd22:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fd26:	4b0d      	ldr	r3, [pc, #52]	@ (800fd5c <tcp_alloc+0xf8>)
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd60 <tcp_alloc+0xfc>)
 800fd30:	781a      	ldrb	r2, [r3, #0]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fd3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	4a08      	ldr	r2, [pc, #32]	@ (800fd64 <tcp_alloc+0x100>)
 800fd44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	4a07      	ldr	r2, [pc, #28]	@ (800fd68 <tcp_alloc+0x104>)
 800fd4c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fd50:	68fb      	ldr	r3, [r7, #12]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20013c5c 	.word	0x20013c5c
 800fd60:	20013c72 	.word	0x20013c72
 800fd64:	0800fa1d 	.word	0x0800fa1d
 800fd68:	006ddd00 	.word	0x006ddd00

0800fd6c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d107      	bne.n	800fd8a <tcp_pcb_purge+0x1e>
 800fd7a:	4b21      	ldr	r3, [pc, #132]	@ (800fe00 <tcp_pcb_purge+0x94>)
 800fd7c:	f640 0251 	movw	r2, #2129	@ 0x851
 800fd80:	4920      	ldr	r1, [pc, #128]	@ (800fe04 <tcp_pcb_purge+0x98>)
 800fd82:	4821      	ldr	r0, [pc, #132]	@ (800fe08 <tcp_pcb_purge+0x9c>)
 800fd84:	f006 fe26 	bl	80169d4 <iprintf>
 800fd88:	e037      	b.n	800fdfa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	7d1b      	ldrb	r3, [r3, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d033      	beq.n	800fdfa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fd96:	2b0a      	cmp	r3, #10
 800fd98:	d02f      	beq.n	800fdfa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d02b      	beq.n	800fdfa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d007      	beq.n	800fdba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe fba0 	bl	800e4f4 <pbuf_free>
      pcb->refused_data = NULL;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 f98c 	bl	80100e0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdce:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7ff fdc7 	bl	800f968 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdde:	4618      	mov	r0, r3
 800fde0:	f7ff fdc2 	bl	800f968 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2200      	movs	r2, #0
 800fde8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	08018c3c 	.word	0x08018c3c
 800fe04:	08019288 	.word	0x08019288
 800fe08:	08018c80 	.word	0x08018c80

0800fe0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <tcp_pcb_remove+0x1e>
 800fe1c:	4b3e      	ldr	r3, [pc, #248]	@ (800ff18 <tcp_pcb_remove+0x10c>)
 800fe1e:	f640 0283 	movw	r2, #2179	@ 0x883
 800fe22:	493e      	ldr	r1, [pc, #248]	@ (800ff1c <tcp_pcb_remove+0x110>)
 800fe24:	483e      	ldr	r0, [pc, #248]	@ (800ff20 <tcp_pcb_remove+0x114>)
 800fe26:	f006 fdd5 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d106      	bne.n	800fe3e <tcp_pcb_remove+0x32>
 800fe30:	4b39      	ldr	r3, [pc, #228]	@ (800ff18 <tcp_pcb_remove+0x10c>)
 800fe32:	f640 0284 	movw	r2, #2180	@ 0x884
 800fe36:	493b      	ldr	r1, [pc, #236]	@ (800ff24 <tcp_pcb_remove+0x118>)
 800fe38:	4839      	ldr	r0, [pc, #228]	@ (800ff20 <tcp_pcb_remove+0x114>)
 800fe3a:	f006 fdcb 	bl	80169d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d105      	bne.n	800fe54 <tcp_pcb_remove+0x48>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68da      	ldr	r2, [r3, #12]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	e013      	b.n	800fe7c <tcp_pcb_remove+0x70>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	60fb      	str	r3, [r7, #12]
 800fe5a:	e00c      	b.n	800fe76 <tcp_pcb_remove+0x6a>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	68db      	ldr	r3, [r3, #12]
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d104      	bne.n	800fe70 <tcp_pcb_remove+0x64>
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	60da      	str	r2, [r3, #12]
 800fe6e:	e005      	b.n	800fe7c <tcp_pcb_remove+0x70>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	68db      	ldr	r3, [r3, #12]
 800fe74:	60fb      	str	r3, [r7, #12]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d1ef      	bne.n	800fe5c <tcp_pcb_remove+0x50>
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fe82:	6838      	ldr	r0, [r7, #0]
 800fe84:	f7ff ff72 	bl	800fd6c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	7d1b      	ldrb	r3, [r3, #20]
 800fe8c:	2b0a      	cmp	r3, #10
 800fe8e:	d013      	beq.n	800feb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d00f      	beq.n	800feb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	8b5b      	ldrh	r3, [r3, #26]
 800fe9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d009      	beq.n	800feb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	8b5b      	ldrh	r3, [r3, #26]
 800fea8:	f043 0302 	orr.w	r3, r3, #2
 800feac:	b29a      	uxth	r2, r3
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800feb2:	6838      	ldr	r0, [r7, #0]
 800feb4:	f002 ff76 	bl	8012da4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800feb8:	683b      	ldr	r3, [r7, #0]
 800feba:	7d1b      	ldrb	r3, [r3, #20]
 800febc:	2b01      	cmp	r3, #1
 800febe:	d020      	beq.n	800ff02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d006      	beq.n	800fed6 <tcp_pcb_remove+0xca>
 800fec8:	4b13      	ldr	r3, [pc, #76]	@ (800ff18 <tcp_pcb_remove+0x10c>)
 800feca:	f640 0293 	movw	r2, #2195	@ 0x893
 800fece:	4916      	ldr	r1, [pc, #88]	@ (800ff28 <tcp_pcb_remove+0x11c>)
 800fed0:	4813      	ldr	r0, [pc, #76]	@ (800ff20 <tcp_pcb_remove+0x114>)
 800fed2:	f006 fd7f 	bl	80169d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d006      	beq.n	800feec <tcp_pcb_remove+0xe0>
 800fede:	4b0e      	ldr	r3, [pc, #56]	@ (800ff18 <tcp_pcb_remove+0x10c>)
 800fee0:	f640 0294 	movw	r2, #2196	@ 0x894
 800fee4:	4911      	ldr	r1, [pc, #68]	@ (800ff2c <tcp_pcb_remove+0x120>)
 800fee6:	480e      	ldr	r0, [pc, #56]	@ (800ff20 <tcp_pcb_remove+0x114>)
 800fee8:	f006 fd74 	bl	80169d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d006      	beq.n	800ff02 <tcp_pcb_remove+0xf6>
 800fef4:	4b08      	ldr	r3, [pc, #32]	@ (800ff18 <tcp_pcb_remove+0x10c>)
 800fef6:	f640 0296 	movw	r2, #2198	@ 0x896
 800fefa:	490d      	ldr	r1, [pc, #52]	@ (800ff30 <tcp_pcb_remove+0x124>)
 800fefc:	4808      	ldr	r0, [pc, #32]	@ (800ff20 <tcp_pcb_remove+0x114>)
 800fefe:	f006 fd69 	bl	80169d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	2200      	movs	r2, #0
 800ff06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ff0e:	bf00      	nop
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	08018c3c 	.word	0x08018c3c
 800ff1c:	080192a4 	.word	0x080192a4
 800ff20:	08018c80 	.word	0x08018c80
 800ff24:	080192c0 	.word	0x080192c0
 800ff28:	080192e0 	.word	0x080192e0
 800ff2c:	080192f8 	.word	0x080192f8
 800ff30:	08019314 	.word	0x08019314

0800ff34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d106      	bne.n	800ff50 <tcp_next_iss+0x1c>
 800ff42:	4b0a      	ldr	r3, [pc, #40]	@ (800ff6c <tcp_next_iss+0x38>)
 800ff44:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ff48:	4909      	ldr	r1, [pc, #36]	@ (800ff70 <tcp_next_iss+0x3c>)
 800ff4a:	480a      	ldr	r0, [pc, #40]	@ (800ff74 <tcp_next_iss+0x40>)
 800ff4c:	f006 fd42 	bl	80169d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ff50:	4b09      	ldr	r3, [pc, #36]	@ (800ff78 <tcp_next_iss+0x44>)
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	4b09      	ldr	r3, [pc, #36]	@ (800ff7c <tcp_next_iss+0x48>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	4413      	add	r3, r2
 800ff5a:	4a07      	ldr	r2, [pc, #28]	@ (800ff78 <tcp_next_iss+0x44>)
 800ff5c:	6013      	str	r3, [r2, #0]
  return iss;
 800ff5e:	4b06      	ldr	r3, [pc, #24]	@ (800ff78 <tcp_next_iss+0x44>)
 800ff60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	08018c3c 	.word	0x08018c3c
 800ff70:	0801932c 	.word	0x0801932c
 800ff74:	08018c80 	.word	0x08018c80
 800ff78:	200000a0 	.word	0x200000a0
 800ff7c:	20013c5c 	.word	0x20013c5c

0800ff80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	4603      	mov	r3, r0
 800ff88:	60b9      	str	r1, [r7, #8]
 800ff8a:	607a      	str	r2, [r7, #4]
 800ff8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d106      	bne.n	800ffa2 <tcp_eff_send_mss_netif+0x22>
 800ff94:	4b14      	ldr	r3, [pc, #80]	@ (800ffe8 <tcp_eff_send_mss_netif+0x68>)
 800ff96:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ff9a:	4914      	ldr	r1, [pc, #80]	@ (800ffec <tcp_eff_send_mss_netif+0x6c>)
 800ff9c:	4814      	ldr	r0, [pc, #80]	@ (800fff0 <tcp_eff_send_mss_netif+0x70>)
 800ff9e:	f006 fd19 	bl	80169d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d101      	bne.n	800ffac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ffa8:	89fb      	ldrh	r3, [r7, #14]
 800ffaa:	e019      	b.n	800ffe0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ffb0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ffb2:	8afb      	ldrh	r3, [r7, #22]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d012      	beq.n	800ffde <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ffb8:	2328      	movs	r3, #40	@ 0x28
 800ffba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ffbc:	8afa      	ldrh	r2, [r7, #22]
 800ffbe:	8abb      	ldrh	r3, [r7, #20]
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d904      	bls.n	800ffce <tcp_eff_send_mss_netif+0x4e>
 800ffc4:	8afa      	ldrh	r2, [r7, #22]
 800ffc6:	8abb      	ldrh	r3, [r7, #20]
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	e000      	b.n	800ffd0 <tcp_eff_send_mss_netif+0x50>
 800ffce:	2300      	movs	r3, #0
 800ffd0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ffd2:	8a7a      	ldrh	r2, [r7, #18]
 800ffd4:	89fb      	ldrh	r3, [r7, #14]
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	bf28      	it	cs
 800ffda:	4613      	movcs	r3, r2
 800ffdc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ffde:	89fb      	ldrh	r3, [r7, #14]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3718      	adds	r7, #24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	08018c3c 	.word	0x08018c3c
 800ffec:	08019348 	.word	0x08019348
 800fff0:	08018c80 	.word	0x08018c80

0800fff4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d11d      	bne.n	8010044 <tcp_netif_ip_addr_changed_pcblist+0x50>
 8010008:	4b12      	ldr	r3, [pc, #72]	@ (8010054 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801000a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801000e:	4912      	ldr	r1, [pc, #72]	@ (8010058 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 8010010:	4812      	ldr	r0, [pc, #72]	@ (801005c <tcp_netif_ip_addr_changed_pcblist+0x68>)
 8010012:	f006 fcdf 	bl	80169d4 <iprintf>

  while (pcb != NULL) {
 8010016:	e015      	b.n	8010044 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	681a      	ldr	r2, [r3, #0]
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	429a      	cmp	r2, r3
 8010022:	d10c      	bne.n	801003e <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	68db      	ldr	r3, [r3, #12]
 8010028:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 801002a:	68f9      	ldr	r1, [r7, #12]
 801002c:	480c      	ldr	r0, [pc, #48]	@ (8010060 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 801002e:	f006 fcd1 	bl	80169d4 <iprintf>
      tcp_abort(pcb);
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f7fe ffc0 	bl	800efb8 <tcp_abort>
      pcb = next;
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	e002      	b.n	8010044 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e6      	bne.n	8010018 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801004a:	bf00      	nop
 801004c:	bf00      	nop
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	08018c3c 	.word	0x08018c3c
 8010058:	08019370 	.word	0x08019370
 801005c:	08018c80 	.word	0x08018c80
 8010060:	080193a4 	.word	0x080193a4

08010064 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d02a      	beq.n	80100ca <tcp_netif_ip_addr_changed+0x66>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d026      	beq.n	80100ca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801007c:	4b15      	ldr	r3, [pc, #84]	@ (80100d4 <tcp_netif_ip_addr_changed+0x70>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ffb6 	bl	800fff4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010088:	4b13      	ldr	r3, [pc, #76]	@ (80100d8 <tcp_netif_ip_addr_changed+0x74>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4619      	mov	r1, r3
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7ff ffb0 	bl	800fff4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d017      	beq.n	80100ca <tcp_netif_ip_addr_changed+0x66>
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d013      	beq.n	80100ca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100a2:	4b0e      	ldr	r3, [pc, #56]	@ (80100dc <tcp_netif_ip_addr_changed+0x78>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	60fb      	str	r3, [r7, #12]
 80100a8:	e00c      	b.n	80100c4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d103      	bne.n	80100be <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	60fb      	str	r3, [r7, #12]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1ef      	bne.n	80100aa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80100ca:	bf00      	nop
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20013c68 	.word	0x20013c68
 80100d8:	20013c60 	.word	0x20013c60
 80100dc:	20013c64 	.word	0x20013c64

080100e0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b082      	sub	sp, #8
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d007      	beq.n	8010100 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff fc37 	bl	800f968 <tcp_segs_free>
    pcb->ooseq = NULL;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010108:	b590      	push	{r4, r7, lr}
 801010a:	b08d      	sub	sp, #52	@ 0x34
 801010c:	af04      	add	r7, sp, #16
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d105      	bne.n	8010124 <tcp_input+0x1c>
 8010118:	4b9b      	ldr	r3, [pc, #620]	@ (8010388 <tcp_input+0x280>)
 801011a:	2283      	movs	r2, #131	@ 0x83
 801011c:	499b      	ldr	r1, [pc, #620]	@ (801038c <tcp_input+0x284>)
 801011e:	489c      	ldr	r0, [pc, #624]	@ (8010390 <tcp_input+0x288>)
 8010120:	f006 fc58 	bl	80169d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	4a9a      	ldr	r2, [pc, #616]	@ (8010394 <tcp_input+0x28c>)
 801012a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	895b      	ldrh	r3, [r3, #10]
 8010130:	2b13      	cmp	r3, #19
 8010132:	f240 83d1 	bls.w	80108d8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010136:	4b98      	ldr	r3, [pc, #608]	@ (8010398 <tcp_input+0x290>)
 8010138:	695b      	ldr	r3, [r3, #20]
 801013a:	4a97      	ldr	r2, [pc, #604]	@ (8010398 <tcp_input+0x290>)
 801013c:	6812      	ldr	r2, [r2, #0]
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f004 fe03 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 8010146:	4603      	mov	r3, r0
 8010148:	2b00      	cmp	r3, #0
 801014a:	f040 83c7 	bne.w	80108dc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801014e:	4b92      	ldr	r3, [pc, #584]	@ (8010398 <tcp_input+0x290>)
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010156:	2be0      	cmp	r3, #224	@ 0xe0
 8010158:	f000 83c0 	beq.w	80108dc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801015c:	4b8d      	ldr	r3, [pc, #564]	@ (8010394 <tcp_input+0x28c>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	899b      	ldrh	r3, [r3, #12]
 8010162:	b29b      	uxth	r3, r3
 8010164:	4618      	mov	r0, r3
 8010166:	f7fc fcf9 	bl	800cb5c <lwip_htons>
 801016a:	4603      	mov	r3, r0
 801016c:	0b1b      	lsrs	r3, r3, #12
 801016e:	b29b      	uxth	r3, r3
 8010170:	b2db      	uxtb	r3, r3
 8010172:	009b      	lsls	r3, r3, #2
 8010174:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010176:	7cbb      	ldrb	r3, [r7, #18]
 8010178:	2b13      	cmp	r3, #19
 801017a:	f240 83b1 	bls.w	80108e0 <tcp_input+0x7d8>
 801017e:	7cbb      	ldrb	r3, [r7, #18]
 8010180:	b29a      	uxth	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	891b      	ldrh	r3, [r3, #8]
 8010186:	429a      	cmp	r2, r3
 8010188:	f200 83aa 	bhi.w	80108e0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801018c:	7cbb      	ldrb	r3, [r7, #18]
 801018e:	b29b      	uxth	r3, r3
 8010190:	3b14      	subs	r3, #20
 8010192:	b29a      	uxth	r2, r3
 8010194:	4b81      	ldr	r3, [pc, #516]	@ (801039c <tcp_input+0x294>)
 8010196:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010198:	4b81      	ldr	r3, [pc, #516]	@ (80103a0 <tcp_input+0x298>)
 801019a:	2200      	movs	r2, #0
 801019c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	895a      	ldrh	r2, [r3, #10]
 80101a2:	7cbb      	ldrb	r3, [r7, #18]
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	429a      	cmp	r2, r3
 80101a8:	d309      	bcc.n	80101be <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80101aa:	4b7c      	ldr	r3, [pc, #496]	@ (801039c <tcp_input+0x294>)
 80101ac:	881a      	ldrh	r2, [r3, #0]
 80101ae:	4b7d      	ldr	r3, [pc, #500]	@ (80103a4 <tcp_input+0x29c>)
 80101b0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80101b2:	7cbb      	ldrb	r3, [r7, #18]
 80101b4:	4619      	mov	r1, r3
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7fe f916 	bl	800e3e8 <pbuf_remove_header>
 80101bc:	e04e      	b.n	801025c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d105      	bne.n	80101d2 <tcp_input+0xca>
 80101c6:	4b70      	ldr	r3, [pc, #448]	@ (8010388 <tcp_input+0x280>)
 80101c8:	22c2      	movs	r2, #194	@ 0xc2
 80101ca:	4977      	ldr	r1, [pc, #476]	@ (80103a8 <tcp_input+0x2a0>)
 80101cc:	4870      	ldr	r0, [pc, #448]	@ (8010390 <tcp_input+0x288>)
 80101ce:	f006 fc01 	bl	80169d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80101d2:	2114      	movs	r1, #20
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f7fe f907 	bl	800e3e8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	895a      	ldrh	r2, [r3, #10]
 80101de:	4b71      	ldr	r3, [pc, #452]	@ (80103a4 <tcp_input+0x29c>)
 80101e0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80101e2:	4b6e      	ldr	r3, [pc, #440]	@ (801039c <tcp_input+0x294>)
 80101e4:	881a      	ldrh	r2, [r3, #0]
 80101e6:	4b6f      	ldr	r3, [pc, #444]	@ (80103a4 <tcp_input+0x29c>)
 80101e8:	881b      	ldrh	r3, [r3, #0]
 80101ea:	1ad3      	subs	r3, r2, r3
 80101ec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80101ee:	4b6d      	ldr	r3, [pc, #436]	@ (80103a4 <tcp_input+0x29c>)
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7fe f8f7 	bl	800e3e8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	895b      	ldrh	r3, [r3, #10]
 8010200:	8a3a      	ldrh	r2, [r7, #16]
 8010202:	429a      	cmp	r2, r3
 8010204:	f200 836e 	bhi.w	80108e4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	4a64      	ldr	r2, [pc, #400]	@ (80103a0 <tcp_input+0x298>)
 8010210:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	8a3a      	ldrh	r2, [r7, #16]
 8010218:	4611      	mov	r1, r2
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe f8e4 	bl	800e3e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	891a      	ldrh	r2, [r3, #8]
 8010224:	8a3b      	ldrh	r3, [r7, #16]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	b29a      	uxth	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	895b      	ldrh	r3, [r3, #10]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d005      	beq.n	8010242 <tcp_input+0x13a>
 8010236:	4b54      	ldr	r3, [pc, #336]	@ (8010388 <tcp_input+0x280>)
 8010238:	22df      	movs	r2, #223	@ 0xdf
 801023a:	495c      	ldr	r1, [pc, #368]	@ (80103ac <tcp_input+0x2a4>)
 801023c:	4854      	ldr	r0, [pc, #336]	@ (8010390 <tcp_input+0x288>)
 801023e:	f006 fbc9 	bl	80169d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	891a      	ldrh	r2, [r3, #8]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	891b      	ldrh	r3, [r3, #8]
 801024c:	429a      	cmp	r2, r3
 801024e:	d005      	beq.n	801025c <tcp_input+0x154>
 8010250:	4b4d      	ldr	r3, [pc, #308]	@ (8010388 <tcp_input+0x280>)
 8010252:	22e0      	movs	r2, #224	@ 0xe0
 8010254:	4956      	ldr	r1, [pc, #344]	@ (80103b0 <tcp_input+0x2a8>)
 8010256:	484e      	ldr	r0, [pc, #312]	@ (8010390 <tcp_input+0x288>)
 8010258:	f006 fbbc 	bl	80169d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801025c:	4b4d      	ldr	r3, [pc, #308]	@ (8010394 <tcp_input+0x28c>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	b29b      	uxth	r3, r3
 8010264:	4a4b      	ldr	r2, [pc, #300]	@ (8010394 <tcp_input+0x28c>)
 8010266:	6814      	ldr	r4, [r2, #0]
 8010268:	4618      	mov	r0, r3
 801026a:	f7fc fc77 	bl	800cb5c <lwip_htons>
 801026e:	4603      	mov	r3, r0
 8010270:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010272:	4b48      	ldr	r3, [pc, #288]	@ (8010394 <tcp_input+0x28c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	885b      	ldrh	r3, [r3, #2]
 8010278:	b29b      	uxth	r3, r3
 801027a:	4a46      	ldr	r2, [pc, #280]	@ (8010394 <tcp_input+0x28c>)
 801027c:	6814      	ldr	r4, [r2, #0]
 801027e:	4618      	mov	r0, r3
 8010280:	f7fc fc6c 	bl	800cb5c <lwip_htons>
 8010284:	4603      	mov	r3, r0
 8010286:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010288:	4b42      	ldr	r3, [pc, #264]	@ (8010394 <tcp_input+0x28c>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	4a41      	ldr	r2, [pc, #260]	@ (8010394 <tcp_input+0x28c>)
 8010290:	6814      	ldr	r4, [r2, #0]
 8010292:	4618      	mov	r0, r3
 8010294:	f7fc fc78 	bl	800cb88 <lwip_htonl>
 8010298:	4603      	mov	r3, r0
 801029a:	6063      	str	r3, [r4, #4]
 801029c:	6863      	ldr	r3, [r4, #4]
 801029e:	4a45      	ldr	r2, [pc, #276]	@ (80103b4 <tcp_input+0x2ac>)
 80102a0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80102a2:	4b3c      	ldr	r3, [pc, #240]	@ (8010394 <tcp_input+0x28c>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	4a3a      	ldr	r2, [pc, #232]	@ (8010394 <tcp_input+0x28c>)
 80102aa:	6814      	ldr	r4, [r2, #0]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fc fc6b 	bl	800cb88 <lwip_htonl>
 80102b2:	4603      	mov	r3, r0
 80102b4:	60a3      	str	r3, [r4, #8]
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	4a3f      	ldr	r2, [pc, #252]	@ (80103b8 <tcp_input+0x2b0>)
 80102ba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80102bc:	4b35      	ldr	r3, [pc, #212]	@ (8010394 <tcp_input+0x28c>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	89db      	ldrh	r3, [r3, #14]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4a33      	ldr	r2, [pc, #204]	@ (8010394 <tcp_input+0x28c>)
 80102c6:	6814      	ldr	r4, [r2, #0]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fc fc47 	bl	800cb5c <lwip_htons>
 80102ce:	4603      	mov	r3, r0
 80102d0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80102d2:	4b30      	ldr	r3, [pc, #192]	@ (8010394 <tcp_input+0x28c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	899b      	ldrh	r3, [r3, #12]
 80102d8:	b29b      	uxth	r3, r3
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fc fc3e 	bl	800cb5c <lwip_htons>
 80102e0:	4603      	mov	r3, r0
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80102e8:	b2da      	uxtb	r2, r3
 80102ea:	4b34      	ldr	r3, [pc, #208]	@ (80103bc <tcp_input+0x2b4>)
 80102ec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	891a      	ldrh	r2, [r3, #8]
 80102f2:	4b33      	ldr	r3, [pc, #204]	@ (80103c0 <tcp_input+0x2b8>)
 80102f4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80102f6:	4b31      	ldr	r3, [pc, #196]	@ (80103bc <tcp_input+0x2b4>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	f003 0303 	and.w	r3, r3, #3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00c      	beq.n	801031c <tcp_input+0x214>
    tcplen++;
 8010302:	4b2f      	ldr	r3, [pc, #188]	@ (80103c0 <tcp_input+0x2b8>)
 8010304:	881b      	ldrh	r3, [r3, #0]
 8010306:	3301      	adds	r3, #1
 8010308:	b29a      	uxth	r2, r3
 801030a:	4b2d      	ldr	r3, [pc, #180]	@ (80103c0 <tcp_input+0x2b8>)
 801030c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	891a      	ldrh	r2, [r3, #8]
 8010312:	4b2b      	ldr	r3, [pc, #172]	@ (80103c0 <tcp_input+0x2b8>)
 8010314:	881b      	ldrh	r3, [r3, #0]
 8010316:	429a      	cmp	r2, r3
 8010318:	f200 82e6 	bhi.w	80108e8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801031c:	2300      	movs	r3, #0
 801031e:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010320:	4b28      	ldr	r3, [pc, #160]	@ (80103c4 <tcp_input+0x2bc>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	61bb      	str	r3, [r7, #24]
 8010326:	e09d      	b.n	8010464 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	7d1b      	ldrb	r3, [r3, #20]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d105      	bne.n	801033c <tcp_input+0x234>
 8010330:	4b15      	ldr	r3, [pc, #84]	@ (8010388 <tcp_input+0x280>)
 8010332:	22fb      	movs	r2, #251	@ 0xfb
 8010334:	4924      	ldr	r1, [pc, #144]	@ (80103c8 <tcp_input+0x2c0>)
 8010336:	4816      	ldr	r0, [pc, #88]	@ (8010390 <tcp_input+0x288>)
 8010338:	f006 fb4c 	bl	80169d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	7d1b      	ldrb	r3, [r3, #20]
 8010340:	2b0a      	cmp	r3, #10
 8010342:	d105      	bne.n	8010350 <tcp_input+0x248>
 8010344:	4b10      	ldr	r3, [pc, #64]	@ (8010388 <tcp_input+0x280>)
 8010346:	22fc      	movs	r2, #252	@ 0xfc
 8010348:	4920      	ldr	r1, [pc, #128]	@ (80103cc <tcp_input+0x2c4>)
 801034a:	4811      	ldr	r0, [pc, #68]	@ (8010390 <tcp_input+0x288>)
 801034c:	f006 fb42 	bl	80169d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	7d1b      	ldrb	r3, [r3, #20]
 8010354:	2b01      	cmp	r3, #1
 8010356:	d105      	bne.n	8010364 <tcp_input+0x25c>
 8010358:	4b0b      	ldr	r3, [pc, #44]	@ (8010388 <tcp_input+0x280>)
 801035a:	22fd      	movs	r2, #253	@ 0xfd
 801035c:	491c      	ldr	r1, [pc, #112]	@ (80103d0 <tcp_input+0x2c8>)
 801035e:	480c      	ldr	r0, [pc, #48]	@ (8010390 <tcp_input+0x288>)
 8010360:	f006 fb38 	bl	80169d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	7a1b      	ldrb	r3, [r3, #8]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d033      	beq.n	80103d4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801036c:	69bb      	ldr	r3, [r7, #24]
 801036e:	7a1a      	ldrb	r2, [r3, #8]
 8010370:	4b09      	ldr	r3, [pc, #36]	@ (8010398 <tcp_input+0x290>)
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010378:	3301      	adds	r3, #1
 801037a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801037c:	429a      	cmp	r2, r3
 801037e:	d029      	beq.n	80103d4 <tcp_input+0x2cc>
      prev = pcb;
 8010380:	69bb      	ldr	r3, [r7, #24]
 8010382:	61fb      	str	r3, [r7, #28]
      continue;
 8010384:	e06b      	b.n	801045e <tcp_input+0x356>
 8010386:	bf00      	nop
 8010388:	080193cc 	.word	0x080193cc
 801038c:	08019400 	.word	0x08019400
 8010390:	08019418 	.word	0x08019418
 8010394:	20013c88 	.word	0x20013c88
 8010398:	20008f18 	.word	0x20008f18
 801039c:	20013c8c 	.word	0x20013c8c
 80103a0:	20013c90 	.word	0x20013c90
 80103a4:	20013c8e 	.word	0x20013c8e
 80103a8:	08019440 	.word	0x08019440
 80103ac:	08019450 	.word	0x08019450
 80103b0:	0801945c 	.word	0x0801945c
 80103b4:	20013c98 	.word	0x20013c98
 80103b8:	20013c9c 	.word	0x20013c9c
 80103bc:	20013ca4 	.word	0x20013ca4
 80103c0:	20013ca2 	.word	0x20013ca2
 80103c4:	20013c68 	.word	0x20013c68
 80103c8:	0801947c 	.word	0x0801947c
 80103cc:	080194a4 	.word	0x080194a4
 80103d0:	080194d0 	.word	0x080194d0
    }

    if (pcb->remote_port == tcphdr->src &&
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	8b1a      	ldrh	r2, [r3, #24]
 80103d8:	4b72      	ldr	r3, [pc, #456]	@ (80105a4 <tcp_input+0x49c>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	881b      	ldrh	r3, [r3, #0]
 80103de:	b29b      	uxth	r3, r3
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d13a      	bne.n	801045a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	8ada      	ldrh	r2, [r3, #22]
 80103e8:	4b6e      	ldr	r3, [pc, #440]	@ (80105a4 <tcp_input+0x49c>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d132      	bne.n	801045a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	685a      	ldr	r2, [r3, #4]
 80103f8:	4b6b      	ldr	r3, [pc, #428]	@ (80105a8 <tcp_input+0x4a0>)
 80103fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d12c      	bne.n	801045a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	4b68      	ldr	r3, [pc, #416]	@ (80105a8 <tcp_input+0x4a0>)
 8010406:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010408:	429a      	cmp	r2, r3
 801040a:	d126      	bne.n	801045a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	69ba      	ldr	r2, [r7, #24]
 8010412:	429a      	cmp	r2, r3
 8010414:	d106      	bne.n	8010424 <tcp_input+0x31c>
 8010416:	4b65      	ldr	r3, [pc, #404]	@ (80105ac <tcp_input+0x4a4>)
 8010418:	f240 120d 	movw	r2, #269	@ 0x10d
 801041c:	4964      	ldr	r1, [pc, #400]	@ (80105b0 <tcp_input+0x4a8>)
 801041e:	4865      	ldr	r0, [pc, #404]	@ (80105b4 <tcp_input+0x4ac>)
 8010420:	f006 fad8 	bl	80169d4 <iprintf>
      if (prev != NULL) {
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00a      	beq.n	8010440 <tcp_input+0x338>
        prev->next = pcb->next;
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	68da      	ldr	r2, [r3, #12]
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010432:	4b61      	ldr	r3, [pc, #388]	@ (80105b8 <tcp_input+0x4b0>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801043a:	4a5f      	ldr	r2, [pc, #380]	@ (80105b8 <tcp_input+0x4b0>)
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010440:	69bb      	ldr	r3, [r7, #24]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	429a      	cmp	r2, r3
 8010448:	d111      	bne.n	801046e <tcp_input+0x366>
 801044a:	4b58      	ldr	r3, [pc, #352]	@ (80105ac <tcp_input+0x4a4>)
 801044c:	f240 1215 	movw	r2, #277	@ 0x115
 8010450:	495a      	ldr	r1, [pc, #360]	@ (80105bc <tcp_input+0x4b4>)
 8010452:	4858      	ldr	r0, [pc, #352]	@ (80105b4 <tcp_input+0x4ac>)
 8010454:	f006 fabe 	bl	80169d4 <iprintf>
      break;
 8010458:	e009      	b.n	801046e <tcp_input+0x366>
    }
    prev = pcb;
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801045e:	69bb      	ldr	r3, [r7, #24]
 8010460:	68db      	ldr	r3, [r3, #12]
 8010462:	61bb      	str	r3, [r7, #24]
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	f47f af5e 	bne.w	8010328 <tcp_input+0x220>
 801046c:	e000      	b.n	8010470 <tcp_input+0x368>
      break;
 801046e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	f040 80aa 	bne.w	80105cc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010478:	4b51      	ldr	r3, [pc, #324]	@ (80105c0 <tcp_input+0x4b8>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	61bb      	str	r3, [r7, #24]
 801047e:	e03f      	b.n	8010500 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	7d1b      	ldrb	r3, [r3, #20]
 8010484:	2b0a      	cmp	r3, #10
 8010486:	d006      	beq.n	8010496 <tcp_input+0x38e>
 8010488:	4b48      	ldr	r3, [pc, #288]	@ (80105ac <tcp_input+0x4a4>)
 801048a:	f240 121f 	movw	r2, #287	@ 0x11f
 801048e:	494d      	ldr	r1, [pc, #308]	@ (80105c4 <tcp_input+0x4bc>)
 8010490:	4848      	ldr	r0, [pc, #288]	@ (80105b4 <tcp_input+0x4ac>)
 8010492:	f006 fa9f 	bl	80169d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	7a1b      	ldrb	r3, [r3, #8]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d009      	beq.n	80104b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801049e:	69bb      	ldr	r3, [r7, #24]
 80104a0:	7a1a      	ldrb	r2, [r3, #8]
 80104a2:	4b41      	ldr	r3, [pc, #260]	@ (80105a8 <tcp_input+0x4a0>)
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80104aa:	3301      	adds	r3, #1
 80104ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d122      	bne.n	80104f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	8b1a      	ldrh	r2, [r3, #24]
 80104b6:	4b3b      	ldr	r3, [pc, #236]	@ (80105a4 <tcp_input+0x49c>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	429a      	cmp	r2, r3
 80104c0:	d11b      	bne.n	80104fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	8ada      	ldrh	r2, [r3, #22]
 80104c6:	4b37      	ldr	r3, [pc, #220]	@ (80105a4 <tcp_input+0x49c>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	885b      	ldrh	r3, [r3, #2]
 80104cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d113      	bne.n	80104fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	685a      	ldr	r2, [r3, #4]
 80104d6:	4b34      	ldr	r3, [pc, #208]	@ (80105a8 <tcp_input+0x4a0>)
 80104d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80104da:	429a      	cmp	r2, r3
 80104dc:	d10d      	bne.n	80104fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	4b31      	ldr	r3, [pc, #196]	@ (80105a8 <tcp_input+0x4a0>)
 80104e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d107      	bne.n	80104fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80104ea:	69b8      	ldr	r0, [r7, #24]
 80104ec:	f000 fb56 	bl	8010b9c <tcp_timewait_input>
        }
        pbuf_free(p);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7fd ffff 	bl	800e4f4 <pbuf_free>
        return;
 80104f6:	e1fd      	b.n	80108f4 <tcp_input+0x7ec>
        continue;
 80104f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	68db      	ldr	r3, [r3, #12]
 80104fe:	61bb      	str	r3, [r7, #24]
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1bc      	bne.n	8010480 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010506:	2300      	movs	r3, #0
 8010508:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801050a:	4b2f      	ldr	r3, [pc, #188]	@ (80105c8 <tcp_input+0x4c0>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	e02a      	b.n	8010568 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	7a1b      	ldrb	r3, [r3, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00c      	beq.n	8010534 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	7a1a      	ldrb	r2, [r3, #8]
 801051e:	4b22      	ldr	r3, [pc, #136]	@ (80105a8 <tcp_input+0x4a0>)
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010526:	3301      	adds	r3, #1
 8010528:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801052a:	429a      	cmp	r2, r3
 801052c:	d002      	beq.n	8010534 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	61fb      	str	r3, [r7, #28]
        continue;
 8010532:	e016      	b.n	8010562 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	8ada      	ldrh	r2, [r3, #22]
 8010538:	4b1a      	ldr	r3, [pc, #104]	@ (80105a4 <tcp_input+0x49c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	885b      	ldrh	r3, [r3, #2]
 801053e:	b29b      	uxth	r3, r3
 8010540:	429a      	cmp	r2, r3
 8010542:	d10c      	bne.n	801055e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	4b17      	ldr	r3, [pc, #92]	@ (80105a8 <tcp_input+0x4a0>)
 801054a:	695b      	ldr	r3, [r3, #20]
 801054c:	429a      	cmp	r2, r3
 801054e:	d00f      	beq.n	8010570 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00d      	beq.n	8010572 <tcp_input+0x46a>
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d009      	beq.n	8010572 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801055e:	697b      	ldr	r3, [r7, #20]
 8010560:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	617b      	str	r3, [r7, #20]
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1d1      	bne.n	8010512 <tcp_input+0x40a>
 801056e:	e000      	b.n	8010572 <tcp_input+0x46a>
            break;
 8010570:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d029      	beq.n	80105cc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d00a      	beq.n	8010594 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	68da      	ldr	r2, [r3, #12]
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010586:	4b10      	ldr	r3, [pc, #64]	@ (80105c8 <tcp_input+0x4c0>)
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801058e:	4a0e      	ldr	r2, [pc, #56]	@ (80105c8 <tcp_input+0x4c0>)
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010594:	6978      	ldr	r0, [r7, #20]
 8010596:	f000 fa03 	bl	80109a0 <tcp_listen_input>
      }
      pbuf_free(p);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7fd ffaa 	bl	800e4f4 <pbuf_free>
      return;
 80105a0:	e1a8      	b.n	80108f4 <tcp_input+0x7ec>
 80105a2:	bf00      	nop
 80105a4:	20013c88 	.word	0x20013c88
 80105a8:	20008f18 	.word	0x20008f18
 80105ac:	080193cc 	.word	0x080193cc
 80105b0:	080194f8 	.word	0x080194f8
 80105b4:	08019418 	.word	0x08019418
 80105b8:	20013c68 	.word	0x20013c68
 80105bc:	08019524 	.word	0x08019524
 80105c0:	20013c6c 	.word	0x20013c6c
 80105c4:	08019550 	.word	0x08019550
 80105c8:	20013c64 	.word	0x20013c64
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f000 8158 	beq.w	8010884 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80105d4:	4b95      	ldr	r3, [pc, #596]	@ (801082c <tcp_input+0x724>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	891a      	ldrh	r2, [r3, #8]
 80105de:	4b93      	ldr	r3, [pc, #588]	@ (801082c <tcp_input+0x724>)
 80105e0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80105e2:	4a92      	ldr	r2, [pc, #584]	@ (801082c <tcp_input+0x724>)
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80105e8:	4b91      	ldr	r3, [pc, #580]	@ (8010830 <tcp_input+0x728>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a8f      	ldr	r2, [pc, #572]	@ (801082c <tcp_input+0x724>)
 80105ee:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80105f0:	4b90      	ldr	r3, [pc, #576]	@ (8010834 <tcp_input+0x72c>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80105f6:	4b90      	ldr	r3, [pc, #576]	@ (8010838 <tcp_input+0x730>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80105fc:	4b8f      	ldr	r3, [pc, #572]	@ (801083c <tcp_input+0x734>)
 80105fe:	2200      	movs	r2, #0
 8010600:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010602:	4b8f      	ldr	r3, [pc, #572]	@ (8010840 <tcp_input+0x738>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	f003 0308 	and.w	r3, r3, #8
 801060a:	2b00      	cmp	r3, #0
 801060c:	d006      	beq.n	801061c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	7b5b      	ldrb	r3, [r3, #13]
 8010612:	f043 0301 	orr.w	r3, r3, #1
 8010616:	b2da      	uxtb	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010620:	2b00      	cmp	r3, #0
 8010622:	d017      	beq.n	8010654 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010624:	69b8      	ldr	r0, [r7, #24]
 8010626:	f7ff f923 	bl	800f870 <tcp_process_refused_data>
 801062a:	4603      	mov	r3, r0
 801062c:	f113 0f0d 	cmn.w	r3, #13
 8010630:	d007      	beq.n	8010642 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00c      	beq.n	8010654 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801063a:	4b82      	ldr	r3, [pc, #520]	@ (8010844 <tcp_input+0x73c>)
 801063c:	881b      	ldrh	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d008      	beq.n	8010654 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010646:	2b00      	cmp	r3, #0
 8010648:	f040 80e3 	bne.w	8010812 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801064c:	69b8      	ldr	r0, [r7, #24]
 801064e:	f003 f9bb 	bl	80139c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010652:	e0de      	b.n	8010812 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010654:	4a7c      	ldr	r2, [pc, #496]	@ (8010848 <tcp_input+0x740>)
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801065a:	69b8      	ldr	r0, [r7, #24]
 801065c:	f000 fb18 	bl	8010c90 <tcp_process>
 8010660:	4603      	mov	r3, r0
 8010662:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010668:	f113 0f0d 	cmn.w	r3, #13
 801066c:	f000 80d3 	beq.w	8010816 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010670:	4b71      	ldr	r3, [pc, #452]	@ (8010838 <tcp_input+0x730>)
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	f003 0308 	and.w	r3, r3, #8
 8010678:	2b00      	cmp	r3, #0
 801067a:	d015      	beq.n	80106a8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010682:	2b00      	cmp	r3, #0
 8010684:	d008      	beq.n	8010698 <tcp_input+0x590>
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801068c:	69ba      	ldr	r2, [r7, #24]
 801068e:	6912      	ldr	r2, [r2, #16]
 8010690:	f06f 010d 	mvn.w	r1, #13
 8010694:	4610      	mov	r0, r2
 8010696:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010698:	69b9      	ldr	r1, [r7, #24]
 801069a:	486c      	ldr	r0, [pc, #432]	@ (801084c <tcp_input+0x744>)
 801069c:	f7ff fbb6 	bl	800fe0c <tcp_pcb_remove>
        tcp_free(pcb);
 80106a0:	69b8      	ldr	r0, [r7, #24]
 80106a2:	f7fe f9a1 	bl	800e9e8 <tcp_free>
 80106a6:	e0da      	b.n	801085e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80106ac:	4b63      	ldr	r3, [pc, #396]	@ (801083c <tcp_input+0x734>)
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d01d      	beq.n	80106f0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80106b4:	4b61      	ldr	r3, [pc, #388]	@ (801083c <tcp_input+0x734>)
 80106b6:	881b      	ldrh	r3, [r3, #0]
 80106b8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d00a      	beq.n	80106da <tcp_input+0x5d2>
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	6910      	ldr	r0, [r2, #16]
 80106ce:	89fa      	ldrh	r2, [r7, #14]
 80106d0:	69b9      	ldr	r1, [r7, #24]
 80106d2:	4798      	blx	r3
 80106d4:	4603      	mov	r3, r0
 80106d6:	74fb      	strb	r3, [r7, #19]
 80106d8:	e001      	b.n	80106de <tcp_input+0x5d6>
 80106da:	2300      	movs	r3, #0
 80106dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106e2:	f113 0f0d 	cmn.w	r3, #13
 80106e6:	f000 8098 	beq.w	801081a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80106ea:	4b54      	ldr	r3, [pc, #336]	@ (801083c <tcp_input+0x734>)
 80106ec:	2200      	movs	r2, #0
 80106ee:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80106f0:	69b8      	ldr	r0, [r7, #24]
 80106f2:	f000 f915 	bl	8010920 <tcp_input_delayed_close>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	f040 8090 	bne.w	801081e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80106fe:	4b4d      	ldr	r3, [pc, #308]	@ (8010834 <tcp_input+0x72c>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d041      	beq.n	801078a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801070a:	2b00      	cmp	r3, #0
 801070c:	d006      	beq.n	801071c <tcp_input+0x614>
 801070e:	4b50      	ldr	r3, [pc, #320]	@ (8010850 <tcp_input+0x748>)
 8010710:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8010714:	494f      	ldr	r1, [pc, #316]	@ (8010854 <tcp_input+0x74c>)
 8010716:	4850      	ldr	r0, [pc, #320]	@ (8010858 <tcp_input+0x750>)
 8010718:	f006 f95c 	bl	80169d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	8b5b      	ldrh	r3, [r3, #26]
 8010720:	f003 0310 	and.w	r3, r3, #16
 8010724:	2b00      	cmp	r3, #0
 8010726:	d008      	beq.n	801073a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010728:	4b42      	ldr	r3, [pc, #264]	@ (8010834 <tcp_input+0x72c>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4618      	mov	r0, r3
 801072e:	f7fd fee1 	bl	800e4f4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010732:	69b8      	ldr	r0, [r7, #24]
 8010734:	f7fe fc40 	bl	800efb8 <tcp_abort>
            goto aborted;
 8010738:	e091      	b.n	801085e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010740:	2b00      	cmp	r3, #0
 8010742:	d00c      	beq.n	801075e <tcp_input+0x656>
 8010744:	69bb      	ldr	r3, [r7, #24]
 8010746:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	6918      	ldr	r0, [r3, #16]
 801074e:	4b39      	ldr	r3, [pc, #228]	@ (8010834 <tcp_input+0x72c>)
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	2300      	movs	r3, #0
 8010754:	69b9      	ldr	r1, [r7, #24]
 8010756:	47a0      	blx	r4
 8010758:	4603      	mov	r3, r0
 801075a:	74fb      	strb	r3, [r7, #19]
 801075c:	e008      	b.n	8010770 <tcp_input+0x668>
 801075e:	4b35      	ldr	r3, [pc, #212]	@ (8010834 <tcp_input+0x72c>)
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	2300      	movs	r3, #0
 8010764:	69b9      	ldr	r1, [r7, #24]
 8010766:	2000      	movs	r0, #0
 8010768:	f7ff f958 	bl	800fa1c <tcp_recv_null>
 801076c:	4603      	mov	r3, r0
 801076e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010774:	f113 0f0d 	cmn.w	r3, #13
 8010778:	d053      	beq.n	8010822 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801077a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d003      	beq.n	801078a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010782:	4b2c      	ldr	r3, [pc, #176]	@ (8010834 <tcp_input+0x72c>)
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801078a:	4b2b      	ldr	r3, [pc, #172]	@ (8010838 <tcp_input+0x730>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	f003 0320 	and.w	r3, r3, #32
 8010792:	2b00      	cmp	r3, #0
 8010794:	d030      	beq.n	80107f8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801079a:	2b00      	cmp	r3, #0
 801079c:	d009      	beq.n	80107b2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801079e:	69bb      	ldr	r3, [r7, #24]
 80107a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107a2:	7b5a      	ldrb	r2, [r3, #13]
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107a8:	f042 0220 	orr.w	r2, r2, #32
 80107ac:	b2d2      	uxtb	r2, r2
 80107ae:	735a      	strb	r2, [r3, #13]
 80107b0:	e022      	b.n	80107f8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80107b2:	69bb      	ldr	r3, [r7, #24]
 80107b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107b6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80107ba:	d005      	beq.n	80107c8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80107bc:	69bb      	ldr	r3, [r7, #24]
 80107be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80107c0:	3301      	adds	r3, #1
 80107c2:	b29a      	uxth	r2, r3
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80107c8:	69bb      	ldr	r3, [r7, #24]
 80107ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00b      	beq.n	80107ea <tcp_input+0x6e2>
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80107d8:	69bb      	ldr	r3, [r7, #24]
 80107da:	6918      	ldr	r0, [r3, #16]
 80107dc:	2300      	movs	r3, #0
 80107de:	2200      	movs	r2, #0
 80107e0:	69b9      	ldr	r1, [r7, #24]
 80107e2:	47a0      	blx	r4
 80107e4:	4603      	mov	r3, r0
 80107e6:	74fb      	strb	r3, [r7, #19]
 80107e8:	e001      	b.n	80107ee <tcp_input+0x6e6>
 80107ea:	2300      	movs	r3, #0
 80107ec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80107ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80107f2:	f113 0f0d 	cmn.w	r3, #13
 80107f6:	d016      	beq.n	8010826 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80107f8:	4b13      	ldr	r3, [pc, #76]	@ (8010848 <tcp_input+0x740>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80107fe:	69b8      	ldr	r0, [r7, #24]
 8010800:	f000 f88e 	bl	8010920 <tcp_input_delayed_close>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d128      	bne.n	801085c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801080a:	69b8      	ldr	r0, [r7, #24]
 801080c:	f002 faca 	bl	8012da4 <tcp_output>
 8010810:	e025      	b.n	801085e <tcp_input+0x756>
        goto aborted;
 8010812:	bf00      	nop
 8010814:	e023      	b.n	801085e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010816:	bf00      	nop
 8010818:	e021      	b.n	801085e <tcp_input+0x756>
              goto aborted;
 801081a:	bf00      	nop
 801081c:	e01f      	b.n	801085e <tcp_input+0x756>
          goto aborted;
 801081e:	bf00      	nop
 8010820:	e01d      	b.n	801085e <tcp_input+0x756>
            goto aborted;
 8010822:	bf00      	nop
 8010824:	e01b      	b.n	801085e <tcp_input+0x756>
              goto aborted;
 8010826:	bf00      	nop
 8010828:	e019      	b.n	801085e <tcp_input+0x756>
 801082a:	bf00      	nop
 801082c:	20013c74 	.word	0x20013c74
 8010830:	20013c88 	.word	0x20013c88
 8010834:	20013ca8 	.word	0x20013ca8
 8010838:	20013ca5 	.word	0x20013ca5
 801083c:	20013ca0 	.word	0x20013ca0
 8010840:	20013ca4 	.word	0x20013ca4
 8010844:	20013ca2 	.word	0x20013ca2
 8010848:	20013cac 	.word	0x20013cac
 801084c:	20013c68 	.word	0x20013c68
 8010850:	080193cc 	.word	0x080193cc
 8010854:	08019580 	.word	0x08019580
 8010858:	08019418 	.word	0x08019418
          goto aborted;
 801085c:	bf00      	nop
    tcp_input_pcb = NULL;
 801085e:	4b27      	ldr	r3, [pc, #156]	@ (80108fc <tcp_input+0x7f4>)
 8010860:	2200      	movs	r2, #0
 8010862:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010864:	4b26      	ldr	r3, [pc, #152]	@ (8010900 <tcp_input+0x7f8>)
 8010866:	2200      	movs	r2, #0
 8010868:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801086a:	4b26      	ldr	r3, [pc, #152]	@ (8010904 <tcp_input+0x7fc>)
 801086c:	685b      	ldr	r3, [r3, #4]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d03f      	beq.n	80108f2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010872:	4b24      	ldr	r3, [pc, #144]	@ (8010904 <tcp_input+0x7fc>)
 8010874:	685b      	ldr	r3, [r3, #4]
 8010876:	4618      	mov	r0, r3
 8010878:	f7fd fe3c 	bl	800e4f4 <pbuf_free>
      inseg.p = NULL;
 801087c:	4b21      	ldr	r3, [pc, #132]	@ (8010904 <tcp_input+0x7fc>)
 801087e:	2200      	movs	r2, #0
 8010880:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010882:	e036      	b.n	80108f2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010884:	4b20      	ldr	r3, [pc, #128]	@ (8010908 <tcp_input+0x800>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	899b      	ldrh	r3, [r3, #12]
 801088a:	b29b      	uxth	r3, r3
 801088c:	4618      	mov	r0, r3
 801088e:	f7fc f965 	bl	800cb5c <lwip_htons>
 8010892:	4603      	mov	r3, r0
 8010894:	b2db      	uxtb	r3, r3
 8010896:	f003 0304 	and.w	r3, r3, #4
 801089a:	2b00      	cmp	r3, #0
 801089c:	d118      	bne.n	80108d0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801089e:	4b1b      	ldr	r3, [pc, #108]	@ (801090c <tcp_input+0x804>)
 80108a0:	6819      	ldr	r1, [r3, #0]
 80108a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010910 <tcp_input+0x808>)
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	461a      	mov	r2, r3
 80108a8:	4b1a      	ldr	r3, [pc, #104]	@ (8010914 <tcp_input+0x80c>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108ae:	4b16      	ldr	r3, [pc, #88]	@ (8010908 <tcp_input+0x800>)
 80108b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108b2:	885b      	ldrh	r3, [r3, #2]
 80108b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108b6:	4a14      	ldr	r2, [pc, #80]	@ (8010908 <tcp_input+0x800>)
 80108b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108ba:	8812      	ldrh	r2, [r2, #0]
 80108bc:	b292      	uxth	r2, r2
 80108be:	9202      	str	r2, [sp, #8]
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	4b15      	ldr	r3, [pc, #84]	@ (8010918 <tcp_input+0x810>)
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	4b15      	ldr	r3, [pc, #84]	@ (801091c <tcp_input+0x814>)
 80108c8:	4602      	mov	r2, r0
 80108ca:	2000      	movs	r0, #0
 80108cc:	f003 f82a 	bl	8013924 <tcp_rst>
    pbuf_free(p);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7fd fe0f 	bl	800e4f4 <pbuf_free>
  return;
 80108d6:	e00c      	b.n	80108f2 <tcp_input+0x7ea>
    goto dropped;
 80108d8:	bf00      	nop
 80108da:	e006      	b.n	80108ea <tcp_input+0x7e2>
    goto dropped;
 80108dc:	bf00      	nop
 80108de:	e004      	b.n	80108ea <tcp_input+0x7e2>
    goto dropped;
 80108e0:	bf00      	nop
 80108e2:	e002      	b.n	80108ea <tcp_input+0x7e2>
      goto dropped;
 80108e4:	bf00      	nop
 80108e6:	e000      	b.n	80108ea <tcp_input+0x7e2>
      goto dropped;
 80108e8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7fd fe02 	bl	800e4f4 <pbuf_free>
 80108f0:	e000      	b.n	80108f4 <tcp_input+0x7ec>
  return;
 80108f2:	bf00      	nop
}
 80108f4:	3724      	adds	r7, #36	@ 0x24
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd90      	pop	{r4, r7, pc}
 80108fa:	bf00      	nop
 80108fc:	20013cac 	.word	0x20013cac
 8010900:	20013ca8 	.word	0x20013ca8
 8010904:	20013c74 	.word	0x20013c74
 8010908:	20013c88 	.word	0x20013c88
 801090c:	20013c9c 	.word	0x20013c9c
 8010910:	20013ca2 	.word	0x20013ca2
 8010914:	20013c98 	.word	0x20013c98
 8010918:	20008f28 	.word	0x20008f28
 801091c:	20008f2c 	.word	0x20008f2c

08010920 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <tcp_input_delayed_close+0x1c>
 801092e:	4b17      	ldr	r3, [pc, #92]	@ (801098c <tcp_input_delayed_close+0x6c>)
 8010930:	f240 225a 	movw	r2, #602	@ 0x25a
 8010934:	4916      	ldr	r1, [pc, #88]	@ (8010990 <tcp_input_delayed_close+0x70>)
 8010936:	4817      	ldr	r0, [pc, #92]	@ (8010994 <tcp_input_delayed_close+0x74>)
 8010938:	f006 f84c 	bl	80169d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801093c:	4b16      	ldr	r3, [pc, #88]	@ (8010998 <tcp_input_delayed_close+0x78>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f003 0310 	and.w	r3, r3, #16
 8010944:	2b00      	cmp	r3, #0
 8010946:	d01c      	beq.n	8010982 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	8b5b      	ldrh	r3, [r3, #26]
 801094c:	f003 0310 	and.w	r3, r3, #16
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10d      	bne.n	8010970 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801095a:	2b00      	cmp	r3, #0
 801095c:	d008      	beq.n	8010970 <tcp_input_delayed_close+0x50>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	6912      	ldr	r2, [r2, #16]
 8010968:	f06f 010e 	mvn.w	r1, #14
 801096c:	4610      	mov	r0, r2
 801096e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010970:	6879      	ldr	r1, [r7, #4]
 8010972:	480a      	ldr	r0, [pc, #40]	@ (801099c <tcp_input_delayed_close+0x7c>)
 8010974:	f7ff fa4a 	bl	800fe0c <tcp_pcb_remove>
    tcp_free(pcb);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7fe f835 	bl	800e9e8 <tcp_free>
    return 1;
 801097e:	2301      	movs	r3, #1
 8010980:	e000      	b.n	8010984 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	080193cc 	.word	0x080193cc
 8010990:	0801959c 	.word	0x0801959c
 8010994:	08019418 	.word	0x08019418
 8010998:	20013ca5 	.word	0x20013ca5
 801099c:	20013c68 	.word	0x20013c68

080109a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80109a0:	b590      	push	{r4, r7, lr}
 80109a2:	b08b      	sub	sp, #44	@ 0x2c
 80109a4:	af04      	add	r7, sp, #16
 80109a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80109a8:	4b6f      	ldr	r3, [pc, #444]	@ (8010b68 <tcp_listen_input+0x1c8>)
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 80d2 	bne.w	8010b5a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d106      	bne.n	80109ca <tcp_listen_input+0x2a>
 80109bc:	4b6b      	ldr	r3, [pc, #428]	@ (8010b6c <tcp_listen_input+0x1cc>)
 80109be:	f240 2281 	movw	r2, #641	@ 0x281
 80109c2:	496b      	ldr	r1, [pc, #428]	@ (8010b70 <tcp_listen_input+0x1d0>)
 80109c4:	486b      	ldr	r0, [pc, #428]	@ (8010b74 <tcp_listen_input+0x1d4>)
 80109c6:	f006 f805 	bl	80169d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80109ca:	4b67      	ldr	r3, [pc, #412]	@ (8010b68 <tcp_listen_input+0x1c8>)
 80109cc:	781b      	ldrb	r3, [r3, #0]
 80109ce:	f003 0310 	and.w	r3, r3, #16
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d019      	beq.n	8010a0a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109d6:	4b68      	ldr	r3, [pc, #416]	@ (8010b78 <tcp_listen_input+0x1d8>)
 80109d8:	6819      	ldr	r1, [r3, #0]
 80109da:	4b68      	ldr	r3, [pc, #416]	@ (8010b7c <tcp_listen_input+0x1dc>)
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	461a      	mov	r2, r3
 80109e0:	4b67      	ldr	r3, [pc, #412]	@ (8010b80 <tcp_listen_input+0x1e0>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109e6:	4b67      	ldr	r3, [pc, #412]	@ (8010b84 <tcp_listen_input+0x1e4>)
 80109e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109ea:	885b      	ldrh	r3, [r3, #2]
 80109ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80109ee:	4a65      	ldr	r2, [pc, #404]	@ (8010b84 <tcp_listen_input+0x1e4>)
 80109f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80109f2:	8812      	ldrh	r2, [r2, #0]
 80109f4:	b292      	uxth	r2, r2
 80109f6:	9202      	str	r2, [sp, #8]
 80109f8:	9301      	str	r3, [sp, #4]
 80109fa:	4b63      	ldr	r3, [pc, #396]	@ (8010b88 <tcp_listen_input+0x1e8>)
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	4b63      	ldr	r3, [pc, #396]	@ (8010b8c <tcp_listen_input+0x1ec>)
 8010a00:	4602      	mov	r2, r0
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f002 ff8e 	bl	8013924 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010a08:	e0a9      	b.n	8010b5e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010a0a:	4b57      	ldr	r3, [pc, #348]	@ (8010b68 <tcp_listen_input+0x1c8>)
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	f003 0302 	and.w	r3, r3, #2
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	f000 80a3 	beq.w	8010b5e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d5b      	ldrb	r3, [r3, #21]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7ff f921 	bl	800fc64 <tcp_alloc>
 8010a22:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d111      	bne.n	8010a4e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	699b      	ldr	r3, [r3, #24]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00a      	beq.n	8010a48 <tcp_listen_input+0xa8>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	699b      	ldr	r3, [r3, #24]
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	6910      	ldr	r0, [r2, #16]
 8010a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a3e:	2100      	movs	r1, #0
 8010a40:	4798      	blx	r3
 8010a42:	4603      	mov	r3, r0
 8010a44:	73bb      	strb	r3, [r7, #14]
      return;
 8010a46:	e08b      	b.n	8010b60 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010a48:	23f0      	movs	r3, #240	@ 0xf0
 8010a4a:	73bb      	strb	r3, [r7, #14]
      return;
 8010a4c:	e088      	b.n	8010b60 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010a4e:	4b50      	ldr	r3, [pc, #320]	@ (8010b90 <tcp_listen_input+0x1f0>)
 8010a50:	695a      	ldr	r2, [r3, #20]
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010a56:	4b4e      	ldr	r3, [pc, #312]	@ (8010b90 <tcp_listen_input+0x1f0>)
 8010a58:	691a      	ldr	r2, [r3, #16]
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	8ada      	ldrh	r2, [r3, #22]
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010a66:	4b47      	ldr	r3, [pc, #284]	@ (8010b84 <tcp_listen_input+0x1e4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	881b      	ldrh	r3, [r3, #0]
 8010a6c:	b29a      	uxth	r2, r3
 8010a6e:	697b      	ldr	r3, [r7, #20]
 8010a70:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	2203      	movs	r2, #3
 8010a76:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010a78:	4b41      	ldr	r3, [pc, #260]	@ (8010b80 <tcp_listen_input+0x1e0>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	1c5a      	adds	r2, r3, #1
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8010a8a:	6978      	ldr	r0, [r7, #20]
 8010a8c:	f7ff fa52 	bl	800ff34 <tcp_next_iss>
 8010a90:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	693a      	ldr	r2, [r7, #16]
 8010a96:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	693a      	ldr	r2, [r7, #16]
 8010a9c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	693a      	ldr	r2, [r7, #16]
 8010aa2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	693a      	ldr	r2, [r7, #16]
 8010aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010aaa:	4b35      	ldr	r3, [pc, #212]	@ (8010b80 <tcp_listen_input+0x1e0>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	1e5a      	subs	r2, r3, #1
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	691a      	ldr	r2, [r3, #16]
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	7a5b      	ldrb	r3, [r3, #9]
 8010ac6:	f003 030c 	and.w	r3, r3, #12
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	7a1a      	ldrb	r2, [r3, #8]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8010b94 <tcp_listen_input+0x1f4>)
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	60da      	str	r2, [r3, #12]
 8010ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8010b94 <tcp_listen_input+0x1f4>)
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	6013      	str	r3, [r2, #0]
 8010ae6:	f003 f8df 	bl	8013ca8 <tcp_timer_needed>
 8010aea:	4b2b      	ldr	r3, [pc, #172]	@ (8010b98 <tcp_listen_input+0x1f8>)
 8010aec:	2201      	movs	r2, #1
 8010aee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010af0:	6978      	ldr	r0, [r7, #20]
 8010af2:	f001 fd8b 	bl	801260c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010af6:	4b23      	ldr	r3, [pc, #140]	@ (8010b84 <tcp_listen_input+0x1e4>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	89db      	ldrh	r3, [r3, #14]
 8010afc:	b29a      	uxth	r2, r3
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	3304      	adds	r3, #4
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f003 fe81 	bl	8014820 <ip4_route>
 8010b1e:	4601      	mov	r1, r0
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	3304      	adds	r3, #4
 8010b24:	461a      	mov	r2, r3
 8010b26:	4620      	mov	r0, r4
 8010b28:	f7ff fa2a 	bl	800ff80 <tcp_eff_send_mss_netif>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	697b      	ldr	r3, [r7, #20]
 8010b32:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010b34:	2112      	movs	r1, #18
 8010b36:	6978      	ldr	r0, [r7, #20]
 8010b38:	f002 f846 	bl	8012bc8 <tcp_enqueue_flags>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d004      	beq.n	8010b52 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010b48:	2100      	movs	r1, #0
 8010b4a:	6978      	ldr	r0, [r7, #20]
 8010b4c:	f7fe f976 	bl	800ee3c <tcp_abandon>
      return;
 8010b50:	e006      	b.n	8010b60 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010b52:	6978      	ldr	r0, [r7, #20]
 8010b54:	f002 f926 	bl	8012da4 <tcp_output>
  return;
 8010b58:	e001      	b.n	8010b5e <tcp_listen_input+0x1be>
    return;
 8010b5a:	bf00      	nop
 8010b5c:	e000      	b.n	8010b60 <tcp_listen_input+0x1c0>
  return;
 8010b5e:	bf00      	nop
}
 8010b60:	371c      	adds	r7, #28
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd90      	pop	{r4, r7, pc}
 8010b66:	bf00      	nop
 8010b68:	20013ca4 	.word	0x20013ca4
 8010b6c:	080193cc 	.word	0x080193cc
 8010b70:	080195c4 	.word	0x080195c4
 8010b74:	08019418 	.word	0x08019418
 8010b78:	20013c9c 	.word	0x20013c9c
 8010b7c:	20013ca2 	.word	0x20013ca2
 8010b80:	20013c98 	.word	0x20013c98
 8010b84:	20013c88 	.word	0x20013c88
 8010b88:	20008f28 	.word	0x20008f28
 8010b8c:	20008f2c 	.word	0x20008f2c
 8010b90:	20008f18 	.word	0x20008f18
 8010b94:	20013c68 	.word	0x20013c68
 8010b98:	20013c70 	.word	0x20013c70

08010b9c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b086      	sub	sp, #24
 8010ba0:	af04      	add	r7, sp, #16
 8010ba2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8010c64 <tcp_timewait_input+0xc8>)
 8010ba6:	781b      	ldrb	r3, [r3, #0]
 8010ba8:	f003 0304 	and.w	r3, r3, #4
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d153      	bne.n	8010c58 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d106      	bne.n	8010bc4 <tcp_timewait_input+0x28>
 8010bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8010c68 <tcp_timewait_input+0xcc>)
 8010bb8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010bbc:	492b      	ldr	r1, [pc, #172]	@ (8010c6c <tcp_timewait_input+0xd0>)
 8010bbe:	482c      	ldr	r0, [pc, #176]	@ (8010c70 <tcp_timewait_input+0xd4>)
 8010bc0:	f005 ff08 	bl	80169d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010bc4:	4b27      	ldr	r3, [pc, #156]	@ (8010c64 <tcp_timewait_input+0xc8>)
 8010bc6:	781b      	ldrb	r3, [r3, #0]
 8010bc8:	f003 0302 	and.w	r3, r3, #2
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d02a      	beq.n	8010c26 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010bd0:	4b28      	ldr	r3, [pc, #160]	@ (8010c74 <tcp_timewait_input+0xd8>)
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	db2d      	blt.n	8010c3a <tcp_timewait_input+0x9e>
 8010bde:	4b25      	ldr	r3, [pc, #148]	@ (8010c74 <tcp_timewait_input+0xd8>)
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010bea:	440b      	add	r3, r1
 8010bec:	1ad3      	subs	r3, r2, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	dc23      	bgt.n	8010c3a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bf2:	4b21      	ldr	r3, [pc, #132]	@ (8010c78 <tcp_timewait_input+0xdc>)
 8010bf4:	6819      	ldr	r1, [r3, #0]
 8010bf6:	4b21      	ldr	r3, [pc, #132]	@ (8010c7c <tcp_timewait_input+0xe0>)
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8010c74 <tcp_timewait_input+0xd8>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c02:	4b1f      	ldr	r3, [pc, #124]	@ (8010c80 <tcp_timewait_input+0xe4>)
 8010c04:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c06:	885b      	ldrh	r3, [r3, #2]
 8010c08:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8010c80 <tcp_timewait_input+0xe4>)
 8010c0c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c0e:	8812      	ldrh	r2, [r2, #0]
 8010c10:	b292      	uxth	r2, r2
 8010c12:	9202      	str	r2, [sp, #8]
 8010c14:	9301      	str	r3, [sp, #4]
 8010c16:	4b1b      	ldr	r3, [pc, #108]	@ (8010c84 <tcp_timewait_input+0xe8>)
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8010c88 <tcp_timewait_input+0xec>)
 8010c1c:	4602      	mov	r2, r0
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f002 fe80 	bl	8013924 <tcp_rst>
      return;
 8010c24:	e01b      	b.n	8010c5e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010c26:	4b0f      	ldr	r3, [pc, #60]	@ (8010c64 <tcp_timewait_input+0xc8>)
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d003      	beq.n	8010c3a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010c32:	4b16      	ldr	r3, [pc, #88]	@ (8010c8c <tcp_timewait_input+0xf0>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010c3a:	4b10      	ldr	r3, [pc, #64]	@ (8010c7c <tcp_timewait_input+0xe0>)
 8010c3c:	881b      	ldrh	r3, [r3, #0]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00c      	beq.n	8010c5c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8b5b      	ldrh	r3, [r3, #26]
 8010c46:	f043 0302 	orr.w	r3, r3, #2
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f002 f8a7 	bl	8012da4 <tcp_output>
  }
  return;
 8010c56:	e001      	b.n	8010c5c <tcp_timewait_input+0xc0>
    return;
 8010c58:	bf00      	nop
 8010c5a:	e000      	b.n	8010c5e <tcp_timewait_input+0xc2>
  return;
 8010c5c:	bf00      	nop
}
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	20013ca4 	.word	0x20013ca4
 8010c68:	080193cc 	.word	0x080193cc
 8010c6c:	080195e4 	.word	0x080195e4
 8010c70:	08019418 	.word	0x08019418
 8010c74:	20013c98 	.word	0x20013c98
 8010c78:	20013c9c 	.word	0x20013c9c
 8010c7c:	20013ca2 	.word	0x20013ca2
 8010c80:	20013c88 	.word	0x20013c88
 8010c84:	20008f28 	.word	0x20008f28
 8010c88:	20008f2c 	.word	0x20008f2c
 8010c8c:	20013c5c 	.word	0x20013c5c

08010c90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010c90:	b590      	push	{r4, r7, lr}
 8010c92:	b08d      	sub	sp, #52	@ 0x34
 8010c94:	af04      	add	r7, sp, #16
 8010c96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <tcp_process+0x24>
 8010ca6:	4b9d      	ldr	r3, [pc, #628]	@ (8010f1c <tcp_process+0x28c>)
 8010ca8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010cac:	499c      	ldr	r1, [pc, #624]	@ (8010f20 <tcp_process+0x290>)
 8010cae:	489d      	ldr	r0, [pc, #628]	@ (8010f24 <tcp_process+0x294>)
 8010cb0:	f005 fe90 	bl	80169d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8010f28 <tcp_process+0x298>)
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	f003 0304 	and.w	r3, r3, #4
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d04e      	beq.n	8010d5e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	7d1b      	ldrb	r3, [r3, #20]
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d108      	bne.n	8010cda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ccc:	4b97      	ldr	r3, [pc, #604]	@ (8010f2c <tcp_process+0x29c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d123      	bne.n	8010d1c <tcp_process+0x8c>
        acceptable = 1;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	77fb      	strb	r3, [r7, #31]
 8010cd8:	e020      	b.n	8010d1c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cde:	4b94      	ldr	r3, [pc, #592]	@ (8010f30 <tcp_process+0x2a0>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d102      	bne.n	8010cec <tcp_process+0x5c>
        acceptable = 1;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	77fb      	strb	r3, [r7, #31]
 8010cea:	e017      	b.n	8010d1c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010cec:	4b90      	ldr	r3, [pc, #576]	@ (8010f30 <tcp_process+0x2a0>)
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	db10      	blt.n	8010d1c <tcp_process+0x8c>
 8010cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8010f30 <tcp_process+0x2a0>)
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d02:	6879      	ldr	r1, [r7, #4]
 8010d04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010d06:	440b      	add	r3, r1
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	dc06      	bgt.n	8010d1c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8b5b      	ldrh	r3, [r3, #26]
 8010d12:	f043 0302 	orr.w	r3, r3, #2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010d1c:	7ffb      	ldrb	r3, [r7, #31]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d01b      	beq.n	8010d5a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	7d1b      	ldrb	r3, [r3, #20]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d106      	bne.n	8010d38 <tcp_process+0xa8>
 8010d2a:	4b7c      	ldr	r3, [pc, #496]	@ (8010f1c <tcp_process+0x28c>)
 8010d2c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010d30:	4980      	ldr	r1, [pc, #512]	@ (8010f34 <tcp_process+0x2a4>)
 8010d32:	487c      	ldr	r0, [pc, #496]	@ (8010f24 <tcp_process+0x294>)
 8010d34:	f005 fe4e 	bl	80169d4 <iprintf>
      recv_flags |= TF_RESET;
 8010d38:	4b7f      	ldr	r3, [pc, #508]	@ (8010f38 <tcp_process+0x2a8>)
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f043 0308 	orr.w	r3, r3, #8
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	4b7d      	ldr	r3, [pc, #500]	@ (8010f38 <tcp_process+0x2a8>)
 8010d44:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8b5b      	ldrh	r3, [r3, #26]
 8010d4a:	f023 0301 	bic.w	r3, r3, #1
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010d54:	f06f 030d 	mvn.w	r3, #13
 8010d58:	e37a      	b.n	8011450 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e378      	b.n	8011450 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010d5e:	4b72      	ldr	r3, [pc, #456]	@ (8010f28 <tcp_process+0x298>)
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	f003 0302 	and.w	r3, r3, #2
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d010      	beq.n	8010d8c <tcp_process+0xfc>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	7d1b      	ldrb	r3, [r3, #20]
 8010d6e:	2b02      	cmp	r3, #2
 8010d70:	d00c      	beq.n	8010d8c <tcp_process+0xfc>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	7d1b      	ldrb	r3, [r3, #20]
 8010d76:	2b03      	cmp	r3, #3
 8010d78:	d008      	beq.n	8010d8c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	8b5b      	ldrh	r3, [r3, #26]
 8010d7e:	f043 0302 	orr.w	r3, r3, #2
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e361      	b.n	8011450 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8b5b      	ldrh	r3, [r3, #26]
 8010d90:	f003 0310 	and.w	r3, r3, #16
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d103      	bne.n	8010da0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010d98:	4b68      	ldr	r3, [pc, #416]	@ (8010f3c <tcp_process+0x2ac>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f001 fc2b 	bl	801260c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	7d1b      	ldrb	r3, [r3, #20]
 8010dba:	3b02      	subs	r3, #2
 8010dbc:	2b07      	cmp	r3, #7
 8010dbe:	f200 8337 	bhi.w	8011430 <tcp_process+0x7a0>
 8010dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8010dc8 <tcp_process+0x138>)
 8010dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc8:	08010de9 	.word	0x08010de9
 8010dcc:	08011019 	.word	0x08011019
 8010dd0:	08011191 	.word	0x08011191
 8010dd4:	080111bb 	.word	0x080111bb
 8010dd8:	080112df 	.word	0x080112df
 8010ddc:	08011191 	.word	0x08011191
 8010de0:	0801136b 	.word	0x0801136b
 8010de4:	080113fb 	.word	0x080113fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010de8:	4b4f      	ldr	r3, [pc, #316]	@ (8010f28 <tcp_process+0x298>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 0310 	and.w	r3, r3, #16
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f000 80e4 	beq.w	8010fbe <tcp_process+0x32e>
 8010df6:	4b4c      	ldr	r3, [pc, #304]	@ (8010f28 <tcp_process+0x298>)
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	f003 0302 	and.w	r3, r3, #2
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f000 80dd 	beq.w	8010fbe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e08:	1c5a      	adds	r2, r3, #1
 8010e0a:	4b48      	ldr	r3, [pc, #288]	@ (8010f2c <tcp_process+0x29c>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	f040 80d5 	bne.w	8010fbe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010e14:	4b46      	ldr	r3, [pc, #280]	@ (8010f30 <tcp_process+0x2a0>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	1c5a      	adds	r2, r3, #1
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010e26:	4b41      	ldr	r3, [pc, #260]	@ (8010f2c <tcp_process+0x29c>)
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010e2e:	4b44      	ldr	r3, [pc, #272]	@ (8010f40 <tcp_process+0x2b0>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	89db      	ldrh	r3, [r3, #14]
 8010e34:	b29a      	uxth	r2, r3
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010e48:	4b39      	ldr	r3, [pc, #228]	@ (8010f30 <tcp_process+0x2a0>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	1e5a      	subs	r2, r3, #1
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2204      	movs	r2, #4
 8010e56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	3304      	adds	r3, #4
 8010e60:	4618      	mov	r0, r3
 8010e62:	f003 fcdd 	bl	8014820 <ip4_route>
 8010e66:	4601      	mov	r1, r0
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3304      	adds	r3, #4
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	4620      	mov	r0, r4
 8010e70:	f7ff f886 	bl	800ff80 <tcp_eff_send_mss_netif>
 8010e74:	4603      	mov	r3, r0
 8010e76:	461a      	mov	r2, r3
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e80:	009a      	lsls	r2, r3, #2
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e86:	005b      	lsls	r3, r3, #1
 8010e88:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010e8c:	428b      	cmp	r3, r1
 8010e8e:	bf38      	it	cc
 8010e90:	460b      	movcc	r3, r1
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d204      	bcs.n	8010ea0 <tcp_process+0x210>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	e00d      	b.n	8010ebc <tcp_process+0x22c>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ea4:	005b      	lsls	r3, r3, #1
 8010ea6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d904      	bls.n	8010eb8 <tcp_process+0x228>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	e001      	b.n	8010ebc <tcp_process+0x22c>
 8010eb8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d106      	bne.n	8010eda <tcp_process+0x24a>
 8010ecc:	4b13      	ldr	r3, [pc, #76]	@ (8010f1c <tcp_process+0x28c>)
 8010ece:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010ed2:	491c      	ldr	r1, [pc, #112]	@ (8010f44 <tcp_process+0x2b4>)
 8010ed4:	4813      	ldr	r0, [pc, #76]	@ (8010f24 <tcp_process+0x294>)
 8010ed6:	f005 fd7d 	bl	80169d4 <iprintf>
        --pcb->snd_queuelen;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010eee:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d12a      	bne.n	8010f4c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010efa:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d106      	bne.n	8010f10 <tcp_process+0x280>
 8010f02:	4b06      	ldr	r3, [pc, #24]	@ (8010f1c <tcp_process+0x28c>)
 8010f04:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010f08:	490f      	ldr	r1, [pc, #60]	@ (8010f48 <tcp_process+0x2b8>)
 8010f0a:	4806      	ldr	r0, [pc, #24]	@ (8010f24 <tcp_process+0x294>)
 8010f0c:	f005 fd62 	bl	80169d4 <iprintf>
          pcb->unsent = rseg->next;
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010f18:	e01c      	b.n	8010f54 <tcp_process+0x2c4>
 8010f1a:	bf00      	nop
 8010f1c:	080193cc 	.word	0x080193cc
 8010f20:	08019604 	.word	0x08019604
 8010f24:	08019418 	.word	0x08019418
 8010f28:	20013ca4 	.word	0x20013ca4
 8010f2c:	20013c9c 	.word	0x20013c9c
 8010f30:	20013c98 	.word	0x20013c98
 8010f34:	08019620 	.word	0x08019620
 8010f38:	20013ca5 	.word	0x20013ca5
 8010f3c:	20013c5c 	.word	0x20013c5c
 8010f40:	20013c88 	.word	0x20013c88
 8010f44:	08019640 	.word	0x08019640
 8010f48:	08019658 	.word	0x08019658
        } else {
          pcb->unacked = rseg->next;
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010f54:	6978      	ldr	r0, [r7, #20]
 8010f56:	f7fe fd1c 	bl	800f992 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d104      	bne.n	8010f6c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f68:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010f6a:	e006      	b.n	8010f7a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00a      	beq.n	8010f9a <tcp_process+0x30a>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	6910      	ldr	r0, [r2, #16]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	4798      	blx	r3
 8010f94:	4603      	mov	r3, r0
 8010f96:	77bb      	strb	r3, [r7, #30]
 8010f98:	e001      	b.n	8010f9e <tcp_process+0x30e>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8010f9e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010fa2:	f113 0f0d 	cmn.w	r3, #13
 8010fa6:	d102      	bne.n	8010fae <tcp_process+0x31e>
          return ERR_ABRT;
 8010fa8:	f06f 030c 	mvn.w	r3, #12
 8010fac:	e250      	b.n	8011450 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	8b5b      	ldrh	r3, [r3, #26]
 8010fb2:	f043 0302 	orr.w	r3, r3, #2
 8010fb6:	b29a      	uxth	r2, r3
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010fbc:	e23a      	b.n	8011434 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010fbe:	4b98      	ldr	r3, [pc, #608]	@ (8011220 <tcp_process+0x590>)
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f003 0310 	and.w	r3, r3, #16
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f000 8234 	beq.w	8011434 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fcc:	4b95      	ldr	r3, [pc, #596]	@ (8011224 <tcp_process+0x594>)
 8010fce:	6819      	ldr	r1, [r3, #0]
 8010fd0:	4b95      	ldr	r3, [pc, #596]	@ (8011228 <tcp_process+0x598>)
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	4b95      	ldr	r3, [pc, #596]	@ (801122c <tcp_process+0x59c>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fdc:	4b94      	ldr	r3, [pc, #592]	@ (8011230 <tcp_process+0x5a0>)
 8010fde:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe0:	885b      	ldrh	r3, [r3, #2]
 8010fe2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fe4:	4a92      	ldr	r2, [pc, #584]	@ (8011230 <tcp_process+0x5a0>)
 8010fe6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe8:	8812      	ldrh	r2, [r2, #0]
 8010fea:	b292      	uxth	r2, r2
 8010fec:	9202      	str	r2, [sp, #8]
 8010fee:	9301      	str	r3, [sp, #4]
 8010ff0:	4b90      	ldr	r3, [pc, #576]	@ (8011234 <tcp_process+0x5a4>)
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	4b90      	ldr	r3, [pc, #576]	@ (8011238 <tcp_process+0x5a8>)
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f002 fc93 	bl	8013924 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011004:	2b05      	cmp	r3, #5
 8011006:	f200 8215 	bhi.w	8011434 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f002 fa5f 	bl	80134d4 <tcp_rexmit_rto>
      break;
 8011016:	e20d      	b.n	8011434 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011018:	4b81      	ldr	r3, [pc, #516]	@ (8011220 <tcp_process+0x590>)
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	f003 0310 	and.w	r3, r3, #16
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 80a1 	beq.w	8011168 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011026:	4b7f      	ldr	r3, [pc, #508]	@ (8011224 <tcp_process+0x594>)
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	3b01      	subs	r3, #1
 8011032:	2b00      	cmp	r3, #0
 8011034:	db7e      	blt.n	8011134 <tcp_process+0x4a4>
 8011036:	4b7b      	ldr	r3, [pc, #492]	@ (8011224 <tcp_process+0x594>)
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	2b00      	cmp	r3, #0
 8011042:	dc77      	bgt.n	8011134 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2204      	movs	r2, #4
 8011048:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801104e:	2b00      	cmp	r3, #0
 8011050:	d102      	bne.n	8011058 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011052:	23fa      	movs	r3, #250	@ 0xfa
 8011054:	77bb      	strb	r3, [r7, #30]
 8011056:	e01d      	b.n	8011094 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801105c:	699b      	ldr	r3, [r3, #24]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d106      	bne.n	8011070 <tcp_process+0x3e0>
 8011062:	4b76      	ldr	r3, [pc, #472]	@ (801123c <tcp_process+0x5ac>)
 8011064:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8011068:	4975      	ldr	r1, [pc, #468]	@ (8011240 <tcp_process+0x5b0>)
 801106a:	4876      	ldr	r0, [pc, #472]	@ (8011244 <tcp_process+0x5b4>)
 801106c:	f005 fcb2 	bl	80169d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011074:	699b      	ldr	r3, [r3, #24]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d00a      	beq.n	8011090 <tcp_process+0x400>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	6910      	ldr	r0, [r2, #16]
 8011084:	2200      	movs	r2, #0
 8011086:	6879      	ldr	r1, [r7, #4]
 8011088:	4798      	blx	r3
 801108a:	4603      	mov	r3, r0
 801108c:	77bb      	strb	r3, [r7, #30]
 801108e:	e001      	b.n	8011094 <tcp_process+0x404>
 8011090:	23f0      	movs	r3, #240	@ 0xf0
 8011092:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8011094:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00a      	beq.n	80110b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801109c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80110a0:	f113 0f0d 	cmn.w	r3, #13
 80110a4:	d002      	beq.n	80110ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7fd ff86 	bl	800efb8 <tcp_abort>
            }
            return ERR_ABRT;
 80110ac:	f06f 030c 	mvn.w	r3, #12
 80110b0:	e1ce      	b.n	8011450 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 fae0 	bl	8011678 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80110b8:	4b63      	ldr	r3, [pc, #396]	@ (8011248 <tcp_process+0x5b8>)
 80110ba:	881b      	ldrh	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d005      	beq.n	80110cc <tcp_process+0x43c>
            recv_acked--;
 80110c0:	4b61      	ldr	r3, [pc, #388]	@ (8011248 <tcp_process+0x5b8>)
 80110c2:	881b      	ldrh	r3, [r3, #0]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	4b5f      	ldr	r3, [pc, #380]	@ (8011248 <tcp_process+0x5b8>)
 80110ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110d0:	009a      	lsls	r2, r3, #2
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110d6:	005b      	lsls	r3, r3, #1
 80110d8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80110dc:	428b      	cmp	r3, r1
 80110de:	bf38      	it	cc
 80110e0:	460b      	movcc	r3, r1
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d204      	bcs.n	80110f0 <tcp_process+0x460>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	e00d      	b.n	801110c <tcp_process+0x47c>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80110f4:	005b      	lsls	r3, r3, #1
 80110f6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d904      	bls.n	8011108 <tcp_process+0x478>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011102:	005b      	lsls	r3, r3, #1
 8011104:	b29b      	uxth	r3, r3
 8011106:	e001      	b.n	801110c <tcp_process+0x47c>
 8011108:	f241 131c 	movw	r3, #4380	@ 0x111c
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011112:	4b4e      	ldr	r3, [pc, #312]	@ (801124c <tcp_process+0x5bc>)
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	f003 0320 	and.w	r3, r3, #32
 801111a:	2b00      	cmp	r3, #0
 801111c:	d037      	beq.n	801118e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8b5b      	ldrh	r3, [r3, #26]
 8011122:	f043 0302 	orr.w	r3, r3, #2
 8011126:	b29a      	uxth	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2207      	movs	r2, #7
 8011130:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011132:	e02c      	b.n	801118e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011134:	4b3b      	ldr	r3, [pc, #236]	@ (8011224 <tcp_process+0x594>)
 8011136:	6819      	ldr	r1, [r3, #0]
 8011138:	4b3b      	ldr	r3, [pc, #236]	@ (8011228 <tcp_process+0x598>)
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	461a      	mov	r2, r3
 801113e:	4b3b      	ldr	r3, [pc, #236]	@ (801122c <tcp_process+0x59c>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011144:	4b3a      	ldr	r3, [pc, #232]	@ (8011230 <tcp_process+0x5a0>)
 8011146:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011148:	885b      	ldrh	r3, [r3, #2]
 801114a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801114c:	4a38      	ldr	r2, [pc, #224]	@ (8011230 <tcp_process+0x5a0>)
 801114e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011150:	8812      	ldrh	r2, [r2, #0]
 8011152:	b292      	uxth	r2, r2
 8011154:	9202      	str	r2, [sp, #8]
 8011156:	9301      	str	r3, [sp, #4]
 8011158:	4b36      	ldr	r3, [pc, #216]	@ (8011234 <tcp_process+0x5a4>)
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	4b36      	ldr	r3, [pc, #216]	@ (8011238 <tcp_process+0x5a8>)
 801115e:	4602      	mov	r2, r0
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f002 fbdf 	bl	8013924 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011166:	e167      	b.n	8011438 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011168:	4b2d      	ldr	r3, [pc, #180]	@ (8011220 <tcp_process+0x590>)
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	f003 0302 	and.w	r3, r3, #2
 8011170:	2b00      	cmp	r3, #0
 8011172:	f000 8161 	beq.w	8011438 <tcp_process+0x7a8>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801117a:	1e5a      	subs	r2, r3, #1
 801117c:	4b2b      	ldr	r3, [pc, #172]	@ (801122c <tcp_process+0x59c>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	429a      	cmp	r2, r3
 8011182:	f040 8159 	bne.w	8011438 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f002 f9c6 	bl	8013518 <tcp_rexmit>
      break;
 801118c:	e154      	b.n	8011438 <tcp_process+0x7a8>
 801118e:	e153      	b.n	8011438 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f000 fa71 	bl	8011678 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011196:	4b2d      	ldr	r3, [pc, #180]	@ (801124c <tcp_process+0x5bc>)
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	f003 0320 	and.w	r3, r3, #32
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 814c 	beq.w	801143c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	8b5b      	ldrh	r3, [r3, #26]
 80111a8:	f043 0302 	orr.w	r3, r3, #2
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2207      	movs	r2, #7
 80111b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80111b8:	e140      	b.n	801143c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f000 fa5c 	bl	8011678 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80111c0:	4b22      	ldr	r3, [pc, #136]	@ (801124c <tcp_process+0x5bc>)
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 0320 	and.w	r3, r3, #32
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d071      	beq.n	80112b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111cc:	4b14      	ldr	r3, [pc, #80]	@ (8011220 <tcp_process+0x590>)
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	f003 0310 	and.w	r3, r3, #16
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d060      	beq.n	801129a <tcp_process+0x60a>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80111dc:	4b11      	ldr	r3, [pc, #68]	@ (8011224 <tcp_process+0x594>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d15a      	bne.n	801129a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d156      	bne.n	801129a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	8b5b      	ldrh	r3, [r3, #26]
 80111f0:	f043 0302 	orr.w	r3, r3, #2
 80111f4:	b29a      	uxth	r2, r3
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80111fa:	6878      	ldr	r0, [r7, #4]
 80111fc:	f7fe fdb6 	bl	800fd6c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011200:	4b13      	ldr	r3, [pc, #76]	@ (8011250 <tcp_process+0x5c0>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	687a      	ldr	r2, [r7, #4]
 8011206:	429a      	cmp	r2, r3
 8011208:	d105      	bne.n	8011216 <tcp_process+0x586>
 801120a:	4b11      	ldr	r3, [pc, #68]	@ (8011250 <tcp_process+0x5c0>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	4a0f      	ldr	r2, [pc, #60]	@ (8011250 <tcp_process+0x5c0>)
 8011212:	6013      	str	r3, [r2, #0]
 8011214:	e02e      	b.n	8011274 <tcp_process+0x5e4>
 8011216:	4b0e      	ldr	r3, [pc, #56]	@ (8011250 <tcp_process+0x5c0>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	613b      	str	r3, [r7, #16]
 801121c:	e027      	b.n	801126e <tcp_process+0x5de>
 801121e:	bf00      	nop
 8011220:	20013ca4 	.word	0x20013ca4
 8011224:	20013c9c 	.word	0x20013c9c
 8011228:	20013ca2 	.word	0x20013ca2
 801122c:	20013c98 	.word	0x20013c98
 8011230:	20013c88 	.word	0x20013c88
 8011234:	20008f28 	.word	0x20008f28
 8011238:	20008f2c 	.word	0x20008f2c
 801123c:	080193cc 	.word	0x080193cc
 8011240:	0801966c 	.word	0x0801966c
 8011244:	08019418 	.word	0x08019418
 8011248:	20013ca0 	.word	0x20013ca0
 801124c:	20013ca5 	.word	0x20013ca5
 8011250:	20013c68 	.word	0x20013c68
 8011254:	693b      	ldr	r3, [r7, #16]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	429a      	cmp	r2, r3
 801125c:	d104      	bne.n	8011268 <tcp_process+0x5d8>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	68da      	ldr	r2, [r3, #12]
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	60da      	str	r2, [r3, #12]
 8011266:	e005      	b.n	8011274 <tcp_process+0x5e4>
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	613b      	str	r3, [r7, #16]
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1ef      	bne.n	8011254 <tcp_process+0x5c4>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	60da      	str	r2, [r3, #12]
 801127a:	4b77      	ldr	r3, [pc, #476]	@ (8011458 <tcp_process+0x7c8>)
 801127c:	2201      	movs	r2, #1
 801127e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	220a      	movs	r2, #10
 8011284:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011286:	4b75      	ldr	r3, [pc, #468]	@ (801145c <tcp_process+0x7cc>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	60da      	str	r2, [r3, #12]
 801128e:	4a73      	ldr	r2, [pc, #460]	@ (801145c <tcp_process+0x7cc>)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6013      	str	r3, [r2, #0]
 8011294:	f002 fd08 	bl	8013ca8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011298:	e0d2      	b.n	8011440 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8b5b      	ldrh	r3, [r3, #26]
 801129e:	f043 0302 	orr.w	r3, r3, #2
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2208      	movs	r2, #8
 80112ac:	751a      	strb	r2, [r3, #20]
      break;
 80112ae:	e0c7      	b.n	8011440 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112b0:	4b6b      	ldr	r3, [pc, #428]	@ (8011460 <tcp_process+0x7d0>)
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	f003 0310 	and.w	r3, r3, #16
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	f000 80c1 	beq.w	8011440 <tcp_process+0x7b0>
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80112c2:	4b68      	ldr	r3, [pc, #416]	@ (8011464 <tcp_process+0x7d4>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	f040 80ba 	bne.w	8011440 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f040 80b5 	bne.w	8011440 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2206      	movs	r2, #6
 80112da:	751a      	strb	r2, [r3, #20]
      break;
 80112dc:	e0b0      	b.n	8011440 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f000 f9ca 	bl	8011678 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80112e4:	4b60      	ldr	r3, [pc, #384]	@ (8011468 <tcp_process+0x7d8>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	f003 0320 	and.w	r3, r3, #32
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	f000 80a9 	beq.w	8011444 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	8b5b      	ldrh	r3, [r3, #26]
 80112f6:	f043 0302 	orr.w	r3, r3, #2
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f7fe fd33 	bl	800fd6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011306:	4b59      	ldr	r3, [pc, #356]	@ (801146c <tcp_process+0x7dc>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	429a      	cmp	r2, r3
 801130e:	d105      	bne.n	801131c <tcp_process+0x68c>
 8011310:	4b56      	ldr	r3, [pc, #344]	@ (801146c <tcp_process+0x7dc>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	4a55      	ldr	r2, [pc, #340]	@ (801146c <tcp_process+0x7dc>)
 8011318:	6013      	str	r3, [r2, #0]
 801131a:	e013      	b.n	8011344 <tcp_process+0x6b4>
 801131c:	4b53      	ldr	r3, [pc, #332]	@ (801146c <tcp_process+0x7dc>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	60fb      	str	r3, [r7, #12]
 8011322:	e00c      	b.n	801133e <tcp_process+0x6ae>
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	429a      	cmp	r2, r3
 801132c:	d104      	bne.n	8011338 <tcp_process+0x6a8>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	68da      	ldr	r2, [r3, #12]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	60da      	str	r2, [r3, #12]
 8011336:	e005      	b.n	8011344 <tcp_process+0x6b4>
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	60fb      	str	r3, [r7, #12]
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d1ef      	bne.n	8011324 <tcp_process+0x694>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2200      	movs	r2, #0
 8011348:	60da      	str	r2, [r3, #12]
 801134a:	4b43      	ldr	r3, [pc, #268]	@ (8011458 <tcp_process+0x7c8>)
 801134c:	2201      	movs	r2, #1
 801134e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	220a      	movs	r2, #10
 8011354:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011356:	4b41      	ldr	r3, [pc, #260]	@ (801145c <tcp_process+0x7cc>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	60da      	str	r2, [r3, #12]
 801135e:	4a3f      	ldr	r2, [pc, #252]	@ (801145c <tcp_process+0x7cc>)
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6013      	str	r3, [r2, #0]
 8011364:	f002 fca0 	bl	8013ca8 <tcp_timer_needed>
      }
      break;
 8011368:	e06c      	b.n	8011444 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f000 f984 	bl	8011678 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011370:	4b3b      	ldr	r3, [pc, #236]	@ (8011460 <tcp_process+0x7d0>)
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	f003 0310 	and.w	r3, r3, #16
 8011378:	2b00      	cmp	r3, #0
 801137a:	d065      	beq.n	8011448 <tcp_process+0x7b8>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011380:	4b38      	ldr	r3, [pc, #224]	@ (8011464 <tcp_process+0x7d4>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	429a      	cmp	r2, r3
 8011386:	d15f      	bne.n	8011448 <tcp_process+0x7b8>
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801138c:	2b00      	cmp	r3, #0
 801138e:	d15b      	bne.n	8011448 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7fe fceb 	bl	800fd6c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011396:	4b35      	ldr	r3, [pc, #212]	@ (801146c <tcp_process+0x7dc>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	429a      	cmp	r2, r3
 801139e:	d105      	bne.n	80113ac <tcp_process+0x71c>
 80113a0:	4b32      	ldr	r3, [pc, #200]	@ (801146c <tcp_process+0x7dc>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	4a31      	ldr	r2, [pc, #196]	@ (801146c <tcp_process+0x7dc>)
 80113a8:	6013      	str	r3, [r2, #0]
 80113aa:	e013      	b.n	80113d4 <tcp_process+0x744>
 80113ac:	4b2f      	ldr	r3, [pc, #188]	@ (801146c <tcp_process+0x7dc>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	61bb      	str	r3, [r7, #24]
 80113b2:	e00c      	b.n	80113ce <tcp_process+0x73e>
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	687a      	ldr	r2, [r7, #4]
 80113ba:	429a      	cmp	r2, r3
 80113bc:	d104      	bne.n	80113c8 <tcp_process+0x738>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	68da      	ldr	r2, [r3, #12]
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	60da      	str	r2, [r3, #12]
 80113c6:	e005      	b.n	80113d4 <tcp_process+0x744>
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	68db      	ldr	r3, [r3, #12]
 80113cc:	61bb      	str	r3, [r7, #24]
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d1ef      	bne.n	80113b4 <tcp_process+0x724>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	60da      	str	r2, [r3, #12]
 80113da:	4b1f      	ldr	r3, [pc, #124]	@ (8011458 <tcp_process+0x7c8>)
 80113dc:	2201      	movs	r2, #1
 80113de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	220a      	movs	r2, #10
 80113e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80113e6:	4b1d      	ldr	r3, [pc, #116]	@ (801145c <tcp_process+0x7cc>)
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	60da      	str	r2, [r3, #12]
 80113ee:	4a1b      	ldr	r2, [pc, #108]	@ (801145c <tcp_process+0x7cc>)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6013      	str	r3, [r2, #0]
 80113f4:	f002 fc58 	bl	8013ca8 <tcp_timer_needed>
      }
      break;
 80113f8:	e026      	b.n	8011448 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f000 f93c 	bl	8011678 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011400:	4b17      	ldr	r3, [pc, #92]	@ (8011460 <tcp_process+0x7d0>)
 8011402:	781b      	ldrb	r3, [r3, #0]
 8011404:	f003 0310 	and.w	r3, r3, #16
 8011408:	2b00      	cmp	r3, #0
 801140a:	d01f      	beq.n	801144c <tcp_process+0x7bc>
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011410:	4b14      	ldr	r3, [pc, #80]	@ (8011464 <tcp_process+0x7d4>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	d119      	bne.n	801144c <tcp_process+0x7bc>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801141c:	2b00      	cmp	r3, #0
 801141e:	d115      	bne.n	801144c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011420:	4b11      	ldr	r3, [pc, #68]	@ (8011468 <tcp_process+0x7d8>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	f043 0310 	orr.w	r3, r3, #16
 8011428:	b2da      	uxtb	r2, r3
 801142a:	4b0f      	ldr	r3, [pc, #60]	@ (8011468 <tcp_process+0x7d8>)
 801142c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801142e:	e00d      	b.n	801144c <tcp_process+0x7bc>
    default:
      break;
 8011430:	bf00      	nop
 8011432:	e00c      	b.n	801144e <tcp_process+0x7be>
      break;
 8011434:	bf00      	nop
 8011436:	e00a      	b.n	801144e <tcp_process+0x7be>
      break;
 8011438:	bf00      	nop
 801143a:	e008      	b.n	801144e <tcp_process+0x7be>
      break;
 801143c:	bf00      	nop
 801143e:	e006      	b.n	801144e <tcp_process+0x7be>
      break;
 8011440:	bf00      	nop
 8011442:	e004      	b.n	801144e <tcp_process+0x7be>
      break;
 8011444:	bf00      	nop
 8011446:	e002      	b.n	801144e <tcp_process+0x7be>
      break;
 8011448:	bf00      	nop
 801144a:	e000      	b.n	801144e <tcp_process+0x7be>
      break;
 801144c:	bf00      	nop
  }
  return ERR_OK;
 801144e:	2300      	movs	r3, #0
}
 8011450:	4618      	mov	r0, r3
 8011452:	3724      	adds	r7, #36	@ 0x24
 8011454:	46bd      	mov	sp, r7
 8011456:	bd90      	pop	{r4, r7, pc}
 8011458:	20013c70 	.word	0x20013c70
 801145c:	20013c6c 	.word	0x20013c6c
 8011460:	20013ca4 	.word	0x20013ca4
 8011464:	20013c9c 	.word	0x20013c9c
 8011468:	20013ca5 	.word	0x20013ca5
 801146c:	20013c68 	.word	0x20013c68

08011470 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011470:	b590      	push	{r4, r7, lr}
 8011472:	b085      	sub	sp, #20
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <tcp_oos_insert_segment+0x1e>
 8011480:	4b3b      	ldr	r3, [pc, #236]	@ (8011570 <tcp_oos_insert_segment+0x100>)
 8011482:	f240 421f 	movw	r2, #1055	@ 0x41f
 8011486:	493b      	ldr	r1, [pc, #236]	@ (8011574 <tcp_oos_insert_segment+0x104>)
 8011488:	483b      	ldr	r0, [pc, #236]	@ (8011578 <tcp_oos_insert_segment+0x108>)
 801148a:	f005 faa3 	bl	80169d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	691b      	ldr	r3, [r3, #16]
 8011492:	899b      	ldrh	r3, [r3, #12]
 8011494:	b29b      	uxth	r3, r3
 8011496:	4618      	mov	r0, r3
 8011498:	f7fb fb60 	bl	800cb5c <lwip_htons>
 801149c:	4603      	mov	r3, r0
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	f003 0301 	and.w	r3, r3, #1
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d028      	beq.n	80114fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80114a8:	6838      	ldr	r0, [r7, #0]
 80114aa:	f7fe fa5d 	bl	800f968 <tcp_segs_free>
    next = NULL;
 80114ae:	2300      	movs	r3, #0
 80114b0:	603b      	str	r3, [r7, #0]
 80114b2:	e056      	b.n	8011562 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	691b      	ldr	r3, [r3, #16]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fb fb4d 	bl	800cb5c <lwip_htons>
 80114c2:	4603      	mov	r3, r0
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	f003 0301 	and.w	r3, r3, #1
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00d      	beq.n	80114ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	691b      	ldr	r3, [r3, #16]
 80114d2:	899b      	ldrh	r3, [r3, #12]
 80114d4:	b29c      	uxth	r4, r3
 80114d6:	2001      	movs	r0, #1
 80114d8:	f7fb fb40 	bl	800cb5c <lwip_htons>
 80114dc:	4603      	mov	r3, r0
 80114de:	461a      	mov	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	691b      	ldr	r3, [r3, #16]
 80114e4:	4322      	orrs	r2, r4
 80114e6:	b292      	uxth	r2, r2
 80114e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f7fe fa4c 	bl	800f992 <tcp_seg_free>
    while (next &&
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00e      	beq.n	801151e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	891b      	ldrh	r3, [r3, #8]
 8011504:	461a      	mov	r2, r3
 8011506:	4b1d      	ldr	r3, [pc, #116]	@ (801157c <tcp_oos_insert_segment+0x10c>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	441a      	add	r2, r3
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	691b      	ldr	r3, [r3, #16]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	8909      	ldrh	r1, [r1, #8]
 8011516:	440b      	add	r3, r1
 8011518:	1ad3      	subs	r3, r2, r3
    while (next &&
 801151a:	2b00      	cmp	r3, #0
 801151c:	daca      	bge.n	80114b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d01e      	beq.n	8011562 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	891b      	ldrh	r3, [r3, #8]
 8011528:	461a      	mov	r2, r3
 801152a:	4b14      	ldr	r3, [pc, #80]	@ (801157c <tcp_oos_insert_segment+0x10c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	441a      	add	r2, r3
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011538:	2b00      	cmp	r3, #0
 801153a:	dd12      	ble.n	8011562 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	691b      	ldr	r3, [r3, #16]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	b29a      	uxth	r2, r3
 8011544:	4b0d      	ldr	r3, [pc, #52]	@ (801157c <tcp_oos_insert_segment+0x10c>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	b29b      	uxth	r3, r3
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	685a      	ldr	r2, [r3, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	891b      	ldrh	r3, [r3, #8]
 801155a:	4619      	mov	r1, r3
 801155c:	4610      	mov	r0, r2
 801155e:	f7fc fe43 	bl	800e1e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	601a      	str	r2, [r3, #0]
}
 8011568:	bf00      	nop
 801156a:	3714      	adds	r7, #20
 801156c:	46bd      	mov	sp, r7
 801156e:	bd90      	pop	{r4, r7, pc}
 8011570:	080193cc 	.word	0x080193cc
 8011574:	0801968c 	.word	0x0801968c
 8011578:	08019418 	.word	0x08019418
 801157c:	20013c98 	.word	0x20013c98

08011580 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011580:	b5b0      	push	{r4, r5, r7, lr}
 8011582:	b086      	sub	sp, #24
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801158e:	e03e      	b.n	801160e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fd f836 	bl	800e610 <pbuf_clen>
 80115a4:	4603      	mov	r3, r0
 80115a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80115ae:	8a7a      	ldrh	r2, [r7, #18]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d906      	bls.n	80115c2 <tcp_free_acked_segments+0x42>
 80115b4:	4b2a      	ldr	r3, [pc, #168]	@ (8011660 <tcp_free_acked_segments+0xe0>)
 80115b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80115ba:	492a      	ldr	r1, [pc, #168]	@ (8011664 <tcp_free_acked_segments+0xe4>)
 80115bc:	482a      	ldr	r0, [pc, #168]	@ (8011668 <tcp_free_acked_segments+0xe8>)
 80115be:	f005 fa09 	bl	80169d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80115c8:	8a7b      	ldrh	r3, [r7, #18]
 80115ca:	1ad3      	subs	r3, r2, r3
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	891a      	ldrh	r2, [r3, #8]
 80115d8:	4b24      	ldr	r3, [pc, #144]	@ (801166c <tcp_free_acked_segments+0xec>)
 80115da:	881b      	ldrh	r3, [r3, #0]
 80115dc:	4413      	add	r3, r2
 80115de:	b29a      	uxth	r2, r3
 80115e0:	4b22      	ldr	r3, [pc, #136]	@ (801166c <tcp_free_acked_segments+0xec>)
 80115e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80115e4:	6978      	ldr	r0, [r7, #20]
 80115e6:	f7fe f9d4 	bl	800f992 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00c      	beq.n	801160e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d109      	bne.n	801160e <tcp_free_acked_segments+0x8e>
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d106      	bne.n	801160e <tcp_free_acked_segments+0x8e>
 8011600:	4b17      	ldr	r3, [pc, #92]	@ (8011660 <tcp_free_acked_segments+0xe0>)
 8011602:	f240 4261 	movw	r2, #1121	@ 0x461
 8011606:	491a      	ldr	r1, [pc, #104]	@ (8011670 <tcp_free_acked_segments+0xf0>)
 8011608:	4817      	ldr	r0, [pc, #92]	@ (8011668 <tcp_free_acked_segments+0xe8>)
 801160a:	f005 f9e3 	bl	80169d4 <iprintf>
  while (seg_list != NULL &&
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d020      	beq.n	8011656 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	f7fb fab4 	bl	800cb88 <lwip_htonl>
 8011620:	4604      	mov	r4, r0
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	891b      	ldrh	r3, [r3, #8]
 8011626:	461d      	mov	r5, r3
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	899b      	ldrh	r3, [r3, #12]
 801162e:	b29b      	uxth	r3, r3
 8011630:	4618      	mov	r0, r3
 8011632:	f7fb fa93 	bl	800cb5c <lwip_htons>
 8011636:	4603      	mov	r3, r0
 8011638:	b2db      	uxtb	r3, r3
 801163a:	f003 0303 	and.w	r3, r3, #3
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <tcp_free_acked_segments+0xc6>
 8011642:	2301      	movs	r3, #1
 8011644:	e000      	b.n	8011648 <tcp_free_acked_segments+0xc8>
 8011646:	2300      	movs	r3, #0
 8011648:	442b      	add	r3, r5
 801164a:	18e2      	adds	r2, r4, r3
 801164c:	4b09      	ldr	r3, [pc, #36]	@ (8011674 <tcp_free_acked_segments+0xf4>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011652:	2b00      	cmp	r3, #0
 8011654:	dd9c      	ble.n	8011590 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011656:	68bb      	ldr	r3, [r7, #8]
}
 8011658:	4618      	mov	r0, r3
 801165a:	3718      	adds	r7, #24
 801165c:	46bd      	mov	sp, r7
 801165e:	bdb0      	pop	{r4, r5, r7, pc}
 8011660:	080193cc 	.word	0x080193cc
 8011664:	080196b4 	.word	0x080196b4
 8011668:	08019418 	.word	0x08019418
 801166c:	20013ca0 	.word	0x20013ca0
 8011670:	080196dc 	.word	0x080196dc
 8011674:	20013c9c 	.word	0x20013c9c

08011678 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011678:	b5b0      	push	{r4, r5, r7, lr}
 801167a:	b094      	sub	sp, #80	@ 0x50
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011680:	2300      	movs	r3, #0
 8011682:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d106      	bne.n	8011698 <tcp_receive+0x20>
 801168a:	4b91      	ldr	r3, [pc, #580]	@ (80118d0 <tcp_receive+0x258>)
 801168c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8011690:	4990      	ldr	r1, [pc, #576]	@ (80118d4 <tcp_receive+0x25c>)
 8011692:	4891      	ldr	r0, [pc, #580]	@ (80118d8 <tcp_receive+0x260>)
 8011694:	f005 f99e 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	7d1b      	ldrb	r3, [r3, #20]
 801169c:	2b03      	cmp	r3, #3
 801169e:	d806      	bhi.n	80116ae <tcp_receive+0x36>
 80116a0:	4b8b      	ldr	r3, [pc, #556]	@ (80118d0 <tcp_receive+0x258>)
 80116a2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80116a6:	498d      	ldr	r1, [pc, #564]	@ (80118dc <tcp_receive+0x264>)
 80116a8:	488b      	ldr	r0, [pc, #556]	@ (80118d8 <tcp_receive+0x260>)
 80116aa:	f005 f993 	bl	80169d4 <iprintf>

  if (flags & TCP_ACK) {
 80116ae:	4b8c      	ldr	r3, [pc, #560]	@ (80118e0 <tcp_receive+0x268>)
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	f003 0310 	and.w	r3, r3, #16
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f000 8264 	beq.w	8011b84 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80116c2:	461a      	mov	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116c8:	4413      	add	r3, r2
 80116ca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116d0:	4b84      	ldr	r3, [pc, #528]	@ (80118e4 <tcp_receive+0x26c>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	db1b      	blt.n	8011712 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116de:	4b81      	ldr	r3, [pc, #516]	@ (80118e4 <tcp_receive+0x26c>)
 80116e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d106      	bne.n	80116f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80116ea:	4b7f      	ldr	r3, [pc, #508]	@ (80118e8 <tcp_receive+0x270>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	db0e      	blt.n	8011712 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80116f8:	4b7b      	ldr	r3, [pc, #492]	@ (80118e8 <tcp_receive+0x270>)
 80116fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d125      	bne.n	801174c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011700:	4b7a      	ldr	r3, [pc, #488]	@ (80118ec <tcp_receive+0x274>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	89db      	ldrh	r3, [r3, #14]
 8011706:	b29a      	uxth	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801170e:	429a      	cmp	r2, r3
 8011710:	d91c      	bls.n	801174c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011712:	4b76      	ldr	r3, [pc, #472]	@ (80118ec <tcp_receive+0x274>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	89db      	ldrh	r3, [r3, #14]
 8011718:	b29a      	uxth	r2, r3
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801172c:	429a      	cmp	r2, r3
 801172e:	d205      	bcs.n	801173c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801173c:	4b69      	ldr	r3, [pc, #420]	@ (80118e4 <tcp_receive+0x26c>)
 801173e:	681a      	ldr	r2, [r3, #0]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8011744:	4b68      	ldr	r3, [pc, #416]	@ (80118e8 <tcp_receive+0x270>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801174c:	4b66      	ldr	r3, [pc, #408]	@ (80118e8 <tcp_receive+0x270>)
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011754:	1ad3      	subs	r3, r2, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	dc58      	bgt.n	801180c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801175a:	4b65      	ldr	r3, [pc, #404]	@ (80118f0 <tcp_receive+0x278>)
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d14b      	bne.n	80117fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 801176c:	4413      	add	r3, r2
 801176e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011770:	429a      	cmp	r2, r3
 8011772:	d142      	bne.n	80117fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801177a:	2b00      	cmp	r3, #0
 801177c:	db3d      	blt.n	80117fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011782:	4b59      	ldr	r3, [pc, #356]	@ (80118e8 <tcp_receive+0x270>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	429a      	cmp	r2, r3
 8011788:	d137      	bne.n	80117fa <tcp_receive+0x182>
              found_dupack = 1;
 801178a:	2301      	movs	r3, #1
 801178c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011794:	2bff      	cmp	r3, #255	@ 0xff
 8011796:	d007      	beq.n	80117a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801179e:	3301      	adds	r3, #1
 80117a0:	b2da      	uxtb	r2, r3
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80117ae:	2b03      	cmp	r3, #3
 80117b0:	d91b      	bls.n	80117ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117bc:	4413      	add	r3, r2
 80117be:	b29a      	uxth	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d30a      	bcc.n	80117e0 <tcp_receive+0x168>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80117d4:	4413      	add	r3, r2
 80117d6:	b29a      	uxth	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80117de:	e004      	b.n	80117ea <tcp_receive+0x172>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80117e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80117f0:	2b02      	cmp	r3, #2
 80117f2:	d902      	bls.n	80117fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f001 fefb 	bl	80135f0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80117fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 8161 	bne.w	8011ac4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	2200      	movs	r2, #0
 8011806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801180a:	e15b      	b.n	8011ac4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801180c:	4b36      	ldr	r3, [pc, #216]	@ (80118e8 <tcp_receive+0x270>)
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011814:	1ad3      	subs	r3, r2, r3
 8011816:	3b01      	subs	r3, #1
 8011818:	2b00      	cmp	r3, #0
 801181a:	f2c0 814e 	blt.w	8011aba <tcp_receive+0x442>
 801181e:	4b32      	ldr	r3, [pc, #200]	@ (80118e8 <tcp_receive+0x270>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011826:	1ad3      	subs	r3, r2, r3
 8011828:	2b00      	cmp	r3, #0
 801182a:	f300 8146 	bgt.w	8011aba <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	8b5b      	ldrh	r3, [r3, #26]
 8011832:	f003 0304 	and.w	r3, r3, #4
 8011836:	2b00      	cmp	r3, #0
 8011838:	d010      	beq.n	801185c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8b5b      	ldrh	r3, [r3, #26]
 801183e:	f023 0304 	bic.w	r3, r3, #4
 8011842:	b29a      	uxth	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2200      	movs	r2, #0
 8011860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801186a:	10db      	asrs	r3, r3, #3
 801186c:	b21b      	sxth	r3, r3
 801186e:	b29a      	uxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011876:	b29b      	uxth	r3, r3
 8011878:	4413      	add	r3, r2
 801187a:	b29b      	uxth	r3, r3
 801187c:	b21a      	sxth	r2, r3
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011884:	4b18      	ldr	r3, [pc, #96]	@ (80118e8 <tcp_receive+0x270>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	b29a      	uxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801188e:	b29b      	uxth	r3, r3
 8011890:	1ad3      	subs	r3, r2, r3
 8011892:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 801189c:	4b12      	ldr	r3, [pc, #72]	@ (80118e8 <tcp_receive+0x270>)
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	7d1b      	ldrb	r3, [r3, #20]
 80118a8:	2b03      	cmp	r3, #3
 80118aa:	f240 8097 	bls.w	80119dc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d245      	bcs.n	801194a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	8b5b      	ldrh	r3, [r3, #26]
 80118c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d014      	beq.n	80118f4 <tcp_receive+0x27c>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e013      	b.n	80118f6 <tcp_receive+0x27e>
 80118ce:	bf00      	nop
 80118d0:	080193cc 	.word	0x080193cc
 80118d4:	080196fc 	.word	0x080196fc
 80118d8:	08019418 	.word	0x08019418
 80118dc:	08019718 	.word	0x08019718
 80118e0:	20013ca4 	.word	0x20013ca4
 80118e4:	20013c98 	.word	0x20013c98
 80118e8:	20013c9c 	.word	0x20013c9c
 80118ec:	20013c88 	.word	0x20013c88
 80118f0:	20013ca2 	.word	0x20013ca2
 80118f4:	2302      	movs	r3, #2
 80118f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80118fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80118fe:	b29a      	uxth	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011904:	fb12 f303 	smulbb	r3, r2, r3
 8011908:	b29b      	uxth	r3, r3
 801190a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801190c:	4293      	cmp	r3, r2
 801190e:	bf28      	it	cs
 8011910:	4613      	movcs	r3, r2
 8011912:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801191a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801191c:	4413      	add	r3, r2
 801191e:	b29a      	uxth	r2, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011926:	429a      	cmp	r2, r3
 8011928:	d309      	bcc.n	801193e <tcp_receive+0x2c6>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011930:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011932:	4413      	add	r3, r2
 8011934:	b29a      	uxth	r2, r3
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801193c:	e04e      	b.n	80119dc <tcp_receive+0x364>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011944:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011948:	e048      	b.n	80119dc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011950:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011952:	4413      	add	r3, r2
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801195c:	429a      	cmp	r2, r3
 801195e:	d309      	bcc.n	8011974 <tcp_receive+0x2fc>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011966:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011968:	4413      	add	r3, r2
 801196a:	b29a      	uxth	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011972:	e004      	b.n	801197e <tcp_receive+0x306>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801197a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801198a:	429a      	cmp	r2, r3
 801198c:	d326      	bcc.n	80119dc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	b29a      	uxth	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119ae:	4413      	add	r3, r2
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d30a      	bcc.n	80119d2 <tcp_receive+0x35a>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119c6:	4413      	add	r3, r2
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80119d0:	e004      	b.n	80119dc <tcp_receive+0x364>
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80119d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119e4:	4a98      	ldr	r2, [pc, #608]	@ (8011c48 <tcp_receive+0x5d0>)
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7ff fdca 	bl	8011580 <tcp_free_acked_segments>
 80119ec:	4602      	mov	r2, r0
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119fa:	4a94      	ldr	r2, [pc, #592]	@ (8011c4c <tcp_receive+0x5d4>)
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f7ff fdbf 	bl	8011580 <tcp_free_acked_segments>
 8011a02:	4602      	mov	r2, r0
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d104      	bne.n	8011a1a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011a16:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011a18:	e002      	b.n	8011a20 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	2200      	movs	r2, #0
 8011a24:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d103      	bne.n	8011a36 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2200      	movs	r2, #0
 8011a32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011a3c:	4b84      	ldr	r3, [pc, #528]	@ (8011c50 <tcp_receive+0x5d8>)
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	4413      	add	r3, r2
 8011a42:	b29a      	uxth	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	8b5b      	ldrh	r3, [r3, #26]
 8011a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d035      	beq.n	8011ac2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d118      	bne.n	8011a90 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d00c      	beq.n	8011a80 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a6e:	691b      	ldr	r3, [r3, #16]
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fb f888 	bl	800cb88 <lwip_htonl>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	dc20      	bgt.n	8011ac2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	8b5b      	ldrh	r3, [r3, #26]
 8011a84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011a88:	b29a      	uxth	r2, r3
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a8e:	e018      	b.n	8011ac2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a98:	691b      	ldr	r3, [r3, #16]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f7fb f873 	bl	800cb88 <lwip_htonl>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	1ae3      	subs	r3, r4, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	dc0b      	bgt.n	8011ac2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8b5b      	ldrh	r3, [r3, #26]
 8011aae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ab8:	e003      	b.n	8011ac2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f001 ff84 	bl	80139c8 <tcp_send_empty_ack>
 8011ac0:	e000      	b.n	8011ac4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ac2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d05b      	beq.n	8011b84 <tcp_receive+0x50c>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ad0:	4b60      	ldr	r3, [pc, #384]	@ (8011c54 <tcp_receive+0x5dc>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	da54      	bge.n	8011b84 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011ada:	4b5f      	ldr	r3, [pc, #380]	@ (8011c58 <tcp_receive+0x5e0>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011aee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011af8:	10db      	asrs	r3, r3, #3
 8011afa:	b21b      	sxth	r3, r3
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	1ad3      	subs	r3, r2, r3
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011b12:	4413      	add	r3, r2
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	b21a      	sxth	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011b1c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	da05      	bge.n	8011b30 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011b28:	425b      	negs	r3, r3
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011b30:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011b3a:	109b      	asrs	r3, r3, #2
 8011b3c:	b21b      	sxth	r3, r3
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011b54:	4413      	add	r3, r2
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	b21a      	sxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b64:	10db      	asrs	r3, r3, #3
 8011b66:	b21b      	sxth	r3, r3
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4413      	add	r3, r2
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	b21a      	sxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2200      	movs	r2, #0
 8011b82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011b84:	4b35      	ldr	r3, [pc, #212]	@ (8011c5c <tcp_receive+0x5e4>)
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	f000 84df 	beq.w	801254c <tcp_receive+0xed4>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	7d1b      	ldrb	r3, [r3, #20]
 8011b92:	2b06      	cmp	r3, #6
 8011b94:	f200 84da 	bhi.w	801254c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b9c:	4b30      	ldr	r3, [pc, #192]	@ (8011c60 <tcp_receive+0x5e8>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	1ad3      	subs	r3, r2, r3
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f2c0 808f 	blt.w	8011cc8 <tcp_receive+0x650>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011bae:	4b2b      	ldr	r3, [pc, #172]	@ (8011c5c <tcp_receive+0x5e4>)
 8011bb0:	881b      	ldrh	r3, [r3, #0]
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8011c60 <tcp_receive+0x5e8>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	440b      	add	r3, r1
 8011bba:	1ad3      	subs	r3, r2, r3
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f300 8082 	bgt.w	8011cc8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011bc4:	4b27      	ldr	r3, [pc, #156]	@ (8011c64 <tcp_receive+0x5ec>)
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011bce:	4b24      	ldr	r3, [pc, #144]	@ (8011c60 <tcp_receive+0x5e8>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011bd6:	4b23      	ldr	r3, [pc, #140]	@ (8011c64 <tcp_receive+0x5ec>)
 8011bd8:	685b      	ldr	r3, [r3, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d106      	bne.n	8011bec <tcp_receive+0x574>
 8011bde:	4b22      	ldr	r3, [pc, #136]	@ (8011c68 <tcp_receive+0x5f0>)
 8011be0:	f240 5294 	movw	r2, #1428	@ 0x594
 8011be4:	4921      	ldr	r1, [pc, #132]	@ (8011c6c <tcp_receive+0x5f4>)
 8011be6:	4822      	ldr	r0, [pc, #136]	@ (8011c70 <tcp_receive+0x5f8>)
 8011be8:	f004 fef4 	bl	80169d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d906      	bls.n	8011c04 <tcp_receive+0x58c>
 8011bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8011c68 <tcp_receive+0x5f0>)
 8011bf8:	f240 5295 	movw	r2, #1429	@ 0x595
 8011bfc:	491d      	ldr	r1, [pc, #116]	@ (8011c74 <tcp_receive+0x5fc>)
 8011bfe:	481c      	ldr	r0, [pc, #112]	@ (8011c70 <tcp_receive+0x5f8>)
 8011c00:	f004 fee8 	bl	80169d4 <iprintf>
      off = (u16_t)off32;
 8011c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011c0a:	4b16      	ldr	r3, [pc, #88]	@ (8011c64 <tcp_receive+0x5ec>)
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	891b      	ldrh	r3, [r3, #8]
 8011c10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d906      	bls.n	8011c26 <tcp_receive+0x5ae>
 8011c18:	4b13      	ldr	r3, [pc, #76]	@ (8011c68 <tcp_receive+0x5f0>)
 8011c1a:	f240 5297 	movw	r2, #1431	@ 0x597
 8011c1e:	4916      	ldr	r1, [pc, #88]	@ (8011c78 <tcp_receive+0x600>)
 8011c20:	4813      	ldr	r0, [pc, #76]	@ (8011c70 <tcp_receive+0x5f8>)
 8011c22:	f004 fed7 	bl	80169d4 <iprintf>
      inseg.len -= off;
 8011c26:	4b0f      	ldr	r3, [pc, #60]	@ (8011c64 <tcp_receive+0x5ec>)
 8011c28:	891a      	ldrh	r2, [r3, #8]
 8011c2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	4b0c      	ldr	r3, [pc, #48]	@ (8011c64 <tcp_receive+0x5ec>)
 8011c34:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011c36:	4b0b      	ldr	r3, [pc, #44]	@ (8011c64 <tcp_receive+0x5ec>)
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	891a      	ldrh	r2, [r3, #8]
 8011c3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011c44:	e02a      	b.n	8011c9c <tcp_receive+0x624>
 8011c46:	bf00      	nop
 8011c48:	08019734 	.word	0x08019734
 8011c4c:	0801973c 	.word	0x0801973c
 8011c50:	20013ca0 	.word	0x20013ca0
 8011c54:	20013c9c 	.word	0x20013c9c
 8011c58:	20013c5c 	.word	0x20013c5c
 8011c5c:	20013ca2 	.word	0x20013ca2
 8011c60:	20013c98 	.word	0x20013c98
 8011c64:	20013c74 	.word	0x20013c74
 8011c68:	080193cc 	.word	0x080193cc
 8011c6c:	08019744 	.word	0x08019744
 8011c70:	08019418 	.word	0x08019418
 8011c74:	08019754 	.word	0x08019754
 8011c78:	08019764 	.word	0x08019764
        off -= p->len;
 8011c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c7e:	895b      	ldrh	r3, [r3, #10]
 8011c80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011c8e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c92:	2200      	movs	r2, #0
 8011c94:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c9e:	895b      	ldrh	r3, [r3, #10]
 8011ca0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d8e9      	bhi.n	8011c7c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011ca8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011cac:	4619      	mov	r1, r3
 8011cae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011cb0:	f7fc fb9a 	bl	800e3e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb8:	4a90      	ldr	r2, [pc, #576]	@ (8011efc <tcp_receive+0x884>)
 8011cba:	6013      	str	r3, [r2, #0]
 8011cbc:	4b90      	ldr	r3, [pc, #576]	@ (8011f00 <tcp_receive+0x888>)
 8011cbe:	691b      	ldr	r3, [r3, #16]
 8011cc0:	4a8e      	ldr	r2, [pc, #568]	@ (8011efc <tcp_receive+0x884>)
 8011cc2:	6812      	ldr	r2, [r2, #0]
 8011cc4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011cc6:	e00d      	b.n	8011ce4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011cc8:	4b8c      	ldr	r3, [pc, #560]	@ (8011efc <tcp_receive+0x884>)
 8011cca:	681a      	ldr	r2, [r3, #0]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	da06      	bge.n	8011ce4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	8b5b      	ldrh	r3, [r3, #26]
 8011cda:	f043 0302 	orr.w	r3, r3, #2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ce4:	4b85      	ldr	r3, [pc, #532]	@ (8011efc <tcp_receive+0x884>)
 8011ce6:	681a      	ldr	r2, [r3, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cec:	1ad3      	subs	r3, r2, r3
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f2c0 8427 	blt.w	8012542 <tcp_receive+0xeca>
 8011cf4:	4b81      	ldr	r3, [pc, #516]	@ (8011efc <tcp_receive+0x884>)
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cfc:	6879      	ldr	r1, [r7, #4]
 8011cfe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011d00:	440b      	add	r3, r1
 8011d02:	1ad3      	subs	r3, r2, r3
 8011d04:	3301      	adds	r3, #1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f300 841b 	bgt.w	8012542 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d10:	4b7a      	ldr	r3, [pc, #488]	@ (8011efc <tcp_receive+0x884>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	f040 8298 	bne.w	801224a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011d1a:	4b79      	ldr	r3, [pc, #484]	@ (8011f00 <tcp_receive+0x888>)
 8011d1c:	891c      	ldrh	r4, [r3, #8]
 8011d1e:	4b78      	ldr	r3, [pc, #480]	@ (8011f00 <tcp_receive+0x888>)
 8011d20:	691b      	ldr	r3, [r3, #16]
 8011d22:	899b      	ldrh	r3, [r3, #12]
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fa ff18 	bl	800cb5c <lwip_htons>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	f003 0303 	and.w	r3, r3, #3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <tcp_receive+0x6c4>
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e000      	b.n	8011d3e <tcp_receive+0x6c6>
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	4423      	add	r3, r4
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	4b70      	ldr	r3, [pc, #448]	@ (8011f04 <tcp_receive+0x88c>)
 8011d44:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8011f04 <tcp_receive+0x88c>)
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d274      	bcs.n	8011e3c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d52:	4b6b      	ldr	r3, [pc, #428]	@ (8011f00 <tcp_receive+0x888>)
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	899b      	ldrh	r3, [r3, #12]
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fa fefe 	bl	800cb5c <lwip_htons>
 8011d60:	4603      	mov	r3, r0
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	f003 0301 	and.w	r3, r3, #1
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d01e      	beq.n	8011daa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011d6c:	4b64      	ldr	r3, [pc, #400]	@ (8011f00 <tcp_receive+0x888>)
 8011d6e:	691b      	ldr	r3, [r3, #16]
 8011d70:	899b      	ldrh	r3, [r3, #12]
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	b21b      	sxth	r3, r3
 8011d76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011d7a:	b21c      	sxth	r4, r3
 8011d7c:	4b60      	ldr	r3, [pc, #384]	@ (8011f00 <tcp_receive+0x888>)
 8011d7e:	691b      	ldr	r3, [r3, #16]
 8011d80:	899b      	ldrh	r3, [r3, #12]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fa fee9 	bl	800cb5c <lwip_htons>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011d92:	b29b      	uxth	r3, r3
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7fa fee1 	bl	800cb5c <lwip_htons>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	b21b      	sxth	r3, r3
 8011d9e:	4323      	orrs	r3, r4
 8011da0:	b21a      	sxth	r2, r3
 8011da2:	4b57      	ldr	r3, [pc, #348]	@ (8011f00 <tcp_receive+0x888>)
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	b292      	uxth	r2, r2
 8011da8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011dae:	4b54      	ldr	r3, [pc, #336]	@ (8011f00 <tcp_receive+0x888>)
 8011db0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011db2:	4b53      	ldr	r3, [pc, #332]	@ (8011f00 <tcp_receive+0x888>)
 8011db4:	691b      	ldr	r3, [r3, #16]
 8011db6:	899b      	ldrh	r3, [r3, #12]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fa fece 	bl	800cb5c <lwip_htons>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	f003 0302 	and.w	r3, r3, #2
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d005      	beq.n	8011dd8 <tcp_receive+0x760>
            inseg.len -= 1;
 8011dcc:	4b4c      	ldr	r3, [pc, #304]	@ (8011f00 <tcp_receive+0x888>)
 8011dce:	891b      	ldrh	r3, [r3, #8]
 8011dd0:	3b01      	subs	r3, #1
 8011dd2:	b29a      	uxth	r2, r3
 8011dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8011f00 <tcp_receive+0x888>)
 8011dd6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011dd8:	4b49      	ldr	r3, [pc, #292]	@ (8011f00 <tcp_receive+0x888>)
 8011dda:	685b      	ldr	r3, [r3, #4]
 8011ddc:	4a48      	ldr	r2, [pc, #288]	@ (8011f00 <tcp_receive+0x888>)
 8011dde:	8912      	ldrh	r2, [r2, #8]
 8011de0:	4611      	mov	r1, r2
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fc fa00 	bl	800e1e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011de8:	4b45      	ldr	r3, [pc, #276]	@ (8011f00 <tcp_receive+0x888>)
 8011dea:	891c      	ldrh	r4, [r3, #8]
 8011dec:	4b44      	ldr	r3, [pc, #272]	@ (8011f00 <tcp_receive+0x888>)
 8011dee:	691b      	ldr	r3, [r3, #16]
 8011df0:	899b      	ldrh	r3, [r3, #12]
 8011df2:	b29b      	uxth	r3, r3
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fa feb1 	bl	800cb5c <lwip_htons>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	f003 0303 	and.w	r3, r3, #3
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d001      	beq.n	8011e0a <tcp_receive+0x792>
 8011e06:	2301      	movs	r3, #1
 8011e08:	e000      	b.n	8011e0c <tcp_receive+0x794>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	4423      	add	r3, r4
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	4b3c      	ldr	r3, [pc, #240]	@ (8011f04 <tcp_receive+0x88c>)
 8011e12:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011e14:	4b3b      	ldr	r3, [pc, #236]	@ (8011f04 <tcp_receive+0x88c>)
 8011e16:	881b      	ldrh	r3, [r3, #0]
 8011e18:	461a      	mov	r2, r3
 8011e1a:	4b38      	ldr	r3, [pc, #224]	@ (8011efc <tcp_receive+0x884>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	441a      	add	r2, r3
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e24:	6879      	ldr	r1, [r7, #4]
 8011e26:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011e28:	440b      	add	r3, r1
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d006      	beq.n	8011e3c <tcp_receive+0x7c4>
 8011e2e:	4b36      	ldr	r3, [pc, #216]	@ (8011f08 <tcp_receive+0x890>)
 8011e30:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011e34:	4935      	ldr	r1, [pc, #212]	@ (8011f0c <tcp_receive+0x894>)
 8011e36:	4836      	ldr	r0, [pc, #216]	@ (8011f10 <tcp_receive+0x898>)
 8011e38:	f004 fdcc 	bl	80169d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 80e6 	beq.w	8012012 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011e46:	4b2e      	ldr	r3, [pc, #184]	@ (8011f00 <tcp_receive+0x888>)
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	899b      	ldrh	r3, [r3, #12]
 8011e4c:	b29b      	uxth	r3, r3
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7fa fe84 	bl	800cb5c <lwip_htons>
 8011e54:	4603      	mov	r3, r0
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0301 	and.w	r3, r3, #1
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d010      	beq.n	8011e82 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011e60:	e00a      	b.n	8011e78 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e66:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f7fd fd8d 	bl	800f992 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1f0      	bne.n	8011e62 <tcp_receive+0x7ea>
 8011e80:	e0c7      	b.n	8012012 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011e88:	e051      	b.n	8011f2e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e8c:	691b      	ldr	r3, [r3, #16]
 8011e8e:	899b      	ldrh	r3, [r3, #12]
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7fa fe62 	bl	800cb5c <lwip_htons>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	b2db      	uxtb	r3, r3
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d03c      	beq.n	8011f1e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011ea4:	4b16      	ldr	r3, [pc, #88]	@ (8011f00 <tcp_receive+0x888>)
 8011ea6:	691b      	ldr	r3, [r3, #16]
 8011ea8:	899b      	ldrh	r3, [r3, #12]
 8011eaa:	b29b      	uxth	r3, r3
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fa fe55 	bl	800cb5c <lwip_htons>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d12f      	bne.n	8011f1e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011ebe:	4b10      	ldr	r3, [pc, #64]	@ (8011f00 <tcp_receive+0x888>)
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	899b      	ldrh	r3, [r3, #12]
 8011ec4:	b29c      	uxth	r4, r3
 8011ec6:	2001      	movs	r0, #1
 8011ec8:	f7fa fe48 	bl	800cb5c <lwip_htons>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	461a      	mov	r2, r3
 8011ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8011f00 <tcp_receive+0x888>)
 8011ed2:	691b      	ldr	r3, [r3, #16]
 8011ed4:	4322      	orrs	r2, r4
 8011ed6:	b292      	uxth	r2, r2
 8011ed8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011eda:	4b09      	ldr	r3, [pc, #36]	@ (8011f00 <tcp_receive+0x888>)
 8011edc:	891c      	ldrh	r4, [r3, #8]
 8011ede:	4b08      	ldr	r3, [pc, #32]	@ (8011f00 <tcp_receive+0x888>)
 8011ee0:	691b      	ldr	r3, [r3, #16]
 8011ee2:	899b      	ldrh	r3, [r3, #12]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fa fe38 	bl	800cb5c <lwip_htons>
 8011eec:	4603      	mov	r3, r0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	f003 0303 	and.w	r3, r3, #3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d00d      	beq.n	8011f14 <tcp_receive+0x89c>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e00c      	b.n	8011f16 <tcp_receive+0x89e>
 8011efc:	20013c98 	.word	0x20013c98
 8011f00:	20013c74 	.word	0x20013c74
 8011f04:	20013ca2 	.word	0x20013ca2
 8011f08:	080193cc 	.word	0x080193cc
 8011f0c:	08019774 	.word	0x08019774
 8011f10:	08019418 	.word	0x08019418
 8011f14:	2300      	movs	r3, #0
 8011f16:	4423      	add	r3, r4
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	4b98      	ldr	r3, [pc, #608]	@ (801217c <tcp_receive+0xb04>)
 8011f1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f20:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011f28:	6938      	ldr	r0, [r7, #16]
 8011f2a:	f7fd fd32 	bl	800f992 <tcp_seg_free>
            while (next &&
 8011f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00e      	beq.n	8011f52 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011f34:	4b91      	ldr	r3, [pc, #580]	@ (801217c <tcp_receive+0xb04>)
 8011f36:	881b      	ldrh	r3, [r3, #0]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	4b91      	ldr	r3, [pc, #580]	@ (8012180 <tcp_receive+0xb08>)
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	441a      	add	r2, r3
 8011f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f42:	691b      	ldr	r3, [r3, #16]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011f48:	8909      	ldrh	r1, [r1, #8]
 8011f4a:	440b      	add	r3, r1
 8011f4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	da9b      	bge.n	8011e8a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d059      	beq.n	801200c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011f58:	4b88      	ldr	r3, [pc, #544]	@ (801217c <tcp_receive+0xb04>)
 8011f5a:	881b      	ldrh	r3, [r3, #0]
 8011f5c:	461a      	mov	r2, r3
 8011f5e:	4b88      	ldr	r3, [pc, #544]	@ (8012180 <tcp_receive+0xb08>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	441a      	add	r2, r3
 8011f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f66:	691b      	ldr	r3, [r3, #16]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	dd4d      	ble.n	801200c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f72:	691b      	ldr	r3, [r3, #16]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	4b81      	ldr	r3, [pc, #516]	@ (8012180 <tcp_receive+0xb08>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	b29a      	uxth	r2, r3
 8011f82:	4b80      	ldr	r3, [pc, #512]	@ (8012184 <tcp_receive+0xb0c>)
 8011f84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011f86:	4b7f      	ldr	r3, [pc, #508]	@ (8012184 <tcp_receive+0xb0c>)
 8011f88:	691b      	ldr	r3, [r3, #16]
 8011f8a:	899b      	ldrh	r3, [r3, #12]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7fa fde4 	bl	800cb5c <lwip_htons>
 8011f94:	4603      	mov	r3, r0
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	f003 0302 	and.w	r3, r3, #2
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d005      	beq.n	8011fac <tcp_receive+0x934>
                inseg.len -= 1;
 8011fa0:	4b78      	ldr	r3, [pc, #480]	@ (8012184 <tcp_receive+0xb0c>)
 8011fa2:	891b      	ldrh	r3, [r3, #8]
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	4b76      	ldr	r3, [pc, #472]	@ (8012184 <tcp_receive+0xb0c>)
 8011faa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011fac:	4b75      	ldr	r3, [pc, #468]	@ (8012184 <tcp_receive+0xb0c>)
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	4a74      	ldr	r2, [pc, #464]	@ (8012184 <tcp_receive+0xb0c>)
 8011fb2:	8912      	ldrh	r2, [r2, #8]
 8011fb4:	4611      	mov	r1, r2
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7fc f916 	bl	800e1e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011fbc:	4b71      	ldr	r3, [pc, #452]	@ (8012184 <tcp_receive+0xb0c>)
 8011fbe:	891c      	ldrh	r4, [r3, #8]
 8011fc0:	4b70      	ldr	r3, [pc, #448]	@ (8012184 <tcp_receive+0xb0c>)
 8011fc2:	691b      	ldr	r3, [r3, #16]
 8011fc4:	899b      	ldrh	r3, [r3, #12]
 8011fc6:	b29b      	uxth	r3, r3
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7fa fdc7 	bl	800cb5c <lwip_htons>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	f003 0303 	and.w	r3, r3, #3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d001      	beq.n	8011fde <tcp_receive+0x966>
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e000      	b.n	8011fe0 <tcp_receive+0x968>
 8011fde:	2300      	movs	r3, #0
 8011fe0:	4423      	add	r3, r4
 8011fe2:	b29a      	uxth	r2, r3
 8011fe4:	4b65      	ldr	r3, [pc, #404]	@ (801217c <tcp_receive+0xb04>)
 8011fe6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011fe8:	4b64      	ldr	r3, [pc, #400]	@ (801217c <tcp_receive+0xb04>)
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	4b64      	ldr	r3, [pc, #400]	@ (8012180 <tcp_receive+0xb08>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	441a      	add	r2, r3
 8011ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ff6:	691b      	ldr	r3, [r3, #16]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d006      	beq.n	801200c <tcp_receive+0x994>
 8011ffe:	4b62      	ldr	r3, [pc, #392]	@ (8012188 <tcp_receive+0xb10>)
 8012000:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8012004:	4961      	ldr	r1, [pc, #388]	@ (801218c <tcp_receive+0xb14>)
 8012006:	4862      	ldr	r0, [pc, #392]	@ (8012190 <tcp_receive+0xb18>)
 8012008:	f004 fce4 	bl	80169d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012010:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012012:	4b5a      	ldr	r3, [pc, #360]	@ (801217c <tcp_receive+0xb04>)
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	4b59      	ldr	r3, [pc, #356]	@ (8012180 <tcp_receive+0xb08>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	441a      	add	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012026:	4b55      	ldr	r3, [pc, #340]	@ (801217c <tcp_receive+0xb04>)
 8012028:	881b      	ldrh	r3, [r3, #0]
 801202a:	429a      	cmp	r2, r3
 801202c:	d206      	bcs.n	801203c <tcp_receive+0x9c4>
 801202e:	4b56      	ldr	r3, [pc, #344]	@ (8012188 <tcp_receive+0xb10>)
 8012030:	f240 6207 	movw	r2, #1543	@ 0x607
 8012034:	4957      	ldr	r1, [pc, #348]	@ (8012194 <tcp_receive+0xb1c>)
 8012036:	4856      	ldr	r0, [pc, #344]	@ (8012190 <tcp_receive+0xb18>)
 8012038:	f004 fccc 	bl	80169d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012040:	4b4e      	ldr	r3, [pc, #312]	@ (801217c <tcp_receive+0xb04>)
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	1ad3      	subs	r3, r2, r3
 8012046:	b29a      	uxth	r2, r3
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7fc ffbf 	bl	800efd0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012052:	4b4c      	ldr	r3, [pc, #304]	@ (8012184 <tcp_receive+0xb0c>)
 8012054:	685b      	ldr	r3, [r3, #4]
 8012056:	891b      	ldrh	r3, [r3, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d006      	beq.n	801206a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801205c:	4b49      	ldr	r3, [pc, #292]	@ (8012184 <tcp_receive+0xb0c>)
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	4a4d      	ldr	r2, [pc, #308]	@ (8012198 <tcp_receive+0xb20>)
 8012062:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012064:	4b47      	ldr	r3, [pc, #284]	@ (8012184 <tcp_receive+0xb0c>)
 8012066:	2200      	movs	r2, #0
 8012068:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801206a:	4b46      	ldr	r3, [pc, #280]	@ (8012184 <tcp_receive+0xb0c>)
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	899b      	ldrh	r3, [r3, #12]
 8012070:	b29b      	uxth	r3, r3
 8012072:	4618      	mov	r0, r3
 8012074:	f7fa fd72 	bl	800cb5c <lwip_htons>
 8012078:	4603      	mov	r3, r0
 801207a:	b2db      	uxtb	r3, r3
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	2b00      	cmp	r3, #0
 8012082:	f000 80b8 	beq.w	80121f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012086:	4b45      	ldr	r3, [pc, #276]	@ (801219c <tcp_receive+0xb24>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	f043 0320 	orr.w	r3, r3, #32
 801208e:	b2da      	uxtb	r2, r3
 8012090:	4b42      	ldr	r3, [pc, #264]	@ (801219c <tcp_receive+0xb24>)
 8012092:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012094:	e0af      	b.n	80121f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801209a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120a0:	691b      	ldr	r3, [r3, #16]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	4a36      	ldr	r2, [pc, #216]	@ (8012180 <tcp_receive+0xb08>)
 80120a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	891b      	ldrh	r3, [r3, #8]
 80120ac:	461c      	mov	r4, r3
 80120ae:	68bb      	ldr	r3, [r7, #8]
 80120b0:	691b      	ldr	r3, [r3, #16]
 80120b2:	899b      	ldrh	r3, [r3, #12]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7fa fd50 	bl	800cb5c <lwip_htons>
 80120bc:	4603      	mov	r3, r0
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	f003 0303 	and.w	r3, r3, #3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <tcp_receive+0xa54>
 80120c8:	2301      	movs	r3, #1
 80120ca:	e000      	b.n	80120ce <tcp_receive+0xa56>
 80120cc:	2300      	movs	r3, #0
 80120ce:	191a      	adds	r2, r3, r4
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120d4:	441a      	add	r2, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80120de:	461c      	mov	r4, r3
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	891b      	ldrh	r3, [r3, #8]
 80120e4:	461d      	mov	r5, r3
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	691b      	ldr	r3, [r3, #16]
 80120ea:	899b      	ldrh	r3, [r3, #12]
 80120ec:	b29b      	uxth	r3, r3
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fa fd34 	bl	800cb5c <lwip_htons>
 80120f4:	4603      	mov	r3, r0
 80120f6:	b2db      	uxtb	r3, r3
 80120f8:	f003 0303 	and.w	r3, r3, #3
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d001      	beq.n	8012104 <tcp_receive+0xa8c>
 8012100:	2301      	movs	r3, #1
 8012102:	e000      	b.n	8012106 <tcp_receive+0xa8e>
 8012104:	2300      	movs	r3, #0
 8012106:	442b      	add	r3, r5
 8012108:	429c      	cmp	r4, r3
 801210a:	d206      	bcs.n	801211a <tcp_receive+0xaa2>
 801210c:	4b1e      	ldr	r3, [pc, #120]	@ (8012188 <tcp_receive+0xb10>)
 801210e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8012112:	4923      	ldr	r1, [pc, #140]	@ (80121a0 <tcp_receive+0xb28>)
 8012114:	481e      	ldr	r0, [pc, #120]	@ (8012190 <tcp_receive+0xb18>)
 8012116:	f004 fc5d 	bl	80169d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	891b      	ldrh	r3, [r3, #8]
 801211e:	461c      	mov	r4, r3
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	691b      	ldr	r3, [r3, #16]
 8012124:	899b      	ldrh	r3, [r3, #12]
 8012126:	b29b      	uxth	r3, r3
 8012128:	4618      	mov	r0, r3
 801212a:	f7fa fd17 	bl	800cb5c <lwip_htons>
 801212e:	4603      	mov	r3, r0
 8012130:	b2db      	uxtb	r3, r3
 8012132:	f003 0303 	and.w	r3, r3, #3
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <tcp_receive+0xac6>
 801213a:	2301      	movs	r3, #1
 801213c:	e000      	b.n	8012140 <tcp_receive+0xac8>
 801213e:	2300      	movs	r3, #0
 8012140:	1919      	adds	r1, r3, r4
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012146:	b28b      	uxth	r3, r1
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	b29a      	uxth	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f7fc ff3d 	bl	800efd0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	891b      	ldrh	r3, [r3, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d028      	beq.n	80121b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012160:	4b0d      	ldr	r3, [pc, #52]	@ (8012198 <tcp_receive+0xb20>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d01d      	beq.n	80121a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012168:	4b0b      	ldr	r3, [pc, #44]	@ (8012198 <tcp_receive+0xb20>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	4619      	mov	r1, r3
 8012172:	4610      	mov	r0, r2
 8012174:	f7fc fa8c 	bl	800e690 <pbuf_cat>
 8012178:	e018      	b.n	80121ac <tcp_receive+0xb34>
 801217a:	bf00      	nop
 801217c:	20013ca2 	.word	0x20013ca2
 8012180:	20013c98 	.word	0x20013c98
 8012184:	20013c74 	.word	0x20013c74
 8012188:	080193cc 	.word	0x080193cc
 801218c:	080197ac 	.word	0x080197ac
 8012190:	08019418 	.word	0x08019418
 8012194:	080197e8 	.word	0x080197e8
 8012198:	20013ca8 	.word	0x20013ca8
 801219c:	20013ca5 	.word	0x20013ca5
 80121a0:	08019808 	.word	0x08019808
            } else {
              recv_data = cseg->p;
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	685b      	ldr	r3, [r3, #4]
 80121a8:	4a70      	ldr	r2, [pc, #448]	@ (801236c <tcp_receive+0xcf4>)
 80121aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2200      	movs	r2, #0
 80121b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	691b      	ldr	r3, [r3, #16]
 80121b6:	899b      	ldrh	r3, [r3, #12]
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fa fcce 	bl	800cb5c <lwip_htons>
 80121c0:	4603      	mov	r3, r0
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	f003 0301 	and.w	r3, r3, #1
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d00d      	beq.n	80121e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80121cc:	4b68      	ldr	r3, [pc, #416]	@ (8012370 <tcp_receive+0xcf8>)
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	f043 0320 	orr.w	r3, r3, #32
 80121d4:	b2da      	uxtb	r2, r3
 80121d6:	4b66      	ldr	r3, [pc, #408]	@ (8012370 <tcp_receive+0xcf8>)
 80121d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	7d1b      	ldrb	r3, [r3, #20]
 80121de:	2b04      	cmp	r3, #4
 80121e0:	d102      	bne.n	80121e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2207      	movs	r2, #7
 80121e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80121f0:	68b8      	ldr	r0, [r7, #8]
 80121f2:	f7fd fbce 	bl	800f992 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d008      	beq.n	8012210 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	685a      	ldr	r2, [r3, #4]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801220a:	429a      	cmp	r2, r3
 801220c:	f43f af43 	beq.w	8012096 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	8b5b      	ldrh	r3, [r3, #26]
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00e      	beq.n	801223a <tcp_receive+0xbc2>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8b5b      	ldrh	r3, [r3, #26]
 8012220:	f023 0301 	bic.w	r3, r3, #1
 8012224:	b29a      	uxth	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	835a      	strh	r2, [r3, #26]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8b5b      	ldrh	r3, [r3, #26]
 801222e:	f043 0302 	orr.w	r3, r3, #2
 8012232:	b29a      	uxth	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012238:	e187      	b.n	801254a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	8b5b      	ldrh	r3, [r3, #26]
 801223e:	f043 0301 	orr.w	r3, r3, #1
 8012242:	b29a      	uxth	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012248:	e17f      	b.n	801254a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801224e:	2b00      	cmp	r3, #0
 8012250:	d106      	bne.n	8012260 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012252:	4848      	ldr	r0, [pc, #288]	@ (8012374 <tcp_receive+0xcfc>)
 8012254:	f7fd fbb6 	bl	800f9c4 <tcp_seg_copy>
 8012258:	4602      	mov	r2, r0
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	675a      	str	r2, [r3, #116]	@ 0x74
 801225e:	e16c      	b.n	801253a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012260:	2300      	movs	r3, #0
 8012262:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012268:	63bb      	str	r3, [r7, #56]	@ 0x38
 801226a:	e156      	b.n	801251a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801226e:	691b      	ldr	r3, [r3, #16]
 8012270:	685a      	ldr	r2, [r3, #4]
 8012272:	4b41      	ldr	r3, [pc, #260]	@ (8012378 <tcp_receive+0xd00>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	429a      	cmp	r2, r3
 8012278:	d11d      	bne.n	80122b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801227a:	4b3e      	ldr	r3, [pc, #248]	@ (8012374 <tcp_receive+0xcfc>)
 801227c:	891a      	ldrh	r2, [r3, #8]
 801227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012280:	891b      	ldrh	r3, [r3, #8]
 8012282:	429a      	cmp	r2, r3
 8012284:	f240 814e 	bls.w	8012524 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012288:	483a      	ldr	r0, [pc, #232]	@ (8012374 <tcp_receive+0xcfc>)
 801228a:	f7fd fb9b 	bl	800f9c4 <tcp_seg_copy>
 801228e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 8148 	beq.w	8012528 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8012298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801229a:	2b00      	cmp	r3, #0
 801229c:	d003      	beq.n	80122a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801229e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122a0:	697a      	ldr	r2, [r7, #20]
 80122a2:	601a      	str	r2, [r3, #0]
 80122a4:	e002      	b.n	80122ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	697a      	ldr	r2, [r7, #20]
 80122aa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80122ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80122ae:	6978      	ldr	r0, [r7, #20]
 80122b0:	f7ff f8de 	bl	8011470 <tcp_oos_insert_segment>
                }
                break;
 80122b4:	e138      	b.n	8012528 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80122b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d117      	bne.n	80122ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80122bc:	4b2e      	ldr	r3, [pc, #184]	@ (8012378 <tcp_receive+0xd00>)
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	1ad3      	subs	r3, r2, r3
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	da57      	bge.n	801237c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80122cc:	4829      	ldr	r0, [pc, #164]	@ (8012374 <tcp_receive+0xcfc>)
 80122ce:	f7fd fb79 	bl	800f9c4 <tcp_seg_copy>
 80122d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	f000 8128 	beq.w	801252c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	69ba      	ldr	r2, [r7, #24]
 80122e0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80122e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80122e4:	69b8      	ldr	r0, [r7, #24]
 80122e6:	f7ff f8c3 	bl	8011470 <tcp_oos_insert_segment>
                  }
                  break;
 80122ea:	e11f      	b.n	801252c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80122ec:	4b22      	ldr	r3, [pc, #136]	@ (8012378 <tcp_receive+0xd00>)
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122f2:	691b      	ldr	r3, [r3, #16]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	3b01      	subs	r3, #1
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	db3e      	blt.n	801237c <tcp_receive+0xd04>
 80122fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012378 <tcp_receive+0xd00>)
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012304:	691b      	ldr	r3, [r3, #16]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	1ad3      	subs	r3, r2, r3
 801230a:	3301      	adds	r3, #1
 801230c:	2b00      	cmp	r3, #0
 801230e:	dc35      	bgt.n	801237c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012310:	4818      	ldr	r0, [pc, #96]	@ (8012374 <tcp_receive+0xcfc>)
 8012312:	f7fd fb57 	bl	800f9c4 <tcp_seg_copy>
 8012316:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	2b00      	cmp	r3, #0
 801231c:	f000 8108 	beq.w	8012530 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012322:	691b      	ldr	r3, [r3, #16]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012328:	8912      	ldrh	r2, [r2, #8]
 801232a:	441a      	add	r2, r3
 801232c:	4b12      	ldr	r3, [pc, #72]	@ (8012378 <tcp_receive+0xd00>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	2b00      	cmp	r3, #0
 8012334:	dd12      	ble.n	801235c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012336:	4b10      	ldr	r3, [pc, #64]	@ (8012378 <tcp_receive+0xd00>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	b29a      	uxth	r2, r3
 801233c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	b29b      	uxth	r3, r3
 8012344:	1ad3      	subs	r3, r2, r3
 8012346:	b29a      	uxth	r2, r3
 8012348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801234a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801234c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801234e:	685a      	ldr	r2, [r3, #4]
 8012350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012352:	891b      	ldrh	r3, [r3, #8]
 8012354:	4619      	mov	r1, r3
 8012356:	4610      	mov	r0, r2
 8012358:	f7fb ff46 	bl	800e1e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801235c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801235e:	69fa      	ldr	r2, [r7, #28]
 8012360:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012362:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012364:	69f8      	ldr	r0, [r7, #28]
 8012366:	f7ff f883 	bl	8011470 <tcp_oos_insert_segment>
                  }
                  break;
 801236a:	e0e1      	b.n	8012530 <tcp_receive+0xeb8>
 801236c:	20013ca8 	.word	0x20013ca8
 8012370:	20013ca5 	.word	0x20013ca5
 8012374:	20013c74 	.word	0x20013c74
 8012378:	20013c98 	.word	0x20013c98
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801237e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	f040 80c5 	bne.w	8012514 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801238a:	4b7f      	ldr	r3, [pc, #508]	@ (8012588 <tcp_receive+0xf10>)
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012396:	2b00      	cmp	r3, #0
 8012398:	f340 80bc 	ble.w	8012514 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801239c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801239e:	691b      	ldr	r3, [r3, #16]
 80123a0:	899b      	ldrh	r3, [r3, #12]
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fa fbd9 	bl	800cb5c <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	f003 0301 	and.w	r3, r3, #1
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	f040 80be 	bne.w	8012534 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80123b8:	4874      	ldr	r0, [pc, #464]	@ (801258c <tcp_receive+0xf14>)
 80123ba:	f7fd fb03 	bl	800f9c4 <tcp_seg_copy>
 80123be:	4602      	mov	r2, r0
 80123c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80123c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 80b5 	beq.w	8012538 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80123ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123d0:	691b      	ldr	r3, [r3, #16]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123d6:	8912      	ldrh	r2, [r2, #8]
 80123d8:	441a      	add	r2, r3
 80123da:	4b6b      	ldr	r3, [pc, #428]	@ (8012588 <tcp_receive+0xf10>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	1ad3      	subs	r3, r2, r3
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dd12      	ble.n	801240a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80123e4:	4b68      	ldr	r3, [pc, #416]	@ (8012588 <tcp_receive+0xf10>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	1ad3      	subs	r3, r2, r3
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80123fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fc:	685a      	ldr	r2, [r3, #4]
 80123fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012400:	891b      	ldrh	r3, [r3, #8]
 8012402:	4619      	mov	r1, r3
 8012404:	4610      	mov	r0, r2
 8012406:	f7fb feef 	bl	800e1e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801240a:	4b61      	ldr	r3, [pc, #388]	@ (8012590 <tcp_receive+0xf18>)
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	461a      	mov	r2, r3
 8012410:	4b5d      	ldr	r3, [pc, #372]	@ (8012588 <tcp_receive+0xf10>)
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	441a      	add	r2, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801241a:	6879      	ldr	r1, [r7, #4]
 801241c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801241e:	440b      	add	r3, r1
 8012420:	1ad3      	subs	r3, r2, r3
 8012422:	2b00      	cmp	r3, #0
 8012424:	f340 8088 	ble.w	8012538 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	691b      	ldr	r3, [r3, #16]
 801242e:	899b      	ldrh	r3, [r3, #12]
 8012430:	b29b      	uxth	r3, r3
 8012432:	4618      	mov	r0, r3
 8012434:	f7fa fb92 	bl	800cb5c <lwip_htons>
 8012438:	4603      	mov	r3, r0
 801243a:	b2db      	uxtb	r3, r3
 801243c:	f003 0301 	and.w	r3, r3, #1
 8012440:	2b00      	cmp	r3, #0
 8012442:	d021      	beq.n	8012488 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	691b      	ldr	r3, [r3, #16]
 801244a:	899b      	ldrh	r3, [r3, #12]
 801244c:	b29b      	uxth	r3, r3
 801244e:	b21b      	sxth	r3, r3
 8012450:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012454:	b21c      	sxth	r4, r3
 8012456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	691b      	ldr	r3, [r3, #16]
 801245c:	899b      	ldrh	r3, [r3, #12]
 801245e:	b29b      	uxth	r3, r3
 8012460:	4618      	mov	r0, r3
 8012462:	f7fa fb7b 	bl	800cb5c <lwip_htons>
 8012466:	4603      	mov	r3, r0
 8012468:	b2db      	uxtb	r3, r3
 801246a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801246e:	b29b      	uxth	r3, r3
 8012470:	4618      	mov	r0, r3
 8012472:	f7fa fb73 	bl	800cb5c <lwip_htons>
 8012476:	4603      	mov	r3, r0
 8012478:	b21b      	sxth	r3, r3
 801247a:	4323      	orrs	r3, r4
 801247c:	b21a      	sxth	r2, r3
 801247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	b292      	uxth	r2, r2
 8012486:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801248c:	b29a      	uxth	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012492:	4413      	add	r3, r2
 8012494:	b299      	uxth	r1, r3
 8012496:	4b3c      	ldr	r3, [pc, #240]	@ (8012588 <tcp_receive+0xf10>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	b29a      	uxth	r2, r3
 801249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	1a8a      	subs	r2, r1, r2
 80124a2:	b292      	uxth	r2, r2
 80124a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80124a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	685a      	ldr	r2, [r3, #4]
 80124ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	891b      	ldrh	r3, [r3, #8]
 80124b2:	4619      	mov	r1, r3
 80124b4:	4610      	mov	r0, r2
 80124b6:	f7fb fe97 	bl	800e1e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80124ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	891c      	ldrh	r4, [r3, #8]
 80124c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	899b      	ldrh	r3, [r3, #12]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fa fb46 	bl	800cb5c <lwip_htons>
 80124d0:	4603      	mov	r3, r0
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	f003 0303 	and.w	r3, r3, #3
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d001      	beq.n	80124e0 <tcp_receive+0xe68>
 80124dc:	2301      	movs	r3, #1
 80124de:	e000      	b.n	80124e2 <tcp_receive+0xe6a>
 80124e0:	2300      	movs	r3, #0
 80124e2:	4423      	add	r3, r4
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	4b2a      	ldr	r3, [pc, #168]	@ (8012590 <tcp_receive+0xf18>)
 80124e8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80124ea:	4b29      	ldr	r3, [pc, #164]	@ (8012590 <tcp_receive+0xf18>)
 80124ec:	881b      	ldrh	r3, [r3, #0]
 80124ee:	461a      	mov	r2, r3
 80124f0:	4b25      	ldr	r3, [pc, #148]	@ (8012588 <tcp_receive+0xf10>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	441a      	add	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80124fe:	440b      	add	r3, r1
 8012500:	429a      	cmp	r2, r3
 8012502:	d019      	beq.n	8012538 <tcp_receive+0xec0>
 8012504:	4b23      	ldr	r3, [pc, #140]	@ (8012594 <tcp_receive+0xf1c>)
 8012506:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801250a:	4923      	ldr	r1, [pc, #140]	@ (8012598 <tcp_receive+0xf20>)
 801250c:	4823      	ldr	r0, [pc, #140]	@ (801259c <tcp_receive+0xf24>)
 801250e:	f004 fa61 	bl	80169d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012512:	e011      	b.n	8012538 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	63bb      	str	r3, [r7, #56]	@ 0x38
 801251a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801251c:	2b00      	cmp	r3, #0
 801251e:	f47f aea5 	bne.w	801226c <tcp_receive+0xbf4>
 8012522:	e00a      	b.n	801253a <tcp_receive+0xec2>
                break;
 8012524:	bf00      	nop
 8012526:	e008      	b.n	801253a <tcp_receive+0xec2>
                break;
 8012528:	bf00      	nop
 801252a:	e006      	b.n	801253a <tcp_receive+0xec2>
                  break;
 801252c:	bf00      	nop
 801252e:	e004      	b.n	801253a <tcp_receive+0xec2>
                  break;
 8012530:	bf00      	nop
 8012532:	e002      	b.n	801253a <tcp_receive+0xec2>
                  break;
 8012534:	bf00      	nop
 8012536:	e000      	b.n	801253a <tcp_receive+0xec2>
                break;
 8012538:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801253a:	6878      	ldr	r0, [r7, #4]
 801253c:	f001 fa44 	bl	80139c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012540:	e003      	b.n	801254a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f001 fa40 	bl	80139c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012548:	e01a      	b.n	8012580 <tcp_receive+0xf08>
 801254a:	e019      	b.n	8012580 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801254c:	4b0e      	ldr	r3, [pc, #56]	@ (8012588 <tcp_receive+0xf10>)
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	2b00      	cmp	r3, #0
 8012558:	db0a      	blt.n	8012570 <tcp_receive+0xef8>
 801255a:	4b0b      	ldr	r3, [pc, #44]	@ (8012588 <tcp_receive+0xf10>)
 801255c:	681a      	ldr	r2, [r3, #0]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012562:	6879      	ldr	r1, [r7, #4]
 8012564:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012566:	440b      	add	r3, r1
 8012568:	1ad3      	subs	r3, r2, r3
 801256a:	3301      	adds	r3, #1
 801256c:	2b00      	cmp	r3, #0
 801256e:	dd07      	ble.n	8012580 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	8b5b      	ldrh	r3, [r3, #26]
 8012574:	f043 0302 	orr.w	r3, r3, #2
 8012578:	b29a      	uxth	r2, r3
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801257e:	e7ff      	b.n	8012580 <tcp_receive+0xf08>
 8012580:	bf00      	nop
 8012582:	3750      	adds	r7, #80	@ 0x50
 8012584:	46bd      	mov	sp, r7
 8012586:	bdb0      	pop	{r4, r5, r7, pc}
 8012588:	20013c98 	.word	0x20013c98
 801258c:	20013c74 	.word	0x20013c74
 8012590:	20013ca2 	.word	0x20013ca2
 8012594:	080193cc 	.word	0x080193cc
 8012598:	08019774 	.word	0x08019774
 801259c:	08019418 	.word	0x08019418

080125a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b083      	sub	sp, #12
 80125a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80125a6:	4b15      	ldr	r3, [pc, #84]	@ (80125fc <tcp_get_next_optbyte+0x5c>)
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	1c5a      	adds	r2, r3, #1
 80125ac:	b291      	uxth	r1, r2
 80125ae:	4a13      	ldr	r2, [pc, #76]	@ (80125fc <tcp_get_next_optbyte+0x5c>)
 80125b0:	8011      	strh	r1, [r2, #0]
 80125b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80125b4:	4b12      	ldr	r3, [pc, #72]	@ (8012600 <tcp_get_next_optbyte+0x60>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d004      	beq.n	80125c6 <tcp_get_next_optbyte+0x26>
 80125bc:	4b11      	ldr	r3, [pc, #68]	@ (8012604 <tcp_get_next_optbyte+0x64>)
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	88fa      	ldrh	r2, [r7, #6]
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d208      	bcs.n	80125d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80125c6:	4b10      	ldr	r3, [pc, #64]	@ (8012608 <tcp_get_next_optbyte+0x68>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	3314      	adds	r3, #20
 80125cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80125ce:	88fb      	ldrh	r3, [r7, #6]
 80125d0:	683a      	ldr	r2, [r7, #0]
 80125d2:	4413      	add	r3, r2
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	e00b      	b.n	80125f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80125d8:	88fb      	ldrh	r3, [r7, #6]
 80125da:	b2da      	uxtb	r2, r3
 80125dc:	4b09      	ldr	r3, [pc, #36]	@ (8012604 <tcp_get_next_optbyte+0x64>)
 80125de:	881b      	ldrh	r3, [r3, #0]
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	1ad3      	subs	r3, r2, r3
 80125e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80125e6:	4b06      	ldr	r3, [pc, #24]	@ (8012600 <tcp_get_next_optbyte+0x60>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	797b      	ldrb	r3, [r7, #5]
 80125ec:	4413      	add	r3, r2
 80125ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr
 80125fc:	20013c94 	.word	0x20013c94
 8012600:	20013c90 	.word	0x20013c90
 8012604:	20013c8e 	.word	0x20013c8e
 8012608:	20013c88 	.word	0x20013c88

0801260c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_parseopt+0x1c>
 801261a:	4b32      	ldr	r3, [pc, #200]	@ (80126e4 <tcp_parseopt+0xd8>)
 801261c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012620:	4931      	ldr	r1, [pc, #196]	@ (80126e8 <tcp_parseopt+0xdc>)
 8012622:	4832      	ldr	r0, [pc, #200]	@ (80126ec <tcp_parseopt+0xe0>)
 8012624:	f004 f9d6 	bl	80169d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012628:	4b31      	ldr	r3, [pc, #196]	@ (80126f0 <tcp_parseopt+0xe4>)
 801262a:	881b      	ldrh	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d056      	beq.n	80126de <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012630:	4b30      	ldr	r3, [pc, #192]	@ (80126f4 <tcp_parseopt+0xe8>)
 8012632:	2200      	movs	r2, #0
 8012634:	801a      	strh	r2, [r3, #0]
 8012636:	e046      	b.n	80126c6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012638:	f7ff ffb2 	bl	80125a0 <tcp_get_next_optbyte>
 801263c:	4603      	mov	r3, r0
 801263e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012640:	7bfb      	ldrb	r3, [r7, #15]
 8012642:	2b02      	cmp	r3, #2
 8012644:	d006      	beq.n	8012654 <tcp_parseopt+0x48>
 8012646:	2b02      	cmp	r3, #2
 8012648:	dc2a      	bgt.n	80126a0 <tcp_parseopt+0x94>
 801264a:	2b00      	cmp	r3, #0
 801264c:	d042      	beq.n	80126d4 <tcp_parseopt+0xc8>
 801264e:	2b01      	cmp	r3, #1
 8012650:	d038      	beq.n	80126c4 <tcp_parseopt+0xb8>
 8012652:	e025      	b.n	80126a0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012654:	f7ff ffa4 	bl	80125a0 <tcp_get_next_optbyte>
 8012658:	4603      	mov	r3, r0
 801265a:	2b04      	cmp	r3, #4
 801265c:	d13c      	bne.n	80126d8 <tcp_parseopt+0xcc>
 801265e:	4b25      	ldr	r3, [pc, #148]	@ (80126f4 <tcp_parseopt+0xe8>)
 8012660:	881b      	ldrh	r3, [r3, #0]
 8012662:	3301      	adds	r3, #1
 8012664:	4a22      	ldr	r2, [pc, #136]	@ (80126f0 <tcp_parseopt+0xe4>)
 8012666:	8812      	ldrh	r2, [r2, #0]
 8012668:	4293      	cmp	r3, r2
 801266a:	da35      	bge.n	80126d8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801266c:	f7ff ff98 	bl	80125a0 <tcp_get_next_optbyte>
 8012670:	4603      	mov	r3, r0
 8012672:	021b      	lsls	r3, r3, #8
 8012674:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012676:	f7ff ff93 	bl	80125a0 <tcp_get_next_optbyte>
 801267a:	4603      	mov	r3, r0
 801267c:	461a      	mov	r2, r3
 801267e:	89bb      	ldrh	r3, [r7, #12]
 8012680:	4313      	orrs	r3, r2
 8012682:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012684:	89bb      	ldrh	r3, [r7, #12]
 8012686:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801268a:	d804      	bhi.n	8012696 <tcp_parseopt+0x8a>
 801268c:	89bb      	ldrh	r3, [r7, #12]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d001      	beq.n	8012696 <tcp_parseopt+0x8a>
 8012692:	89ba      	ldrh	r2, [r7, #12]
 8012694:	e001      	b.n	801269a <tcp_parseopt+0x8e>
 8012696:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801269e:	e012      	b.n	80126c6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80126a0:	f7ff ff7e 	bl	80125a0 <tcp_get_next_optbyte>
 80126a4:	4603      	mov	r3, r0
 80126a6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80126a8:	7afb      	ldrb	r3, [r7, #11]
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d916      	bls.n	80126dc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80126ae:	7afb      	ldrb	r3, [r7, #11]
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	4b10      	ldr	r3, [pc, #64]	@ (80126f4 <tcp_parseopt+0xe8>)
 80126b4:	881b      	ldrh	r3, [r3, #0]
 80126b6:	4413      	add	r3, r2
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	3b02      	subs	r3, #2
 80126bc:	b29a      	uxth	r2, r3
 80126be:	4b0d      	ldr	r3, [pc, #52]	@ (80126f4 <tcp_parseopt+0xe8>)
 80126c0:	801a      	strh	r2, [r3, #0]
 80126c2:	e000      	b.n	80126c6 <tcp_parseopt+0xba>
          break;
 80126c4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80126c6:	4b0b      	ldr	r3, [pc, #44]	@ (80126f4 <tcp_parseopt+0xe8>)
 80126c8:	881a      	ldrh	r2, [r3, #0]
 80126ca:	4b09      	ldr	r3, [pc, #36]	@ (80126f0 <tcp_parseopt+0xe4>)
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d3b2      	bcc.n	8012638 <tcp_parseopt+0x2c>
 80126d2:	e004      	b.n	80126de <tcp_parseopt+0xd2>
          return;
 80126d4:	bf00      	nop
 80126d6:	e002      	b.n	80126de <tcp_parseopt+0xd2>
            return;
 80126d8:	bf00      	nop
 80126da:	e000      	b.n	80126de <tcp_parseopt+0xd2>
            return;
 80126dc:	bf00      	nop
      }
    }
  }
}
 80126de:	3710      	adds	r7, #16
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	080193cc 	.word	0x080193cc
 80126e8:	08019830 	.word	0x08019830
 80126ec:	08019418 	.word	0x08019418
 80126f0:	20013c8c 	.word	0x20013c8c
 80126f4:	20013c94 	.word	0x20013c94

080126f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80126f8:	b480      	push	{r7}
 80126fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80126fc:	4b05      	ldr	r3, [pc, #20]	@ (8012714 <tcp_trigger_input_pcb_close+0x1c>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	f043 0310 	orr.w	r3, r3, #16
 8012704:	b2da      	uxtb	r2, r3
 8012706:	4b03      	ldr	r3, [pc, #12]	@ (8012714 <tcp_trigger_input_pcb_close+0x1c>)
 8012708:	701a      	strb	r2, [r3, #0]
}
 801270a:	bf00      	nop
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	20013ca5 	.word	0x20013ca5

08012718 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d00a      	beq.n	8012740 <tcp_route+0x28>
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	7a1b      	ldrb	r3, [r3, #8]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d006      	beq.n	8012740 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	7a1b      	ldrb	r3, [r3, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7fb fb4e 	bl	800ddd8 <netif_get_by_index>
 801273c:	4603      	mov	r3, r0
 801273e:	e003      	b.n	8012748 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f002 f86d 	bl	8014820 <ip4_route>
 8012746:	4603      	mov	r3, r0
  }
}
 8012748:	4618      	mov	r0, r3
 801274a:	3710      	adds	r7, #16
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012750:	b590      	push	{r4, r7, lr}
 8012752:	b087      	sub	sp, #28
 8012754:	af00      	add	r7, sp, #0
 8012756:	60f8      	str	r0, [r7, #12]
 8012758:	60b9      	str	r1, [r7, #8]
 801275a:	603b      	str	r3, [r7, #0]
 801275c:	4613      	mov	r3, r2
 801275e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d105      	bne.n	8012772 <tcp_create_segment+0x22>
 8012766:	4b45      	ldr	r3, [pc, #276]	@ (801287c <tcp_create_segment+0x12c>)
 8012768:	22a3      	movs	r2, #163	@ 0xa3
 801276a:	4945      	ldr	r1, [pc, #276]	@ (8012880 <tcp_create_segment+0x130>)
 801276c:	4845      	ldr	r0, [pc, #276]	@ (8012884 <tcp_create_segment+0x134>)
 801276e:	f004 f931 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d105      	bne.n	8012784 <tcp_create_segment+0x34>
 8012778:	4b40      	ldr	r3, [pc, #256]	@ (801287c <tcp_create_segment+0x12c>)
 801277a:	22a4      	movs	r2, #164	@ 0xa4
 801277c:	4942      	ldr	r1, [pc, #264]	@ (8012888 <tcp_create_segment+0x138>)
 801277e:	4841      	ldr	r0, [pc, #260]	@ (8012884 <tcp_create_segment+0x134>)
 8012780:	f004 f928 	bl	80169d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012784:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012788:	009b      	lsls	r3, r3, #2
 801278a:	b2db      	uxtb	r3, r3
 801278c:	f003 0304 	and.w	r3, r3, #4
 8012790:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012792:	2003      	movs	r0, #3
 8012794:	f7fa feba 	bl	800d50c <memp_malloc>
 8012798:	6138      	str	r0, [r7, #16]
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d104      	bne.n	80127aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80127a0:	68b8      	ldr	r0, [r7, #8]
 80127a2:	f7fb fea7 	bl	800e4f4 <pbuf_free>
    return NULL;
 80127a6:	2300      	movs	r3, #0
 80127a8:	e063      	b.n	8012872 <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 80127aa:	693b      	ldr	r3, [r7, #16]
 80127ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80127b0:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	2200      	movs	r2, #0
 80127b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	68ba      	ldr	r2, [r7, #8]
 80127bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	891a      	ldrh	r2, [r3, #8]
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d205      	bcs.n	80127d6 <tcp_create_segment+0x86>
 80127ca:	4b2c      	ldr	r3, [pc, #176]	@ (801287c <tcp_create_segment+0x12c>)
 80127cc:	22b0      	movs	r2, #176	@ 0xb0
 80127ce:	492f      	ldr	r1, [pc, #188]	@ (801288c <tcp_create_segment+0x13c>)
 80127d0:	482c      	ldr	r0, [pc, #176]	@ (8012884 <tcp_create_segment+0x134>)
 80127d2:	f004 f8ff 	bl	80169d4 <iprintf>
  seg->len = p->tot_len - optlen;
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	891a      	ldrh	r2, [r3, #8]
 80127da:	7dfb      	ldrb	r3, [r7, #23]
 80127dc:	b29b      	uxth	r3, r3
 80127de:	1ad3      	subs	r3, r2, r3
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	2200      	movs	r2, #0
 80127ea:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80127ec:	2114      	movs	r1, #20
 80127ee:	68b8      	ldr	r0, [r7, #8]
 80127f0:	f7fb fdea 	bl	800e3c8 <pbuf_add_header>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d004      	beq.n	8012804 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80127fa:	6938      	ldr	r0, [r7, #16]
 80127fc:	f7fd f8c9 	bl	800f992 <tcp_seg_free>
    return NULL;
 8012800:	2300      	movs	r3, #0
 8012802:	e036      	b.n	8012872 <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	685a      	ldr	r2, [r3, #4]
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	8ada      	ldrh	r2, [r3, #22]
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	691c      	ldr	r4, [r3, #16]
 8012816:	4610      	mov	r0, r2
 8012818:	f7fa f9a0 	bl	800cb5c <lwip_htons>
 801281c:	4603      	mov	r3, r0
 801281e:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	8b1a      	ldrh	r2, [r3, #24]
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	691c      	ldr	r4, [r3, #16]
 8012828:	4610      	mov	r0, r2
 801282a:	f7fa f997 	bl	800cb5c <lwip_htons>
 801282e:	4603      	mov	r3, r0
 8012830:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	691c      	ldr	r4, [r3, #16]
 8012836:	6838      	ldr	r0, [r7, #0]
 8012838:	f7fa f9a6 	bl	800cb88 <lwip_htonl>
 801283c:	4603      	mov	r3, r0
 801283e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	089b      	lsrs	r3, r3, #2
 8012844:	b2db      	uxtb	r3, r3
 8012846:	3305      	adds	r3, #5
 8012848:	b29b      	uxth	r3, r3
 801284a:	031b      	lsls	r3, r3, #12
 801284c:	b29a      	uxth	r2, r3
 801284e:	79fb      	ldrb	r3, [r7, #7]
 8012850:	b29b      	uxth	r3, r3
 8012852:	4313      	orrs	r3, r2
 8012854:	b29a      	uxth	r2, r3
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	691c      	ldr	r4, [r3, #16]
 801285a:	4610      	mov	r0, r2
 801285c:	f7fa f97e 	bl	800cb5c <lwip_htons>
 8012860:	4603      	mov	r3, r0
 8012862:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	691b      	ldr	r3, [r3, #16]
 8012868:	2200      	movs	r2, #0
 801286a:	749a      	strb	r2, [r3, #18]
 801286c:	2200      	movs	r2, #0
 801286e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012870:	693b      	ldr	r3, [r7, #16]
}
 8012872:	4618      	mov	r0, r3
 8012874:	371c      	adds	r7, #28
 8012876:	46bd      	mov	sp, r7
 8012878:	bd90      	pop	{r4, r7, pc}
 801287a:	bf00      	nop
 801287c:	0801984c 	.word	0x0801984c
 8012880:	08019880 	.word	0x08019880
 8012884:	080198a0 	.word	0x080198a0
 8012888:	080198c8 	.word	0x080198c8
 801288c:	080198ec 	.word	0x080198ec

08012890 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012890:	b590      	push	{r4, r7, lr}
 8012892:	b08b      	sub	sp, #44	@ 0x2c
 8012894:	af02      	add	r7, sp, #8
 8012896:	6078      	str	r0, [r7, #4]
 8012898:	460b      	mov	r3, r1
 801289a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801289c:	2300      	movs	r3, #0
 801289e:	61bb      	str	r3, [r7, #24]
 80128a0:	2300      	movs	r3, #0
 80128a2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80128a4:	2300      	movs	r3, #0
 80128a6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d106      	bne.n	80128bc <tcp_split_unsent_seg+0x2c>
 80128ae:	4b97      	ldr	r3, [pc, #604]	@ (8012b0c <tcp_split_unsent_seg+0x27c>)
 80128b0:	f240 324b 	movw	r2, #843	@ 0x34b
 80128b4:	4996      	ldr	r1, [pc, #600]	@ (8012b10 <tcp_split_unsent_seg+0x280>)
 80128b6:	4897      	ldr	r0, [pc, #604]	@ (8012b14 <tcp_split_unsent_seg+0x284>)
 80128b8:	f004 f88c 	bl	80169d4 <iprintf>

  useg = pcb->unsent;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128c0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d102      	bne.n	80128ce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80128c8:	f04f 33ff 	mov.w	r3, #4294967295
 80128cc:	e119      	b.n	8012b02 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80128ce:	887b      	ldrh	r3, [r7, #2]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d109      	bne.n	80128e8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80128d4:	4b8d      	ldr	r3, [pc, #564]	@ (8012b0c <tcp_split_unsent_seg+0x27c>)
 80128d6:	f240 3253 	movw	r2, #851	@ 0x353
 80128da:	498f      	ldr	r1, [pc, #572]	@ (8012b18 <tcp_split_unsent_seg+0x288>)
 80128dc:	488d      	ldr	r0, [pc, #564]	@ (8012b14 <tcp_split_unsent_seg+0x284>)
 80128de:	f004 f879 	bl	80169d4 <iprintf>
    return ERR_VAL;
 80128e2:	f06f 0305 	mvn.w	r3, #5
 80128e6:	e10c      	b.n	8012b02 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	891b      	ldrh	r3, [r3, #8]
 80128ec:	887a      	ldrh	r2, [r7, #2]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d301      	bcc.n	80128f6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	e105      	b.n	8012b02 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80128fa:	887a      	ldrh	r2, [r7, #2]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d906      	bls.n	801290e <tcp_split_unsent_seg+0x7e>
 8012900:	4b82      	ldr	r3, [pc, #520]	@ (8012b0c <tcp_split_unsent_seg+0x27c>)
 8012902:	f240 325b 	movw	r2, #859	@ 0x35b
 8012906:	4985      	ldr	r1, [pc, #532]	@ (8012b1c <tcp_split_unsent_seg+0x28c>)
 8012908:	4882      	ldr	r0, [pc, #520]	@ (8012b14 <tcp_split_unsent_seg+0x284>)
 801290a:	f004 f863 	bl	80169d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	891b      	ldrh	r3, [r3, #8]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <tcp_split_unsent_seg+0x94>
 8012916:	4b7d      	ldr	r3, [pc, #500]	@ (8012b0c <tcp_split_unsent_seg+0x27c>)
 8012918:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801291c:	4980      	ldr	r1, [pc, #512]	@ (8012b20 <tcp_split_unsent_seg+0x290>)
 801291e:	487d      	ldr	r0, [pc, #500]	@ (8012b14 <tcp_split_unsent_seg+0x284>)
 8012920:	f004 f858 	bl	80169d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	7b1b      	ldrb	r3, [r3, #12]
 8012928:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801292a:	7bfb      	ldrb	r3, [r7, #15]
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	b2db      	uxtb	r3, r3
 8012930:	f003 0304 	and.w	r3, r3, #4
 8012934:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	891a      	ldrh	r2, [r3, #8]
 801293a:	887b      	ldrh	r3, [r7, #2]
 801293c:	1ad3      	subs	r3, r2, r3
 801293e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012940:	7bbb      	ldrb	r3, [r7, #14]
 8012942:	b29a      	uxth	r2, r3
 8012944:	89bb      	ldrh	r3, [r7, #12]
 8012946:	4413      	add	r3, r2
 8012948:	b29b      	uxth	r3, r3
 801294a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801294e:	4619      	mov	r1, r3
 8012950:	2038      	movs	r0, #56	@ 0x38
 8012952:	f7fb faeb 	bl	800df2c <pbuf_alloc>
 8012956:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	2b00      	cmp	r3, #0
 801295c:	f000 80ba 	beq.w	8012ad4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	891a      	ldrh	r2, [r3, #8]
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	891b      	ldrh	r3, [r3, #8]
 801296a:	1ad3      	subs	r3, r2, r3
 801296c:	b29a      	uxth	r2, r3
 801296e:	887b      	ldrh	r3, [r7, #2]
 8012970:	4413      	add	r3, r2
 8012972:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	6858      	ldr	r0, [r3, #4]
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	685a      	ldr	r2, [r3, #4]
 801297c:	7bbb      	ldrb	r3, [r7, #14]
 801297e:	18d1      	adds	r1, r2, r3
 8012980:	897b      	ldrh	r3, [r7, #10]
 8012982:	89ba      	ldrh	r2, [r7, #12]
 8012984:	f7fb ffac 	bl	800e8e0 <pbuf_copy_partial>
 8012988:	4603      	mov	r3, r0
 801298a:	461a      	mov	r2, r3
 801298c:	89bb      	ldrh	r3, [r7, #12]
 801298e:	4293      	cmp	r3, r2
 8012990:	f040 80a2 	bne.w	8012ad8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	899b      	ldrh	r3, [r3, #12]
 801299a:	b29b      	uxth	r3, r3
 801299c:	4618      	mov	r0, r3
 801299e:	f7fa f8dd 	bl	800cb5c <lwip_htons>
 80129a2:	4603      	mov	r3, r0
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80129aa:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80129ac:	2300      	movs	r3, #0
 80129ae:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 80129b0:	7ffb      	ldrb	r3, [r7, #31]
 80129b2:	f003 0308 	and.w	r3, r3, #8
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d007      	beq.n	80129ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80129ba:	7ffb      	ldrb	r3, [r7, #31]
 80129bc:	f023 0308 	bic.w	r3, r3, #8
 80129c0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80129c2:	7fbb      	ldrb	r3, [r7, #30]
 80129c4:	f043 0308 	orr.w	r3, r3, #8
 80129c8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80129ca:	7ffb      	ldrb	r3, [r7, #31]
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d007      	beq.n	80129e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80129d4:	7ffb      	ldrb	r3, [r7, #31]
 80129d6:	f023 0301 	bic.w	r3, r3, #1
 80129da:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80129dc:	7fbb      	ldrb	r3, [r7, #30]
 80129de:	f043 0301 	orr.w	r3, r3, #1
 80129e2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	691b      	ldr	r3, [r3, #16]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7fa f8cc 	bl	800cb88 <lwip_htonl>
 80129f0:	4602      	mov	r2, r0
 80129f2:	887b      	ldrh	r3, [r7, #2]
 80129f4:	18d1      	adds	r1, r2, r3
 80129f6:	7fba      	ldrb	r2, [r7, #30]
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
 80129fa:	9300      	str	r3, [sp, #0]
 80129fc:	460b      	mov	r3, r1
 80129fe:	6939      	ldr	r1, [r7, #16]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7ff fea5 	bl	8012750 <tcp_create_segment>
 8012a06:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8012a08:	69bb      	ldr	r3, [r7, #24]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d066      	beq.n	8012adc <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fb fdfc 	bl	800e610 <pbuf_clen>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a22:	1a9b      	subs	r3, r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	6858      	ldr	r0, [r3, #4]
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	891a      	ldrh	r2, [r3, #8]
 8012a36:	89bb      	ldrh	r3, [r7, #12]
 8012a38:	1ad3      	subs	r3, r2, r3
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f7fb fbd3 	bl	800e1e8 <pbuf_realloc>
  useg->len -= remainder;
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	891a      	ldrh	r2, [r3, #8]
 8012a46:	89bb      	ldrh	r3, [r7, #12]
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	691b      	ldr	r3, [r3, #16]
 8012a54:	899b      	ldrh	r3, [r3, #12]
 8012a56:	b29c      	uxth	r4, r3
 8012a58:	7ffb      	ldrb	r3, [r7, #31]
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fa f87d 	bl	800cb5c <lwip_htons>
 8012a62:	4603      	mov	r3, r0
 8012a64:	461a      	mov	r2, r3
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	691b      	ldr	r3, [r3, #16]
 8012a6a:	4322      	orrs	r2, r4
 8012a6c:	b292      	uxth	r2, r2
 8012a6e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	2200      	movs	r2, #0
 8012a74:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	f7fb fdc8 	bl	800e610 <pbuf_clen>
 8012a80:	4603      	mov	r3, r0
 8012a82:	461a      	mov	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a8a:	4413      	add	r3, r2
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fb fdb9 	bl	800e610 <pbuf_clen>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012aa8:	4413      	add	r3, r2
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	69bb      	ldr	r3, [r7, #24]
 8012ab8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	69ba      	ldr	r2, [r7, #24]
 8012abe:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d103      	bne.n	8012ad0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2200      	movs	r2, #0
 8012acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	e016      	b.n	8012b02 <tcp_split_unsent_seg+0x272>
    goto memerr;
 8012ad4:	bf00      	nop
 8012ad6:	e002      	b.n	8012ade <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8012ad8:	bf00      	nop
 8012ada:	e000      	b.n	8012ade <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8012adc:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d006      	beq.n	8012af2 <tcp_split_unsent_seg+0x262>
 8012ae4:	4b09      	ldr	r3, [pc, #36]	@ (8012b0c <tcp_split_unsent_seg+0x27c>)
 8012ae6:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012aea:	490e      	ldr	r1, [pc, #56]	@ (8012b24 <tcp_split_unsent_seg+0x294>)
 8012aec:	4809      	ldr	r0, [pc, #36]	@ (8012b14 <tcp_split_unsent_seg+0x284>)
 8012aee:	f003 ff71 	bl	80169d4 <iprintf>
  if (p != NULL) {
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d002      	beq.n	8012afe <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8012af8:	6938      	ldr	r0, [r7, #16]
 8012afa:	f7fb fcfb 	bl	800e4f4 <pbuf_free>
  }

  return ERR_MEM;
 8012afe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3724      	adds	r7, #36	@ 0x24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd90      	pop	{r4, r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	0801984c 	.word	0x0801984c
 8012b10:	08019c3c 	.word	0x08019c3c
 8012b14:	080198a0 	.word	0x080198a0
 8012b18:	08019c60 	.word	0x08019c60
 8012b1c:	08019c84 	.word	0x08019c84
 8012b20:	08019c94 	.word	0x08019c94
 8012b24:	08019ca4 	.word	0x08019ca4

08012b28 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012b28:	b590      	push	{r4, r7, lr}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d106      	bne.n	8012b44 <tcp_send_fin+0x1c>
 8012b36:	4b21      	ldr	r3, [pc, #132]	@ (8012bbc <tcp_send_fin+0x94>)
 8012b38:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012b3c:	4920      	ldr	r1, [pc, #128]	@ (8012bc0 <tcp_send_fin+0x98>)
 8012b3e:	4821      	ldr	r0, [pc, #132]	@ (8012bc4 <tcp_send_fin+0x9c>)
 8012b40:	f003 ff48 	bl	80169d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d02e      	beq.n	8012baa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b50:	60fb      	str	r3, [r7, #12]
 8012b52:	e002      	b.n	8012b5a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1f8      	bne.n	8012b54 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	691b      	ldr	r3, [r3, #16]
 8012b66:	899b      	ldrh	r3, [r3, #12]
 8012b68:	b29b      	uxth	r3, r3
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7f9 fff6 	bl	800cb5c <lwip_htons>
 8012b70:	4603      	mov	r3, r0
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	f003 0307 	and.w	r3, r3, #7
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d116      	bne.n	8012baa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	691b      	ldr	r3, [r3, #16]
 8012b80:	899b      	ldrh	r3, [r3, #12]
 8012b82:	b29c      	uxth	r4, r3
 8012b84:	2001      	movs	r0, #1
 8012b86:	f7f9 ffe9 	bl	800cb5c <lwip_htons>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	691b      	ldr	r3, [r3, #16]
 8012b92:	4322      	orrs	r2, r4
 8012b94:	b292      	uxth	r2, r2
 8012b96:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	8b5b      	ldrh	r3, [r3, #26]
 8012b9c:	f043 0320 	orr.w	r3, r3, #32
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	e004      	b.n	8012bb4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012baa:	2101      	movs	r1, #1
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f80b 	bl	8012bc8 <tcp_enqueue_flags>
 8012bb2:	4603      	mov	r3, r0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3714      	adds	r7, #20
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd90      	pop	{r4, r7, pc}
 8012bbc:	0801984c 	.word	0x0801984c
 8012bc0:	08019cb0 	.word	0x08019cb0
 8012bc4:	080198a0 	.word	0x080198a0

08012bc8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b088      	sub	sp, #32
 8012bcc:	af02      	add	r7, sp, #8
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012bdc:	78fb      	ldrb	r3, [r7, #3]
 8012bde:	f003 0303 	and.w	r3, r3, #3
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d106      	bne.n	8012bf4 <tcp_enqueue_flags+0x2c>
 8012be6:	4b67      	ldr	r3, [pc, #412]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012be8:	f240 4211 	movw	r2, #1041	@ 0x411
 8012bec:	4966      	ldr	r1, [pc, #408]	@ (8012d88 <tcp_enqueue_flags+0x1c0>)
 8012bee:	4867      	ldr	r0, [pc, #412]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012bf0:	f003 fef0 	bl	80169d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d106      	bne.n	8012c08 <tcp_enqueue_flags+0x40>
 8012bfa:	4b62      	ldr	r3, [pc, #392]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012bfc:	f240 4213 	movw	r2, #1043	@ 0x413
 8012c00:	4963      	ldr	r1, [pc, #396]	@ (8012d90 <tcp_enqueue_flags+0x1c8>)
 8012c02:	4862      	ldr	r0, [pc, #392]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012c04:	f003 fee6 	bl	80169d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012c08:	78fb      	ldrb	r3, [r7, #3]
 8012c0a:	f003 0302 	and.w	r3, r3, #2
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d001      	beq.n	8012c16 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012c12:	2301      	movs	r3, #1
 8012c14:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	f003 0304 	and.w	r3, r3, #4
 8012c20:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012c22:	7dbb      	ldrb	r3, [r7, #22]
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012c2a:	4619      	mov	r1, r3
 8012c2c:	2038      	movs	r0, #56	@ 0x38
 8012c2e:	f7fb f97d 	bl	800df2c <pbuf_alloc>
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d109      	bne.n	8012c4e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	8b5b      	ldrh	r3, [r3, #26]
 8012c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012c48:	f04f 33ff 	mov.w	r3, #4294967295
 8012c4c:	e095      	b.n	8012d7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	895a      	ldrh	r2, [r3, #10]
 8012c52:	7dbb      	ldrb	r3, [r7, #22]
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d206      	bcs.n	8012c68 <tcp_enqueue_flags+0xa0>
 8012c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012c5c:	f240 4239 	movw	r2, #1081	@ 0x439
 8012c60:	494c      	ldr	r1, [pc, #304]	@ (8012d94 <tcp_enqueue_flags+0x1cc>)
 8012c62:	484a      	ldr	r0, [pc, #296]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012c64:	f003 feb6 	bl	80169d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012c6c:	78fa      	ldrb	r2, [r7, #3]
 8012c6e:	7dfb      	ldrb	r3, [r7, #23]
 8012c70:	9300      	str	r3, [sp, #0]
 8012c72:	460b      	mov	r3, r1
 8012c74:	68f9      	ldr	r1, [r7, #12]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff fd6a 	bl	8012750 <tcp_create_segment>
 8012c7c:	60b8      	str	r0, [r7, #8]
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d109      	bne.n	8012c98 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	8b5b      	ldrh	r3, [r3, #26]
 8012c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012c92:	f04f 33ff 	mov.w	r3, #4294967295
 8012c96:	e070      	b.n	8012d7a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	f003 0303 	and.w	r3, r3, #3
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d006      	beq.n	8012cb2 <tcp_enqueue_flags+0xea>
 8012ca4:	4b37      	ldr	r3, [pc, #220]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012ca6:	f240 4242 	movw	r2, #1090	@ 0x442
 8012caa:	493b      	ldr	r1, [pc, #236]	@ (8012d98 <tcp_enqueue_flags+0x1d0>)
 8012cac:	4837      	ldr	r0, [pc, #220]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012cae:	f003 fe91 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	891b      	ldrh	r3, [r3, #8]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d006      	beq.n	8012cc8 <tcp_enqueue_flags+0x100>
 8012cba:	4b32      	ldr	r3, [pc, #200]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012cbc:	f240 4243 	movw	r2, #1091	@ 0x443
 8012cc0:	4936      	ldr	r1, [pc, #216]	@ (8012d9c <tcp_enqueue_flags+0x1d4>)
 8012cc2:	4832      	ldr	r0, [pc, #200]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012cc4:	f003 fe86 	bl	80169d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d103      	bne.n	8012cd8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68ba      	ldr	r2, [r7, #8]
 8012cd4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012cd6:	e00d      	b.n	8012cf4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cdc:	613b      	str	r3, [r7, #16]
 8012cde:	e002      	b.n	8012ce6 <tcp_enqueue_flags+0x11e>
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	613b      	str	r3, [r7, #16]
 8012ce6:	693b      	ldr	r3, [r7, #16]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d1f8      	bne.n	8012ce0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	68ba      	ldr	r2, [r7, #8]
 8012cf2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012cfc:	78fb      	ldrb	r3, [r7, #3]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d104      	bne.n	8012d10 <tcp_enqueue_flags+0x148>
 8012d06:	78fb      	ldrb	r3, [r7, #3]
 8012d08:	f003 0301 	and.w	r3, r3, #1
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d004      	beq.n	8012d1a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012d14:	1c5a      	adds	r2, r3, #1
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012d1a:	78fb      	ldrb	r3, [r7, #3]
 8012d1c:	f003 0301 	and.w	r3, r3, #1
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d006      	beq.n	8012d32 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	8b5b      	ldrh	r3, [r3, #26]
 8012d28:	f043 0320 	orr.w	r3, r3, #32
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7fb fc6a 	bl	800e610 <pbuf_clen>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	461a      	mov	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d46:	4413      	add	r3, r2
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d00e      	beq.n	8012d78 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d10a      	bne.n	8012d78 <tcp_enqueue_flags+0x1b0>
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d106      	bne.n	8012d78 <tcp_enqueue_flags+0x1b0>
 8012d6a:	4b06      	ldr	r3, [pc, #24]	@ (8012d84 <tcp_enqueue_flags+0x1bc>)
 8012d6c:	f240 4265 	movw	r2, #1125	@ 0x465
 8012d70:	490b      	ldr	r1, [pc, #44]	@ (8012da0 <tcp_enqueue_flags+0x1d8>)
 8012d72:	4806      	ldr	r0, [pc, #24]	@ (8012d8c <tcp_enqueue_flags+0x1c4>)
 8012d74:	f003 fe2e 	bl	80169d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012d78:	2300      	movs	r3, #0
}
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3718      	adds	r7, #24
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
 8012d82:	bf00      	nop
 8012d84:	0801984c 	.word	0x0801984c
 8012d88:	08019ccc 	.word	0x08019ccc
 8012d8c:	080198a0 	.word	0x080198a0
 8012d90:	08019d24 	.word	0x08019d24
 8012d94:	08019d44 	.word	0x08019d44
 8012d98:	08019d80 	.word	0x08019d80
 8012d9c:	08019d98 	.word	0x08019d98
 8012da0:	08019dc4 	.word	0x08019dc4

08012da4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012da4:	b5b0      	push	{r4, r5, r7, lr}
 8012da6:	b08a      	sub	sp, #40	@ 0x28
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <tcp_output+0x1c>
 8012db2:	4b8a      	ldr	r3, [pc, #552]	@ (8012fdc <tcp_output+0x238>)
 8012db4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012db8:	4989      	ldr	r1, [pc, #548]	@ (8012fe0 <tcp_output+0x23c>)
 8012dba:	488a      	ldr	r0, [pc, #552]	@ (8012fe4 <tcp_output+0x240>)
 8012dbc:	f003 fe0a 	bl	80169d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	7d1b      	ldrb	r3, [r3, #20]
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d106      	bne.n	8012dd6 <tcp_output+0x32>
 8012dc8:	4b84      	ldr	r3, [pc, #528]	@ (8012fdc <tcp_output+0x238>)
 8012dca:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012dce:	4986      	ldr	r1, [pc, #536]	@ (8012fe8 <tcp_output+0x244>)
 8012dd0:	4884      	ldr	r0, [pc, #528]	@ (8012fe4 <tcp_output+0x240>)
 8012dd2:	f003 fdff 	bl	80169d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012dd6:	4b85      	ldr	r3, [pc, #532]	@ (8012fec <tcp_output+0x248>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d101      	bne.n	8012de4 <tcp_output+0x40>
    return ERR_OK;
 8012de0:	2300      	movs	r3, #0
 8012de2:	e1d1      	b.n	8013188 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012df0:	4293      	cmp	r3, r2
 8012df2:	bf28      	it	cs
 8012df4:	4613      	movcs	r3, r2
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d10b      	bne.n	8012e1e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	8b5b      	ldrh	r3, [r3, #26]
 8012e0a:	f003 0302 	and.w	r3, r3, #2
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	f000 81ad 	beq.w	801316e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8012e14:	6878      	ldr	r0, [r7, #4]
 8012e16:	f000 fdd7 	bl	80139c8 <tcp_send_empty_ack>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	e1b4      	b.n	8013188 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012e1e:	6879      	ldr	r1, [r7, #4]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	3304      	adds	r3, #4
 8012e24:	461a      	mov	r2, r3
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f7ff fc76 	bl	8012718 <tcp_route>
 8012e2c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <tcp_output+0x96>
    return ERR_RTE;
 8012e34:	f06f 0303 	mvn.w	r3, #3
 8012e38:	e1a6      	b.n	8013188 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d003      	beq.n	8012e48 <tcp_output+0xa4>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d111      	bne.n	8012e6c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012e48:	697b      	ldr	r3, [r7, #20]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d002      	beq.n	8012e54 <tcp_output+0xb0>
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	3304      	adds	r3, #4
 8012e52:	e000      	b.n	8012e56 <tcp_output+0xb2>
 8012e54:	2300      	movs	r3, #0
 8012e56:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d102      	bne.n	8012e64 <tcp_output+0xc0>
      return ERR_RTE;
 8012e5e:	f06f 0303 	mvn.w	r3, #3
 8012e62:	e191      	b.n	8013188 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7f9 fe88 	bl	800cb88 <lwip_htonl>
 8012e78:	4602      	mov	r2, r0
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e82:	8912      	ldrh	r2, [r2, #8]
 8012e84:	4413      	add	r3, r2
 8012e86:	69ba      	ldr	r2, [r7, #24]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d227      	bcs.n	8012edc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012e92:	461a      	mov	r2, r3
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d114      	bne.n	8012ec4 <tcp_output+0x120>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d110      	bne.n	8012ec4 <tcp_output+0x120>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d10b      	bne.n	8012ec4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2200      	movs	r2, #0
 8012eb0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	8b5b      	ldrh	r3, [r3, #26]
 8012ec8:	f003 0302 	and.w	r3, r3, #2
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	f000 8150 	beq.w	8013172 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f000 fd78 	bl	80139c8 <tcp_send_empty_ack>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	e155      	b.n	8013188 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ee8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012eea:	6a3b      	ldr	r3, [r7, #32]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	f000 811f 	beq.w	8013130 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8012ef2:	e002      	b.n	8012efa <tcp_output+0x156>
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	623b      	str	r3, [r7, #32]
 8012efa:	6a3b      	ldr	r3, [r7, #32]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d1f8      	bne.n	8012ef4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012f02:	e115      	b.n	8013130 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f06:	691b      	ldr	r3, [r3, #16]
 8012f08:	899b      	ldrh	r3, [r3, #12]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7f9 fe25 	bl	800cb5c <lwip_htons>
 8012f12:	4603      	mov	r3, r0
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	f003 0304 	and.w	r3, r3, #4
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d006      	beq.n	8012f2c <tcp_output+0x188>
 8012f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8012fdc <tcp_output+0x238>)
 8012f20:	f240 5236 	movw	r2, #1334	@ 0x536
 8012f24:	4932      	ldr	r1, [pc, #200]	@ (8012ff0 <tcp_output+0x24c>)
 8012f26:	482f      	ldr	r0, [pc, #188]	@ (8012fe4 <tcp_output+0x240>)
 8012f28:	f003 fd54 	bl	80169d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d01f      	beq.n	8012f74 <tcp_output+0x1d0>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	8b5b      	ldrh	r3, [r3, #26]
 8012f38:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d119      	bne.n	8012f74 <tcp_output+0x1d0>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d00b      	beq.n	8012f60 <tcp_output+0x1bc>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d110      	bne.n	8012f74 <tcp_output+0x1d0>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f56:	891a      	ldrh	r2, [r3, #8]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d209      	bcs.n	8012f74 <tcp_output+0x1d0>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <tcp_output+0x1d0>
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f70:	2b08      	cmp	r3, #8
 8012f72:	d901      	bls.n	8012f78 <tcp_output+0x1d4>
 8012f74:	2301      	movs	r3, #1
 8012f76:	e000      	b.n	8012f7a <tcp_output+0x1d6>
 8012f78:	2300      	movs	r3, #0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d106      	bne.n	8012f8c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	8b5b      	ldrh	r3, [r3, #26]
 8012f82:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 80e7 	beq.w	801315a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	7d1b      	ldrb	r3, [r3, #20]
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d00d      	beq.n	8012fb0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f96:	691b      	ldr	r3, [r3, #16]
 8012f98:	899b      	ldrh	r3, [r3, #12]
 8012f9a:	b29c      	uxth	r4, r3
 8012f9c:	2010      	movs	r0, #16
 8012f9e:	f7f9 fddd 	bl	800cb5c <lwip_htons>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa8:	691b      	ldr	r3, [r3, #16]
 8012faa:	4322      	orrs	r2, r4
 8012fac:	b292      	uxth	r2, r2
 8012fae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012fb0:	697a      	ldr	r2, [r7, #20]
 8012fb2:	6879      	ldr	r1, [r7, #4]
 8012fb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012fb6:	f000 f90b 	bl	80131d0 <tcp_output_segment>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d016      	beq.n	8012ff4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	8b5b      	ldrh	r3, [r3, #26]
 8012fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	835a      	strh	r2, [r3, #26]
      return err;
 8012fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fd8:	e0d6      	b.n	8013188 <tcp_output+0x3e4>
 8012fda:	bf00      	nop
 8012fdc:	0801984c 	.word	0x0801984c
 8012fe0:	08019dec 	.word	0x08019dec
 8012fe4:	080198a0 	.word	0x080198a0
 8012fe8:	08019e04 	.word	0x08019e04
 8012fec:	20013cac 	.word	0x20013cac
 8012ff0:	08019e2c 	.word	0x08019e2c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8012ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	7d1b      	ldrb	r3, [r3, #20]
 8013006:	2b02      	cmp	r3, #2
 8013008:	d006      	beq.n	8013018 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	8b5b      	ldrh	r3, [r3, #26]
 801300e:	f023 0303 	bic.w	r3, r3, #3
 8013012:	b29a      	uxth	r2, r3
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801301a:	691b      	ldr	r3, [r3, #16]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	4618      	mov	r0, r3
 8013020:	f7f9 fdb2 	bl	800cb88 <lwip_htonl>
 8013024:	4604      	mov	r4, r0
 8013026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013028:	891b      	ldrh	r3, [r3, #8]
 801302a:	461d      	mov	r5, r3
 801302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801302e:	691b      	ldr	r3, [r3, #16]
 8013030:	899b      	ldrh	r3, [r3, #12]
 8013032:	b29b      	uxth	r3, r3
 8013034:	4618      	mov	r0, r3
 8013036:	f7f9 fd91 	bl	800cb5c <lwip_htons>
 801303a:	4603      	mov	r3, r0
 801303c:	b2db      	uxtb	r3, r3
 801303e:	f003 0303 	and.w	r3, r3, #3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <tcp_output+0x2a6>
 8013046:	2301      	movs	r3, #1
 8013048:	e000      	b.n	801304c <tcp_output+0x2a8>
 801304a:	2300      	movs	r3, #0
 801304c:	442b      	add	r3, r5
 801304e:	4423      	add	r3, r4
 8013050:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	1ad3      	subs	r3, r2, r3
 801305a:	2b00      	cmp	r3, #0
 801305c:	da02      	bge.n	8013064 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013066:	891b      	ldrh	r3, [r3, #8]
 8013068:	461c      	mov	r4, r3
 801306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801306c:	691b      	ldr	r3, [r3, #16]
 801306e:	899b      	ldrh	r3, [r3, #12]
 8013070:	b29b      	uxth	r3, r3
 8013072:	4618      	mov	r0, r3
 8013074:	f7f9 fd72 	bl	800cb5c <lwip_htons>
 8013078:	4603      	mov	r3, r0
 801307a:	b2db      	uxtb	r3, r3
 801307c:	f003 0303 	and.w	r3, r3, #3
 8013080:	2b00      	cmp	r3, #0
 8013082:	d001      	beq.n	8013088 <tcp_output+0x2e4>
 8013084:	2301      	movs	r3, #1
 8013086:	e000      	b.n	801308a <tcp_output+0x2e6>
 8013088:	2300      	movs	r3, #0
 801308a:	4423      	add	r3, r4
 801308c:	2b00      	cmp	r3, #0
 801308e:	d049      	beq.n	8013124 <tcp_output+0x380>
      seg->next = NULL;
 8013090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013092:	2200      	movs	r2, #0
 8013094:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801309a:	2b00      	cmp	r3, #0
 801309c:	d105      	bne.n	80130aa <tcp_output+0x306>
        pcb->unacked = seg;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130a2:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80130a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a6:	623b      	str	r3, [r7, #32]
 80130a8:	e03f      	b.n	801312a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80130aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7f9 fd69 	bl	800cb88 <lwip_htonl>
 80130b6:	4604      	mov	r4, r0
 80130b8:	6a3b      	ldr	r3, [r7, #32]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7f9 fd62 	bl	800cb88 <lwip_htonl>
 80130c4:	4603      	mov	r3, r0
 80130c6:	1ae3      	subs	r3, r4, r3
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	da24      	bge.n	8013116 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	3370      	adds	r3, #112	@ 0x70
 80130d0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80130d2:	e002      	b.n	80130da <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d011      	beq.n	8013106 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	691b      	ldr	r3, [r3, #16]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7f9 fd4c 	bl	800cb88 <lwip_htonl>
 80130f0:	4604      	mov	r4, r0
 80130f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f4:	691b      	ldr	r3, [r3, #16]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f9 fd45 	bl	800cb88 <lwip_htonl>
 80130fe:	4603      	mov	r3, r0
 8013100:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013102:	2b00      	cmp	r3, #0
 8013104:	dbe6      	blt.n	80130d4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8013106:	69fb      	ldr	r3, [r7, #28]
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801310c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013112:	601a      	str	r2, [r3, #0]
 8013114:	e009      	b.n	801312a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013116:	6a3b      	ldr	r3, [r7, #32]
 8013118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801311a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801311c:	6a3b      	ldr	r3, [r7, #32]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	623b      	str	r3, [r7, #32]
 8013122:	e002      	b.n	801312a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013126:	f7fc fc34 	bl	800f992 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801312e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8013130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013132:	2b00      	cmp	r3, #0
 8013134:	d012      	beq.n	801315c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	685b      	ldr	r3, [r3, #4]
 801313c:	4618      	mov	r0, r3
 801313e:	f7f9 fd23 	bl	800cb88 <lwip_htonl>
 8013142:	4602      	mov	r2, r0
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801314c:	8912      	ldrh	r2, [r2, #8]
 801314e:	4413      	add	r3, r2
  while (seg != NULL &&
 8013150:	69ba      	ldr	r2, [r7, #24]
 8013152:	429a      	cmp	r2, r3
 8013154:	f4bf aed6 	bcs.w	8012f04 <tcp_output+0x160>
 8013158:	e000      	b.n	801315c <tcp_output+0x3b8>
      break;
 801315a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013160:	2b00      	cmp	r3, #0
 8013162:	d108      	bne.n	8013176 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2200      	movs	r2, #0
 8013168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801316c:	e004      	b.n	8013178 <tcp_output+0x3d4>
    goto output_done;
 801316e:	bf00      	nop
 8013170:	e002      	b.n	8013178 <tcp_output+0x3d4>
    goto output_done;
 8013172:	bf00      	nop
 8013174:	e000      	b.n	8013178 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013176:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	8b5b      	ldrh	r3, [r3, #26]
 801317c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013180:	b29a      	uxth	r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013186:	2300      	movs	r3, #0
}
 8013188:	4618      	mov	r0, r3
 801318a:	3728      	adds	r7, #40	@ 0x28
 801318c:	46bd      	mov	sp, r7
 801318e:	bdb0      	pop	{r4, r5, r7, pc}

08013190 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d106      	bne.n	80131ac <tcp_output_segment_busy+0x1c>
 801319e:	4b09      	ldr	r3, [pc, #36]	@ (80131c4 <tcp_output_segment_busy+0x34>)
 80131a0:	f240 529a 	movw	r2, #1434	@ 0x59a
 80131a4:	4908      	ldr	r1, [pc, #32]	@ (80131c8 <tcp_output_segment_busy+0x38>)
 80131a6:	4809      	ldr	r0, [pc, #36]	@ (80131cc <tcp_output_segment_busy+0x3c>)
 80131a8:	f003 fc14 	bl	80169d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	685b      	ldr	r3, [r3, #4]
 80131b0:	7b9b      	ldrb	r3, [r3, #14]
 80131b2:	2b01      	cmp	r3, #1
 80131b4:	d001      	beq.n	80131ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80131b6:	2301      	movs	r3, #1
 80131b8:	e000      	b.n	80131bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	0801984c 	.word	0x0801984c
 80131c8:	08019e44 	.word	0x08019e44
 80131cc:	080198a0 	.word	0x080198a0

080131d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80131d0:	b5b0      	push	{r4, r5, r7, lr}
 80131d2:	b08c      	sub	sp, #48	@ 0x30
 80131d4:	af04      	add	r7, sp, #16
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d106      	bne.n	80131f0 <tcp_output_segment+0x20>
 80131e2:	4b64      	ldr	r3, [pc, #400]	@ (8013374 <tcp_output_segment+0x1a4>)
 80131e4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80131e8:	4963      	ldr	r1, [pc, #396]	@ (8013378 <tcp_output_segment+0x1a8>)
 80131ea:	4864      	ldr	r0, [pc, #400]	@ (801337c <tcp_output_segment+0x1ac>)
 80131ec:	f003 fbf2 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <tcp_output_segment+0x34>
 80131f6:	4b5f      	ldr	r3, [pc, #380]	@ (8013374 <tcp_output_segment+0x1a4>)
 80131f8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80131fc:	4960      	ldr	r1, [pc, #384]	@ (8013380 <tcp_output_segment+0x1b0>)
 80131fe:	485f      	ldr	r0, [pc, #380]	@ (801337c <tcp_output_segment+0x1ac>)
 8013200:	f003 fbe8 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d106      	bne.n	8013218 <tcp_output_segment+0x48>
 801320a:	4b5a      	ldr	r3, [pc, #360]	@ (8013374 <tcp_output_segment+0x1a4>)
 801320c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8013210:	495c      	ldr	r1, [pc, #368]	@ (8013384 <tcp_output_segment+0x1b4>)
 8013212:	485a      	ldr	r0, [pc, #360]	@ (801337c <tcp_output_segment+0x1ac>)
 8013214:	f003 fbde 	bl	80169d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f7ff ffb9 	bl	8013190 <tcp_output_segment_busy>
 801321e:	4603      	mov	r3, r0
 8013220:	2b00      	cmp	r3, #0
 8013222:	d001      	beq.n	8013228 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013224:	2300      	movs	r3, #0
 8013226:	e0a1      	b.n	801336c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	691c      	ldr	r4, [r3, #16]
 8013230:	4610      	mov	r0, r2
 8013232:	f7f9 fca9 	bl	800cb88 <lwip_htonl>
 8013236:	4603      	mov	r3, r0
 8013238:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	691c      	ldr	r4, [r3, #16]
 8013242:	4610      	mov	r0, r2
 8013244:	f7f9 fc8a 	bl	800cb5c <lwip_htons>
 8013248:	4603      	mov	r3, r0
 801324a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013250:	68ba      	ldr	r2, [r7, #8]
 8013252:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013254:	441a      	add	r2, r3
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	3314      	adds	r3, #20
 8013260:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	7b1b      	ldrb	r3, [r3, #12]
 8013266:	f003 0301 	and.w	r3, r3, #1
 801326a:	2b00      	cmp	r3, #0
 801326c:	d015      	beq.n	801329a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	3304      	adds	r3, #4
 8013272:	461a      	mov	r2, r3
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801327a:	f7fc fe81 	bl	800ff80 <tcp_eff_send_mss_netif>
 801327e:	4603      	mov	r3, r0
 8013280:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013282:	8b7b      	ldrh	r3, [r7, #26]
 8013284:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013288:	4618      	mov	r0, r3
 801328a:	f7f9 fc7d 	bl	800cb88 <lwip_htonl>
 801328e:	4602      	mov	r2, r0
 8013290:	69fb      	ldr	r3, [r7, #28]
 8013292:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013294:	69fb      	ldr	r3, [r7, #28]
 8013296:	3304      	adds	r3, #4
 8013298:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	da02      	bge.n	80132aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80132a4:	68bb      	ldr	r3, [r7, #8]
 80132a6:	2200      	movs	r2, #0
 80132a8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d10c      	bne.n	80132cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80132b2:	4b35      	ldr	r3, [pc, #212]	@ (8013388 <tcp_output_segment+0x1b8>)
 80132b4:	681a      	ldr	r2, [r3, #0]
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7f9 fc61 	bl	800cb88 <lwip_htonl>
 80132c6:	4602      	mov	r2, r0
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	691a      	ldr	r2, [r3, #16]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	1ad3      	subs	r3, r2, r3
 80132d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	685b      	ldr	r3, [r3, #4]
 80132de:	8959      	ldrh	r1, [r3, #10]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	8b3a      	ldrh	r2, [r7, #24]
 80132e6:	1a8a      	subs	r2, r1, r2
 80132e8:	b292      	uxth	r2, r2
 80132ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	685b      	ldr	r3, [r3, #4]
 80132f0:	8919      	ldrh	r1, [r3, #8]
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	8b3a      	ldrh	r2, [r7, #24]
 80132f8:	1a8a      	subs	r2, r1, r2
 80132fa:	b292      	uxth	r2, r2
 80132fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	685b      	ldr	r3, [r3, #4]
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	6912      	ldr	r2, [r2, #16]
 8013306:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	691b      	ldr	r3, [r3, #16]
 801330c:	2200      	movs	r2, #0
 801330e:	741a      	strb	r2, [r3, #16]
 8013310:	2200      	movs	r2, #0
 8013312:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	691a      	ldr	r2, [r3, #16]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	7b1b      	ldrb	r3, [r3, #12]
 801331c:	f003 0301 	and.w	r3, r3, #1
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <tcp_output_segment+0x158>
 8013324:	2318      	movs	r3, #24
 8013326:	e000      	b.n	801332a <tcp_output_segment+0x15a>
 8013328:	2314      	movs	r3, #20
 801332a:	4413      	add	r3, r2
 801332c:	69fa      	ldr	r2, [r7, #28]
 801332e:	429a      	cmp	r2, r3
 8013330:	d006      	beq.n	8013340 <tcp_output_segment+0x170>
 8013332:	4b10      	ldr	r3, [pc, #64]	@ (8013374 <tcp_output_segment+0x1a4>)
 8013334:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013338:	4914      	ldr	r1, [pc, #80]	@ (801338c <tcp_output_segment+0x1bc>)
 801333a:	4810      	ldr	r0, [pc, #64]	@ (801337c <tcp_output_segment+0x1ac>)
 801333c:	f003 fb4a 	bl	80169d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6858      	ldr	r0, [r3, #4]
 8013344:	68b9      	ldr	r1, [r7, #8]
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	1d1c      	adds	r4, r3, #4
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	7add      	ldrb	r5, [r3, #11]
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	7a9b      	ldrb	r3, [r3, #10]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	9202      	str	r2, [sp, #8]
 8013356:	2206      	movs	r2, #6
 8013358:	9201      	str	r2, [sp, #4]
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	462b      	mov	r3, r5
 801335e:	4622      	mov	r2, r4
 8013360:	f001 fc1c 	bl	8014b9c <ip4_output_if>
 8013364:	4603      	mov	r3, r0
 8013366:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013368:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3720      	adds	r7, #32
 8013370:	46bd      	mov	sp, r7
 8013372:	bdb0      	pop	{r4, r5, r7, pc}
 8013374:	0801984c 	.word	0x0801984c
 8013378:	08019e6c 	.word	0x08019e6c
 801337c:	080198a0 	.word	0x080198a0
 8013380:	08019e8c 	.word	0x08019e8c
 8013384:	08019eac 	.word	0x08019eac
 8013388:	20013c5c 	.word	0x20013c5c
 801338c:	08019ed0 	.word	0x08019ed0

08013390 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013390:	b5b0      	push	{r4, r5, r7, lr}
 8013392:	b084      	sub	sp, #16
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d106      	bne.n	80133ac <tcp_rexmit_rto_prepare+0x1c>
 801339e:	4b36      	ldr	r3, [pc, #216]	@ (8013478 <tcp_rexmit_rto_prepare+0xe8>)
 80133a0:	f240 6263 	movw	r2, #1635	@ 0x663
 80133a4:	4935      	ldr	r1, [pc, #212]	@ (801347c <tcp_rexmit_rto_prepare+0xec>)
 80133a6:	4836      	ldr	r0, [pc, #216]	@ (8013480 <tcp_rexmit_rto_prepare+0xf0>)
 80133a8:	f003 fb14 	bl	80169d4 <iprintf>

  if (pcb->unacked == NULL) {
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d102      	bne.n	80133ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80133b4:	f06f 0305 	mvn.w	r3, #5
 80133b8:	e059      	b.n	801346e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	e00b      	b.n	80133da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80133c2:	68f8      	ldr	r0, [r7, #12]
 80133c4:	f7ff fee4 	bl	8013190 <tcp_output_segment_busy>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d002      	beq.n	80133d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80133ce:	f06f 0305 	mvn.w	r3, #5
 80133d2:	e04c      	b.n	801346e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	60fb      	str	r3, [r7, #12]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d1ef      	bne.n	80133c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80133e2:	68f8      	ldr	r0, [r7, #12]
 80133e4:	f7ff fed4 	bl	8013190 <tcp_output_segment_busy>
 80133e8:	4603      	mov	r3, r0
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d002      	beq.n	80133f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80133ee:	f06f 0305 	mvn.w	r3, #5
 80133f2:	e03c      	b.n	801346e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013400:	2b00      	cmp	r3, #0
 8013402:	d104      	bne.n	801340e <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	895a      	ldrh	r2, [r3, #10]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2200      	movs	r2, #0
 801341a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	8b5b      	ldrh	r3, [r3, #26]
 8013420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013424:	b29a      	uxth	r2, r3
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	691b      	ldr	r3, [r3, #16]
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	4618      	mov	r0, r3
 8013432:	f7f9 fba9 	bl	800cb88 <lwip_htonl>
 8013436:	4604      	mov	r4, r0
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	891b      	ldrh	r3, [r3, #8]
 801343c:	461d      	mov	r5, r3
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	691b      	ldr	r3, [r3, #16]
 8013442:	899b      	ldrh	r3, [r3, #12]
 8013444:	b29b      	uxth	r3, r3
 8013446:	4618      	mov	r0, r3
 8013448:	f7f9 fb88 	bl	800cb5c <lwip_htons>
 801344c:	4603      	mov	r3, r0
 801344e:	b2db      	uxtb	r3, r3
 8013450:	f003 0303 	and.w	r3, r3, #3
 8013454:	2b00      	cmp	r3, #0
 8013456:	d001      	beq.n	801345c <tcp_rexmit_rto_prepare+0xcc>
 8013458:	2301      	movs	r3, #1
 801345a:	e000      	b.n	801345e <tcp_rexmit_rto_prepare+0xce>
 801345c:	2300      	movs	r3, #0
 801345e:	442b      	add	r3, r5
 8013460:	18e2      	adds	r2, r4, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2200      	movs	r2, #0
 801346a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801346c:	2300      	movs	r3, #0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bdb0      	pop	{r4, r5, r7, pc}
 8013476:	bf00      	nop
 8013478:	0801984c 	.word	0x0801984c
 801347c:	08019ee4 	.word	0x08019ee4
 8013480:	080198a0 	.word	0x080198a0

08013484 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b082      	sub	sp, #8
 8013488:	af00      	add	r7, sp, #0
 801348a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d106      	bne.n	80134a0 <tcp_rexmit_rto_commit+0x1c>
 8013492:	4b0d      	ldr	r3, [pc, #52]	@ (80134c8 <tcp_rexmit_rto_commit+0x44>)
 8013494:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013498:	490c      	ldr	r1, [pc, #48]	@ (80134cc <tcp_rexmit_rto_commit+0x48>)
 801349a:	480d      	ldr	r0, [pc, #52]	@ (80134d0 <tcp_rexmit_rto_commit+0x4c>)
 801349c:	f003 fa9a 	bl	80169d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80134a6:	2bff      	cmp	r3, #255	@ 0xff
 80134a8:	d007      	beq.n	80134ba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80134b0:	3301      	adds	r3, #1
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f7ff fc72 	bl	8012da4 <tcp_output>
}
 80134c0:	bf00      	nop
 80134c2:	3708      	adds	r7, #8
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	0801984c 	.word	0x0801984c
 80134cc:	08019f08 	.word	0x08019f08
 80134d0:	080198a0 	.word	0x080198a0

080134d4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d106      	bne.n	80134f0 <tcp_rexmit_rto+0x1c>
 80134e2:	4b0a      	ldr	r3, [pc, #40]	@ (801350c <tcp_rexmit_rto+0x38>)
 80134e4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80134e8:	4909      	ldr	r1, [pc, #36]	@ (8013510 <tcp_rexmit_rto+0x3c>)
 80134ea:	480a      	ldr	r0, [pc, #40]	@ (8013514 <tcp_rexmit_rto+0x40>)
 80134ec:	f003 fa72 	bl	80169d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80134f0:	6878      	ldr	r0, [r7, #4]
 80134f2:	f7ff ff4d 	bl	8013390 <tcp_rexmit_rto_prepare>
 80134f6:	4603      	mov	r3, r0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d102      	bne.n	8013502 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff ffc1 	bl	8013484 <tcp_rexmit_rto_commit>
  }
}
 8013502:	bf00      	nop
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	0801984c 	.word	0x0801984c
 8013510:	08019f2c 	.word	0x08019f2c
 8013514:	080198a0 	.word	0x080198a0

08013518 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013518:	b590      	push	{r4, r7, lr}
 801351a:	b085      	sub	sp, #20
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d106      	bne.n	8013534 <tcp_rexmit+0x1c>
 8013526:	4b2f      	ldr	r3, [pc, #188]	@ (80135e4 <tcp_rexmit+0xcc>)
 8013528:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801352c:	492e      	ldr	r1, [pc, #184]	@ (80135e8 <tcp_rexmit+0xd0>)
 801352e:	482f      	ldr	r0, [pc, #188]	@ (80135ec <tcp_rexmit+0xd4>)
 8013530:	f003 fa50 	bl	80169d4 <iprintf>

  if (pcb->unacked == NULL) {
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013538:	2b00      	cmp	r3, #0
 801353a:	d102      	bne.n	8013542 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801353c:	f06f 0305 	mvn.w	r3, #5
 8013540:	e04c      	b.n	80135dc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013546:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013548:	68b8      	ldr	r0, [r7, #8]
 801354a:	f7ff fe21 	bl	8013190 <tcp_output_segment_busy>
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d002      	beq.n	801355a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013554:	f06f 0305 	mvn.w	r3, #5
 8013558:	e040      	b.n	80135dc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	336c      	adds	r3, #108	@ 0x6c
 8013566:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013568:	e002      	b.n	8013570 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d011      	beq.n	801359c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	691b      	ldr	r3, [r3, #16]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	f7f9 fb01 	bl	800cb88 <lwip_htonl>
 8013586:	4604      	mov	r4, r0
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	691b      	ldr	r3, [r3, #16]
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	4618      	mov	r0, r3
 8013590:	f7f9 fafa 	bl	800cb88 <lwip_htonl>
 8013594:	4603      	mov	r3, r0
 8013596:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013598:	2b00      	cmp	r3, #0
 801359a:	dbe6      	blt.n	801356a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d103      	bne.n	80135ba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80135c0:	2bff      	cmp	r3, #255	@ 0xff
 80135c2:	d007      	beq.n	80135d4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80135ca:	3301      	adds	r3, #1
 80135cc:	b2da      	uxtb	r2, r3
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2200      	movs	r2, #0
 80135d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80135da:	2300      	movs	r3, #0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3714      	adds	r7, #20
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd90      	pop	{r4, r7, pc}
 80135e4:	0801984c 	.word	0x0801984c
 80135e8:	08019f48 	.word	0x08019f48
 80135ec:	080198a0 	.word	0x080198a0

080135f0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d106      	bne.n	801360c <tcp_rexmit_fast+0x1c>
 80135fe:	4b2a      	ldr	r3, [pc, #168]	@ (80136a8 <tcp_rexmit_fast+0xb8>)
 8013600:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013604:	4929      	ldr	r1, [pc, #164]	@ (80136ac <tcp_rexmit_fast+0xbc>)
 8013606:	482a      	ldr	r0, [pc, #168]	@ (80136b0 <tcp_rexmit_fast+0xc0>)
 8013608:	f003 f9e4 	bl	80169d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013610:	2b00      	cmp	r3, #0
 8013612:	d044      	beq.n	801369e <tcp_rexmit_fast+0xae>
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	8b5b      	ldrh	r3, [r3, #26]
 8013618:	f003 0304 	and.w	r3, r3, #4
 801361c:	2b00      	cmp	r3, #0
 801361e:	d13e      	bne.n	801369e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f7ff ff79 	bl	8013518 <tcp_rexmit>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d138      	bne.n	801369e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013638:	4293      	cmp	r3, r2
 801363a:	bf28      	it	cs
 801363c:	4613      	movcs	r3, r2
 801363e:	b29b      	uxth	r3, r3
 8013640:	0fda      	lsrs	r2, r3, #31
 8013642:	4413      	add	r3, r2
 8013644:	105b      	asrs	r3, r3, #1
 8013646:	b29a      	uxth	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013654:	461a      	mov	r2, r3
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801365a:	005b      	lsls	r3, r3, #1
 801365c:	429a      	cmp	r2, r3
 801365e:	d206      	bcs.n	801366e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	b29a      	uxth	r2, r3
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013678:	4619      	mov	r1, r3
 801367a:	0049      	lsls	r1, r1, #1
 801367c:	440b      	add	r3, r1
 801367e:	b29b      	uxth	r3, r3
 8013680:	4413      	add	r3, r2
 8013682:	b29a      	uxth	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	8b5b      	ldrh	r3, [r3, #26]
 801368e:	f043 0304 	orr.w	r3, r3, #4
 8013692:	b29a      	uxth	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2200      	movs	r2, #0
 801369c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801369e:	bf00      	nop
 80136a0:	3708      	adds	r7, #8
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	0801984c 	.word	0x0801984c
 80136ac:	08019f60 	.word	0x08019f60
 80136b0:	080198a0 	.word	0x080198a0

080136b4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b086      	sub	sp, #24
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	60f8      	str	r0, [r7, #12]
 80136bc:	607b      	str	r3, [r7, #4]
 80136be:	460b      	mov	r3, r1
 80136c0:	817b      	strh	r3, [r7, #10]
 80136c2:	4613      	mov	r3, r2
 80136c4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80136c6:	897a      	ldrh	r2, [r7, #10]
 80136c8:	893b      	ldrh	r3, [r7, #8]
 80136ca:	4413      	add	r3, r2
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	3314      	adds	r3, #20
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80136d6:	4619      	mov	r1, r3
 80136d8:	2024      	movs	r0, #36	@ 0x24
 80136da:	f7fa fc27 	bl	800df2c <pbuf_alloc>
 80136de:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d04d      	beq.n	8013782 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80136e6:	897b      	ldrh	r3, [r7, #10]
 80136e8:	3313      	adds	r3, #19
 80136ea:	697a      	ldr	r2, [r7, #20]
 80136ec:	8952      	ldrh	r2, [r2, #10]
 80136ee:	4293      	cmp	r3, r2
 80136f0:	db06      	blt.n	8013700 <tcp_output_alloc_header_common+0x4c>
 80136f2:	4b26      	ldr	r3, [pc, #152]	@ (801378c <tcp_output_alloc_header_common+0xd8>)
 80136f4:	f240 7223 	movw	r2, #1827	@ 0x723
 80136f8:	4925      	ldr	r1, [pc, #148]	@ (8013790 <tcp_output_alloc_header_common+0xdc>)
 80136fa:	4826      	ldr	r0, [pc, #152]	@ (8013794 <tcp_output_alloc_header_common+0xe0>)
 80136fc:	f003 f96a 	bl	80169d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013706:	8c3b      	ldrh	r3, [r7, #32]
 8013708:	4618      	mov	r0, r3
 801370a:	f7f9 fa27 	bl	800cb5c <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	461a      	mov	r2, r3
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013718:	4618      	mov	r0, r3
 801371a:	f7f9 fa1f 	bl	800cb5c <lwip_htons>
 801371e:	4603      	mov	r3, r0
 8013720:	461a      	mov	r2, r3
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f7f9 fa2b 	bl	800cb88 <lwip_htonl>
 8013732:	4602      	mov	r2, r0
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013738:	897b      	ldrh	r3, [r7, #10]
 801373a:	089b      	lsrs	r3, r3, #2
 801373c:	b29b      	uxth	r3, r3
 801373e:	3305      	adds	r3, #5
 8013740:	b29b      	uxth	r3, r3
 8013742:	031b      	lsls	r3, r3, #12
 8013744:	b29a      	uxth	r2, r3
 8013746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801374a:	b29b      	uxth	r3, r3
 801374c:	4313      	orrs	r3, r2
 801374e:	b29b      	uxth	r3, r3
 8013750:	4618      	mov	r0, r3
 8013752:	f7f9 fa03 	bl	800cb5c <lwip_htons>
 8013756:	4603      	mov	r3, r0
 8013758:	461a      	mov	r2, r3
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801375e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013760:	4618      	mov	r0, r3
 8013762:	f7f9 f9fb 	bl	800cb5c <lwip_htons>
 8013766:	4603      	mov	r3, r0
 8013768:	461a      	mov	r2, r3
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	2200      	movs	r2, #0
 8013772:	741a      	strb	r2, [r3, #16]
 8013774:	2200      	movs	r2, #0
 8013776:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013778:	693b      	ldr	r3, [r7, #16]
 801377a:	2200      	movs	r2, #0
 801377c:	749a      	strb	r2, [r3, #18]
 801377e:	2200      	movs	r2, #0
 8013780:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013782:	697b      	ldr	r3, [r7, #20]
}
 8013784:	4618      	mov	r0, r3
 8013786:	3718      	adds	r7, #24
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	0801984c 	.word	0x0801984c
 8013790:	08019f80 	.word	0x08019f80
 8013794:	080198a0 	.word	0x080198a0

08013798 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013798:	b5b0      	push	{r4, r5, r7, lr}
 801379a:	b08a      	sub	sp, #40	@ 0x28
 801379c:	af04      	add	r7, sp, #16
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	607b      	str	r3, [r7, #4]
 80137a2:	460b      	mov	r3, r1
 80137a4:	817b      	strh	r3, [r7, #10]
 80137a6:	4613      	mov	r3, r2
 80137a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d106      	bne.n	80137be <tcp_output_alloc_header+0x26>
 80137b0:	4b15      	ldr	r3, [pc, #84]	@ (8013808 <tcp_output_alloc_header+0x70>)
 80137b2:	f240 7242 	movw	r2, #1858	@ 0x742
 80137b6:	4915      	ldr	r1, [pc, #84]	@ (801380c <tcp_output_alloc_header+0x74>)
 80137b8:	4815      	ldr	r0, [pc, #84]	@ (8013810 <tcp_output_alloc_header+0x78>)
 80137ba:	f003 f90b 	bl	80169d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	8adb      	ldrh	r3, [r3, #22]
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	8b12      	ldrh	r2, [r2, #24]
 80137ca:	68f9      	ldr	r1, [r7, #12]
 80137cc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80137ce:	893d      	ldrh	r5, [r7, #8]
 80137d0:	897c      	ldrh	r4, [r7, #10]
 80137d2:	9103      	str	r1, [sp, #12]
 80137d4:	2110      	movs	r1, #16
 80137d6:	9102      	str	r1, [sp, #8]
 80137d8:	9201      	str	r2, [sp, #4]
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	462a      	mov	r2, r5
 80137e0:	4621      	mov	r1, r4
 80137e2:	f7ff ff67 	bl	80136b4 <tcp_output_alloc_header_common>
 80137e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80137e8:	697b      	ldr	r3, [r7, #20]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d006      	beq.n	80137fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137f2:	68fa      	ldr	r2, [r7, #12]
 80137f4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80137f6:	441a      	add	r2, r3
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80137fc:	697b      	ldr	r3, [r7, #20]
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3718      	adds	r7, #24
 8013802:	46bd      	mov	sp, r7
 8013804:	bdb0      	pop	{r4, r5, r7, pc}
 8013806:	bf00      	nop
 8013808:	0801984c 	.word	0x0801984c
 801380c:	08019fb0 	.word	0x08019fb0
 8013810:	080198a0 	.word	0x080198a0

08013814 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af00      	add	r7, sp, #0
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	4611      	mov	r1, r2
 8013820:	461a      	mov	r2, r3
 8013822:	460b      	mov	r3, r1
 8013824:	71fb      	strb	r3, [r7, #7]
 8013826:	4613      	mov	r3, r2
 8013828:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801382a:	2300      	movs	r3, #0
 801382c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d106      	bne.n	8013842 <tcp_output_fill_options+0x2e>
 8013834:	4b12      	ldr	r3, [pc, #72]	@ (8013880 <tcp_output_fill_options+0x6c>)
 8013836:	f240 7256 	movw	r2, #1878	@ 0x756
 801383a:	4912      	ldr	r1, [pc, #72]	@ (8013884 <tcp_output_fill_options+0x70>)
 801383c:	4812      	ldr	r0, [pc, #72]	@ (8013888 <tcp_output_fill_options+0x74>)
 801383e:	f003 f8c9 	bl	80169d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013848:	69bb      	ldr	r3, [r7, #24]
 801384a:	3314      	adds	r3, #20
 801384c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801384e:	8bfb      	ldrh	r3, [r7, #30]
 8013850:	009b      	lsls	r3, r3, #2
 8013852:	461a      	mov	r2, r3
 8013854:	79fb      	ldrb	r3, [r7, #7]
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	f003 0304 	and.w	r3, r3, #4
 801385c:	4413      	add	r3, r2
 801385e:	3314      	adds	r3, #20
 8013860:	69ba      	ldr	r2, [r7, #24]
 8013862:	4413      	add	r3, r2
 8013864:	697a      	ldr	r2, [r7, #20]
 8013866:	429a      	cmp	r2, r3
 8013868:	d006      	beq.n	8013878 <tcp_output_fill_options+0x64>
 801386a:	4b05      	ldr	r3, [pc, #20]	@ (8013880 <tcp_output_fill_options+0x6c>)
 801386c:	f240 7275 	movw	r2, #1909	@ 0x775
 8013870:	4906      	ldr	r1, [pc, #24]	@ (801388c <tcp_output_fill_options+0x78>)
 8013872:	4805      	ldr	r0, [pc, #20]	@ (8013888 <tcp_output_fill_options+0x74>)
 8013874:	f003 f8ae 	bl	80169d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013878:	bf00      	nop
 801387a:	3720      	adds	r7, #32
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}
 8013880:	0801984c 	.word	0x0801984c
 8013884:	08019fd8 	.word	0x08019fd8
 8013888:	080198a0 	.word	0x080198a0
 801388c:	08019ed0 	.word	0x08019ed0

08013890 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08a      	sub	sp, #40	@ 0x28
 8013894:	af04      	add	r7, sp, #16
 8013896:	60f8      	str	r0, [r7, #12]
 8013898:	60b9      	str	r1, [r7, #8]
 801389a:	607a      	str	r2, [r7, #4]
 801389c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d106      	bne.n	80138b2 <tcp_output_control_segment+0x22>
 80138a4:	4b1c      	ldr	r3, [pc, #112]	@ (8013918 <tcp_output_control_segment+0x88>)
 80138a6:	f240 7287 	movw	r2, #1927	@ 0x787
 80138aa:	491c      	ldr	r1, [pc, #112]	@ (801391c <tcp_output_control_segment+0x8c>)
 80138ac:	481c      	ldr	r0, [pc, #112]	@ (8013920 <tcp_output_control_segment+0x90>)
 80138ae:	f003 f891 	bl	80169d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80138b2:	683a      	ldr	r2, [r7, #0]
 80138b4:	6879      	ldr	r1, [r7, #4]
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7fe ff2e 	bl	8012718 <tcp_route>
 80138bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d102      	bne.n	80138ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80138c4:	23fc      	movs	r3, #252	@ 0xfc
 80138c6:	75fb      	strb	r3, [r7, #23]
 80138c8:	e01c      	b.n	8013904 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d006      	beq.n	80138de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	7adb      	ldrb	r3, [r3, #11]
 80138d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	7a9b      	ldrb	r3, [r3, #10]
 80138da:	757b      	strb	r3, [r7, #21]
 80138dc:	e003      	b.n	80138e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80138de:	23ff      	movs	r3, #255	@ 0xff
 80138e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80138e2:	2300      	movs	r3, #0
 80138e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80138e6:	7dba      	ldrb	r2, [r7, #22]
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	9302      	str	r3, [sp, #8]
 80138ec:	2306      	movs	r3, #6
 80138ee:	9301      	str	r3, [sp, #4]
 80138f0:	7d7b      	ldrb	r3, [r7, #21]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	4613      	mov	r3, r2
 80138f6:	683a      	ldr	r2, [r7, #0]
 80138f8:	6879      	ldr	r1, [r7, #4]
 80138fa:	68b8      	ldr	r0, [r7, #8]
 80138fc:	f001 f94e 	bl	8014b9c <ip4_output_if>
 8013900:	4603      	mov	r3, r0
 8013902:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013904:	68b8      	ldr	r0, [r7, #8]
 8013906:	f7fa fdf5 	bl	800e4f4 <pbuf_free>
  return err;
 801390a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3718      	adds	r7, #24
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	0801984c 	.word	0x0801984c
 801391c:	0801a000 	.word	0x0801a000
 8013920:	080198a0 	.word	0x080198a0

08013924 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013924:	b590      	push	{r4, r7, lr}
 8013926:	b08b      	sub	sp, #44	@ 0x2c
 8013928:	af04      	add	r7, sp, #16
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
 8013930:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d106      	bne.n	8013946 <tcp_rst+0x22>
 8013938:	4b1f      	ldr	r3, [pc, #124]	@ (80139b8 <tcp_rst+0x94>)
 801393a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801393e:	491f      	ldr	r1, [pc, #124]	@ (80139bc <tcp_rst+0x98>)
 8013940:	481f      	ldr	r0, [pc, #124]	@ (80139c0 <tcp_rst+0x9c>)
 8013942:	f003 f847 	bl	80169d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <tcp_rst+0x36>
 801394c:	4b1a      	ldr	r3, [pc, #104]	@ (80139b8 <tcp_rst+0x94>)
 801394e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013952:	491c      	ldr	r1, [pc, #112]	@ (80139c4 <tcp_rst+0xa0>)
 8013954:	481a      	ldr	r0, [pc, #104]	@ (80139c0 <tcp_rst+0x9c>)
 8013956:	f003 f83d 	bl	80169d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801395a:	2300      	movs	r3, #0
 801395c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801395e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013962:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013964:	7dfb      	ldrb	r3, [r7, #23]
 8013966:	b29c      	uxth	r4, r3
 8013968:	68b8      	ldr	r0, [r7, #8]
 801396a:	f7f9 f90d 	bl	800cb88 <lwip_htonl>
 801396e:	4602      	mov	r2, r0
 8013970:	8abb      	ldrh	r3, [r7, #20]
 8013972:	9303      	str	r3, [sp, #12]
 8013974:	2314      	movs	r3, #20
 8013976:	9302      	str	r3, [sp, #8]
 8013978:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801397a:	9301      	str	r3, [sp, #4]
 801397c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801397e:	9300      	str	r3, [sp, #0]
 8013980:	4613      	mov	r3, r2
 8013982:	2200      	movs	r2, #0
 8013984:	4621      	mov	r1, r4
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7ff fe94 	bl	80136b4 <tcp_output_alloc_header_common>
 801398c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d00c      	beq.n	80139ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013994:	7dfb      	ldrb	r3, [r7, #23]
 8013996:	2200      	movs	r2, #0
 8013998:	6939      	ldr	r1, [r7, #16]
 801399a:	68f8      	ldr	r0, [r7, #12]
 801399c:	f7ff ff3a 	bl	8013814 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80139a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139a2:	683a      	ldr	r2, [r7, #0]
 80139a4:	6939      	ldr	r1, [r7, #16]
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f7ff ff72 	bl	8013890 <tcp_output_control_segment>
 80139ac:	e000      	b.n	80139b0 <tcp_rst+0x8c>
    return;
 80139ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80139b0:	371c      	adds	r7, #28
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd90      	pop	{r4, r7, pc}
 80139b6:	bf00      	nop
 80139b8:	0801984c 	.word	0x0801984c
 80139bc:	0801a02c 	.word	0x0801a02c
 80139c0:	080198a0 	.word	0x080198a0
 80139c4:	0801a048 	.word	0x0801a048

080139c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80139c8:	b590      	push	{r4, r7, lr}
 80139ca:	b087      	sub	sp, #28
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80139d0:	2300      	movs	r3, #0
 80139d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80139d4:	2300      	movs	r3, #0
 80139d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <tcp_send_empty_ack+0x24>
 80139de:	4b28      	ldr	r3, [pc, #160]	@ (8013a80 <tcp_send_empty_ack+0xb8>)
 80139e0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80139e4:	4927      	ldr	r1, [pc, #156]	@ (8013a84 <tcp_send_empty_ack+0xbc>)
 80139e6:	4828      	ldr	r0, [pc, #160]	@ (8013a88 <tcp_send_empty_ack+0xc0>)
 80139e8:	f002 fff4 	bl	80169d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80139ec:	7dfb      	ldrb	r3, [r7, #23]
 80139ee:	009b      	lsls	r3, r3, #2
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	f003 0304 	and.w	r3, r3, #4
 80139f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80139f8:	7d7b      	ldrb	r3, [r7, #21]
 80139fa:	b29c      	uxth	r4, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7f9 f8c1 	bl	800cb88 <lwip_htonl>
 8013a06:	4603      	mov	r3, r0
 8013a08:	2200      	movs	r2, #0
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	6878      	ldr	r0, [r7, #4]
 8013a0e:	f7ff fec3 	bl	8013798 <tcp_output_alloc_header>
 8013a12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d109      	bne.n	8013a2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	8b5b      	ldrh	r3, [r3, #26]
 8013a1e:	f043 0303 	orr.w	r3, r3, #3
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013a28:	f06f 0301 	mvn.w	r3, #1
 8013a2c:	e023      	b.n	8013a76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013a2e:	7dbb      	ldrb	r3, [r7, #22]
 8013a30:	7dfa      	ldrb	r2, [r7, #23]
 8013a32:	6939      	ldr	r1, [r7, #16]
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7ff feed 	bl	8013814 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	3304      	adds	r3, #4
 8013a40:	6939      	ldr	r1, [r7, #16]
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f7ff ff24 	bl	8013890 <tcp_output_control_segment>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d007      	beq.n	8013a64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	8b5b      	ldrh	r3, [r3, #26]
 8013a58:	f043 0303 	orr.w	r3, r3, #3
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	835a      	strh	r2, [r3, #26]
 8013a62:	e006      	b.n	8013a72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	8b5b      	ldrh	r3, [r3, #26]
 8013a68:	f023 0303 	bic.w	r3, r3, #3
 8013a6c:	b29a      	uxth	r2, r3
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	371c      	adds	r7, #28
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd90      	pop	{r4, r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	0801984c 	.word	0x0801984c
 8013a84:	0801a064 	.word	0x0801a064
 8013a88:	080198a0 	.word	0x080198a0

08013a8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013a8c:	b590      	push	{r4, r7, lr}
 8013a8e:	b085      	sub	sp, #20
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a94:	2300      	movs	r3, #0
 8013a96:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d106      	bne.n	8013aac <tcp_keepalive+0x20>
 8013a9e:	4b18      	ldr	r3, [pc, #96]	@ (8013b00 <tcp_keepalive+0x74>)
 8013aa0:	f640 0224 	movw	r2, #2084	@ 0x824
 8013aa4:	4917      	ldr	r1, [pc, #92]	@ (8013b04 <tcp_keepalive+0x78>)
 8013aa6:	4818      	ldr	r0, [pc, #96]	@ (8013b08 <tcp_keepalive+0x7c>)
 8013aa8:	f002 ff94 	bl	80169d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013aac:	7abb      	ldrb	r3, [r7, #10]
 8013aae:	b29c      	uxth	r4, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ab4:	3b01      	subs	r3, #1
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7f9 f866 	bl	800cb88 <lwip_htonl>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2200      	movs	r2, #0
 8013ac0:	4621      	mov	r1, r4
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f7ff fe68 	bl	8013798 <tcp_output_alloc_header>
 8013ac8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d102      	bne.n	8013ad6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad4:	e010      	b.n	8013af8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013ad6:	7abb      	ldrb	r3, [r7, #10]
 8013ad8:	2200      	movs	r2, #0
 8013ada:	68f9      	ldr	r1, [r7, #12]
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7ff fe99 	bl	8013814 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013ae2:	687a      	ldr	r2, [r7, #4]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	3304      	adds	r3, #4
 8013ae8:	68f9      	ldr	r1, [r7, #12]
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f7ff fed0 	bl	8013890 <tcp_output_control_segment>
 8013af0:	4603      	mov	r3, r0
 8013af2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013af4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3714      	adds	r7, #20
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd90      	pop	{r4, r7, pc}
 8013b00:	0801984c 	.word	0x0801984c
 8013b04:	0801a084 	.word	0x0801a084
 8013b08:	080198a0 	.word	0x080198a0

08013b0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013b0c:	b590      	push	{r4, r7, lr}
 8013b0e:	b08b      	sub	sp, #44	@ 0x2c
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b14:	2300      	movs	r3, #0
 8013b16:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d106      	bne.n	8013b2c <tcp_zero_window_probe+0x20>
 8013b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8013c54 <tcp_zero_window_probe+0x148>)
 8013b20:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013b24:	494c      	ldr	r1, [pc, #304]	@ (8013c58 <tcp_zero_window_probe+0x14c>)
 8013b26:	484d      	ldr	r0, [pc, #308]	@ (8013c5c <tcp_zero_window_probe+0x150>)
 8013b28:	f002 ff54 	bl	80169d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8013b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013b38:	2300      	movs	r3, #0
 8013b3a:	e087      	b.n	8013c4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013b42:	2bff      	cmp	r3, #255	@ 0xff
 8013b44:	d007      	beq.n	8013b56 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	b2da      	uxtb	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b58:	691b      	ldr	r3, [r3, #16]
 8013b5a:	899b      	ldrh	r3, [r3, #12]
 8013b5c:	b29b      	uxth	r3, r3
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7f8 fffc 	bl	800cb5c <lwip_htons>
 8013b64:	4603      	mov	r3, r0
 8013b66:	b2db      	uxtb	r3, r3
 8013b68:	f003 0301 	and.w	r3, r3, #1
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d005      	beq.n	8013b7c <tcp_zero_window_probe+0x70>
 8013b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b72:	891b      	ldrh	r3, [r3, #8]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d101      	bne.n	8013b7c <tcp_zero_window_probe+0x70>
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e000      	b.n	8013b7e <tcp_zero_window_probe+0x72>
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013b82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	bf0c      	ite	eq
 8013b8a:	2301      	moveq	r3, #1
 8013b8c:	2300      	movne	r3, #0
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013b92:	7cfb      	ldrb	r3, [r7, #19]
 8013b94:	b299      	uxth	r1, r3
 8013b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b98:	691b      	ldr	r3, [r3, #16]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	8c3a      	ldrh	r2, [r7, #32]
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7ff fdfa 	bl	8013798 <tcp_output_alloc_header>
 8013ba4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d102      	bne.n	8013bb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb0:	e04c      	b.n	8013c4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013bb2:	69fb      	ldr	r3, [r7, #28]
 8013bb4:	685b      	ldr	r3, [r3, #4]
 8013bb6:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8013bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d011      	beq.n	8013be4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013bc0:	69bb      	ldr	r3, [r7, #24]
 8013bc2:	899b      	ldrh	r3, [r3, #12]
 8013bc4:	b29b      	uxth	r3, r3
 8013bc6:	b21b      	sxth	r3, r3
 8013bc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013bcc:	b21c      	sxth	r4, r3
 8013bce:	2011      	movs	r0, #17
 8013bd0:	f7f8 ffc4 	bl	800cb5c <lwip_htons>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	b21b      	sxth	r3, r3
 8013bd8:	4323      	orrs	r3, r4
 8013bda:	b21b      	sxth	r3, r3
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	819a      	strh	r2, [r3, #12]
 8013be2:	e010      	b.n	8013c06 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	3314      	adds	r3, #20
 8013bea:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bee:	6858      	ldr	r0, [r3, #4]
 8013bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	891a      	ldrh	r2, [r3, #8]
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bf8:	891b      	ldrh	r3, [r3, #8]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	2201      	movs	r2, #1
 8013c00:	6979      	ldr	r1, [r7, #20]
 8013c02:	f7fa fe6d 	bl	800e8e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c08:	691b      	ldr	r3, [r3, #16]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7f8 ffbb 	bl	800cb88 <lwip_htonl>
 8013c12:	4603      	mov	r3, r0
 8013c14:	3301      	adds	r3, #1
 8013c16:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	1ad3      	subs	r3, r2, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	da02      	bge.n	8013c2a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013c2a:	7cfb      	ldrb	r3, [r7, #19]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	69f9      	ldr	r1, [r7, #28]
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7ff fdef 	bl	8013814 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	3304      	adds	r3, #4
 8013c3c:	69f9      	ldr	r1, [r7, #28]
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7ff fe26 	bl	8013890 <tcp_output_control_segment>
 8013c44:	4603      	mov	r3, r0
 8013c46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013c48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	372c      	adds	r7, #44	@ 0x2c
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd90      	pop	{r4, r7, pc}
 8013c54:	0801984c 	.word	0x0801984c
 8013c58:	0801a0a0 	.word	0x0801a0a0
 8013c5c:	080198a0 	.word	0x080198a0

08013c60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013c68:	f7fa fef6 	bl	800ea58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8013c98 <tcpip_tcp_timer+0x38>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d103      	bne.n	8013c7c <tcpip_tcp_timer+0x1c>
 8013c74:	4b09      	ldr	r3, [pc, #36]	@ (8013c9c <tcpip_tcp_timer+0x3c>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d005      	beq.n	8013c88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	4908      	ldr	r1, [pc, #32]	@ (8013ca0 <tcpip_tcp_timer+0x40>)
 8013c80:	20fa      	movs	r0, #250	@ 0xfa
 8013c82:	f000 f8f3 	bl	8013e6c <sys_timeout>
 8013c86:	e003      	b.n	8013c90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013c88:	4b06      	ldr	r3, [pc, #24]	@ (8013ca4 <tcpip_tcp_timer+0x44>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	601a      	str	r2, [r3, #0]
  }
}
 8013c8e:	bf00      	nop
 8013c90:	bf00      	nop
 8013c92:	3708      	adds	r7, #8
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}
 8013c98:	20013c68 	.word	0x20013c68
 8013c9c:	20013c6c 	.word	0x20013c6c
 8013ca0:	08013c61 	.word	0x08013c61
 8013ca4:	20013cb8 	.word	0x20013cb8

08013ca8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013cac:	4b0a      	ldr	r3, [pc, #40]	@ (8013cd8 <tcp_timer_needed+0x30>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d10f      	bne.n	8013cd4 <tcp_timer_needed+0x2c>
 8013cb4:	4b09      	ldr	r3, [pc, #36]	@ (8013cdc <tcp_timer_needed+0x34>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d103      	bne.n	8013cc4 <tcp_timer_needed+0x1c>
 8013cbc:	4b08      	ldr	r3, [pc, #32]	@ (8013ce0 <tcp_timer_needed+0x38>)
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d007      	beq.n	8013cd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013cc4:	4b04      	ldr	r3, [pc, #16]	@ (8013cd8 <tcp_timer_needed+0x30>)
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013cca:	2200      	movs	r2, #0
 8013ccc:	4905      	ldr	r1, [pc, #20]	@ (8013ce4 <tcp_timer_needed+0x3c>)
 8013cce:	20fa      	movs	r0, #250	@ 0xfa
 8013cd0:	f000 f8cc 	bl	8013e6c <sys_timeout>
  }
}
 8013cd4:	bf00      	nop
 8013cd6:	bd80      	pop	{r7, pc}
 8013cd8:	20013cb8 	.word	0x20013cb8
 8013cdc:	20013c68 	.word	0x20013c68
 8013ce0:	20013c6c 	.word	0x20013c6c
 8013ce4:	08013c61 	.word	0x08013c61

08013ce8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	60f8      	str	r0, [r7, #12]
 8013cf0:	60b9      	str	r1, [r7, #8]
 8013cf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013cf4:	200a      	movs	r0, #10
 8013cf6:	f7f9 fc09 	bl	800d50c <memp_malloc>
 8013cfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013cfc:	693b      	ldr	r3, [r7, #16]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d109      	bne.n	8013d16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d151      	bne.n	8013dac <sys_timeout_abs+0xc4>
 8013d08:	4b2a      	ldr	r3, [pc, #168]	@ (8013db4 <sys_timeout_abs+0xcc>)
 8013d0a:	22be      	movs	r2, #190	@ 0xbe
 8013d0c:	492a      	ldr	r1, [pc, #168]	@ (8013db8 <sys_timeout_abs+0xd0>)
 8013d0e:	482b      	ldr	r0, [pc, #172]	@ (8013dbc <sys_timeout_abs+0xd4>)
 8013d10:	f002 fe60 	bl	80169d4 <iprintf>
    return;
 8013d14:	e04a      	b.n	8013dac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	2200      	movs	r2, #0
 8013d1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	68ba      	ldr	r2, [r7, #8]
 8013d20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	687a      	ldr	r2, [r7, #4]
 8013d26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013d2e:	4b24      	ldr	r3, [pc, #144]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d103      	bne.n	8013d3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013d36:	4a22      	ldr	r2, [pc, #136]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	6013      	str	r3, [r2, #0]
    return;
 8013d3c:	e037      	b.n	8013dae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	685a      	ldr	r2, [r3, #4]
 8013d42:	4b1f      	ldr	r3, [pc, #124]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	1ad3      	subs	r3, r2, r3
 8013d4a:	0fdb      	lsrs	r3, r3, #31
 8013d4c:	f003 0301 	and.w	r3, r3, #1
 8013d50:	b2db      	uxtb	r3, r3
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d007      	beq.n	8013d66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013d56:	4b1a      	ldr	r3, [pc, #104]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013d5e:	4a18      	ldr	r2, [pc, #96]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	6013      	str	r3, [r2, #0]
 8013d64:	e023      	b.n	8013dae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013d66:	4b16      	ldr	r3, [pc, #88]	@ (8013dc0 <sys_timeout_abs+0xd8>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	617b      	str	r3, [r7, #20]
 8013d6c:	e01a      	b.n	8013da4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d00b      	beq.n	8013d8e <sys_timeout_abs+0xa6>
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	685a      	ldr	r2, [r3, #4]
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	1ad3      	subs	r3, r2, r3
 8013d82:	0fdb      	lsrs	r3, r3, #31
 8013d84:	f003 0301 	and.w	r3, r3, #1
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d007      	beq.n	8013d9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	601a      	str	r2, [r3, #0]
        break;
 8013d9c:	e007      	b.n	8013dae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013d9e:	697b      	ldr	r3, [r7, #20]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	617b      	str	r3, [r7, #20]
 8013da4:	697b      	ldr	r3, [r7, #20]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d1e1      	bne.n	8013d6e <sys_timeout_abs+0x86>
 8013daa:	e000      	b.n	8013dae <sys_timeout_abs+0xc6>
    return;
 8013dac:	bf00      	nop
      }
    }
  }
}
 8013dae:	3718      	adds	r7, #24
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	0801a0c4 	.word	0x0801a0c4
 8013db8:	0801a0f8 	.word	0x0801a0f8
 8013dbc:	0801a138 	.word	0x0801a138
 8013dc0:	20013cb0 	.word	0x20013cb0

08013dc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b086      	sub	sp, #24
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	4798      	blx	r3

  now = sys_now();
 8013dd6:	f7f3 fcbd 	bl	8007754 <sys_now>
 8013dda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	4b0f      	ldr	r3, [pc, #60]	@ (8013e20 <lwip_cyclic_timer+0x5c>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4413      	add	r3, r2
 8013de6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013de8:	68fa      	ldr	r2, [r7, #12]
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	1ad3      	subs	r3, r2, r3
 8013dee:	0fdb      	lsrs	r3, r3, #31
 8013df0:	f003 0301 	and.w	r3, r3, #1
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d009      	beq.n	8013e0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	4413      	add	r3, r2
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	4907      	ldr	r1, [pc, #28]	@ (8013e24 <lwip_cyclic_timer+0x60>)
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7ff ff6e 	bl	8013ce8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013e0c:	e004      	b.n	8013e18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	4904      	ldr	r1, [pc, #16]	@ (8013e24 <lwip_cyclic_timer+0x60>)
 8013e12:	68f8      	ldr	r0, [r7, #12]
 8013e14:	f7ff ff68 	bl	8013ce8 <sys_timeout_abs>
}
 8013e18:	bf00      	nop
 8013e1a:	3718      	adds	r7, #24
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	20013cb4 	.word	0x20013cb4
 8013e24:	08013dc5 	.word	0x08013dc5

08013e28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013e2e:	2301      	movs	r3, #1
 8013e30:	607b      	str	r3, [r7, #4]
 8013e32:	e00e      	b.n	8013e52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013e34:	4a0b      	ldr	r2, [pc, #44]	@ (8013e64 <sys_timeouts_init+0x3c>)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	00db      	lsls	r3, r3, #3
 8013e40:	4a08      	ldr	r2, [pc, #32]	@ (8013e64 <sys_timeouts_init+0x3c>)
 8013e42:	4413      	add	r3, r2
 8013e44:	461a      	mov	r2, r3
 8013e46:	4908      	ldr	r1, [pc, #32]	@ (8013e68 <sys_timeouts_init+0x40>)
 8013e48:	f000 f810 	bl	8013e6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	3301      	adds	r3, #1
 8013e50:	607b      	str	r3, [r7, #4]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2b01      	cmp	r3, #1
 8013e56:	d9ed      	bls.n	8013e34 <sys_timeouts_init+0xc>
  }
}
 8013e58:	bf00      	nop
 8013e5a:	bf00      	nop
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	0801af94 	.word	0x0801af94
 8013e68:	08013dc5 	.word	0x08013dc5

08013e6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b086      	sub	sp, #24
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	60f8      	str	r0, [r7, #12]
 8013e74:	60b9      	str	r1, [r7, #8]
 8013e76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e7e:	d306      	bcc.n	8013e8e <sys_timeout+0x22>
 8013e80:	4b0a      	ldr	r3, [pc, #40]	@ (8013eac <sys_timeout+0x40>)
 8013e82:	f240 1229 	movw	r2, #297	@ 0x129
 8013e86:	490a      	ldr	r1, [pc, #40]	@ (8013eb0 <sys_timeout+0x44>)
 8013e88:	480a      	ldr	r0, [pc, #40]	@ (8013eb4 <sys_timeout+0x48>)
 8013e8a:	f002 fda3 	bl	80169d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013e8e:	f7f3 fc61 	bl	8007754 <sys_now>
 8013e92:	4602      	mov	r2, r0
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	4413      	add	r3, r2
 8013e98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	68b9      	ldr	r1, [r7, #8]
 8013e9e:	6978      	ldr	r0, [r7, #20]
 8013ea0:	f7ff ff22 	bl	8013ce8 <sys_timeout_abs>
#endif
}
 8013ea4:	bf00      	nop
 8013ea6:	3718      	adds	r7, #24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	0801a0c4 	.word	0x0801a0c4
 8013eb0:	0801a160 	.word	0x0801a160
 8013eb4:	0801a138 	.word	0x0801a138

08013eb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013ebe:	f7f3 fc49 	bl	8007754 <sys_now>
 8013ec2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013ec4:	4b17      	ldr	r3, [pc, #92]	@ (8013f24 <sys_check_timeouts+0x6c>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d022      	beq.n	8013f16 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	685b      	ldr	r3, [r3, #4]
 8013ed4:	68fa      	ldr	r2, [r7, #12]
 8013ed6:	1ad3      	subs	r3, r2, r3
 8013ed8:	0fdb      	lsrs	r3, r3, #31
 8013eda:	f003 0301 	and.w	r3, r3, #1
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d11a      	bne.n	8013f1a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8013f24 <sys_check_timeouts+0x6c>)
 8013eea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	685b      	ldr	r3, [r3, #4]
 8013efc:	4a0a      	ldr	r2, [pc, #40]	@ (8013f28 <sys_check_timeouts+0x70>)
 8013efe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013f00:	68b9      	ldr	r1, [r7, #8]
 8013f02:	200a      	movs	r0, #10
 8013f04:	f7f9 fb78 	bl	800d5f8 <memp_free>
    if (handler != NULL) {
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d0da      	beq.n	8013ec4 <sys_check_timeouts+0xc>
      handler(arg);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6838      	ldr	r0, [r7, #0]
 8013f12:	4798      	blx	r3
  do {
 8013f14:	e7d6      	b.n	8013ec4 <sys_check_timeouts+0xc>
      return;
 8013f16:	bf00      	nop
 8013f18:	e000      	b.n	8013f1c <sys_check_timeouts+0x64>
      return;
 8013f1a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013f1c:	3710      	adds	r7, #16
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	20013cb0 	.word	0x20013cb0
 8013f28:	20013cb4 	.word	0x20013cb4

08013f2c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013f32:	4b16      	ldr	r3, [pc, #88]	@ (8013f8c <sys_timeouts_sleeptime+0x60>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d102      	bne.n	8013f40 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8013f3e:	e020      	b.n	8013f82 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013f40:	f7f3 fc08 	bl	8007754 <sys_now>
 8013f44:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013f46:	4b11      	ldr	r3, [pc, #68]	@ (8013f8c <sys_timeouts_sleeptime+0x60>)
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	685a      	ldr	r2, [r3, #4]
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	1ad3      	subs	r3, r2, r3
 8013f50:	0fdb      	lsrs	r3, r3, #31
 8013f52:	f003 0301 	and.w	r3, r3, #1
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d001      	beq.n	8013f60 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	e010      	b.n	8013f82 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013f60:	4b0a      	ldr	r3, [pc, #40]	@ (8013f8c <sys_timeouts_sleeptime+0x60>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	685a      	ldr	r2, [r3, #4]
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	1ad3      	subs	r3, r2, r3
 8013f6a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013f6c:	683b      	ldr	r3, [r7, #0]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	da06      	bge.n	8013f80 <sys_timeouts_sleeptime+0x54>
 8013f72:	4b07      	ldr	r3, [pc, #28]	@ (8013f90 <sys_timeouts_sleeptime+0x64>)
 8013f74:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013f78:	4906      	ldr	r1, [pc, #24]	@ (8013f94 <sys_timeouts_sleeptime+0x68>)
 8013f7a:	4807      	ldr	r0, [pc, #28]	@ (8013f98 <sys_timeouts_sleeptime+0x6c>)
 8013f7c:	f002 fd2a 	bl	80169d4 <iprintf>
    return ret;
 8013f80:	683b      	ldr	r3, [r7, #0]
  }
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3708      	adds	r7, #8
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20013cb0 	.word	0x20013cb0
 8013f90:	0801a0c4 	.word	0x0801a0c4
 8013f94:	0801a198 	.word	0x0801a198
 8013f98:	0801a138 	.word	0x0801a138

08013f9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013fa0:	f002 fc18 	bl	80167d4 <rand>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013fac:	b29b      	uxth	r3, r3
 8013fae:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	4b01      	ldr	r3, [pc, #4]	@ (8013fbc <udp_init+0x20>)
 8013fb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013fb8:	bf00      	nop
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	200000a4 	.word	0x200000a4

08013fc0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	4613      	mov	r3, r2
 8013fcc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d105      	bne.n	8013fe0 <udp_input_local_match+0x20>
 8013fd4:	4b27      	ldr	r3, [pc, #156]	@ (8014074 <udp_input_local_match+0xb4>)
 8013fd6:	2287      	movs	r2, #135	@ 0x87
 8013fd8:	4927      	ldr	r1, [pc, #156]	@ (8014078 <udp_input_local_match+0xb8>)
 8013fda:	4828      	ldr	r0, [pc, #160]	@ (801407c <udp_input_local_match+0xbc>)
 8013fdc:	f002 fcfa 	bl	80169d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d105      	bne.n	8013ff2 <udp_input_local_match+0x32>
 8013fe6:	4b23      	ldr	r3, [pc, #140]	@ (8014074 <udp_input_local_match+0xb4>)
 8013fe8:	2288      	movs	r2, #136	@ 0x88
 8013fea:	4925      	ldr	r1, [pc, #148]	@ (8014080 <udp_input_local_match+0xc0>)
 8013fec:	4823      	ldr	r0, [pc, #140]	@ (801407c <udp_input_local_match+0xbc>)
 8013fee:	f002 fcf1 	bl	80169d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	7a1b      	ldrb	r3, [r3, #8]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00b      	beq.n	8014012 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	7a1a      	ldrb	r2, [r3, #8]
 8013ffe:	4b21      	ldr	r3, [pc, #132]	@ (8014084 <udp_input_local_match+0xc4>)
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014006:	3301      	adds	r3, #1
 8014008:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801400a:	429a      	cmp	r2, r3
 801400c:	d001      	beq.n	8014012 <udp_input_local_match+0x52>
    return 0;
 801400e:	2300      	movs	r3, #0
 8014010:	e02b      	b.n	801406a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014012:	79fb      	ldrb	r3, [r7, #7]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d018      	beq.n	801404a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d013      	beq.n	8014046 <udp_input_local_match+0x86>
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	2b00      	cmp	r3, #0
 8014024:	d00f      	beq.n	8014046 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014026:	4b17      	ldr	r3, [pc, #92]	@ (8014084 <udp_input_local_match+0xc4>)
 8014028:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801402e:	d00a      	beq.n	8014046 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	4b13      	ldr	r3, [pc, #76]	@ (8014084 <udp_input_local_match+0xc4>)
 8014036:	695b      	ldr	r3, [r3, #20]
 8014038:	405a      	eors	r2, r3
 801403a:	68bb      	ldr	r3, [r7, #8]
 801403c:	3308      	adds	r3, #8
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014042:	2b00      	cmp	r3, #0
 8014044:	d110      	bne.n	8014068 <udp_input_local_match+0xa8>
          return 1;
 8014046:	2301      	movs	r3, #1
 8014048:	e00f      	b.n	801406a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d009      	beq.n	8014064 <udp_input_local_match+0xa4>
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d005      	beq.n	8014064 <udp_input_local_match+0xa4>
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	4b09      	ldr	r3, [pc, #36]	@ (8014084 <udp_input_local_match+0xc4>)
 801405e:	695b      	ldr	r3, [r3, #20]
 8014060:	429a      	cmp	r2, r3
 8014062:	d101      	bne.n	8014068 <udp_input_local_match+0xa8>
        return 1;
 8014064:	2301      	movs	r3, #1
 8014066:	e000      	b.n	801406a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014068:	2300      	movs	r3, #0
}
 801406a:	4618      	mov	r0, r3
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	0801a1ac 	.word	0x0801a1ac
 8014078:	0801a1dc 	.word	0x0801a1dc
 801407c:	0801a200 	.word	0x0801a200
 8014080:	0801a228 	.word	0x0801a228
 8014084:	20008f18 	.word	0x20008f18

08014088 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014088:	b590      	push	{r4, r7, lr}
 801408a:	b08d      	sub	sp, #52	@ 0x34
 801408c:	af02      	add	r7, sp, #8
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d105      	bne.n	80140a8 <udp_input+0x20>
 801409c:	4b95      	ldr	r3, [pc, #596]	@ (80142f4 <udp_input+0x26c>)
 801409e:	22cf      	movs	r2, #207	@ 0xcf
 80140a0:	4995      	ldr	r1, [pc, #596]	@ (80142f8 <udp_input+0x270>)
 80140a2:	4896      	ldr	r0, [pc, #600]	@ (80142fc <udp_input+0x274>)
 80140a4:	f002 fc96 	bl	80169d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80140a8:	683b      	ldr	r3, [r7, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d105      	bne.n	80140ba <udp_input+0x32>
 80140ae:	4b91      	ldr	r3, [pc, #580]	@ (80142f4 <udp_input+0x26c>)
 80140b0:	22d0      	movs	r2, #208	@ 0xd0
 80140b2:	4993      	ldr	r1, [pc, #588]	@ (8014300 <udp_input+0x278>)
 80140b4:	4891      	ldr	r0, [pc, #580]	@ (80142fc <udp_input+0x274>)
 80140b6:	f002 fc8d 	bl	80169d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	895b      	ldrh	r3, [r3, #10]
 80140be:	2b07      	cmp	r3, #7
 80140c0:	d809      	bhi.n	80140d6 <udp_input+0x4e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	891b      	ldrh	r3, [r3, #8]
 80140c6:	4619      	mov	r1, r3
 80140c8:	488e      	ldr	r0, [pc, #568]	@ (8014304 <udp_input+0x27c>)
 80140ca:	f002 fc83 	bl	80169d4 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7fa fa10 	bl	800e4f4 <pbuf_free>
    goto end;
 80140d4:	e18d      	b.n	80143f2 <udp_input+0x36a>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80140dc:	4b8a      	ldr	r3, [pc, #552]	@ (8014308 <udp_input+0x280>)
 80140de:	695b      	ldr	r3, [r3, #20]
 80140e0:	4a89      	ldr	r2, [pc, #548]	@ (8014308 <udp_input+0x280>)
 80140e2:	6812      	ldr	r2, [r2, #0]
 80140e4:	4611      	mov	r1, r2
 80140e6:	4618      	mov	r0, r3
 80140e8:	f000 fe30 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 80140ec:	4603      	mov	r3, r0
 80140ee:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	891b      	ldrh	r3, [r3, #8]
 80140f4:	4619      	mov	r1, r3
 80140f6:	4885      	ldr	r0, [pc, #532]	@ (801430c <udp_input+0x284>)
 80140f8:	f002 fc6c 	bl	80169d4 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	881b      	ldrh	r3, [r3, #0]
 8014100:	b29b      	uxth	r3, r3
 8014102:	4618      	mov	r0, r3
 8014104:	f7f8 fd2a 	bl	800cb5c <lwip_htons>
 8014108:	4603      	mov	r3, r0
 801410a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	885b      	ldrh	r3, [r3, #2]
 8014110:	b29b      	uxth	r3, r3
 8014112:	4618      	mov	r0, r3
 8014114:	f7f8 fd22 	bl	800cb5c <lwip_htons>
 8014118:	4603      	mov	r3, r0
 801411a:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801411c:	6978      	ldr	r0, [r7, #20]
 801411e:	f000 f9ab 	bl	8014478 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8014122:	487b      	ldr	r0, [pc, #492]	@ (8014310 <udp_input+0x288>)
 8014124:	f002 fc56 	bl	80169d4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8014128:	4b77      	ldr	r3, [pc, #476]	@ (8014308 <udp_input+0x280>)
 801412a:	695b      	ldr	r3, [r3, #20]
 801412c:	b2db      	uxtb	r3, r3
 801412e:	4619      	mov	r1, r3
 8014130:	4b75      	ldr	r3, [pc, #468]	@ (8014308 <udp_input+0x280>)
 8014132:	695b      	ldr	r3, [r3, #20]
 8014134:	0a1b      	lsrs	r3, r3, #8
 8014136:	b2db      	uxtb	r3, r3
 8014138:	461a      	mov	r2, r3
 801413a:	4b73      	ldr	r3, [pc, #460]	@ (8014308 <udp_input+0x280>)
 801413c:	695b      	ldr	r3, [r3, #20]
 801413e:	0c1b      	lsrs	r3, r3, #16
 8014140:	b2db      	uxtb	r3, r3
 8014142:	4618      	mov	r0, r3
 8014144:	4b70      	ldr	r3, [pc, #448]	@ (8014308 <udp_input+0x280>)
 8014146:	695b      	ldr	r3, [r3, #20]
 8014148:	0e1b      	lsrs	r3, r3, #24
 801414a:	b2db      	uxtb	r3, r3
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	4603      	mov	r3, r0
 8014150:	4870      	ldr	r0, [pc, #448]	@ (8014314 <udp_input+0x28c>)
 8014152:	f002 fc3f 	bl	80169d4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	885b      	ldrh	r3, [r3, #2]
 801415a:	b29b      	uxth	r3, r3
 801415c:	4618      	mov	r0, r3
 801415e:	f7f8 fcfd 	bl	800cb5c <lwip_htons>
 8014162:	4603      	mov	r3, r0
 8014164:	4619      	mov	r1, r3
 8014166:	486c      	ldr	r0, [pc, #432]	@ (8014318 <udp_input+0x290>)
 8014168:	f002 fc34 	bl	80169d4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801416c:	4b66      	ldr	r3, [pc, #408]	@ (8014308 <udp_input+0x280>)
 801416e:	691b      	ldr	r3, [r3, #16]
 8014170:	b2db      	uxtb	r3, r3
 8014172:	4619      	mov	r1, r3
 8014174:	4b64      	ldr	r3, [pc, #400]	@ (8014308 <udp_input+0x280>)
 8014176:	691b      	ldr	r3, [r3, #16]
 8014178:	0a1b      	lsrs	r3, r3, #8
 801417a:	b2db      	uxtb	r3, r3
 801417c:	461a      	mov	r2, r3
 801417e:	4b62      	ldr	r3, [pc, #392]	@ (8014308 <udp_input+0x280>)
 8014180:	691b      	ldr	r3, [r3, #16]
 8014182:	0c1b      	lsrs	r3, r3, #16
 8014184:	b2db      	uxtb	r3, r3
 8014186:	4618      	mov	r0, r3
 8014188:	4b5f      	ldr	r3, [pc, #380]	@ (8014308 <udp_input+0x280>)
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	0e1b      	lsrs	r3, r3, #24
 801418e:	b2db      	uxtb	r3, r3
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	4603      	mov	r3, r0
 8014194:	485f      	ldr	r0, [pc, #380]	@ (8014314 <udp_input+0x28c>)
 8014196:	f002 fc1d 	bl	80169d4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801419a:	697b      	ldr	r3, [r7, #20]
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	b29b      	uxth	r3, r3
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7f8 fcdb 	bl	800cb5c <lwip_htons>
 80141a6:	4603      	mov	r3, r0
 80141a8:	4619      	mov	r1, r3
 80141aa:	485c      	ldr	r0, [pc, #368]	@ (801431c <udp_input+0x294>)
 80141ac:	f002 fc12 	bl	80169d4 <iprintf>

  pcb = NULL;
 80141b0:	2300      	movs	r3, #0
 80141b2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80141b4:	2300      	movs	r3, #0
 80141b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80141b8:	2300      	movs	r3, #0
 80141ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80141bc:	4b58      	ldr	r3, [pc, #352]	@ (8014320 <udp_input+0x298>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80141c2:	e091      	b.n	80142e8 <udp_input+0x260>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 80141c4:	4857      	ldr	r0, [pc, #348]	@ (8014324 <udp_input+0x29c>)
 80141c6:	f002 fc05 	bl	80169d4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 80141ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	4619      	mov	r1, r3
 80141d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	0a1b      	lsrs	r3, r3, #8
 80141d8:	b2db      	uxtb	r3, r3
 80141da:	461a      	mov	r2, r3
 80141dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	0c1b      	lsrs	r3, r3, #16
 80141e2:	b2db      	uxtb	r3, r3
 80141e4:	4618      	mov	r0, r3
 80141e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	0e1b      	lsrs	r3, r3, #24
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	9300      	str	r3, [sp, #0]
 80141f0:	4603      	mov	r3, r0
 80141f2:	4848      	ldr	r0, [pc, #288]	@ (8014314 <udp_input+0x28c>)
 80141f4:	f002 fbee 	bl	80169d4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 80141f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141fa:	8a5b      	ldrh	r3, [r3, #18]
 80141fc:	4619      	mov	r1, r3
 80141fe:	4846      	ldr	r0, [pc, #280]	@ (8014318 <udp_input+0x290>)
 8014200:	f002 fbe8 	bl	80169d4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8014204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	b2db      	uxtb	r3, r3
 801420a:	4619      	mov	r1, r3
 801420c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801420e:	685b      	ldr	r3, [r3, #4]
 8014210:	0a1b      	lsrs	r3, r3, #8
 8014212:	b2db      	uxtb	r3, r3
 8014214:	461a      	mov	r2, r3
 8014216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	0c1b      	lsrs	r3, r3, #16
 801421c:	b2db      	uxtb	r3, r3
 801421e:	4618      	mov	r0, r3
 8014220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	0e1b      	lsrs	r3, r3, #24
 8014226:	b2db      	uxtb	r3, r3
 8014228:	9300      	str	r3, [sp, #0]
 801422a:	4603      	mov	r3, r0
 801422c:	4839      	ldr	r0, [pc, #228]	@ (8014314 <udp_input+0x28c>)
 801422e:	f002 fbd1 	bl	80169d4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8014232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014234:	8a9b      	ldrh	r3, [r3, #20]
 8014236:	4619      	mov	r1, r3
 8014238:	4838      	ldr	r0, [pc, #224]	@ (801431c <udp_input+0x294>)
 801423a:	f002 fbcb 	bl	80169d4 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014240:	8a5b      	ldrh	r3, [r3, #18]
 8014242:	89fa      	ldrh	r2, [r7, #14]
 8014244:	429a      	cmp	r2, r3
 8014246:	d14a      	bne.n	80142de <udp_input+0x256>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014248:	7cfb      	ldrb	r3, [r7, #19]
 801424a:	461a      	mov	r2, r3
 801424c:	6839      	ldr	r1, [r7, #0]
 801424e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014250:	f7ff feb6 	bl	8013fc0 <udp_input_local_match>
 8014254:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014256:	2b00      	cmp	r3, #0
 8014258:	d041      	beq.n	80142de <udp_input+0x256>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801425c:	7c1b      	ldrb	r3, [r3, #16]
 801425e:	f003 0304 	and.w	r3, r3, #4
 8014262:	2b00      	cmp	r3, #0
 8014264:	d11d      	bne.n	80142a2 <udp_input+0x21a>
        if (uncon_pcb == NULL) {
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d102      	bne.n	8014272 <udp_input+0x1ea>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801426c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426e:	61fb      	str	r3, [r7, #28]
 8014270:	e017      	b.n	80142a2 <udp_input+0x21a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014272:	7cfb      	ldrb	r3, [r7, #19]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d014      	beq.n	80142a2 <udp_input+0x21a>
 8014278:	4b23      	ldr	r3, [pc, #140]	@ (8014308 <udp_input+0x280>)
 801427a:	695b      	ldr	r3, [r3, #20]
 801427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014280:	d10f      	bne.n	80142a2 <udp_input+0x21a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	3304      	adds	r3, #4
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	429a      	cmp	r2, r3
 801428e:	d008      	beq.n	80142a2 <udp_input+0x21a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014292:	681a      	ldr	r2, [r3, #0]
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	3304      	adds	r3, #4
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	429a      	cmp	r2, r3
 801429c:	d101      	bne.n	80142a2 <udp_input+0x21a>
              /* better match */
              uncon_pcb = pcb;
 801429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a0:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80142a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a4:	8a9b      	ldrh	r3, [r3, #20]
 80142a6:	8a3a      	ldrh	r2, [r7, #16]
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d118      	bne.n	80142de <udp_input+0x256>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ae:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d005      	beq.n	80142c0 <udp_input+0x238>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80142b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142b6:	685a      	ldr	r2, [r3, #4]
 80142b8:	4b13      	ldr	r3, [pc, #76]	@ (8014308 <udp_input+0x280>)
 80142ba:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142bc:	429a      	cmp	r2, r3
 80142be:	d10e      	bne.n	80142de <udp_input+0x256>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80142c0:	6a3b      	ldr	r3, [r7, #32]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d030      	beq.n	8014328 <udp_input+0x2a0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80142c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c8:	68da      	ldr	r2, [r3, #12]
 80142ca:	6a3b      	ldr	r3, [r7, #32]
 80142cc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80142ce:	4b14      	ldr	r3, [pc, #80]	@ (8014320 <udp_input+0x298>)
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80142d6:	4a12      	ldr	r2, [pc, #72]	@ (8014320 <udp_input+0x298>)
 80142d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142da:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80142dc:	e024      	b.n	8014328 <udp_input+0x2a0>
      }
    }

    prev = pcb;
 80142de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142e4:	68db      	ldr	r3, [r3, #12]
 80142e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80142e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f47f af6a 	bne.w	80141c4 <udp_input+0x13c>
 80142f0:	e01b      	b.n	801432a <udp_input+0x2a2>
 80142f2:	bf00      	nop
 80142f4:	0801a1ac 	.word	0x0801a1ac
 80142f8:	0801a250 	.word	0x0801a250
 80142fc:	0801a200 	.word	0x0801a200
 8014300:	0801a268 	.word	0x0801a268
 8014304:	0801a284 	.word	0x0801a284
 8014308:	20008f18 	.word	0x20008f18
 801430c:	0801a2bc 	.word	0x0801a2bc
 8014310:	0801a2e8 	.word	0x0801a2e8
 8014314:	0801a2f0 	.word	0x0801a2f0
 8014318:	0801a300 	.word	0x0801a300
 801431c:	0801a310 	.word	0x0801a310
 8014320:	20013cbc 	.word	0x20013cbc
 8014324:	0801a318 	.word	0x0801a318
        break;
 8014328:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801432c:	2b00      	cmp	r3, #0
 801432e:	d101      	bne.n	8014334 <udp_input+0x2ac>
    pcb = uncon_pcb;
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014336:	2b00      	cmp	r3, #0
 8014338:	d002      	beq.n	8014340 <udp_input+0x2b8>
    for_us = 1;
 801433a:	2301      	movs	r3, #1
 801433c:	76fb      	strb	r3, [r7, #27]
 801433e:	e00a      	b.n	8014356 <udp_input+0x2ce>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	3304      	adds	r3, #4
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	4b2d      	ldr	r3, [pc, #180]	@ (80143fc <udp_input+0x374>)
 8014348:	695b      	ldr	r3, [r3, #20]
 801434a:	429a      	cmp	r2, r3
 801434c:	bf0c      	ite	eq
 801434e:	2301      	moveq	r3, #1
 8014350:	2300      	movne	r3, #0
 8014352:	b2db      	uxtb	r3, r3
 8014354:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014356:	7efb      	ldrb	r3, [r7, #27]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d047      	beq.n	80143ec <udp_input+0x364>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801435c:	4828      	ldr	r0, [pc, #160]	@ (8014400 <udp_input+0x378>)
 801435e:	f002 fba9 	bl	8016ab4 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014362:	2108      	movs	r1, #8
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f7fa f83f 	bl	800e3e8 <pbuf_remove_header>
 801436a:	4603      	mov	r3, r0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00a      	beq.n	8014386 <udp_input+0x2fe>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014370:	4b24      	ldr	r3, [pc, #144]	@ (8014404 <udp_input+0x37c>)
 8014372:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014376:	4924      	ldr	r1, [pc, #144]	@ (8014408 <udp_input+0x380>)
 8014378:	4824      	ldr	r0, [pc, #144]	@ (801440c <udp_input+0x384>)
 801437a:	f002 fb2b 	bl	80169d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f7fa f8b8 	bl	800e4f4 <pbuf_free>
      goto end;
 8014384:	e035      	b.n	80143f2 <udp_input+0x36a>
    }

    if (pcb != NULL) {
 8014386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014388:	2b00      	cmp	r3, #0
 801438a:	d012      	beq.n	80143b2 <udp_input+0x32a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801438e:	699b      	ldr	r3, [r3, #24]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00a      	beq.n	80143aa <udp_input+0x322>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014396:	699c      	ldr	r4, [r3, #24]
 8014398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439a:	69d8      	ldr	r0, [r3, #28]
 801439c:	8a3b      	ldrh	r3, [r7, #16]
 801439e:	9300      	str	r3, [sp, #0]
 80143a0:	4b1b      	ldr	r3, [pc, #108]	@ (8014410 <udp_input+0x388>)
 80143a2:	687a      	ldr	r2, [r7, #4]
 80143a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80143a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80143a8:	e024      	b.n	80143f4 <udp_input+0x36c>
        pbuf_free(p);
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7fa f8a2 	bl	800e4f4 <pbuf_free>
        goto end;
 80143b0:	e01f      	b.n	80143f2 <udp_input+0x36a>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 80143b2:	4818      	ldr	r0, [pc, #96]	@ (8014414 <udp_input+0x38c>)
 80143b4:	f002 fb7e 	bl	8016ab4 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80143b8:	7cfb      	ldrb	r3, [r7, #19]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d112      	bne.n	80143e4 <udp_input+0x35c>
 80143be:	4b0f      	ldr	r3, [pc, #60]	@ (80143fc <udp_input+0x374>)
 80143c0:	695b      	ldr	r3, [r3, #20]
 80143c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80143c6:	2be0      	cmp	r3, #224	@ 0xe0
 80143c8:	d00c      	beq.n	80143e4 <udp_input+0x35c>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80143ca:	4b0c      	ldr	r3, [pc, #48]	@ (80143fc <udp_input+0x374>)
 80143cc:	899b      	ldrh	r3, [r3, #12]
 80143ce:	3308      	adds	r3, #8
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	b21b      	sxth	r3, r3
 80143d4:	4619      	mov	r1, r3
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7fa f879 	bl	800e4ce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80143dc:	2103      	movs	r1, #3
 80143de:	6878      	ldr	r0, [r7, #4]
 80143e0:	f000 f994 	bl	801470c <icmp_dest_unreach>
      pbuf_free(p);
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7fa f885 	bl	800e4f4 <pbuf_free>
  return;
 80143ea:	e003      	b.n	80143f4 <udp_input+0x36c>
    pbuf_free(p);
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f7fa f881 	bl	800e4f4 <pbuf_free>
  return;
 80143f2:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80143f4:	372c      	adds	r7, #44	@ 0x2c
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd90      	pop	{r4, r7, pc}
 80143fa:	bf00      	nop
 80143fc:	20008f18 	.word	0x20008f18
 8014400:	0801a320 	.word	0x0801a320
 8014404:	0801a1ac 	.word	0x0801a1ac
 8014408:	0801a340 	.word	0x0801a340
 801440c:	0801a200 	.word	0x0801a200
 8014410:	20008f28 	.word	0x20008f28
 8014414:	0801a35c 	.word	0x0801a35c

08014418 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d01e      	beq.n	8014466 <udp_netif_ip_addr_changed+0x4e>
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d01a      	beq.n	8014466 <udp_netif_ip_addr_changed+0x4e>
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d017      	beq.n	8014466 <udp_netif_ip_addr_changed+0x4e>
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d013      	beq.n	8014466 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801443e:	4b0d      	ldr	r3, [pc, #52]	@ (8014474 <udp_netif_ip_addr_changed+0x5c>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	60fb      	str	r3, [r7, #12]
 8014444:	e00c      	b.n	8014460 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	429a      	cmp	r2, r3
 8014450:	d103      	bne.n	801445a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	68db      	ldr	r3, [r3, #12]
 801445e:	60fb      	str	r3, [r7, #12]
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d1ef      	bne.n	8014446 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014466:	bf00      	nop
 8014468:	3714      	adds	r7, #20
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop
 8014474:	20013cbc 	.word	0x20013cbc

08014478 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8014478:	b590      	push	{r4, r7, lr}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 8014480:	481b      	ldr	r0, [pc, #108]	@ (80144f0 <udp_debug_print+0x78>)
 8014482:	f002 fb17 	bl	8016ab4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8014486:	481b      	ldr	r0, [pc, #108]	@ (80144f4 <udp_debug_print+0x7c>)
 8014488:	f002 fb14 	bl	8016ab4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	881b      	ldrh	r3, [r3, #0]
 8014490:	b29b      	uxth	r3, r3
 8014492:	4618      	mov	r0, r3
 8014494:	f7f8 fb62 	bl	800cb5c <lwip_htons>
 8014498:	4603      	mov	r3, r0
 801449a:	461c      	mov	r4, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	885b      	ldrh	r3, [r3, #2]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7f8 fb5a 	bl	800cb5c <lwip_htons>
 80144a8:	4603      	mov	r3, r0
 80144aa:	461a      	mov	r2, r3
 80144ac:	4621      	mov	r1, r4
 80144ae:	4812      	ldr	r0, [pc, #72]	@ (80144f8 <udp_debug_print+0x80>)
 80144b0:	f002 fa90 	bl	80169d4 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80144b4:	480f      	ldr	r0, [pc, #60]	@ (80144f4 <udp_debug_print+0x7c>)
 80144b6:	f002 fafd 	bl	8016ab4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	889b      	ldrh	r3, [r3, #4]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7f8 fb4b 	bl	800cb5c <lwip_htons>
 80144c6:	4603      	mov	r3, r0
 80144c8:	461c      	mov	r4, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	88db      	ldrh	r3, [r3, #6]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f8 fb43 	bl	800cb5c <lwip_htons>
 80144d6:	4603      	mov	r3, r0
 80144d8:	461a      	mov	r2, r3
 80144da:	4621      	mov	r1, r4
 80144dc:	4807      	ldr	r0, [pc, #28]	@ (80144fc <udp_debug_print+0x84>)
 80144de:	f002 fa79 	bl	80169d4 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80144e2:	4804      	ldr	r0, [pc, #16]	@ (80144f4 <udp_debug_print+0x7c>)
 80144e4:	f002 fae6 	bl	8016ab4 <puts>
}
 80144e8:	bf00      	nop
 80144ea:	370c      	adds	r7, #12
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd90      	pop	{r4, r7, pc}
 80144f0:	0801a838 	.word	0x0801a838
 80144f4:	0801a844 	.word	0x0801a844
 80144f8:	0801a868 	.word	0x0801a868
 80144fc:	0801a8a0 	.word	0x0801a8a0

08014500 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b08e      	sub	sp, #56	@ 0x38
 8014504:	af04      	add	r7, sp, #16
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801450a:	4b7a      	ldr	r3, [pc, #488]	@ (80146f4 <icmp_input+0x1f4>)
 801450c:	689b      	ldr	r3, [r3, #8]
 801450e:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f003 030f 	and.w	r3, r3, #15
 8014518:	b2db      	uxtb	r3, r3
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	b2db      	uxtb	r3, r3
 801451e:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8014520:	8bfb      	ldrh	r3, [r7, #30]
 8014522:	2b13      	cmp	r3, #19
 8014524:	f240 80d3 	bls.w	80146ce <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	895b      	ldrh	r3, [r3, #10]
 801452c:	2b03      	cmp	r3, #3
 801452e:	f240 80d0 	bls.w	80146d2 <icmp_input+0x1d2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	785b      	ldrb	r3, [r3, #1]
 8014540:	773b      	strb	r3, [r7, #28]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014542:	7f7b      	ldrb	r3, [r7, #29]
 8014544:	2b00      	cmp	r3, #0
 8014546:	f000 80bb 	beq.w	80146c0 <icmp_input+0x1c0>
 801454a:	2b08      	cmp	r3, #8
 801454c:	f040 80bb 	bne.w	80146c6 <icmp_input+0x1c6>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014550:	4b69      	ldr	r3, [pc, #420]	@ (80146f8 <icmp_input+0x1f8>)
 8014552:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014554:	4b67      	ldr	r3, [pc, #412]	@ (80146f4 <icmp_input+0x1f4>)
 8014556:	695b      	ldr	r3, [r3, #20]
 8014558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801455c:	2be0      	cmp	r3, #224	@ 0xe0
 801455e:	d102      	bne.n	8014566 <icmp_input+0x66>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	3304      	adds	r3, #4
 8014564:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014566:	4b63      	ldr	r3, [pc, #396]	@ (80146f4 <icmp_input+0x1f4>)
 8014568:	695b      	ldr	r3, [r3, #20]
 801456a:	4a62      	ldr	r2, [pc, #392]	@ (80146f4 <icmp_input+0x1f4>)
 801456c:	6812      	ldr	r2, [r2, #0]
 801456e:	4611      	mov	r1, r2
 8014570:	4618      	mov	r0, r3
 8014572:	f000 fbeb 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d002      	beq.n	8014582 <icmp_input+0x82>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	3304      	adds	r3, #4
 8014580:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	891b      	ldrh	r3, [r3, #8]
 8014586:	2b07      	cmp	r3, #7
 8014588:	f240 80a5 	bls.w	80146d6 <icmp_input+0x1d6>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801458c:	8bfb      	ldrh	r3, [r7, #30]
 801458e:	3310      	adds	r3, #16
 8014590:	4619      	mov	r1, r3
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f7f9 ff18 	bl	800e3c8 <pbuf_add_header>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	d04b      	beq.n	8014636 <icmp_input+0x136>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	891a      	ldrh	r2, [r3, #8]
 80145a2:	8bfb      	ldrh	r3, [r7, #30]
 80145a4:	4413      	add	r3, r2
 80145a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	891b      	ldrh	r3, [r3, #8]
 80145ac:	8b7a      	ldrh	r2, [r7, #26]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	f0c0 8096 	bcc.w	80146e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80145b4:	8b7b      	ldrh	r3, [r7, #26]
 80145b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80145ba:	4619      	mov	r1, r3
 80145bc:	2010      	movs	r0, #16
 80145be:	f7f9 fcb5 	bl	800df2c <pbuf_alloc>
 80145c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	f000 808c 	beq.w	80146e4 <icmp_input+0x1e4>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80145cc:	697b      	ldr	r3, [r7, #20]
 80145ce:	895b      	ldrh	r3, [r3, #10]
 80145d0:	461a      	mov	r2, r3
 80145d2:	8bfb      	ldrh	r3, [r7, #30]
 80145d4:	3308      	adds	r3, #8
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d203      	bcs.n	80145e2 <icmp_input+0xe2>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80145da:	6978      	ldr	r0, [r7, #20]
 80145dc:	f7f9 ff8a 	bl	800e4f4 <pbuf_free>
          goto icmperr;
 80145e0:	e081      	b.n	80146e6 <icmp_input+0x1e6>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	8bfa      	ldrh	r2, [r7, #30]
 80145e8:	6a39      	ldr	r1, [r7, #32]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f002 fc75 	bl	8016eda <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80145f0:	8bfb      	ldrh	r3, [r7, #30]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6978      	ldr	r0, [r7, #20]
 80145f6:	f7f9 fef7 	bl	800e3e8 <pbuf_remove_header>
 80145fa:	4603      	mov	r3, r0
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d009      	beq.n	8014614 <icmp_input+0x114>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014600:	4b3e      	ldr	r3, [pc, #248]	@ (80146fc <icmp_input+0x1fc>)
 8014602:	22b6      	movs	r2, #182	@ 0xb6
 8014604:	493e      	ldr	r1, [pc, #248]	@ (8014700 <icmp_input+0x200>)
 8014606:	483f      	ldr	r0, [pc, #252]	@ (8014704 <icmp_input+0x204>)
 8014608:	f002 f9e4 	bl	80169d4 <iprintf>
          pbuf_free(r);
 801460c:	6978      	ldr	r0, [r7, #20]
 801460e:	f7f9 ff71 	bl	800e4f4 <pbuf_free>
          goto icmperr;
 8014612:	e068      	b.n	80146e6 <icmp_input+0x1e6>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014614:	6879      	ldr	r1, [r7, #4]
 8014616:	6978      	ldr	r0, [r7, #20]
 8014618:	f7fa f890 	bl	800e73c <pbuf_copy>
 801461c:	4603      	mov	r3, r0
 801461e:	2b00      	cmp	r3, #0
 8014620:	d003      	beq.n	801462a <icmp_input+0x12a>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014622:	6978      	ldr	r0, [r7, #20]
 8014624:	f7f9 ff66 	bl	800e4f4 <pbuf_free>
          goto icmperr;
 8014628:	e05d      	b.n	80146e6 <icmp_input+0x1e6>
        }
        /* free the original p */
        pbuf_free(p);
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7f9 ff62 	bl	800e4f4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	607b      	str	r3, [r7, #4]
 8014634:	e00f      	b.n	8014656 <icmp_input+0x156>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014636:	8bfb      	ldrh	r3, [r7, #30]
 8014638:	3310      	adds	r3, #16
 801463a:	4619      	mov	r1, r3
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f7f9 fed3 	bl	800e3e8 <pbuf_remove_header>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d006      	beq.n	8014656 <icmp_input+0x156>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014648:	4b2c      	ldr	r3, [pc, #176]	@ (80146fc <icmp_input+0x1fc>)
 801464a:	22c7      	movs	r2, #199	@ 0xc7
 801464c:	492e      	ldr	r1, [pc, #184]	@ (8014708 <icmp_input+0x208>)
 801464e:	482d      	ldr	r0, [pc, #180]	@ (8014704 <icmp_input+0x204>)
 8014650:	f002 f9c0 	bl	80169d4 <iprintf>
          goto icmperr;
 8014654:	e047      	b.n	80146e6 <icmp_input+0x1e6>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801465c:	8bfb      	ldrh	r3, [r7, #30]
 801465e:	4619      	mov	r1, r3
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f7f9 feb1 	bl	800e3c8 <pbuf_add_header>
 8014666:	4603      	mov	r3, r0
 8014668:	2b00      	cmp	r3, #0
 801466a:	d12b      	bne.n	80146c4 <icmp_input+0x1c4>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	685b      	ldr	r3, [r3, #4]
 8014670:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801467a:	4b1e      	ldr	r3, [pc, #120]	@ (80146f4 <icmp_input+0x1f4>)
 801467c:	691a      	ldr	r2, [r3, #16]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	2200      	movs	r2, #0
 8014686:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	2200      	movs	r2, #0
 801468c:	709a      	strb	r2, [r3, #2]
 801468e:	2200      	movs	r2, #0
 8014690:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	22ff      	movs	r2, #255	@ 0xff
 8014696:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2200      	movs	r2, #0
 801469c:	729a      	strb	r2, [r3, #10]
 801469e:	2200      	movs	r2, #0
 80146a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	9302      	str	r3, [sp, #8]
 80146a6:	2301      	movs	r3, #1
 80146a8:	9301      	str	r3, [sp, #4]
 80146aa:	2300      	movs	r3, #0
 80146ac:	9300      	str	r3, [sp, #0]
 80146ae:	23ff      	movs	r3, #255	@ 0xff
 80146b0:	2200      	movs	r2, #0
 80146b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f000 fa71 	bl	8014b9c <ip4_output_if>
 80146ba:	4603      	mov	r3, r0
 80146bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80146be:	e001      	b.n	80146c4 <icmp_input+0x1c4>
      break;
 80146c0:	bf00      	nop
 80146c2:	e000      	b.n	80146c6 <icmp_input+0x1c6>
      break;
 80146c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f7f9 ff14 	bl	800e4f4 <pbuf_free>
  return;
 80146cc:	e00f      	b.n	80146ee <icmp_input+0x1ee>
    goto lenerr;
 80146ce:	bf00      	nop
 80146d0:	e002      	b.n	80146d8 <icmp_input+0x1d8>
    goto lenerr;
 80146d2:	bf00      	nop
 80146d4:	e000      	b.n	80146d8 <icmp_input+0x1d8>
        goto lenerr;
 80146d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7f9 ff0b 	bl	800e4f4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80146de:	e006      	b.n	80146ee <icmp_input+0x1ee>
          goto icmperr;
 80146e0:	bf00      	nop
 80146e2:	e000      	b.n	80146e6 <icmp_input+0x1e6>
          goto icmperr;
 80146e4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7f9 ff04 	bl	800e4f4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80146ec:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80146ee:	3728      	adds	r7, #40	@ 0x28
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	20008f18 	.word	0x20008f18
 80146f8:	20008f2c 	.word	0x20008f2c
 80146fc:	0801a8d4 	.word	0x0801a8d4
 8014700:	0801a90c 	.word	0x0801a90c
 8014704:	0801a944 	.word	0x0801a944
 8014708:	0801a96c 	.word	0x0801a96c

0801470c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014718:	78fb      	ldrb	r3, [r7, #3]
 801471a:	461a      	mov	r2, r3
 801471c:	2103      	movs	r1, #3
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f000 f814 	bl	801474c <icmp_send_response>
}
 8014724:	bf00      	nop
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	460b      	mov	r3, r1
 8014736:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014738:	78fb      	ldrb	r3, [r7, #3]
 801473a:	461a      	mov	r2, r3
 801473c:	210b      	movs	r1, #11
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f000 f804 	bl	801474c <icmp_send_response>
}
 8014744:	bf00      	nop
 8014746:	3708      	adds	r7, #8
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}

0801474c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b08c      	sub	sp, #48	@ 0x30
 8014750:	af04      	add	r7, sp, #16
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	460b      	mov	r3, r1
 8014756:	70fb      	strb	r3, [r7, #3]
 8014758:	4613      	mov	r3, r2
 801475a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801475c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014760:	2124      	movs	r1, #36	@ 0x24
 8014762:	2024      	movs	r0, #36	@ 0x24
 8014764:	f7f9 fbe2 	bl	800df2c <pbuf_alloc>
 8014768:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801476a:	69bb      	ldr	r3, [r7, #24]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d04c      	beq.n	801480a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	895b      	ldrh	r3, [r3, #10]
 8014774:	2b23      	cmp	r3, #35	@ 0x23
 8014776:	d806      	bhi.n	8014786 <icmp_send_response+0x3a>
 8014778:	4b26      	ldr	r3, [pc, #152]	@ (8014814 <icmp_send_response+0xc8>)
 801477a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801477e:	4926      	ldr	r1, [pc, #152]	@ (8014818 <icmp_send_response+0xcc>)
 8014780:	4826      	ldr	r0, [pc, #152]	@ (801481c <icmp_send_response+0xd0>)
 8014782:	f002 f927 	bl	80169d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801478c:	69bb      	ldr	r3, [r7, #24]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	78fa      	ldrb	r2, [r7, #3]
 8014796:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	78ba      	ldrb	r2, [r7, #2]
 801479c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	2200      	movs	r2, #0
 80147a2:	711a      	strb	r2, [r3, #4]
 80147a4:	2200      	movs	r2, #0
 80147a6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	2200      	movs	r2, #0
 80147ac:	719a      	strb	r2, [r3, #6]
 80147ae:	2200      	movs	r2, #0
 80147b0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	f103 0008 	add.w	r0, r3, #8
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	221c      	movs	r2, #28
 80147c0:	4619      	mov	r1, r3
 80147c2:	f002 fb8a 	bl	8016eda <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80147cc:	f107 030c 	add.w	r3, r7, #12
 80147d0:	4618      	mov	r0, r3
 80147d2:	f000 f825 	bl	8014820 <ip4_route>
 80147d6:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d011      	beq.n	8014802 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80147de:	693b      	ldr	r3, [r7, #16]
 80147e0:	2200      	movs	r2, #0
 80147e2:	709a      	strb	r2, [r3, #2]
 80147e4:	2200      	movs	r2, #0
 80147e6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80147e8:	f107 020c 	add.w	r2, r7, #12
 80147ec:	69fb      	ldr	r3, [r7, #28]
 80147ee:	9302      	str	r3, [sp, #8]
 80147f0:	2301      	movs	r3, #1
 80147f2:	9301      	str	r3, [sp, #4]
 80147f4:	2300      	movs	r3, #0
 80147f6:	9300      	str	r3, [sp, #0]
 80147f8:	23ff      	movs	r3, #255	@ 0xff
 80147fa:	2100      	movs	r1, #0
 80147fc:	69b8      	ldr	r0, [r7, #24]
 80147fe:	f000 f9cd 	bl	8014b9c <ip4_output_if>
  }
  pbuf_free(q);
 8014802:	69b8      	ldr	r0, [r7, #24]
 8014804:	f7f9 fe76 	bl	800e4f4 <pbuf_free>
 8014808:	e000      	b.n	801480c <icmp_send_response+0xc0>
    return;
 801480a:	bf00      	nop
}
 801480c:	3720      	adds	r7, #32
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	0801a8d4 	.word	0x0801a8d4
 8014818:	0801a9a0 	.word	0x0801a9a0
 801481c:	0801a944 	.word	0x0801a944

08014820 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014820:	b480      	push	{r7}
 8014822:	b085      	sub	sp, #20
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014828:	4b33      	ldr	r3, [pc, #204]	@ (80148f8 <ip4_route+0xd8>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	60fb      	str	r3, [r7, #12]
 801482e:	e036      	b.n	801489e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014836:	f003 0301 	and.w	r3, r3, #1
 801483a:	b2db      	uxtb	r3, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	d02b      	beq.n	8014898 <ip4_route+0x78>
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014846:	089b      	lsrs	r3, r3, #2
 8014848:	f003 0301 	and.w	r3, r3, #1
 801484c:	b2db      	uxtb	r3, r3
 801484e:	2b00      	cmp	r3, #0
 8014850:	d022      	beq.n	8014898 <ip4_route+0x78>
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	3304      	adds	r3, #4
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d01d      	beq.n	8014898 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	3304      	adds	r3, #4
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	405a      	eors	r2, r3
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	3308      	adds	r3, #8
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	4013      	ands	r3, r2
 8014870:	2b00      	cmp	r3, #0
 8014872:	d101      	bne.n	8014878 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	e038      	b.n	80148ea <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801487e:	f003 0302 	and.w	r3, r3, #2
 8014882:	2b00      	cmp	r3, #0
 8014884:	d108      	bne.n	8014898 <ip4_route+0x78>
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	330c      	adds	r3, #12
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	429a      	cmp	r2, r3
 8014892:	d101      	bne.n	8014898 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	e028      	b.n	80148ea <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d1c5      	bne.n	8014830 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80148a4:	4b15      	ldr	r3, [pc, #84]	@ (80148fc <ip4_route+0xdc>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d01a      	beq.n	80148e2 <ip4_route+0xc2>
 80148ac:	4b13      	ldr	r3, [pc, #76]	@ (80148fc <ip4_route+0xdc>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148b4:	f003 0301 	and.w	r3, r3, #1
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d012      	beq.n	80148e2 <ip4_route+0xc2>
 80148bc:	4b0f      	ldr	r3, [pc, #60]	@ (80148fc <ip4_route+0xdc>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80148c4:	f003 0304 	and.w	r3, r3, #4
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d00a      	beq.n	80148e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80148cc:	4b0b      	ldr	r3, [pc, #44]	@ (80148fc <ip4_route+0xdc>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	3304      	adds	r3, #4
 80148d2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d004      	beq.n	80148e2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	2b7f      	cmp	r3, #127	@ 0x7f
 80148e0:	d101      	bne.n	80148e6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80148e2:	2300      	movs	r3, #0
 80148e4:	e001      	b.n	80148ea <ip4_route+0xca>
  }

  return netif_default;
 80148e6:	4b05      	ldr	r3, [pc, #20]	@ (80148fc <ip4_route+0xdc>)
 80148e8:	681b      	ldr	r3, [r3, #0]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3714      	adds	r7, #20
 80148ee:	46bd      	mov	sp, r7
 80148f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f4:	4770      	bx	lr
 80148f6:	bf00      	nop
 80148f8:	20013c50 	.word	0x20013c50
 80148fc:	20013c54 	.word	0x20013c54

08014900 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801490e:	f003 0301 	and.w	r3, r3, #1
 8014912:	b2db      	uxtb	r3, r3
 8014914:	2b00      	cmp	r3, #0
 8014916:	d016      	beq.n	8014946 <ip4_input_accept+0x46>
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3304      	adds	r3, #4
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d011      	beq.n	8014946 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014922:	4b0b      	ldr	r3, [pc, #44]	@ (8014950 <ip4_input_accept+0x50>)
 8014924:	695a      	ldr	r2, [r3, #20]
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3304      	adds	r3, #4
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	429a      	cmp	r2, r3
 801492e:	d008      	beq.n	8014942 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014930:	4b07      	ldr	r3, [pc, #28]	@ (8014950 <ip4_input_accept+0x50>)
 8014932:	695b      	ldr	r3, [r3, #20]
 8014934:	6879      	ldr	r1, [r7, #4]
 8014936:	4618      	mov	r0, r3
 8014938:	f000 fa08 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 801493c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014942:	2301      	movs	r3, #1
 8014944:	e000      	b.n	8014948 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014946:	2300      	movs	r3, #0
}
 8014948:	4618      	mov	r0, r3
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	20008f18 	.word	0x20008f18

08014954 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b086      	sub	sp, #24
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
 801495c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	091b      	lsrs	r3, r3, #4
 801496a:	b2db      	uxtb	r3, r3
 801496c:	2b04      	cmp	r3, #4
 801496e:	d004      	beq.n	801497a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f7f9 fdbf 	bl	800e4f4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014976:	2300      	movs	r3, #0
 8014978:	e107      	b.n	8014b8a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801497a:	693b      	ldr	r3, [r7, #16]
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	f003 030f 	and.w	r3, r3, #15
 8014982:	b2db      	uxtb	r3, r3
 8014984:	009b      	lsls	r3, r3, #2
 8014986:	b2db      	uxtb	r3, r3
 8014988:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801498a:	693b      	ldr	r3, [r7, #16]
 801498c:	885b      	ldrh	r3, [r3, #2]
 801498e:	b29b      	uxth	r3, r3
 8014990:	4618      	mov	r0, r3
 8014992:	f7f8 f8e3 	bl	800cb5c <lwip_htons>
 8014996:	4603      	mov	r3, r0
 8014998:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	891b      	ldrh	r3, [r3, #8]
 801499e:	89ba      	ldrh	r2, [r7, #12]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d204      	bcs.n	80149ae <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80149a4:	89bb      	ldrh	r3, [r7, #12]
 80149a6:	4619      	mov	r1, r3
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7f9 fc1d 	bl	800e1e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	895b      	ldrh	r3, [r3, #10]
 80149b2:	89fa      	ldrh	r2, [r7, #14]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d807      	bhi.n	80149c8 <ip4_input+0x74>
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	891b      	ldrh	r3, [r3, #8]
 80149bc:	89ba      	ldrh	r2, [r7, #12]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d802      	bhi.n	80149c8 <ip4_input+0x74>
 80149c2:	89fb      	ldrh	r3, [r7, #14]
 80149c4:	2b13      	cmp	r3, #19
 80149c6:	d804      	bhi.n	80149d2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f7f9 fd93 	bl	800e4f4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80149ce:	2300      	movs	r3, #0
 80149d0:	e0db      	b.n	8014b8a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	691b      	ldr	r3, [r3, #16]
 80149d6:	4a6f      	ldr	r2, [pc, #444]	@ (8014b94 <ip4_input+0x240>)
 80149d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	68db      	ldr	r3, [r3, #12]
 80149de:	4a6d      	ldr	r2, [pc, #436]	@ (8014b94 <ip4_input+0x240>)
 80149e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149e2:	4b6c      	ldr	r3, [pc, #432]	@ (8014b94 <ip4_input+0x240>)
 80149e4:	695b      	ldr	r3, [r3, #20]
 80149e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80149ea:	2be0      	cmp	r3, #224	@ 0xe0
 80149ec:	d112      	bne.n	8014a14 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149f4:	f003 0301 	and.w	r3, r3, #1
 80149f8:	b2db      	uxtb	r3, r3
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d007      	beq.n	8014a0e <ip4_input+0xba>
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	3304      	adds	r3, #4
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d002      	beq.n	8014a0e <ip4_input+0xba>
      netif = inp;
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	617b      	str	r3, [r7, #20]
 8014a0c:	e02a      	b.n	8014a64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	617b      	str	r3, [r7, #20]
 8014a12:	e027      	b.n	8014a64 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014a14:	6838      	ldr	r0, [r7, #0]
 8014a16:	f7ff ff73 	bl	8014900 <ip4_input_accept>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <ip4_input+0xd2>
      netif = inp;
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	617b      	str	r3, [r7, #20]
 8014a24:	e01e      	b.n	8014a64 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014a26:	2300      	movs	r3, #0
 8014a28:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8014b94 <ip4_input+0x240>)
 8014a2c:	695b      	ldr	r3, [r3, #20]
 8014a2e:	b2db      	uxtb	r3, r3
 8014a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a32:	d017      	beq.n	8014a64 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014a34:	4b58      	ldr	r3, [pc, #352]	@ (8014b98 <ip4_input+0x244>)
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	617b      	str	r3, [r7, #20]
 8014a3a:	e00e      	b.n	8014a5a <ip4_input+0x106>
          if (netif == inp) {
 8014a3c:	697a      	ldr	r2, [r7, #20]
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d006      	beq.n	8014a52 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014a44:	6978      	ldr	r0, [r7, #20]
 8014a46:	f7ff ff5b 	bl	8014900 <ip4_input_accept>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d108      	bne.n	8014a62 <ip4_input+0x10e>
 8014a50:	e000      	b.n	8014a54 <ip4_input+0x100>
            continue;
 8014a52:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014a54:	697b      	ldr	r3, [r7, #20]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	617b      	str	r3, [r7, #20]
 8014a5a:	697b      	ldr	r3, [r7, #20]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1ed      	bne.n	8014a3c <ip4_input+0xe8>
 8014a60:	e000      	b.n	8014a64 <ip4_input+0x110>
            break;
 8014a62:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014a64:	4b4b      	ldr	r3, [pc, #300]	@ (8014b94 <ip4_input+0x240>)
 8014a66:	691b      	ldr	r3, [r3, #16]
 8014a68:	6839      	ldr	r1, [r7, #0]
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f000 f96e 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 8014a70:	4603      	mov	r3, r0
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d105      	bne.n	8014a82 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014a76:	4b47      	ldr	r3, [pc, #284]	@ (8014b94 <ip4_input+0x240>)
 8014a78:	691b      	ldr	r3, [r3, #16]
 8014a7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014a7e:	2be0      	cmp	r3, #224	@ 0xe0
 8014a80:	d104      	bne.n	8014a8c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7f9 fd36 	bl	800e4f4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	e07e      	b.n	8014b8a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d104      	bne.n	8014a9c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7f9 fd2e 	bl	800e4f4 <pbuf_free>
    return ERR_OK;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	e076      	b.n	8014b8a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	88db      	ldrh	r3, [r3, #6]
 8014aa0:	b29b      	uxth	r3, r3
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d00b      	beq.n	8014ac6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fc92 	bl	80153d8 <ip4_reass>
 8014ab4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d101      	bne.n	8014ac0 <ip4_input+0x16c>
      return ERR_OK;
 8014abc:	2300      	movs	r3, #0
 8014abe:	e064      	b.n	8014b8a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	685b      	ldr	r3, [r3, #4]
 8014ac4:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014ac6:	4a33      	ldr	r2, [pc, #204]	@ (8014b94 <ip4_input+0x240>)
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014acc:	4a31      	ldr	r2, [pc, #196]	@ (8014b94 <ip4_input+0x240>)
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014ad2:	4a30      	ldr	r2, [pc, #192]	@ (8014b94 <ip4_input+0x240>)
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014ad8:	693b      	ldr	r3, [r7, #16]
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	f003 030f 	and.w	r3, r3, #15
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8014b94 <ip4_input+0x240>)
 8014aea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014aec:	89fb      	ldrh	r3, [r7, #14]
 8014aee:	4619      	mov	r1, r3
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f7f9 fc79 	bl	800e3e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	7a5b      	ldrb	r3, [r3, #9]
 8014afa:	2b11      	cmp	r3, #17
 8014afc:	d006      	beq.n	8014b0c <ip4_input+0x1b8>
 8014afe:	2b11      	cmp	r3, #17
 8014b00:	dc13      	bgt.n	8014b2a <ip4_input+0x1d6>
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d00c      	beq.n	8014b20 <ip4_input+0x1cc>
 8014b06:	2b06      	cmp	r3, #6
 8014b08:	d005      	beq.n	8014b16 <ip4_input+0x1c2>
 8014b0a:	e00e      	b.n	8014b2a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014b0c:	6839      	ldr	r1, [r7, #0]
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff faba 	bl	8014088 <udp_input>
        break;
 8014b14:	e026      	b.n	8014b64 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014b16:	6839      	ldr	r1, [r7, #0]
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f7fb faf5 	bl	8010108 <tcp_input>
        break;
 8014b1e:	e021      	b.n	8014b64 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014b20:	6839      	ldr	r1, [r7, #0]
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f7ff fcec 	bl	8014500 <icmp_input>
        break;
 8014b28:	e01c      	b.n	8014b64 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8014b94 <ip4_input+0x240>)
 8014b2c:	695b      	ldr	r3, [r3, #20]
 8014b2e:	6979      	ldr	r1, [r7, #20]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f000 f90b 	bl	8014d4c <ip4_addr_isbroadcast_u32>
 8014b36:	4603      	mov	r3, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d10f      	bne.n	8014b5c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b3c:	4b15      	ldr	r3, [pc, #84]	@ (8014b94 <ip4_input+0x240>)
 8014b3e:	695b      	ldr	r3, [r3, #20]
 8014b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014b44:	2be0      	cmp	r3, #224	@ 0xe0
 8014b46:	d009      	beq.n	8014b5c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014b48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014b4c:	4619      	mov	r1, r3
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f7f9 fcbd 	bl	800e4ce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014b54:	2102      	movs	r1, #2
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7ff fdd8 	bl	801470c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f7f9 fcc9 	bl	800e4f4 <pbuf_free>
        break;
 8014b62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014b64:	4b0b      	ldr	r3, [pc, #44]	@ (8014b94 <ip4_input+0x240>)
 8014b66:	2200      	movs	r2, #0
 8014b68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8014b94 <ip4_input+0x240>)
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014b70:	4b08      	ldr	r3, [pc, #32]	@ (8014b94 <ip4_input+0x240>)
 8014b72:	2200      	movs	r2, #0
 8014b74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014b76:	4b07      	ldr	r3, [pc, #28]	@ (8014b94 <ip4_input+0x240>)
 8014b78:	2200      	movs	r2, #0
 8014b7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014b7c:	4b05      	ldr	r3, [pc, #20]	@ (8014b94 <ip4_input+0x240>)
 8014b7e:	2200      	movs	r2, #0
 8014b80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014b82:	4b04      	ldr	r3, [pc, #16]	@ (8014b94 <ip4_input+0x240>)
 8014b84:	2200      	movs	r2, #0
 8014b86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3718      	adds	r7, #24
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}
 8014b92:	bf00      	nop
 8014b94:	20008f18 	.word	0x20008f18
 8014b98:	20013c50 	.word	0x20013c50

08014b9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b08a      	sub	sp, #40	@ 0x28
 8014ba0:	af04      	add	r7, sp, #16
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	607a      	str	r2, [r7, #4]
 8014ba8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d009      	beq.n	8014bc8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014bb4:	68bb      	ldr	r3, [r7, #8]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d003      	beq.n	8014bc2 <ip4_output_if+0x26>
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d102      	bne.n	8014bc8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bc4:	3304      	adds	r3, #4
 8014bc6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014bc8:	78fa      	ldrb	r2, [r7, #3]
 8014bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bcc:	9302      	str	r3, [sp, #8]
 8014bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014bd2:	9301      	str	r3, [sp, #4]
 8014bd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014bd8:	9300      	str	r3, [sp, #0]
 8014bda:	4613      	mov	r3, r2
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	6979      	ldr	r1, [r7, #20]
 8014be0:	68f8      	ldr	r0, [r7, #12]
 8014be2:	f000 f805 	bl	8014bf0 <ip4_output_if_src>
 8014be6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3718      	adds	r7, #24
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd80      	pop	{r7, pc}

08014bf0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b088      	sub	sp, #32
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	607a      	str	r2, [r7, #4]
 8014bfc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	7b9b      	ldrb	r3, [r3, #14]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d006      	beq.n	8014c14 <ip4_output_if_src+0x24>
 8014c06:	4b4b      	ldr	r3, [pc, #300]	@ (8014d34 <ip4_output_if_src+0x144>)
 8014c08:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014c0c:	494a      	ldr	r1, [pc, #296]	@ (8014d38 <ip4_output_if_src+0x148>)
 8014c0e:	484b      	ldr	r0, [pc, #300]	@ (8014d3c <ip4_output_if_src+0x14c>)
 8014c10:	f001 fee0 	bl	80169d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d060      	beq.n	8014cdc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014c1a:	2314      	movs	r3, #20
 8014c1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014c1e:	2114      	movs	r1, #20
 8014c20:	68f8      	ldr	r0, [r7, #12]
 8014c22:	f7f9 fbd1 	bl	800e3c8 <pbuf_add_header>
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d002      	beq.n	8014c32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014c2c:	f06f 0301 	mvn.w	r3, #1
 8014c30:	e07c      	b.n	8014d2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	895b      	ldrh	r3, [r3, #10]
 8014c3c:	2b13      	cmp	r3, #19
 8014c3e:	d806      	bhi.n	8014c4e <ip4_output_if_src+0x5e>
 8014c40:	4b3c      	ldr	r3, [pc, #240]	@ (8014d34 <ip4_output_if_src+0x144>)
 8014c42:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014c46:	493e      	ldr	r1, [pc, #248]	@ (8014d40 <ip4_output_if_src+0x150>)
 8014c48:	483c      	ldr	r0, [pc, #240]	@ (8014d3c <ip4_output_if_src+0x14c>)
 8014c4a:	f001 fec3 	bl	80169d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	78fa      	ldrb	r2, [r7, #3]
 8014c52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014c5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014c64:	8b7b      	ldrh	r3, [r7, #26]
 8014c66:	089b      	lsrs	r3, r3, #2
 8014c68:	b29b      	uxth	r3, r3
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c70:	b2da      	uxtb	r2, r3
 8014c72:	69fb      	ldr	r3, [r7, #28]
 8014c74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014c76:	69fb      	ldr	r3, [r7, #28]
 8014c78:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014c7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	891b      	ldrh	r3, [r3, #8]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f7 ff6a 	bl	800cb5c <lwip_htons>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014c90:	69fb      	ldr	r3, [r7, #28]
 8014c92:	2200      	movs	r2, #0
 8014c94:	719a      	strb	r2, [r3, #6]
 8014c96:	2200      	movs	r2, #0
 8014c98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8014d44 <ip4_output_if_src+0x154>)
 8014c9c:	881b      	ldrh	r3, [r3, #0]
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f7f7 ff5c 	bl	800cb5c <lwip_htons>
 8014ca4:	4603      	mov	r3, r0
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014cac:	4b25      	ldr	r3, [pc, #148]	@ (8014d44 <ip4_output_if_src+0x154>)
 8014cae:	881b      	ldrh	r3, [r3, #0]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	4b23      	ldr	r3, [pc, #140]	@ (8014d44 <ip4_output_if_src+0x154>)
 8014cb6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d104      	bne.n	8014cc8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014cbe:	4b22      	ldr	r3, [pc, #136]	@ (8014d48 <ip4_output_if_src+0x158>)
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	60da      	str	r2, [r3, #12]
 8014cc6:	e003      	b.n	8014cd0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	69fb      	ldr	r3, [r7, #28]
 8014cce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	729a      	strb	r2, [r3, #10]
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	72da      	strb	r2, [r3, #11]
 8014cda:	e00f      	b.n	8014cfc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	895b      	ldrh	r3, [r3, #10]
 8014ce0:	2b13      	cmp	r3, #19
 8014ce2:	d802      	bhi.n	8014cea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014ce4:	f06f 0301 	mvn.w	r3, #1
 8014ce8:	e020      	b.n	8014d2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	691b      	ldr	r3, [r3, #16]
 8014cf4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014cf6:	f107 0314 	add.w	r3, r7, #20
 8014cfa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cfe:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d00c      	beq.n	8014d1e <ip4_output_if_src+0x12e>
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	891a      	ldrh	r2, [r3, #8]
 8014d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d906      	bls.n	8014d1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d14:	68f8      	ldr	r0, [r7, #12]
 8014d16:	f000 fd53 	bl	80157c0 <ip4_frag>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	e006      	b.n	8014d2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d20:	695b      	ldr	r3, [r3, #20]
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	68f9      	ldr	r1, [r7, #12]
 8014d26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014d28:	4798      	blx	r3
 8014d2a:	4603      	mov	r3, r0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3720      	adds	r7, #32
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	0801a9cc 	.word	0x0801a9cc
 8014d38:	0801aa00 	.word	0x0801aa00
 8014d3c:	0801aa0c 	.word	0x0801aa0c
 8014d40:	0801aa34 	.word	0x0801aa34
 8014d44:	20013cc0 	.word	0x20013cc0
 8014d48:	0801afa4 	.word	0x0801afa4

08014d4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b085      	sub	sp, #20
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d60:	d002      	beq.n	8014d68 <ip4_addr_isbroadcast_u32+0x1c>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d101      	bne.n	8014d6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e02a      	b.n	8014dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014d72:	f003 0302 	and.w	r3, r3, #2
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d101      	bne.n	8014d7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e021      	b.n	8014dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	3304      	adds	r3, #4
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	d101      	bne.n	8014d8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	e019      	b.n	8014dc2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014d8e:	68fa      	ldr	r2, [r7, #12]
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	3304      	adds	r3, #4
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	405a      	eors	r2, r3
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	3308      	adds	r3, #8
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4013      	ands	r3, r2
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d10d      	bne.n	8014dc0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	3308      	adds	r3, #8
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	43da      	mvns	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	3308      	adds	r3, #8
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014db8:	429a      	cmp	r2, r3
 8014dba:	d101      	bne.n	8014dc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	e000      	b.n	8014dc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014dc0:	2300      	movs	r3, #0
  }
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3714      	adds	r7, #20
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dcc:	4770      	bx	lr
	...

08014dd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014dda:	4b12      	ldr	r3, [pc, #72]	@ (8014e24 <ip_reass_tmr+0x54>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014de0:	e018      	b.n	8014e14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	7fdb      	ldrb	r3, [r3, #31]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00b      	beq.n	8014e02 <ip_reass_tmr+0x32>
      r->timer--;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	7fdb      	ldrb	r3, [r3, #31]
 8014dee:	3b01      	subs	r3, #1
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	60fb      	str	r3, [r7, #12]
 8014e00:	e008      	b.n	8014e14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014e0c:	68b9      	ldr	r1, [r7, #8]
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 f80a 	bl	8014e28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1e3      	bne.n	8014de2 <ip_reass_tmr+0x12>
    }
  }
}
 8014e1a:	bf00      	nop
 8014e1c:	bf00      	nop
 8014e1e:	3710      	adds	r7, #16
 8014e20:	46bd      	mov	sp, r7
 8014e22:	bd80      	pop	{r7, pc}
 8014e24:	20013cc4 	.word	0x20013cc4

08014e28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b088      	sub	sp, #32
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014e32:	2300      	movs	r3, #0
 8014e34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014e36:	683a      	ldr	r2, [r7, #0]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d105      	bne.n	8014e4a <ip_reass_free_complete_datagram+0x22>
 8014e3e:	4b45      	ldr	r3, [pc, #276]	@ (8014f54 <ip_reass_free_complete_datagram+0x12c>)
 8014e40:	22ab      	movs	r2, #171	@ 0xab
 8014e42:	4945      	ldr	r1, [pc, #276]	@ (8014f58 <ip_reass_free_complete_datagram+0x130>)
 8014e44:	4845      	ldr	r0, [pc, #276]	@ (8014f5c <ip_reass_free_complete_datagram+0x134>)
 8014e46:	f001 fdc5 	bl	80169d4 <iprintf>
  if (prev != NULL) {
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d00a      	beq.n	8014e66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d005      	beq.n	8014e66 <ip_reass_free_complete_datagram+0x3e>
 8014e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8014f54 <ip_reass_free_complete_datagram+0x12c>)
 8014e5c:	22ad      	movs	r2, #173	@ 0xad
 8014e5e:	4940      	ldr	r1, [pc, #256]	@ (8014f60 <ip_reass_free_complete_datagram+0x138>)
 8014e60:	483e      	ldr	r0, [pc, #248]	@ (8014f5c <ip_reass_free_complete_datagram+0x134>)
 8014e62:	f001 fdb7 	bl	80169d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	685b      	ldr	r3, [r3, #4]
 8014e6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	889b      	ldrh	r3, [r3, #4]
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d12a      	bne.n	8014ece <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	685b      	ldr	r3, [r3, #4]
 8014e7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014e86:	69bb      	ldr	r3, [r7, #24]
 8014e88:	6858      	ldr	r0, [r3, #4]
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	2214      	movs	r2, #20
 8014e90:	4619      	mov	r1, r3
 8014e92:	f002 f822 	bl	8016eda <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014e96:	2101      	movs	r1, #1
 8014e98:	69b8      	ldr	r0, [r7, #24]
 8014e9a:	f7ff fc47 	bl	801472c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014e9e:	69b8      	ldr	r0, [r7, #24]
 8014ea0:	f7f9 fbb6 	bl	800e610 <pbuf_clen>
 8014ea4:	4603      	mov	r3, r0
 8014ea6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ea8:	8bfa      	ldrh	r2, [r7, #30]
 8014eaa:	8a7b      	ldrh	r3, [r7, #18]
 8014eac:	4413      	add	r3, r2
 8014eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014eb2:	db05      	blt.n	8014ec0 <ip_reass_free_complete_datagram+0x98>
 8014eb4:	4b27      	ldr	r3, [pc, #156]	@ (8014f54 <ip_reass_free_complete_datagram+0x12c>)
 8014eb6:	22bc      	movs	r2, #188	@ 0xbc
 8014eb8:	492a      	ldr	r1, [pc, #168]	@ (8014f64 <ip_reass_free_complete_datagram+0x13c>)
 8014eba:	4828      	ldr	r0, [pc, #160]	@ (8014f5c <ip_reass_free_complete_datagram+0x134>)
 8014ebc:	f001 fd8a 	bl	80169d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014ec0:	8bfa      	ldrh	r2, [r7, #30]
 8014ec2:	8a7b      	ldrh	r3, [r7, #18]
 8014ec4:	4413      	add	r3, r2
 8014ec6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014ec8:	69b8      	ldr	r0, [r7, #24]
 8014eca:	f7f9 fb13 	bl	800e4f4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014ed4:	e01f      	b.n	8014f16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014edc:	69bb      	ldr	r3, [r7, #24]
 8014ede:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	f7f9 fb92 	bl	800e610 <pbuf_clen>
 8014eec:	4603      	mov	r3, r0
 8014eee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ef0:	8bfa      	ldrh	r2, [r7, #30]
 8014ef2:	8a7b      	ldrh	r3, [r7, #18]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014efa:	db05      	blt.n	8014f08 <ip_reass_free_complete_datagram+0xe0>
 8014efc:	4b15      	ldr	r3, [pc, #84]	@ (8014f54 <ip_reass_free_complete_datagram+0x12c>)
 8014efe:	22cc      	movs	r2, #204	@ 0xcc
 8014f00:	4918      	ldr	r1, [pc, #96]	@ (8014f64 <ip_reass_free_complete_datagram+0x13c>)
 8014f02:	4816      	ldr	r0, [pc, #88]	@ (8014f5c <ip_reass_free_complete_datagram+0x134>)
 8014f04:	f001 fd66 	bl	80169d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014f08:	8bfa      	ldrh	r2, [r7, #30]
 8014f0a:	8a7b      	ldrh	r3, [r7, #18]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014f10:	68f8      	ldr	r0, [r7, #12]
 8014f12:	f7f9 faef 	bl	800e4f4 <pbuf_free>
  while (p != NULL) {
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1dc      	bne.n	8014ed6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 f8c2 	bl	80150a8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014f24:	4b10      	ldr	r3, [pc, #64]	@ (8014f68 <ip_reass_free_complete_datagram+0x140>)
 8014f26:	881b      	ldrh	r3, [r3, #0]
 8014f28:	8bfa      	ldrh	r2, [r7, #30]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d905      	bls.n	8014f3a <ip_reass_free_complete_datagram+0x112>
 8014f2e:	4b09      	ldr	r3, [pc, #36]	@ (8014f54 <ip_reass_free_complete_datagram+0x12c>)
 8014f30:	22d2      	movs	r2, #210	@ 0xd2
 8014f32:	490e      	ldr	r1, [pc, #56]	@ (8014f6c <ip_reass_free_complete_datagram+0x144>)
 8014f34:	4809      	ldr	r0, [pc, #36]	@ (8014f5c <ip_reass_free_complete_datagram+0x134>)
 8014f36:	f001 fd4d 	bl	80169d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f68 <ip_reass_free_complete_datagram+0x140>)
 8014f3c:	881a      	ldrh	r2, [r3, #0]
 8014f3e:	8bfb      	ldrh	r3, [r7, #30]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	b29a      	uxth	r2, r3
 8014f44:	4b08      	ldr	r3, [pc, #32]	@ (8014f68 <ip_reass_free_complete_datagram+0x140>)
 8014f46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014f48:	8bfb      	ldrh	r3, [r7, #30]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3720      	adds	r7, #32
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	0801aa64 	.word	0x0801aa64
 8014f58:	0801aaa0 	.word	0x0801aaa0
 8014f5c:	0801aaac 	.word	0x0801aaac
 8014f60:	0801aad4 	.word	0x0801aad4
 8014f64:	0801aae8 	.word	0x0801aae8
 8014f68:	20013cc8 	.word	0x20013cc8
 8014f6c:	0801ab08 	.word	0x0801ab08

08014f70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b08a      	sub	sp, #40	@ 0x28
 8014f74:	af00      	add	r7, sp, #0
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014f86:	2300      	movs	r3, #0
 8014f88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014f8e:	4b28      	ldr	r3, [pc, #160]	@ (8015030 <ip_reass_remove_oldest_datagram+0xc0>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014f94:	e030      	b.n	8014ff8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f98:	695a      	ldr	r2, [r3, #20]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	68db      	ldr	r3, [r3, #12]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d10c      	bne.n	8014fbc <ip_reass_remove_oldest_datagram+0x4c>
 8014fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fa4:	699a      	ldr	r2, [r3, #24]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	691b      	ldr	r3, [r3, #16]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d106      	bne.n	8014fbc <ip_reass_remove_oldest_datagram+0x4c>
 8014fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb0:	899a      	ldrh	r2, [r3, #12]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	889b      	ldrh	r3, [r3, #4]
 8014fb6:	b29b      	uxth	r3, r3
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d014      	beq.n	8014fe6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014fc2:	6a3b      	ldr	r3, [r7, #32]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d104      	bne.n	8014fd2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014fcc:	69fb      	ldr	r3, [r7, #28]
 8014fce:	61bb      	str	r3, [r7, #24]
 8014fd0:	e009      	b.n	8014fe6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd4:	7fda      	ldrb	r2, [r3, #31]
 8014fd6:	6a3b      	ldr	r3, [r7, #32]
 8014fd8:	7fdb      	ldrb	r3, [r3, #31]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d803      	bhi.n	8014fe6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014fe2:	69fb      	ldr	r3, [r7, #28]
 8014fe4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ff0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d1cb      	bne.n	8014f96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014ffe:	6a3b      	ldr	r3, [r7, #32]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d008      	beq.n	8015016 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015004:	69b9      	ldr	r1, [r7, #24]
 8015006:	6a38      	ldr	r0, [r7, #32]
 8015008:	f7ff ff0e 	bl	8014e28 <ip_reass_free_complete_datagram>
 801500c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801500e:	697a      	ldr	r2, [r7, #20]
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	4413      	add	r3, r2
 8015014:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015016:	697a      	ldr	r2, [r7, #20]
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	429a      	cmp	r2, r3
 801501c:	da02      	bge.n	8015024 <ip_reass_remove_oldest_datagram+0xb4>
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	2b01      	cmp	r3, #1
 8015022:	dcac      	bgt.n	8014f7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015024:	697b      	ldr	r3, [r7, #20]
}
 8015026:	4618      	mov	r0, r3
 8015028:	3728      	adds	r7, #40	@ 0x28
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	20013cc4 	.word	0x20013cc4

08015034 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801503e:	2004      	movs	r0, #4
 8015040:	f7f8 fa64 	bl	800d50c <memp_malloc>
 8015044:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d110      	bne.n	801506e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801504c:	6839      	ldr	r1, [r7, #0]
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f7ff ff8e 	bl	8014f70 <ip_reass_remove_oldest_datagram>
 8015054:	4602      	mov	r2, r0
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	4293      	cmp	r3, r2
 801505a:	dc03      	bgt.n	8015064 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801505c:	2004      	movs	r0, #4
 801505e:	f7f8 fa55 	bl	800d50c <memp_malloc>
 8015062:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d101      	bne.n	801506e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801506a:	2300      	movs	r3, #0
 801506c:	e016      	b.n	801509c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801506e:	2220      	movs	r2, #32
 8015070:	2100      	movs	r1, #0
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	f001 fe5e 	bl	8016d34 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	220f      	movs	r2, #15
 801507c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801507e:	4b09      	ldr	r3, [pc, #36]	@ (80150a4 <ip_reass_enqueue_new_datagram+0x70>)
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015086:	4a07      	ldr	r2, [pc, #28]	@ (80150a4 <ip_reass_enqueue_new_datagram+0x70>)
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	3308      	adds	r3, #8
 8015090:	2214      	movs	r2, #20
 8015092:	6879      	ldr	r1, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	f001 ff20 	bl	8016eda <memcpy>
  return ipr;
 801509a:	68fb      	ldr	r3, [r7, #12]
}
 801509c:	4618      	mov	r0, r3
 801509e:	3710      	adds	r7, #16
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	20013cc4 	.word	0x20013cc4

080150a8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80150b2:	4b10      	ldr	r3, [pc, #64]	@ (80150f4 <ip_reass_dequeue_datagram+0x4c>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d104      	bne.n	80150c6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4a0c      	ldr	r2, [pc, #48]	@ (80150f4 <ip_reass_dequeue_datagram+0x4c>)
 80150c2:	6013      	str	r3, [r2, #0]
 80150c4:	e00d      	b.n	80150e2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80150c6:	683b      	ldr	r3, [r7, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d106      	bne.n	80150da <ip_reass_dequeue_datagram+0x32>
 80150cc:	4b0a      	ldr	r3, [pc, #40]	@ (80150f8 <ip_reass_dequeue_datagram+0x50>)
 80150ce:	f240 1245 	movw	r2, #325	@ 0x145
 80150d2:	490a      	ldr	r1, [pc, #40]	@ (80150fc <ip_reass_dequeue_datagram+0x54>)
 80150d4:	480a      	ldr	r0, [pc, #40]	@ (8015100 <ip_reass_dequeue_datagram+0x58>)
 80150d6:	f001 fc7d 	bl	80169d4 <iprintf>
    prev->next = ipr->next;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	681a      	ldr	r2, [r3, #0]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80150e2:	6879      	ldr	r1, [r7, #4]
 80150e4:	2004      	movs	r0, #4
 80150e6:	f7f8 fa87 	bl	800d5f8 <memp_free>
}
 80150ea:	bf00      	nop
 80150ec:	3708      	adds	r7, #8
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	20013cc4 	.word	0x20013cc4
 80150f8:	0801aa64 	.word	0x0801aa64
 80150fc:	0801ab2c 	.word	0x0801ab2c
 8015100:	0801aaac 	.word	0x0801aaac

08015104 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b08c      	sub	sp, #48	@ 0x30
 8015108:	af00      	add	r7, sp, #0
 801510a:	60f8      	str	r0, [r7, #12]
 801510c:	60b9      	str	r1, [r7, #8]
 801510e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015110:	2300      	movs	r3, #0
 8015112:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015114:	2301      	movs	r3, #1
 8015116:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	685b      	ldr	r3, [r3, #4]
 801511c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801511e:	69fb      	ldr	r3, [r7, #28]
 8015120:	885b      	ldrh	r3, [r3, #2]
 8015122:	b29b      	uxth	r3, r3
 8015124:	4618      	mov	r0, r3
 8015126:	f7f7 fd19 	bl	800cb5c <lwip_htons>
 801512a:	4603      	mov	r3, r0
 801512c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	781b      	ldrb	r3, [r3, #0]
 8015132:	f003 030f 	and.w	r3, r3, #15
 8015136:	b2db      	uxtb	r3, r3
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801513c:	7e7b      	ldrb	r3, [r7, #25]
 801513e:	b29b      	uxth	r3, r3
 8015140:	8b7a      	ldrh	r2, [r7, #26]
 8015142:	429a      	cmp	r2, r3
 8015144:	d202      	bcs.n	801514c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015146:	f04f 33ff 	mov.w	r3, #4294967295
 801514a:	e135      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801514c:	7e7b      	ldrb	r3, [r7, #25]
 801514e:	b29b      	uxth	r3, r3
 8015150:	8b7a      	ldrh	r2, [r7, #26]
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015156:	69fb      	ldr	r3, [r7, #28]
 8015158:	88db      	ldrh	r3, [r3, #6]
 801515a:	b29b      	uxth	r3, r3
 801515c:	4618      	mov	r0, r3
 801515e:	f7f7 fcfd 	bl	800cb5c <lwip_htons>
 8015162:	4603      	mov	r3, r0
 8015164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015168:	b29b      	uxth	r3, r3
 801516a:	00db      	lsls	r3, r3, #3
 801516c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	685b      	ldr	r3, [r3, #4]
 8015172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015176:	2200      	movs	r2, #0
 8015178:	701a      	strb	r2, [r3, #0]
 801517a:	2200      	movs	r2, #0
 801517c:	705a      	strb	r2, [r3, #1]
 801517e:	2200      	movs	r2, #0
 8015180:	709a      	strb	r2, [r3, #2]
 8015182:	2200      	movs	r2, #0
 8015184:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015188:	8afa      	ldrh	r2, [r7, #22]
 801518a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801518c:	8afa      	ldrh	r2, [r7, #22]
 801518e:	8b7b      	ldrh	r3, [r7, #26]
 8015190:	4413      	add	r3, r2
 8015192:	b29a      	uxth	r2, r3
 8015194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015196:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	88db      	ldrh	r3, [r3, #6]
 801519c:	b29b      	uxth	r3, r3
 801519e:	8afa      	ldrh	r2, [r7, #22]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d902      	bls.n	80151aa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151a4:	f04f 33ff 	mov.w	r3, #4294967295
 80151a8:	e106      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	685b      	ldr	r3, [r3, #4]
 80151ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80151b0:	e068      	b.n	8015284 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80151b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b4:	685b      	ldr	r3, [r3, #4]
 80151b6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80151b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ba:	889b      	ldrh	r3, [r3, #4]
 80151bc:	b29a      	uxth	r2, r3
 80151be:	693b      	ldr	r3, [r7, #16]
 80151c0:	889b      	ldrh	r3, [r3, #4]
 80151c2:	b29b      	uxth	r3, r3
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d235      	bcs.n	8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80151c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151cc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80151ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d020      	beq.n	8015216 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80151d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d6:	889b      	ldrh	r3, [r3, #4]
 80151d8:	b29a      	uxth	r2, r3
 80151da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151dc:	88db      	ldrh	r3, [r3, #6]
 80151de:	b29b      	uxth	r3, r3
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d307      	bcc.n	80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80151e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e6:	88db      	ldrh	r3, [r3, #6]
 80151e8:	b29a      	uxth	r2, r3
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	889b      	ldrh	r3, [r3, #4]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	429a      	cmp	r2, r3
 80151f2:	d902      	bls.n	80151fa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151f4:	f04f 33ff 	mov.w	r3, #4294967295
 80151f8:	e0de      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80151fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015202:	88db      	ldrh	r3, [r3, #6]
 8015204:	b29a      	uxth	r2, r3
 8015206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015208:	889b      	ldrh	r3, [r3, #4]
 801520a:	b29b      	uxth	r3, r3
 801520c:	429a      	cmp	r2, r3
 801520e:	d03d      	beq.n	801528c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015210:	2300      	movs	r3, #0
 8015212:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015214:	e03a      	b.n	801528c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015218:	88db      	ldrh	r3, [r3, #6]
 801521a:	b29a      	uxth	r2, r3
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	889b      	ldrh	r3, [r3, #4]
 8015220:	b29b      	uxth	r3, r3
 8015222:	429a      	cmp	r2, r3
 8015224:	d902      	bls.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015226:	f04f 33ff 	mov.w	r3, #4294967295
 801522a:	e0c5      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	68ba      	ldr	r2, [r7, #8]
 8015230:	605a      	str	r2, [r3, #4]
      break;
 8015232:	e02b      	b.n	801528c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015236:	889b      	ldrh	r3, [r3, #4]
 8015238:	b29a      	uxth	r2, r3
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	889b      	ldrh	r3, [r3, #4]
 801523e:	b29b      	uxth	r3, r3
 8015240:	429a      	cmp	r2, r3
 8015242:	d102      	bne.n	801524a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015244:	f04f 33ff 	mov.w	r3, #4294967295
 8015248:	e0b6      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801524c:	889b      	ldrh	r3, [r3, #4]
 801524e:	b29a      	uxth	r2, r3
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	88db      	ldrh	r3, [r3, #6]
 8015254:	b29b      	uxth	r3, r3
 8015256:	429a      	cmp	r2, r3
 8015258:	d202      	bcs.n	8015260 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801525a:	f04f 33ff 	mov.w	r3, #4294967295
 801525e:	e0ab      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015262:	2b00      	cmp	r3, #0
 8015264:	d009      	beq.n	801527a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015268:	88db      	ldrh	r3, [r3, #6]
 801526a:	b29a      	uxth	r2, r3
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	889b      	ldrh	r3, [r3, #4]
 8015270:	b29b      	uxth	r3, r3
 8015272:	429a      	cmp	r2, r3
 8015274:	d001      	beq.n	801527a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015276:	2300      	movs	r3, #0
 8015278:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015286:	2b00      	cmp	r3, #0
 8015288:	d193      	bne.n	80151b2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801528a:	e000      	b.n	801528e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801528c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015290:	2b00      	cmp	r3, #0
 8015292:	d12d      	bne.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015296:	2b00      	cmp	r3, #0
 8015298:	d01c      	beq.n	80152d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801529c:	88db      	ldrh	r3, [r3, #6]
 801529e:	b29a      	uxth	r2, r3
 80152a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a2:	889b      	ldrh	r3, [r3, #4]
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d906      	bls.n	80152b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80152aa:	4b45      	ldr	r3, [pc, #276]	@ (80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152ac:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80152b0:	4944      	ldr	r1, [pc, #272]	@ (80153c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80152b2:	4845      	ldr	r0, [pc, #276]	@ (80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152b4:	f001 fb8e 	bl	80169d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80152b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ba:	68ba      	ldr	r2, [r7, #8]
 80152bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80152be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152c0:	88db      	ldrh	r3, [r3, #6]
 80152c2:	b29a      	uxth	r2, r3
 80152c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c6:	889b      	ldrh	r3, [r3, #4]
 80152c8:	b29b      	uxth	r3, r3
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d010      	beq.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80152ce:	2300      	movs	r3, #0
 80152d0:	623b      	str	r3, [r7, #32]
 80152d2:	e00d      	b.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d006      	beq.n	80152ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80152dc:	4b38      	ldr	r3, [pc, #224]	@ (80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152de:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80152e2:	493a      	ldr	r1, [pc, #232]	@ (80153cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80152e4:	4838      	ldr	r0, [pc, #224]	@ (80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152e6:	f001 fb75 	bl	80169d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d105      	bne.n	8015302 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	7f9b      	ldrb	r3, [r3, #30]
 80152fa:	f003 0301 	and.w	r3, r3, #1
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d059      	beq.n	80153b6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015302:	6a3b      	ldr	r3, [r7, #32]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d04f      	beq.n	80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d006      	beq.n	801531e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	889b      	ldrh	r3, [r3, #4]
 8015318:	b29b      	uxth	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	d002      	beq.n	8015324 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801531e:	2300      	movs	r3, #0
 8015320:	623b      	str	r3, [r7, #32]
 8015322:	e041      	b.n	80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015326:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801532e:	e012      	b.n	8015356 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015338:	88db      	ldrh	r3, [r3, #6]
 801533a:	b29a      	uxth	r2, r3
 801533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533e:	889b      	ldrh	r3, [r3, #4]
 8015340:	b29b      	uxth	r3, r3
 8015342:	429a      	cmp	r2, r3
 8015344:	d002      	beq.n	801534c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015346:	2300      	movs	r3, #0
 8015348:	623b      	str	r3, [r7, #32]
            break;
 801534a:	e007      	b.n	801535c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015358:	2b00      	cmp	r3, #0
 801535a:	d1e9      	bne.n	8015330 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801535c:	6a3b      	ldr	r3, [r7, #32]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d022      	beq.n	80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	685b      	ldr	r3, [r3, #4]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d106      	bne.n	8015378 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801536a:	4b15      	ldr	r3, [pc, #84]	@ (80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801536c:	f240 12df 	movw	r2, #479	@ 0x1df
 8015370:	4917      	ldr	r1, [pc, #92]	@ (80153d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015372:	4815      	ldr	r0, [pc, #84]	@ (80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015374:	f001 fb2e 	bl	80169d4 <iprintf>
          LWIP_ASSERT("sanity check",
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015380:	429a      	cmp	r2, r3
 8015382:	d106      	bne.n	8015392 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015384:	4b0e      	ldr	r3, [pc, #56]	@ (80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015386:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801538a:	4911      	ldr	r1, [pc, #68]	@ (80153d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801538c:	480e      	ldr	r0, [pc, #56]	@ (80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801538e:	f001 fb21 	bl	80169d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d006      	beq.n	80153a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801539a:	4b09      	ldr	r3, [pc, #36]	@ (80153c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801539c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80153a0:	490c      	ldr	r1, [pc, #48]	@ (80153d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80153a2:	4809      	ldr	r0, [pc, #36]	@ (80153c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80153a4:	f001 fb16 	bl	80169d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80153a8:	6a3b      	ldr	r3, [r7, #32]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	bf14      	ite	ne
 80153ae:	2301      	movne	r3, #1
 80153b0:	2300      	moveq	r3, #0
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	e000      	b.n	80153b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80153b6:	2300      	movs	r3, #0
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3730      	adds	r7, #48	@ 0x30
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	0801aa64 	.word	0x0801aa64
 80153c4:	0801ab48 	.word	0x0801ab48
 80153c8:	0801aaac 	.word	0x0801aaac
 80153cc:	0801ab68 	.word	0x0801ab68
 80153d0:	0801aba0 	.word	0x0801aba0
 80153d4:	0801abb0 	.word	0x0801abb0

080153d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b08e      	sub	sp, #56	@ 0x38
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80153e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	f003 030f 	and.w	r3, r3, #15
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	009b      	lsls	r3, r3, #2
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b14      	cmp	r3, #20
 80153f6:	f040 8171 	bne.w	80156dc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80153fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153fc:	88db      	ldrh	r3, [r3, #6]
 80153fe:	b29b      	uxth	r3, r3
 8015400:	4618      	mov	r0, r3
 8015402:	f7f7 fbab 	bl	800cb5c <lwip_htons>
 8015406:	4603      	mov	r3, r0
 8015408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801540c:	b29b      	uxth	r3, r3
 801540e:	00db      	lsls	r3, r3, #3
 8015410:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015414:	885b      	ldrh	r3, [r3, #2]
 8015416:	b29b      	uxth	r3, r3
 8015418:	4618      	mov	r0, r3
 801541a:	f7f7 fb9f 	bl	800cb5c <lwip_htons>
 801541e:	4603      	mov	r3, r0
 8015420:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	f003 030f 	and.w	r3, r3, #15
 801542a:	b2db      	uxtb	r3, r3
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015432:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015436:	b29b      	uxth	r3, r3
 8015438:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801543a:	429a      	cmp	r2, r3
 801543c:	f0c0 8150 	bcc.w	80156e0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015440:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015444:	b29b      	uxth	r3, r3
 8015446:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015448:	1ad3      	subs	r3, r2, r3
 801544a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7f9 f8df 	bl	800e610 <pbuf_clen>
 8015452:	4603      	mov	r3, r0
 8015454:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015456:	4b8c      	ldr	r3, [pc, #560]	@ (8015688 <ip4_reass+0x2b0>)
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	461a      	mov	r2, r3
 801545c:	8c3b      	ldrh	r3, [r7, #32]
 801545e:	4413      	add	r3, r2
 8015460:	2b0a      	cmp	r3, #10
 8015462:	dd10      	ble.n	8015486 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015464:	8c3b      	ldrh	r3, [r7, #32]
 8015466:	4619      	mov	r1, r3
 8015468:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801546a:	f7ff fd81 	bl	8014f70 <ip_reass_remove_oldest_datagram>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	f000 8137 	beq.w	80156e4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015476:	4b84      	ldr	r3, [pc, #528]	@ (8015688 <ip4_reass+0x2b0>)
 8015478:	881b      	ldrh	r3, [r3, #0]
 801547a:	461a      	mov	r2, r3
 801547c:	8c3b      	ldrh	r3, [r7, #32]
 801547e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015480:	2b0a      	cmp	r3, #10
 8015482:	f300 812f 	bgt.w	80156e4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015486:	4b81      	ldr	r3, [pc, #516]	@ (801568c <ip4_reass+0x2b4>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	633b      	str	r3, [r7, #48]	@ 0x30
 801548c:	e015      	b.n	80154ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015490:	695a      	ldr	r2, [r3, #20]
 8015492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015494:	68db      	ldr	r3, [r3, #12]
 8015496:	429a      	cmp	r2, r3
 8015498:	d10c      	bne.n	80154b4 <ip4_reass+0xdc>
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	699a      	ldr	r2, [r3, #24]
 801549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154a0:	691b      	ldr	r3, [r3, #16]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d106      	bne.n	80154b4 <ip4_reass+0xdc>
 80154a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a8:	899a      	ldrh	r2, [r3, #12]
 80154aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154ac:	889b      	ldrh	r3, [r3, #4]
 80154ae:	b29b      	uxth	r3, r3
 80154b0:	429a      	cmp	r2, r3
 80154b2:	d006      	beq.n	80154c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80154b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80154ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1e6      	bne.n	801548e <ip4_reass+0xb6>
 80154c0:	e000      	b.n	80154c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80154c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80154c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d109      	bne.n	80154de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80154ca:	8c3b      	ldrh	r3, [r7, #32]
 80154cc:	4619      	mov	r1, r3
 80154ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80154d0:	f7ff fdb0 	bl	8015034 <ip_reass_enqueue_new_datagram>
 80154d4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80154d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d11c      	bne.n	8015516 <ip4_reass+0x13e>
      goto nullreturn;
 80154dc:	e105      	b.n	80156ea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80154de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e0:	88db      	ldrh	r3, [r3, #6]
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	4618      	mov	r0, r3
 80154e6:	f7f7 fb39 	bl	800cb5c <lwip_htons>
 80154ea:	4603      	mov	r3, r0
 80154ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d110      	bne.n	8015516 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80154f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f6:	89db      	ldrh	r3, [r3, #14]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7f7 fb2f 	bl	800cb5c <lwip_htons>
 80154fe:	4603      	mov	r3, r0
 8015500:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015504:	2b00      	cmp	r3, #0
 8015506:	d006      	beq.n	8015516 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550a:	3308      	adds	r3, #8
 801550c:	2214      	movs	r2, #20
 801550e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015510:	4618      	mov	r0, r3
 8015512:	f001 fce2 	bl	8016eda <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015518:	88db      	ldrh	r3, [r3, #6]
 801551a:	b29b      	uxth	r3, r3
 801551c:	f003 0320 	and.w	r3, r3, #32
 8015520:	2b00      	cmp	r3, #0
 8015522:	bf0c      	ite	eq
 8015524:	2301      	moveq	r3, #1
 8015526:	2300      	movne	r3, #0
 8015528:	b2db      	uxtb	r3, r3
 801552a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d00e      	beq.n	8015550 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015532:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015534:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015536:	4413      	add	r3, r2
 8015538:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801553a:	8b7a      	ldrh	r2, [r7, #26]
 801553c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801553e:	429a      	cmp	r2, r3
 8015540:	f0c0 80a0 	bcc.w	8015684 <ip4_reass+0x2ac>
 8015544:	8b7b      	ldrh	r3, [r7, #26]
 8015546:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801554a:	4293      	cmp	r3, r2
 801554c:	f200 809a 	bhi.w	8015684 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015550:	69fa      	ldr	r2, [r7, #28]
 8015552:	6879      	ldr	r1, [r7, #4]
 8015554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015556:	f7ff fdd5 	bl	8015104 <ip_reass_chain_frag_into_datagram_and_validate>
 801555a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801555c:	697b      	ldr	r3, [r7, #20]
 801555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015562:	f000 809b 	beq.w	801569c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015566:	4b48      	ldr	r3, [pc, #288]	@ (8015688 <ip4_reass+0x2b0>)
 8015568:	881a      	ldrh	r2, [r3, #0]
 801556a:	8c3b      	ldrh	r3, [r7, #32]
 801556c:	4413      	add	r3, r2
 801556e:	b29a      	uxth	r2, r3
 8015570:	4b45      	ldr	r3, [pc, #276]	@ (8015688 <ip4_reass+0x2b0>)
 8015572:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015574:	69fb      	ldr	r3, [r7, #28]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d00d      	beq.n	8015596 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801557a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801557c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801557e:	4413      	add	r3, r2
 8015580:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015584:	8a7a      	ldrh	r2, [r7, #18]
 8015586:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801558a:	7f9b      	ldrb	r3, [r3, #30]
 801558c:	f043 0301 	orr.w	r3, r3, #1
 8015590:	b2da      	uxtb	r2, r3
 8015592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015594:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	2b01      	cmp	r3, #1
 801559a:	d171      	bne.n	8015680 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801559e:	8b9b      	ldrh	r3, [r3, #28]
 80155a0:	3314      	adds	r3, #20
 80155a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80155a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80155ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	685b      	ldr	r3, [r3, #4]
 80155b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80155b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b8:	3308      	adds	r3, #8
 80155ba:	2214      	movs	r2, #20
 80155bc:	4619      	mov	r1, r3
 80155be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155c0:	f001 fc8b 	bl	8016eda <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80155c4:	8a3b      	ldrh	r3, [r7, #16]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7f7 fac8 	bl	800cb5c <lwip_htons>
 80155cc:	4603      	mov	r3, r0
 80155ce:	461a      	mov	r2, r3
 80155d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80155d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155d6:	2200      	movs	r2, #0
 80155d8:	719a      	strb	r2, [r3, #6]
 80155da:	2200      	movs	r2, #0
 80155dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80155de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155e0:	2200      	movs	r2, #0
 80155e2:	729a      	strb	r2, [r3, #10]
 80155e4:	2200      	movs	r2, #0
 80155e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80155e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ea:	685b      	ldr	r3, [r3, #4]
 80155ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80155ee:	e00d      	b.n	801560c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80155f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f2:	685b      	ldr	r3, [r3, #4]
 80155f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80155f6:	2114      	movs	r1, #20
 80155f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155fa:	f7f8 fef5 	bl	800e3e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80155fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f7f9 f845 	bl	800e690 <pbuf_cat>
      r = iprh->next_pbuf;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d1ee      	bne.n	80155f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015612:	4b1e      	ldr	r3, [pc, #120]	@ (801568c <ip4_reass+0x2b4>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015618:	429a      	cmp	r2, r3
 801561a:	d102      	bne.n	8015622 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801561c:	2300      	movs	r3, #0
 801561e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015620:	e010      	b.n	8015644 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015622:	4b1a      	ldr	r3, [pc, #104]	@ (801568c <ip4_reass+0x2b4>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	637b      	str	r3, [r7, #52]	@ 0x34
 8015628:	e007      	b.n	801563a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801562a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015630:	429a      	cmp	r2, r3
 8015632:	d006      	beq.n	8015642 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	637b      	str	r3, [r7, #52]	@ 0x34
 801563a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801563c:	2b00      	cmp	r3, #0
 801563e:	d1f4      	bne.n	801562a <ip4_reass+0x252>
 8015640:	e000      	b.n	8015644 <ip4_reass+0x26c>
          break;
 8015642:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015644:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015648:	f7ff fd2e 	bl	80150a8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801564c:	6878      	ldr	r0, [r7, #4]
 801564e:	f7f8 ffdf 	bl	800e610 <pbuf_clen>
 8015652:	4603      	mov	r3, r0
 8015654:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015656:	4b0c      	ldr	r3, [pc, #48]	@ (8015688 <ip4_reass+0x2b0>)
 8015658:	881b      	ldrh	r3, [r3, #0]
 801565a:	8c3a      	ldrh	r2, [r7, #32]
 801565c:	429a      	cmp	r2, r3
 801565e:	d906      	bls.n	801566e <ip4_reass+0x296>
 8015660:	4b0b      	ldr	r3, [pc, #44]	@ (8015690 <ip4_reass+0x2b8>)
 8015662:	f240 229b 	movw	r2, #667	@ 0x29b
 8015666:	490b      	ldr	r1, [pc, #44]	@ (8015694 <ip4_reass+0x2bc>)
 8015668:	480b      	ldr	r0, [pc, #44]	@ (8015698 <ip4_reass+0x2c0>)
 801566a:	f001 f9b3 	bl	80169d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801566e:	4b06      	ldr	r3, [pc, #24]	@ (8015688 <ip4_reass+0x2b0>)
 8015670:	881a      	ldrh	r2, [r3, #0]
 8015672:	8c3b      	ldrh	r3, [r7, #32]
 8015674:	1ad3      	subs	r3, r2, r3
 8015676:	b29a      	uxth	r2, r3
 8015678:	4b03      	ldr	r3, [pc, #12]	@ (8015688 <ip4_reass+0x2b0>)
 801567a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	e038      	b.n	80156f2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015680:	2300      	movs	r3, #0
 8015682:	e036      	b.n	80156f2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015684:	bf00      	nop
 8015686:	e00a      	b.n	801569e <ip4_reass+0x2c6>
 8015688:	20013cc8 	.word	0x20013cc8
 801568c:	20013cc4 	.word	0x20013cc4
 8015690:	0801aa64 	.word	0x0801aa64
 8015694:	0801abd4 	.word	0x0801abd4
 8015698:	0801aaac 	.word	0x0801aaac
    goto nullreturn_ipr;
 801569c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d106      	bne.n	80156b2 <ip4_reass+0x2da>
 80156a4:	4b15      	ldr	r3, [pc, #84]	@ (80156fc <ip4_reass+0x324>)
 80156a6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80156aa:	4915      	ldr	r1, [pc, #84]	@ (8015700 <ip4_reass+0x328>)
 80156ac:	4815      	ldr	r0, [pc, #84]	@ (8015704 <ip4_reass+0x32c>)
 80156ae:	f001 f991 	bl	80169d4 <iprintf>
  if (ipr->p == NULL) {
 80156b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d116      	bne.n	80156e8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80156ba:	4b13      	ldr	r3, [pc, #76]	@ (8015708 <ip4_reass+0x330>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d006      	beq.n	80156d2 <ip4_reass+0x2fa>
 80156c4:	4b0d      	ldr	r3, [pc, #52]	@ (80156fc <ip4_reass+0x324>)
 80156c6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80156ca:	4910      	ldr	r1, [pc, #64]	@ (801570c <ip4_reass+0x334>)
 80156cc:	480d      	ldr	r0, [pc, #52]	@ (8015704 <ip4_reass+0x32c>)
 80156ce:	f001 f981 	bl	80169d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80156d2:	2100      	movs	r1, #0
 80156d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156d6:	f7ff fce7 	bl	80150a8 <ip_reass_dequeue_datagram>
 80156da:	e006      	b.n	80156ea <ip4_reass+0x312>
    goto nullreturn;
 80156dc:	bf00      	nop
 80156de:	e004      	b.n	80156ea <ip4_reass+0x312>
    goto nullreturn;
 80156e0:	bf00      	nop
 80156e2:	e002      	b.n	80156ea <ip4_reass+0x312>
      goto nullreturn;
 80156e4:	bf00      	nop
 80156e6:	e000      	b.n	80156ea <ip4_reass+0x312>
  }

nullreturn:
 80156e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80156ea:	6878      	ldr	r0, [r7, #4]
 80156ec:	f7f8 ff02 	bl	800e4f4 <pbuf_free>
  return NULL;
 80156f0:	2300      	movs	r3, #0
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3738      	adds	r7, #56	@ 0x38
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}
 80156fa:	bf00      	nop
 80156fc:	0801aa64 	.word	0x0801aa64
 8015700:	0801abf0 	.word	0x0801abf0
 8015704:	0801aaac 	.word	0x0801aaac
 8015708:	20013cc4 	.word	0x20013cc4
 801570c:	0801abfc 	.word	0x0801abfc

08015710 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015714:	2005      	movs	r0, #5
 8015716:	f7f7 fef9 	bl	800d50c <memp_malloc>
 801571a:	4603      	mov	r3, r0
}
 801571c:	4618      	mov	r0, r3
 801571e:	bd80      	pop	{r7, pc}

08015720 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d106      	bne.n	801573c <ip_frag_free_pbuf_custom_ref+0x1c>
 801572e:	4b07      	ldr	r3, [pc, #28]	@ (801574c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015730:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015734:	4906      	ldr	r1, [pc, #24]	@ (8015750 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015736:	4807      	ldr	r0, [pc, #28]	@ (8015754 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015738:	f001 f94c 	bl	80169d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801573c:	6879      	ldr	r1, [r7, #4]
 801573e:	2005      	movs	r0, #5
 8015740:	f7f7 ff5a 	bl	800d5f8 <memp_free>
}
 8015744:	bf00      	nop
 8015746:	3708      	adds	r7, #8
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	0801aa64 	.word	0x0801aa64
 8015750:	0801ac1c 	.word	0x0801ac1c
 8015754:	0801aaac 	.word	0x0801aaac

08015758 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b084      	sub	sp, #16
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d106      	bne.n	8015778 <ipfrag_free_pbuf_custom+0x20>
 801576a:	4b11      	ldr	r3, [pc, #68]	@ (80157b0 <ipfrag_free_pbuf_custom+0x58>)
 801576c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015770:	4910      	ldr	r1, [pc, #64]	@ (80157b4 <ipfrag_free_pbuf_custom+0x5c>)
 8015772:	4811      	ldr	r0, [pc, #68]	@ (80157b8 <ipfrag_free_pbuf_custom+0x60>)
 8015774:	f001 f92e 	bl	80169d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015778:	68fa      	ldr	r2, [r7, #12]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	429a      	cmp	r2, r3
 801577e:	d006      	beq.n	801578e <ipfrag_free_pbuf_custom+0x36>
 8015780:	4b0b      	ldr	r3, [pc, #44]	@ (80157b0 <ipfrag_free_pbuf_custom+0x58>)
 8015782:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015786:	490d      	ldr	r1, [pc, #52]	@ (80157bc <ipfrag_free_pbuf_custom+0x64>)
 8015788:	480b      	ldr	r0, [pc, #44]	@ (80157b8 <ipfrag_free_pbuf_custom+0x60>)
 801578a:	f001 f923 	bl	80169d4 <iprintf>
  if (pcr->original != NULL) {
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	695b      	ldr	r3, [r3, #20]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d004      	beq.n	80157a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	695b      	ldr	r3, [r3, #20]
 801579a:	4618      	mov	r0, r3
 801579c:	f7f8 feaa 	bl	800e4f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f7ff ffbd 	bl	8015720 <ip_frag_free_pbuf_custom_ref>
}
 80157a6:	bf00      	nop
 80157a8:	3710      	adds	r7, #16
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	0801aa64 	.word	0x0801aa64
 80157b4:	0801ac28 	.word	0x0801ac28
 80157b8:	0801aaac 	.word	0x0801aaac
 80157bc:	0801ac34 	.word	0x0801ac34

080157c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b094      	sub	sp, #80	@ 0x50
 80157c4:	af02      	add	r7, sp, #8
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80157cc:	2300      	movs	r3, #0
 80157ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157d6:	3b14      	subs	r3, #20
 80157d8:	2b00      	cmp	r3, #0
 80157da:	da00      	bge.n	80157de <ip4_frag+0x1e>
 80157dc:	3307      	adds	r3, #7
 80157de:	10db      	asrs	r3, r3, #3
 80157e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80157e2:	2314      	movs	r3, #20
 80157e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80157ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157ee:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80157f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	f003 030f 	and.w	r3, r3, #15
 80157f8:	b2db      	uxtb	r3, r3
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	b2db      	uxtb	r3, r3
 80157fe:	2b14      	cmp	r3, #20
 8015800:	d002      	beq.n	8015808 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015802:	f06f 0305 	mvn.w	r3, #5
 8015806:	e110      	b.n	8015a2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	895b      	ldrh	r3, [r3, #10]
 801580c:	2b13      	cmp	r3, #19
 801580e:	d809      	bhi.n	8015824 <ip4_frag+0x64>
 8015810:	4b88      	ldr	r3, [pc, #544]	@ (8015a34 <ip4_frag+0x274>)
 8015812:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015816:	4988      	ldr	r1, [pc, #544]	@ (8015a38 <ip4_frag+0x278>)
 8015818:	4888      	ldr	r0, [pc, #544]	@ (8015a3c <ip4_frag+0x27c>)
 801581a:	f001 f8db 	bl	80169d4 <iprintf>
 801581e:	f06f 0305 	mvn.w	r3, #5
 8015822:	e102      	b.n	8015a2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015826:	88db      	ldrh	r3, [r3, #6]
 8015828:	b29b      	uxth	r3, r3
 801582a:	4618      	mov	r0, r3
 801582c:	f7f7 f996 	bl	800cb5c <lwip_htons>
 8015830:	4603      	mov	r3, r0
 8015832:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015834:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801583a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801583e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015844:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	891b      	ldrh	r3, [r3, #8]
 801584a:	3b14      	subs	r3, #20
 801584c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015850:	e0e1      	b.n	8015a16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015852:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015854:	00db      	lsls	r3, r3, #3
 8015856:	b29b      	uxth	r3, r3
 8015858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801585c:	4293      	cmp	r3, r2
 801585e:	bf28      	it	cs
 8015860:	4613      	movcs	r3, r2
 8015862:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015864:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015868:	2114      	movs	r1, #20
 801586a:	2010      	movs	r0, #16
 801586c:	f7f8 fb5e 	bl	800df2c <pbuf_alloc>
 8015870:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015874:	2b00      	cmp	r3, #0
 8015876:	f000 80d5 	beq.w	8015a24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801587c:	895b      	ldrh	r3, [r3, #10]
 801587e:	2b13      	cmp	r3, #19
 8015880:	d806      	bhi.n	8015890 <ip4_frag+0xd0>
 8015882:	4b6c      	ldr	r3, [pc, #432]	@ (8015a34 <ip4_frag+0x274>)
 8015884:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015888:	496d      	ldr	r1, [pc, #436]	@ (8015a40 <ip4_frag+0x280>)
 801588a:	486c      	ldr	r0, [pc, #432]	@ (8015a3c <ip4_frag+0x27c>)
 801588c:	f001 f8a2 	bl	80169d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	2214      	movs	r2, #20
 8015896:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015898:	4618      	mov	r0, r3
 801589a:	f001 fb1e 	bl	8016eda <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80158a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80158aa:	e064      	b.n	8015976 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	895a      	ldrh	r2, [r3, #10]
 80158b0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	895b      	ldrh	r3, [r3, #10]
 80158ba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80158bc:	429a      	cmp	r2, r3
 80158be:	d906      	bls.n	80158ce <ip4_frag+0x10e>
 80158c0:	4b5c      	ldr	r3, [pc, #368]	@ (8015a34 <ip4_frag+0x274>)
 80158c2:	f240 322d 	movw	r2, #813	@ 0x32d
 80158c6:	495f      	ldr	r1, [pc, #380]	@ (8015a44 <ip4_frag+0x284>)
 80158c8:	485c      	ldr	r0, [pc, #368]	@ (8015a3c <ip4_frag+0x27c>)
 80158ca:	f001 f883 	bl	80169d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80158ce:	8bfa      	ldrh	r2, [r7, #30]
 80158d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80158d4:	4293      	cmp	r3, r2
 80158d6:	bf28      	it	cs
 80158d8:	4613      	movcs	r3, r2
 80158da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80158de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d105      	bne.n	80158f2 <ip4_frag+0x132>
        poff = 0;
 80158e6:	2300      	movs	r3, #0
 80158e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	60fb      	str	r3, [r7, #12]
        continue;
 80158f0:	e041      	b.n	8015976 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80158f2:	f7ff ff0d 	bl	8015710 <ip_frag_alloc_pbuf_custom_ref>
 80158f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80158f8:	69bb      	ldr	r3, [r7, #24]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d103      	bne.n	8015906 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80158fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015900:	f7f8 fdf8 	bl	800e4f4 <pbuf_free>
        goto memerr;
 8015904:	e08f      	b.n	8015a26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015906:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801590c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801590e:	4413      	add	r3, r2
 8015910:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015914:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015918:	9201      	str	r2, [sp, #4]
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	4603      	mov	r3, r0
 801591e:	2241      	movs	r2, #65	@ 0x41
 8015920:	2000      	movs	r0, #0
 8015922:	f7f8 fc2d 	bl	800e180 <pbuf_alloced_custom>
 8015926:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d106      	bne.n	801593c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801592e:	69b8      	ldr	r0, [r7, #24]
 8015930:	f7ff fef6 	bl	8015720 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015934:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015936:	f7f8 fddd 	bl	800e4f4 <pbuf_free>
        goto memerr;
 801593a:	e074      	b.n	8015a26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f7f8 fe7f 	bl	800e640 <pbuf_ref>
      pcr->original = p;
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	4a3f      	ldr	r2, [pc, #252]	@ (8015a48 <ip4_frag+0x288>)
 801594c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801594e:	6979      	ldr	r1, [r7, #20]
 8015950:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015952:	f7f8 fe9d 	bl	800e690 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015956:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801595a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801595e:	1ad3      	subs	r3, r2, r3
 8015960:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015968:	2b00      	cmp	r3, #0
 801596a:	d004      	beq.n	8015976 <ip4_frag+0x1b6>
        poff = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801597a:	2b00      	cmp	r3, #0
 801597c:	d196      	bne.n	80158ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801597e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015980:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015984:	4413      	add	r3, r2
 8015986:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801598c:	f1a3 0213 	sub.w	r2, r3, #19
 8015990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015994:	429a      	cmp	r2, r3
 8015996:	bfcc      	ite	gt
 8015998:	2301      	movgt	r3, #1
 801599a:	2300      	movle	r3, #0
 801599c:	b2db      	uxtb	r3, r3
 801599e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80159a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80159a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80159aa:	6a3b      	ldr	r3, [r7, #32]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d002      	beq.n	80159b6 <ip4_frag+0x1f6>
 80159b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d003      	beq.n	80159be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80159b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80159b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80159bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80159be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f7 f8cb 	bl	800cb5c <lwip_htons>
 80159c6:	4603      	mov	r3, r0
 80159c8:	461a      	mov	r2, r3
 80159ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80159ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159d0:	3314      	adds	r3, #20
 80159d2:	b29b      	uxth	r3, r3
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7f7 f8c1 	bl	800cb5c <lwip_htons>
 80159da:	4603      	mov	r3, r0
 80159dc:	461a      	mov	r2, r3
 80159de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80159e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e4:	2200      	movs	r2, #0
 80159e6:	729a      	strb	r2, [r3, #10]
 80159e8:	2200      	movs	r2, #0
 80159ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80159ec:	68bb      	ldr	r3, [r7, #8]
 80159ee:	695b      	ldr	r3, [r3, #20]
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80159f4:	68b8      	ldr	r0, [r7, #8]
 80159f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80159f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159fa:	f7f8 fd7b 	bl	800e4f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80159fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015a02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015a0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015a0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015a10:	4413      	add	r3, r2
 8015a12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	f47f af19 	bne.w	8015852 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015a20:	2300      	movs	r3, #0
 8015a22:	e002      	b.n	8015a2a <ip4_frag+0x26a>
      goto memerr;
 8015a24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3748      	adds	r7, #72	@ 0x48
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801aa64 	.word	0x0801aa64
 8015a38:	0801ac40 	.word	0x0801ac40
 8015a3c:	0801aaac 	.word	0x0801aaac
 8015a40:	0801ac5c 	.word	0x0801ac5c
 8015a44:	0801ac7c 	.word	0x0801ac7c
 8015a48:	08015759 	.word	0x08015759

08015a4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a50:	b094      	sub	sp, #80	@ 0x50
 8015a52:	af0a      	add	r7, sp, #40	@ 0x28
 8015a54:	61f8      	str	r0, [r7, #28]
 8015a56:	61b9      	str	r1, [r7, #24]
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	895b      	ldrh	r3, [r3, #10]
 8015a5c:	2b10      	cmp	r3, #16
 8015a5e:	f240 8081 	bls.w	8015b64 <ethernet_input+0x118>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015a62:	69fb      	ldr	r3, [r7, #28]
 8015a64:	7bdb      	ldrb	r3, [r3, #15]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d106      	bne.n	8015a78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015a70:	3301      	adds	r3, #1
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015a78:	69fb      	ldr	r3, [r7, #28]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8015a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a80:	789b      	ldrb	r3, [r3, #2]
 8015a82:	4698      	mov	r8, r3
 8015a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a86:	78db      	ldrb	r3, [r3, #3]
 8015a88:	4699      	mov	r9, r3
 8015a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8c:	791b      	ldrb	r3, [r3, #4]
 8015a8e:	469a      	mov	sl, r3
 8015a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a92:	795b      	ldrb	r3, [r3, #5]
 8015a94:	461c      	mov	r4, r3
 8015a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a98:	799b      	ldrb	r3, [r3, #6]
 8015a9a:	461d      	mov	r5, r3
 8015a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9e:	79db      	ldrb	r3, [r3, #7]
 8015aa0:	461e      	mov	r6, r3
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa4:	7a1b      	ldrb	r3, [r3, #8]
 8015aa6:	617b      	str	r3, [r7, #20]
 8015aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aaa:	7a5b      	ldrb	r3, [r3, #9]
 8015aac:	613b      	str	r3, [r7, #16]
 8015aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab0:	7a9b      	ldrb	r3, [r3, #10]
 8015ab2:	60fb      	str	r3, [r7, #12]
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab6:	7adb      	ldrb	r3, [r3, #11]
 8015ab8:	60bb      	str	r3, [r7, #8]
 8015aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015abc:	7b1b      	ldrb	r3, [r3, #12]
 8015abe:	607b      	str	r3, [r7, #4]
 8015ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac2:	7b5b      	ldrb	r3, [r3, #13]
 8015ac4:	603b      	str	r3, [r7, #0]
 8015ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac8:	89db      	ldrh	r3, [r3, #14]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f7 f845 	bl	800cb5c <lwip_htons>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ad6:	683a      	ldr	r2, [r7, #0]
 8015ad8:	9208      	str	r2, [sp, #32]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	9207      	str	r2, [sp, #28]
 8015ade:	68ba      	ldr	r2, [r7, #8]
 8015ae0:	9206      	str	r2, [sp, #24]
 8015ae2:	68fa      	ldr	r2, [r7, #12]
 8015ae4:	9205      	str	r2, [sp, #20]
 8015ae6:	693a      	ldr	r2, [r7, #16]
 8015ae8:	9204      	str	r2, [sp, #16]
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	9303      	str	r3, [sp, #12]
 8015aee:	9602      	str	r6, [sp, #8]
 8015af0:	9501      	str	r5, [sp, #4]
 8015af2:	9400      	str	r4, [sp, #0]
 8015af4:	4653      	mov	r3, sl
 8015af6:	464a      	mov	r2, r9
 8015af8:	4641      	mov	r1, r8
 8015afa:	4820      	ldr	r0, [pc, #128]	@ (8015b7c <ethernet_input+0x130>)
 8015afc:	f000 ff6a 	bl	80169d4 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b02:	7b9a      	ldrb	r2, [r3, #14]
 8015b04:	7bdb      	ldrb	r3, [r3, #15]
 8015b06:	021b      	lsls	r3, r3, #8
 8015b08:	4313      	orrs	r3, r2
 8015b0a:	847b      	strh	r3, [r7, #34]	@ 0x22

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b0e:	789b      	ldrb	r3, [r3, #2]
 8015b10:	f003 0301 	and.w	r3, r3, #1
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d027      	beq.n	8015b68 <ethernet_input+0x11c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b1a:	789b      	ldrb	r3, [r3, #2]
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d10f      	bne.n	8015b40 <ethernet_input+0xf4>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b22:	78db      	ldrb	r3, [r3, #3]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d11f      	bne.n	8015b68 <ethernet_input+0x11c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b2a:	791b      	ldrb	r3, [r3, #4]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015b2c:	2b5e      	cmp	r3, #94	@ 0x5e
 8015b2e:	d11b      	bne.n	8015b68 <ethernet_input+0x11c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015b30:	69fb      	ldr	r3, [r7, #28]
 8015b32:	7b5b      	ldrb	r3, [r3, #13]
 8015b34:	f043 0310 	orr.w	r3, r3, #16
 8015b38:	b2da      	uxtb	r2, r3
 8015b3a:	69fb      	ldr	r3, [r7, #28]
 8015b3c:	735a      	strb	r2, [r3, #13]
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015b3e:	e013      	b.n	8015b68 <ethernet_input+0x11c>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b42:	3302      	adds	r3, #2
 8015b44:	2206      	movs	r2, #6
 8015b46:	490e      	ldr	r1, [pc, #56]	@ (8015b80 <ethernet_input+0x134>)
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f001 f8c9 	bl	8016ce0 <memcmp>
 8015b4e:	4603      	mov	r3, r0
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d109      	bne.n	8015b68 <ethernet_input+0x11c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8015b54:	69fb      	ldr	r3, [r7, #28]
 8015b56:	7b5b      	ldrb	r3, [r3, #13]
 8015b58:	f043 0308 	orr.w	r3, r3, #8
 8015b5c:	b2da      	uxtb	r2, r3
 8015b5e:	69fb      	ldr	r3, [r7, #28]
 8015b60:	735a      	strb	r2, [r3, #13]
      goto free_and_return;
 8015b62:	e001      	b.n	8015b68 <ethernet_input+0x11c>
    goto free_and_return;
 8015b64:	bf00      	nop
 8015b66:	e000      	b.n	8015b6a <ethernet_input+0x11e>
      goto free_and_return;
 8015b68:	bf00      	nop
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8015b6a:	69f8      	ldr	r0, [r7, #28]
 8015b6c:	f7f8 fcc2 	bl	800e4f4 <pbuf_free>
  return ERR_OK;
 8015b70:	2300      	movs	r3, #0
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3728      	adds	r7, #40	@ 0x28
 8015b76:	46bd      	mov	sp, r7
 8015b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b7c:	0801ac8c 	.word	0x0801ac8c
 8015b80:	0801afa8 	.word	0x0801afa8

08015b84 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b086      	sub	sp, #24
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	60bb      	str	r3, [r7, #8]
 8015b92:	2304      	movs	r3, #4
 8015b94:	60fb      	str	r3, [r7, #12]
 8015b96:	2300      	movs	r3, #0
 8015b98:	613b      	str	r3, [r7, #16]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015b9e:	f107 0308 	add.w	r3, r7, #8
 8015ba2:	2100      	movs	r1, #0
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f4 f8bb 	bl	8009d20 <osMessageCreate>
 8015baa:	4602      	mov	r2, r0
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d102      	bne.n	8015bbe <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8015bbc:	e000      	b.n	8015bc0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015bbe:	2300      	movs	r3, #0
}
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3718      	adds	r7, #24
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}

08015bc8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	6839      	ldr	r1, [r7, #0]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f7f4 f8c8 	bl	8009d70 <osMessagePut>
 8015be0:	4603      	mov	r3, r0
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d102      	bne.n	8015bec <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015be6:	2300      	movs	r3, #0
 8015be8:	73fb      	strb	r3, [r7, #15]
 8015bea:	e001      	b.n	8015bf0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015bec:	23ff      	movs	r3, #255	@ 0xff
 8015bee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3710      	adds	r7, #16
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}

08015bfc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b08c      	sub	sp, #48	@ 0x30
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	61f8      	str	r0, [r7, #28]
 8015c04:	61b9      	str	r1, [r7, #24]
 8015c06:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015c08:	f7f3 fec8 	bl	800999c <osKernelSysTick>
 8015c0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d017      	beq.n	8015c44 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	6819      	ldr	r1, [r3, #0]
 8015c18:	f107 0320 	add.w	r3, r7, #32
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	4618      	mov	r0, r3
 8015c20:	f7f4 f8e6 	bl	8009df0 <osMessageGet>

    if(event.status == osEventMessage)
 8015c24:	6a3b      	ldr	r3, [r7, #32]
 8015c26:	2b10      	cmp	r3, #16
 8015c28:	d109      	bne.n	8015c3e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	69bb      	ldr	r3, [r7, #24]
 8015c30:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015c32:	f7f3 feb3 	bl	800999c <osKernelSysTick>
 8015c36:	4602      	mov	r2, r0
 8015c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3a:	1ad3      	subs	r3, r2, r3
 8015c3c:	e019      	b.n	8015c72 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c42:	e016      	b.n	8015c72 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015c44:	69fb      	ldr	r3, [r7, #28]
 8015c46:	6819      	ldr	r1, [r3, #0]
 8015c48:	463b      	mov	r3, r7
 8015c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f7f4 f8ce 	bl	8009df0 <osMessageGet>
 8015c54:	f107 0320 	add.w	r3, r7, #32
 8015c58:	463a      	mov	r2, r7
 8015c5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c62:	461a      	mov	r2, r3
 8015c64:	69bb      	ldr	r3, [r7, #24]
 8015c66:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015c68:	f7f3 fe98 	bl	800999c <osKernelSysTick>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c70:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3730      	adds	r7, #48	@ 0x30
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}

08015c7a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015c7a:	b480      	push	{r7}
 8015c7c:	b083      	sub	sp, #12
 8015c7e:	af00      	add	r7, sp, #0
 8015c80:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d101      	bne.n	8015c8e <sys_mbox_valid+0x14>
    return 0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	e000      	b.n	8015c90 <sys_mbox_valid+0x16>
  else
    return 1;
 8015c8e:	2301      	movs	r3, #1
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	370c      	adds	r7, #12
 8015c94:	46bd      	mov	sp, r7
 8015c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9a:	4770      	bx	lr

08015c9c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015ca0:	4803      	ldr	r0, [pc, #12]	@ (8015cb0 <sys_init+0x14>)
 8015ca2:	f7f3 feeb 	bl	8009a7c <osMutexCreate>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	4a02      	ldr	r2, [pc, #8]	@ (8015cb4 <sys_init+0x18>)
 8015caa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015cac:	bf00      	nop
 8015cae:	bd80      	pop	{r7, pc}
 8015cb0:	0801afb0 	.word	0x0801afb0
 8015cb4:	20013ccc 	.word	0x20013ccc

08015cb8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	60bb      	str	r3, [r7, #8]
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015cc8:	f107 0308 	add.w	r3, r7, #8
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f3 fed5 	bl	8009a7c <osMutexCreate>
 8015cd2:	4602      	mov	r2, r0
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d102      	bne.n	8015ce6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce4:	e000      	b.n	8015ce8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015ce6:	2300      	movs	r3, #0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3710      	adds	r7, #16
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b082      	sub	sp, #8
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7f3 fed3 	bl	8009aac <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015d06:	bf00      	nop
 8015d08:	3708      	adds	r7, #8
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bd80      	pop	{r7, pc}

08015d0e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015d0e:	b580      	push	{r7, lr}
 8015d10:	b082      	sub	sp, #8
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f3 ff14 	bl	8009b48 <osMutexRelease>
}
 8015d20:	bf00      	nop
 8015d22:	3708      	adds	r7, #8
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}

08015d28 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b08c      	sub	sp, #48	@ 0x30
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
 8015d34:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015d36:	f107 0314 	add.w	r3, r7, #20
 8015d3a:	2200      	movs	r2, #0
 8015d3c:	601a      	str	r2, [r3, #0]
 8015d3e:	605a      	str	r2, [r3, #4]
 8015d40:	609a      	str	r2, [r3, #8]
 8015d42:	60da      	str	r2, [r3, #12]
 8015d44:	611a      	str	r2, [r3, #16]
 8015d46:	615a      	str	r2, [r3, #20]
 8015d48:	619a      	str	r2, [r3, #24]
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	617b      	str	r3, [r7, #20]
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	61bb      	str	r3, [r7, #24]
 8015d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d54:	b21b      	sxth	r3, r3
 8015d56:	83bb      	strh	r3, [r7, #28]
 8015d58:	683b      	ldr	r3, [r7, #0]
 8015d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015d5c:	f107 0314 	add.w	r3, r7, #20
 8015d60:	6879      	ldr	r1, [r7, #4]
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7f3 fe2a 	bl	80099bc <osThreadCreate>
 8015d68:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3730      	adds	r7, #48	@ 0x30
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
	...

08015d74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015d78:	4b04      	ldr	r3, [pc, #16]	@ (8015d8c <sys_arch_protect+0x18>)
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7f3 fe93 	bl	8009aac <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015d86:	2301      	movs	r3, #1
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	bd80      	pop	{r7, pc}
 8015d8c:	20013ccc 	.word	0x20013ccc

08015d90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015d98:	4b04      	ldr	r3, [pc, #16]	@ (8015dac <sys_arch_unprotect+0x1c>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7f3 fed3 	bl	8009b48 <osMutexRelease>
}
 8015da2:	bf00      	nop
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop
 8015dac:	20013ccc 	.word	0x20013ccc

08015db0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015db4:	2200      	movs	r2, #0
 8015db6:	4912      	ldr	r1, [pc, #72]	@ (8015e00 <MX_USB_DEVICE_Init+0x50>)
 8015db8:	4812      	ldr	r0, [pc, #72]	@ (8015e04 <MX_USB_DEVICE_Init+0x54>)
 8015dba:	f7f2 fa9f 	bl	80082fc <USBD_Init>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d001      	beq.n	8015dc8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015dc4:	f7ea fe7a 	bl	8000abc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015dc8:	490f      	ldr	r1, [pc, #60]	@ (8015e08 <MX_USB_DEVICE_Init+0x58>)
 8015dca:	480e      	ldr	r0, [pc, #56]	@ (8015e04 <MX_USB_DEVICE_Init+0x54>)
 8015dcc:	f7f2 fac6 	bl	800835c <USBD_RegisterClass>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d001      	beq.n	8015dda <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015dd6:	f7ea fe71 	bl	8000abc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015dda:	490c      	ldr	r1, [pc, #48]	@ (8015e0c <MX_USB_DEVICE_Init+0x5c>)
 8015ddc:	4809      	ldr	r0, [pc, #36]	@ (8015e04 <MX_USB_DEVICE_Init+0x54>)
 8015dde:	f7f2 f9bd 	bl	800815c <USBD_CDC_RegisterInterface>
 8015de2:	4603      	mov	r3, r0
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d001      	beq.n	8015dec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015de8:	f7ea fe68 	bl	8000abc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015dec:	4805      	ldr	r0, [pc, #20]	@ (8015e04 <MX_USB_DEVICE_Init+0x54>)
 8015dee:	f7f2 faeb 	bl	80083c8 <USBD_Start>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d001      	beq.n	8015dfc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015df8:	f7ea fe60 	bl	8000abc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015dfc:	bf00      	nop
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	200000bc 	.word	0x200000bc
 8015e04:	20013cd0 	.word	0x20013cd0
 8015e08:	20000018 	.word	0x20000018
 8015e0c:	200000a8 	.word	0x200000a8

08015e10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015e14:	2200      	movs	r2, #0
 8015e16:	4905      	ldr	r1, [pc, #20]	@ (8015e2c <CDC_Init_FS+0x1c>)
 8015e18:	4805      	ldr	r0, [pc, #20]	@ (8015e30 <CDC_Init_FS+0x20>)
 8015e1a:	f7f2 f9b9 	bl	8008190 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015e1e:	4905      	ldr	r1, [pc, #20]	@ (8015e34 <CDC_Init_FS+0x24>)
 8015e20:	4803      	ldr	r0, [pc, #12]	@ (8015e30 <CDC_Init_FS+0x20>)
 8015e22:	f7f2 f9d7 	bl	80081d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015e26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015e28:	4618      	mov	r0, r3
 8015e2a:	bd80      	pop	{r7, pc}
 8015e2c:	200147ac 	.word	0x200147ac
 8015e30:	20013cd0 	.word	0x20013cd0
 8015e34:	20013fac 	.word	0x20013fac

08015e38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015e38:	b480      	push	{r7}
 8015e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015e3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	46bd      	mov	sp, r7
 8015e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e46:	4770      	bx	lr

08015e48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015e48:	b480      	push	{r7}
 8015e4a:	b083      	sub	sp, #12
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	4603      	mov	r3, r0
 8015e50:	6039      	str	r1, [r7, #0]
 8015e52:	71fb      	strb	r3, [r7, #7]
 8015e54:	4613      	mov	r3, r2
 8015e56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015e58:	79fb      	ldrb	r3, [r7, #7]
 8015e5a:	2b23      	cmp	r3, #35	@ 0x23
 8015e5c:	d84a      	bhi.n	8015ef4 <CDC_Control_FS+0xac>
 8015e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8015e64 <CDC_Control_FS+0x1c>)
 8015e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e64:	08015ef5 	.word	0x08015ef5
 8015e68:	08015ef5 	.word	0x08015ef5
 8015e6c:	08015ef5 	.word	0x08015ef5
 8015e70:	08015ef5 	.word	0x08015ef5
 8015e74:	08015ef5 	.word	0x08015ef5
 8015e78:	08015ef5 	.word	0x08015ef5
 8015e7c:	08015ef5 	.word	0x08015ef5
 8015e80:	08015ef5 	.word	0x08015ef5
 8015e84:	08015ef5 	.word	0x08015ef5
 8015e88:	08015ef5 	.word	0x08015ef5
 8015e8c:	08015ef5 	.word	0x08015ef5
 8015e90:	08015ef5 	.word	0x08015ef5
 8015e94:	08015ef5 	.word	0x08015ef5
 8015e98:	08015ef5 	.word	0x08015ef5
 8015e9c:	08015ef5 	.word	0x08015ef5
 8015ea0:	08015ef5 	.word	0x08015ef5
 8015ea4:	08015ef5 	.word	0x08015ef5
 8015ea8:	08015ef5 	.word	0x08015ef5
 8015eac:	08015ef5 	.word	0x08015ef5
 8015eb0:	08015ef5 	.word	0x08015ef5
 8015eb4:	08015ef5 	.word	0x08015ef5
 8015eb8:	08015ef5 	.word	0x08015ef5
 8015ebc:	08015ef5 	.word	0x08015ef5
 8015ec0:	08015ef5 	.word	0x08015ef5
 8015ec4:	08015ef5 	.word	0x08015ef5
 8015ec8:	08015ef5 	.word	0x08015ef5
 8015ecc:	08015ef5 	.word	0x08015ef5
 8015ed0:	08015ef5 	.word	0x08015ef5
 8015ed4:	08015ef5 	.word	0x08015ef5
 8015ed8:	08015ef5 	.word	0x08015ef5
 8015edc:	08015ef5 	.word	0x08015ef5
 8015ee0:	08015ef5 	.word	0x08015ef5
 8015ee4:	08015ef5 	.word	0x08015ef5
 8015ee8:	08015ef5 	.word	0x08015ef5
 8015eec:	08015ef5 	.word	0x08015ef5
 8015ef0:	08015ef5 	.word	0x08015ef5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015ef4:	bf00      	nop
  }

  return (USBD_OK);
 8015ef6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr

08015f04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b082      	sub	sp, #8
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
 8015f0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015f0e:	6879      	ldr	r1, [r7, #4]
 8015f10:	4805      	ldr	r0, [pc, #20]	@ (8015f28 <CDC_Receive_FS+0x24>)
 8015f12:	f7f2 f95f 	bl	80081d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015f16:	4804      	ldr	r0, [pc, #16]	@ (8015f28 <CDC_Receive_FS+0x24>)
 8015f18:	f7f2 f9ba 	bl	8008290 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015f1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	20013cd0 	.word	0x20013cd0

08015f2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8015f74 <CDC_Transmit_FS+0x48>)
 8015f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8015f42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015f44:	68bb      	ldr	r3, [r7, #8]
 8015f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d001      	beq.n	8015f52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015f4e:	2301      	movs	r3, #1
 8015f50:	e00b      	b.n	8015f6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015f52:	887b      	ldrh	r3, [r7, #2]
 8015f54:	461a      	mov	r2, r3
 8015f56:	6879      	ldr	r1, [r7, #4]
 8015f58:	4806      	ldr	r0, [pc, #24]	@ (8015f74 <CDC_Transmit_FS+0x48>)
 8015f5a:	f7f2 f919 	bl	8008190 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015f5e:	4805      	ldr	r0, [pc, #20]	@ (8015f74 <CDC_Transmit_FS+0x48>)
 8015f60:	f7f2 f956 	bl	8008210 <USBD_CDC_TransmitPacket>
 8015f64:	4603      	mov	r3, r0
 8015f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	3710      	adds	r7, #16
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	20013cd0 	.word	0x20013cd0

08015f78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b087      	sub	sp, #28
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	4613      	mov	r3, r2
 8015f84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015f86:	2300      	movs	r3, #0
 8015f88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f8e:	4618      	mov	r0, r3
 8015f90:	371c      	adds	r7, #28
 8015f92:	46bd      	mov	sp, r7
 8015f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f98:	4770      	bx	lr
	...

08015f9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015f9c:	b480      	push	{r7}
 8015f9e:	b083      	sub	sp, #12
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	6039      	str	r1, [r7, #0]
 8015fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015fa8:	683b      	ldr	r3, [r7, #0]
 8015faa:	2212      	movs	r2, #18
 8015fac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015fae:	4b03      	ldr	r3, [pc, #12]	@ (8015fbc <USBD_FS_DeviceDescriptor+0x20>)
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	370c      	adds	r7, #12
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fba:	4770      	bx	lr
 8015fbc:	200000d8 	.word	0x200000d8

08015fc0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	6039      	str	r1, [r7, #0]
 8015fca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015fcc:	683b      	ldr	r3, [r7, #0]
 8015fce:	2204      	movs	r2, #4
 8015fd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015fd2:	4b03      	ldr	r3, [pc, #12]	@ (8015fe0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	370c      	adds	r7, #12
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fde:	4770      	bx	lr
 8015fe0:	200000ec 	.word	0x200000ec

08015fe4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	b082      	sub	sp, #8
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	4603      	mov	r3, r0
 8015fec:	6039      	str	r1, [r7, #0]
 8015fee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015ff0:	79fb      	ldrb	r3, [r7, #7]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d105      	bne.n	8016002 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015ff6:	683a      	ldr	r2, [r7, #0]
 8015ff8:	4907      	ldr	r1, [pc, #28]	@ (8016018 <USBD_FS_ProductStrDescriptor+0x34>)
 8015ffa:	4808      	ldr	r0, [pc, #32]	@ (801601c <USBD_FS_ProductStrDescriptor+0x38>)
 8015ffc:	f7f3 fbaa 	bl	8009754 <USBD_GetString>
 8016000:	e004      	b.n	801600c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016002:	683a      	ldr	r2, [r7, #0]
 8016004:	4904      	ldr	r1, [pc, #16]	@ (8016018 <USBD_FS_ProductStrDescriptor+0x34>)
 8016006:	4805      	ldr	r0, [pc, #20]	@ (801601c <USBD_FS_ProductStrDescriptor+0x38>)
 8016008:	f7f3 fba4 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 801600c:	4b02      	ldr	r3, [pc, #8]	@ (8016018 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801600e:	4618      	mov	r0, r3
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	20014fac 	.word	0x20014fac
 801601c:	0801adf8 	.word	0x0801adf8

08016020 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	4603      	mov	r3, r0
 8016028:	6039      	str	r1, [r7, #0]
 801602a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801602c:	683a      	ldr	r2, [r7, #0]
 801602e:	4904      	ldr	r1, [pc, #16]	@ (8016040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016030:	4804      	ldr	r0, [pc, #16]	@ (8016044 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016032:	f7f3 fb8f 	bl	8009754 <USBD_GetString>
  return USBD_StrDesc;
 8016036:	4b02      	ldr	r3, [pc, #8]	@ (8016040 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016038:	4618      	mov	r0, r3
 801603a:	3708      	adds	r7, #8
 801603c:	46bd      	mov	sp, r7
 801603e:	bd80      	pop	{r7, pc}
 8016040:	20014fac 	.word	0x20014fac
 8016044:	0801ae10 	.word	0x0801ae10

08016048 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b082      	sub	sp, #8
 801604c:	af00      	add	r7, sp, #0
 801604e:	4603      	mov	r3, r0
 8016050:	6039      	str	r1, [r7, #0]
 8016052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	221a      	movs	r2, #26
 8016058:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801605a:	f000 f843 	bl	80160e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801605e:	4b02      	ldr	r3, [pc, #8]	@ (8016068 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016060:	4618      	mov	r0, r3
 8016062:	3708      	adds	r7, #8
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	200000f0 	.word	0x200000f0

0801606c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	4603      	mov	r3, r0
 8016074:	6039      	str	r1, [r7, #0]
 8016076:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016078:	79fb      	ldrb	r3, [r7, #7]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d105      	bne.n	801608a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801607e:	683a      	ldr	r2, [r7, #0]
 8016080:	4907      	ldr	r1, [pc, #28]	@ (80160a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016082:	4808      	ldr	r0, [pc, #32]	@ (80160a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016084:	f7f3 fb66 	bl	8009754 <USBD_GetString>
 8016088:	e004      	b.n	8016094 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801608a:	683a      	ldr	r2, [r7, #0]
 801608c:	4904      	ldr	r1, [pc, #16]	@ (80160a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801608e:	4805      	ldr	r0, [pc, #20]	@ (80160a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016090:	f7f3 fb60 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016094:	4b02      	ldr	r3, [pc, #8]	@ (80160a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016096:	4618      	mov	r0, r3
 8016098:	3708      	adds	r7, #8
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	20014fac 	.word	0x20014fac
 80160a4:	0801ae24 	.word	0x0801ae24

080160a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	4603      	mov	r3, r0
 80160b0:	6039      	str	r1, [r7, #0]
 80160b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80160b4:	79fb      	ldrb	r3, [r7, #7]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d105      	bne.n	80160c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80160ba:	683a      	ldr	r2, [r7, #0]
 80160bc:	4907      	ldr	r1, [pc, #28]	@ (80160dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80160be:	4808      	ldr	r0, [pc, #32]	@ (80160e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80160c0:	f7f3 fb48 	bl	8009754 <USBD_GetString>
 80160c4:	e004      	b.n	80160d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80160c6:	683a      	ldr	r2, [r7, #0]
 80160c8:	4904      	ldr	r1, [pc, #16]	@ (80160dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80160ca:	4805      	ldr	r0, [pc, #20]	@ (80160e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80160cc:	f7f3 fb42 	bl	8009754 <USBD_GetString>
  }
  return USBD_StrDesc;
 80160d0:	4b02      	ldr	r3, [pc, #8]	@ (80160dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3708      	adds	r7, #8
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}
 80160da:	bf00      	nop
 80160dc:	20014fac 	.word	0x20014fac
 80160e0:	0801ae30 	.word	0x0801ae30

080160e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b084      	sub	sp, #16
 80160e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80160ea:	4b0f      	ldr	r3, [pc, #60]	@ (8016128 <Get_SerialNum+0x44>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80160f0:	4b0e      	ldr	r3, [pc, #56]	@ (801612c <Get_SerialNum+0x48>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80160f6:	4b0e      	ldr	r3, [pc, #56]	@ (8016130 <Get_SerialNum+0x4c>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80160fc:	68fa      	ldr	r2, [r7, #12]
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	4413      	add	r3, r2
 8016102:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d009      	beq.n	801611e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801610a:	2208      	movs	r2, #8
 801610c:	4909      	ldr	r1, [pc, #36]	@ (8016134 <Get_SerialNum+0x50>)
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f000 f814 	bl	801613c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016114:	2204      	movs	r2, #4
 8016116:	4908      	ldr	r1, [pc, #32]	@ (8016138 <Get_SerialNum+0x54>)
 8016118:	68b8      	ldr	r0, [r7, #8]
 801611a:	f000 f80f 	bl	801613c <IntToUnicode>
  }
}
 801611e:	bf00      	nop
 8016120:	3710      	adds	r7, #16
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	1fff7a10 	.word	0x1fff7a10
 801612c:	1fff7a14 	.word	0x1fff7a14
 8016130:	1fff7a18 	.word	0x1fff7a18
 8016134:	200000f2 	.word	0x200000f2
 8016138:	20000102 	.word	0x20000102

0801613c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801613c:	b480      	push	{r7}
 801613e:	b087      	sub	sp, #28
 8016140:	af00      	add	r7, sp, #0
 8016142:	60f8      	str	r0, [r7, #12]
 8016144:	60b9      	str	r1, [r7, #8]
 8016146:	4613      	mov	r3, r2
 8016148:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801614a:	2300      	movs	r3, #0
 801614c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801614e:	2300      	movs	r3, #0
 8016150:	75fb      	strb	r3, [r7, #23]
 8016152:	e027      	b.n	80161a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	0f1b      	lsrs	r3, r3, #28
 8016158:	2b09      	cmp	r3, #9
 801615a:	d80b      	bhi.n	8016174 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	0f1b      	lsrs	r3, r3, #28
 8016160:	b2da      	uxtb	r2, r3
 8016162:	7dfb      	ldrb	r3, [r7, #23]
 8016164:	005b      	lsls	r3, r3, #1
 8016166:	4619      	mov	r1, r3
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	440b      	add	r3, r1
 801616c:	3230      	adds	r2, #48	@ 0x30
 801616e:	b2d2      	uxtb	r2, r2
 8016170:	701a      	strb	r2, [r3, #0]
 8016172:	e00a      	b.n	801618a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	0f1b      	lsrs	r3, r3, #28
 8016178:	b2da      	uxtb	r2, r3
 801617a:	7dfb      	ldrb	r3, [r7, #23]
 801617c:	005b      	lsls	r3, r3, #1
 801617e:	4619      	mov	r1, r3
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	440b      	add	r3, r1
 8016184:	3237      	adds	r2, #55	@ 0x37
 8016186:	b2d2      	uxtb	r2, r2
 8016188:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	011b      	lsls	r3, r3, #4
 801618e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016190:	7dfb      	ldrb	r3, [r7, #23]
 8016192:	005b      	lsls	r3, r3, #1
 8016194:	3301      	adds	r3, #1
 8016196:	68ba      	ldr	r2, [r7, #8]
 8016198:	4413      	add	r3, r2
 801619a:	2200      	movs	r2, #0
 801619c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801619e:	7dfb      	ldrb	r3, [r7, #23]
 80161a0:	3301      	adds	r3, #1
 80161a2:	75fb      	strb	r3, [r7, #23]
 80161a4:	7dfa      	ldrb	r2, [r7, #23]
 80161a6:	79fb      	ldrb	r3, [r7, #7]
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d3d3      	bcc.n	8016154 <IntToUnicode+0x18>
  }
}
 80161ac:	bf00      	nop
 80161ae:	bf00      	nop
 80161b0:	371c      	adds	r7, #28
 80161b2:	46bd      	mov	sp, r7
 80161b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b8:	4770      	bx	lr
	...

080161bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b08a      	sub	sp, #40	@ 0x28
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80161c4:	f107 0314 	add.w	r3, r7, #20
 80161c8:	2200      	movs	r2, #0
 80161ca:	601a      	str	r2, [r3, #0]
 80161cc:	605a      	str	r2, [r3, #4]
 80161ce:	609a      	str	r2, [r3, #8]
 80161d0:	60da      	str	r2, [r3, #12]
 80161d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80161dc:	d132      	bne.n	8016244 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80161de:	2300      	movs	r3, #0
 80161e0:	613b      	str	r3, [r7, #16]
 80161e2:	4b1a      	ldr	r3, [pc, #104]	@ (801624c <HAL_PCD_MspInit+0x90>)
 80161e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161e6:	4a19      	ldr	r2, [pc, #100]	@ (801624c <HAL_PCD_MspInit+0x90>)
 80161e8:	f043 0301 	orr.w	r3, r3, #1
 80161ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80161ee:	4b17      	ldr	r3, [pc, #92]	@ (801624c <HAL_PCD_MspInit+0x90>)
 80161f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161f2:	f003 0301 	and.w	r3, r3, #1
 80161f6:	613b      	str	r3, [r7, #16]
 80161f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80161fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80161fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016200:	2302      	movs	r3, #2
 8016202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016204:	2300      	movs	r3, #0
 8016206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016208:	2303      	movs	r3, #3
 801620a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801620c:	230a      	movs	r3, #10
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016210:	f107 0314 	add.w	r3, r7, #20
 8016214:	4619      	mov	r1, r3
 8016216:	480e      	ldr	r0, [pc, #56]	@ (8016250 <HAL_PCD_MspInit+0x94>)
 8016218:	f7ec fb12 	bl	8002840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801621c:	4b0b      	ldr	r3, [pc, #44]	@ (801624c <HAL_PCD_MspInit+0x90>)
 801621e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016220:	4a0a      	ldr	r2, [pc, #40]	@ (801624c <HAL_PCD_MspInit+0x90>)
 8016222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016226:	6353      	str	r3, [r2, #52]	@ 0x34
 8016228:	2300      	movs	r3, #0
 801622a:	60fb      	str	r3, [r7, #12]
 801622c:	4b07      	ldr	r3, [pc, #28]	@ (801624c <HAL_PCD_MspInit+0x90>)
 801622e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016230:	4a06      	ldr	r2, [pc, #24]	@ (801624c <HAL_PCD_MspInit+0x90>)
 8016232:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016236:	6453      	str	r3, [r2, #68]	@ 0x44
 8016238:	4b04      	ldr	r3, [pc, #16]	@ (801624c <HAL_PCD_MspInit+0x90>)
 801623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801623c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8016240:	60fb      	str	r3, [r7, #12]
 8016242:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016244:	bf00      	nop
 8016246:	3728      	adds	r7, #40	@ 0x28
 8016248:	46bd      	mov	sp, r7
 801624a:	bd80      	pop	{r7, pc}
 801624c:	40023800 	.word	0x40023800
 8016250:	40020000 	.word	0x40020000

08016254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8016268:	4619      	mov	r1, r3
 801626a:	4610      	mov	r0, r2
 801626c:	f7f2 f8f9 	bl	8008462 <USBD_LL_SetupStage>
}
 8016270:	bf00      	nop
 8016272:	3708      	adds	r7, #8
 8016274:	46bd      	mov	sp, r7
 8016276:	bd80      	pop	{r7, pc}

08016278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	460b      	mov	r3, r1
 8016282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801628a:	78fa      	ldrb	r2, [r7, #3]
 801628c:	6879      	ldr	r1, [r7, #4]
 801628e:	4613      	mov	r3, r2
 8016290:	00db      	lsls	r3, r3, #3
 8016292:	4413      	add	r3, r2
 8016294:	009b      	lsls	r3, r3, #2
 8016296:	440b      	add	r3, r1
 8016298:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801629c:	681a      	ldr	r2, [r3, #0]
 801629e:	78fb      	ldrb	r3, [r7, #3]
 80162a0:	4619      	mov	r1, r3
 80162a2:	f7f2 f933 	bl	800850c <USBD_LL_DataOutStage>
}
 80162a6:	bf00      	nop
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}

080162ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b082      	sub	sp, #8
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	6078      	str	r0, [r7, #4]
 80162b6:	460b      	mov	r3, r1
 80162b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80162c0:	78fa      	ldrb	r2, [r7, #3]
 80162c2:	6879      	ldr	r1, [r7, #4]
 80162c4:	4613      	mov	r3, r2
 80162c6:	00db      	lsls	r3, r3, #3
 80162c8:	4413      	add	r3, r2
 80162ca:	009b      	lsls	r3, r3, #2
 80162cc:	440b      	add	r3, r1
 80162ce:	3320      	adds	r3, #32
 80162d0:	681a      	ldr	r2, [r3, #0]
 80162d2:	78fb      	ldrb	r3, [r7, #3]
 80162d4:	4619      	mov	r1, r3
 80162d6:	f7f2 f9d5 	bl	8008684 <USBD_LL_DataInStage>
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b082      	sub	sp, #8
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7f2 fb19 	bl	8008928 <USBD_LL_SOF>
}
 80162f6:	bf00      	nop
 80162f8:	3708      	adds	r7, #8
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b084      	sub	sp, #16
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016306:	2301      	movs	r3, #1
 8016308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	79db      	ldrb	r3, [r3, #7]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d102      	bne.n	8016318 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016312:	2300      	movs	r3, #0
 8016314:	73fb      	strb	r3, [r7, #15]
 8016316:	e008      	b.n	801632a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	79db      	ldrb	r3, [r3, #7]
 801631c:	2b02      	cmp	r3, #2
 801631e:	d102      	bne.n	8016326 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016320:	2301      	movs	r3, #1
 8016322:	73fb      	strb	r3, [r7, #15]
 8016324:	e001      	b.n	801632a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016326:	f7ea fbc9 	bl	8000abc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016330:	7bfa      	ldrb	r2, [r7, #15]
 8016332:	4611      	mov	r1, r2
 8016334:	4618      	mov	r0, r3
 8016336:	f7f2 fab3 	bl	80088a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8016340:	4618      	mov	r0, r3
 8016342:	f7f2 fa5a 	bl	80087fa <USBD_LL_Reset>
}
 8016346:	bf00      	nop
 8016348:	3710      	adds	r7, #16
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
	...

08016350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801635e:	4618      	mov	r0, r3
 8016360:	f7f2 faae 	bl	80088c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	687a      	ldr	r2, [r7, #4]
 8016370:	6812      	ldr	r2, [r2, #0]
 8016372:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016376:	f043 0301 	orr.w	r3, r3, #1
 801637a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	7adb      	ldrb	r3, [r3, #11]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d005      	beq.n	8016390 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016384:	4b04      	ldr	r3, [pc, #16]	@ (8016398 <HAL_PCD_SuspendCallback+0x48>)
 8016386:	691b      	ldr	r3, [r3, #16]
 8016388:	4a03      	ldr	r2, [pc, #12]	@ (8016398 <HAL_PCD_SuspendCallback+0x48>)
 801638a:	f043 0306 	orr.w	r3, r3, #6
 801638e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016390:	bf00      	nop
 8016392:	3708      	adds	r7, #8
 8016394:	46bd      	mov	sp, r7
 8016396:	bd80      	pop	{r7, pc}
 8016398:	e000ed00 	.word	0xe000ed00

0801639c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b082      	sub	sp, #8
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163aa:	4618      	mov	r0, r3
 80163ac:	f7f2 faa4 	bl	80088f8 <USBD_LL_Resume>
}
 80163b0:	bf00      	nop
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b082      	sub	sp, #8
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	460b      	mov	r3, r1
 80163c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163ca:	78fa      	ldrb	r2, [r7, #3]
 80163cc:	4611      	mov	r1, r2
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7f2 fafc 	bl	80089cc <USBD_LL_IsoOUTIncomplete>
}
 80163d4:	bf00      	nop
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	460b      	mov	r3, r1
 80163e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80163ee:	78fa      	ldrb	r2, [r7, #3]
 80163f0:	4611      	mov	r1, r2
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7f2 fab8 	bl	8008968 <USBD_LL_IsoINIncomplete>
}
 80163f8:	bf00      	nop
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801640e:	4618      	mov	r0, r3
 8016410:	f7f2 fb0e 	bl	8008a30 <USBD_LL_DevConnected>
}
 8016414:	bf00      	nop
 8016416:	3708      	adds	r7, #8
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}

0801641c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b082      	sub	sp, #8
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801642a:	4618      	mov	r0, r3
 801642c:	f7f2 fb0b 	bl	8008a46 <USBD_LL_DevDisconnected>
}
 8016430:	bf00      	nop
 8016432:	3708      	adds	r7, #8
 8016434:	46bd      	mov	sp, r7
 8016436:	bd80      	pop	{r7, pc}

08016438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	781b      	ldrb	r3, [r3, #0]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d13c      	bne.n	80164c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016448:	4a20      	ldr	r2, [pc, #128]	@ (80164cc <USBD_LL_Init+0x94>)
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	4a1e      	ldr	r2, [pc, #120]	@ (80164cc <USBD_LL_Init+0x94>)
 8016454:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016458:	4b1c      	ldr	r3, [pc, #112]	@ (80164cc <USBD_LL_Init+0x94>)
 801645a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801645e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016460:	4b1a      	ldr	r3, [pc, #104]	@ (80164cc <USBD_LL_Init+0x94>)
 8016462:	2204      	movs	r2, #4
 8016464:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016466:	4b19      	ldr	r3, [pc, #100]	@ (80164cc <USBD_LL_Init+0x94>)
 8016468:	2202      	movs	r2, #2
 801646a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801646c:	4b17      	ldr	r3, [pc, #92]	@ (80164cc <USBD_LL_Init+0x94>)
 801646e:	2200      	movs	r2, #0
 8016470:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016472:	4b16      	ldr	r3, [pc, #88]	@ (80164cc <USBD_LL_Init+0x94>)
 8016474:	2202      	movs	r2, #2
 8016476:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016478:	4b14      	ldr	r3, [pc, #80]	@ (80164cc <USBD_LL_Init+0x94>)
 801647a:	2200      	movs	r2, #0
 801647c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801647e:	4b13      	ldr	r3, [pc, #76]	@ (80164cc <USBD_LL_Init+0x94>)
 8016480:	2200      	movs	r2, #0
 8016482:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016484:	4b11      	ldr	r3, [pc, #68]	@ (80164cc <USBD_LL_Init+0x94>)
 8016486:	2200      	movs	r2, #0
 8016488:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801648a:	4b10      	ldr	r3, [pc, #64]	@ (80164cc <USBD_LL_Init+0x94>)
 801648c:	2200      	movs	r2, #0
 801648e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016490:	4b0e      	ldr	r3, [pc, #56]	@ (80164cc <USBD_LL_Init+0x94>)
 8016492:	2200      	movs	r2, #0
 8016494:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016496:	480d      	ldr	r0, [pc, #52]	@ (80164cc <USBD_LL_Init+0x94>)
 8016498:	f7ec fb87 	bl	8002baa <HAL_PCD_Init>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d001      	beq.n	80164a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80164a2:	f7ea fb0b 	bl	8000abc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80164a6:	2180      	movs	r1, #128	@ 0x80
 80164a8:	4808      	ldr	r0, [pc, #32]	@ (80164cc <USBD_LL_Init+0x94>)
 80164aa:	f7ed fdb4 	bl	8004016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80164ae:	2240      	movs	r2, #64	@ 0x40
 80164b0:	2100      	movs	r1, #0
 80164b2:	4806      	ldr	r0, [pc, #24]	@ (80164cc <USBD_LL_Init+0x94>)
 80164b4:	f7ed fd68 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80164b8:	2280      	movs	r2, #128	@ 0x80
 80164ba:	2101      	movs	r1, #1
 80164bc:	4803      	ldr	r0, [pc, #12]	@ (80164cc <USBD_LL_Init+0x94>)
 80164be:	f7ed fd63 	bl	8003f88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80164c2:	2300      	movs	r3, #0
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3708      	adds	r7, #8
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	200151ac 	.word	0x200151ac

080164d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b084      	sub	sp, #16
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80164d8:	2300      	movs	r3, #0
 80164da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80164dc:	2300      	movs	r3, #0
 80164de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7ec fc6e 	bl	8002dc8 <HAL_PCD_Start>
 80164ec:	4603      	mov	r3, r0
 80164ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80164f0:	7bfb      	ldrb	r3, [r7, #15]
 80164f2:	4618      	mov	r0, r3
 80164f4:	f000 f942 	bl	801677c <USBD_Get_USB_Status>
 80164f8:	4603      	mov	r3, r0
 80164fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80164fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3710      	adds	r7, #16
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}

08016506 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016506:	b580      	push	{r7, lr}
 8016508:	b084      	sub	sp, #16
 801650a:	af00      	add	r7, sp, #0
 801650c:	6078      	str	r0, [r7, #4]
 801650e:	4608      	mov	r0, r1
 8016510:	4611      	mov	r1, r2
 8016512:	461a      	mov	r2, r3
 8016514:	4603      	mov	r3, r0
 8016516:	70fb      	strb	r3, [r7, #3]
 8016518:	460b      	mov	r3, r1
 801651a:	70bb      	strb	r3, [r7, #2]
 801651c:	4613      	mov	r3, r2
 801651e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016520:	2300      	movs	r3, #0
 8016522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016524:	2300      	movs	r3, #0
 8016526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801652e:	78bb      	ldrb	r3, [r7, #2]
 8016530:	883a      	ldrh	r2, [r7, #0]
 8016532:	78f9      	ldrb	r1, [r7, #3]
 8016534:	f7ed f942 	bl	80037bc <HAL_PCD_EP_Open>
 8016538:	4603      	mov	r3, r0
 801653a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801653c:	7bfb      	ldrb	r3, [r7, #15]
 801653e:	4618      	mov	r0, r3
 8016540:	f000 f91c 	bl	801677c <USBD_Get_USB_Status>
 8016544:	4603      	mov	r3, r0
 8016546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016548:	7bbb      	ldrb	r3, [r7, #14]
}
 801654a:	4618      	mov	r0, r3
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016552:	b580      	push	{r7, lr}
 8016554:	b084      	sub	sp, #16
 8016556:	af00      	add	r7, sp, #0
 8016558:	6078      	str	r0, [r7, #4]
 801655a:	460b      	mov	r3, r1
 801655c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801655e:	2300      	movs	r3, #0
 8016560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016562:	2300      	movs	r3, #0
 8016564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801656c:	78fa      	ldrb	r2, [r7, #3]
 801656e:	4611      	mov	r1, r2
 8016570:	4618      	mov	r0, r3
 8016572:	f7ed f98d 	bl	8003890 <HAL_PCD_EP_Close>
 8016576:	4603      	mov	r3, r0
 8016578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801657a:	7bfb      	ldrb	r3, [r7, #15]
 801657c:	4618      	mov	r0, r3
 801657e:	f000 f8fd 	bl	801677c <USBD_Get_USB_Status>
 8016582:	4603      	mov	r3, r0
 8016584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016586:	7bbb      	ldrb	r3, [r7, #14]
}
 8016588:	4618      	mov	r0, r3
 801658a:	3710      	adds	r7, #16
 801658c:	46bd      	mov	sp, r7
 801658e:	bd80      	pop	{r7, pc}

08016590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	460b      	mov	r3, r1
 801659a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801659c:	2300      	movs	r3, #0
 801659e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165a0:	2300      	movs	r3, #0
 80165a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165aa:	78fa      	ldrb	r2, [r7, #3]
 80165ac:	4611      	mov	r1, r2
 80165ae:	4618      	mov	r0, r3
 80165b0:	f7ed fa45 	bl	8003a3e <HAL_PCD_EP_SetStall>
 80165b4:	4603      	mov	r3, r0
 80165b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165b8:	7bfb      	ldrb	r3, [r7, #15]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f000 f8de 	bl	801677c <USBD_Get_USB_Status>
 80165c0:	4603      	mov	r3, r0
 80165c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80165c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3710      	adds	r7, #16
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}

080165ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80165ce:	b580      	push	{r7, lr}
 80165d0:	b084      	sub	sp, #16
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	6078      	str	r0, [r7, #4]
 80165d6:	460b      	mov	r3, r1
 80165d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165da:	2300      	movs	r3, #0
 80165dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80165de:	2300      	movs	r3, #0
 80165e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80165e8:	78fa      	ldrb	r2, [r7, #3]
 80165ea:	4611      	mov	r1, r2
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7ed fa89 	bl	8003b04 <HAL_PCD_EP_ClrStall>
 80165f2:	4603      	mov	r3, r0
 80165f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80165f6:	7bfb      	ldrb	r3, [r7, #15]
 80165f8:	4618      	mov	r0, r3
 80165fa:	f000 f8bf 	bl	801677c <USBD_Get_USB_Status>
 80165fe:	4603      	mov	r3, r0
 8016600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016602:	7bbb      	ldrb	r3, [r7, #14]
}
 8016604:	4618      	mov	r0, r3
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}

0801660c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801660c:	b480      	push	{r7}
 801660e:	b085      	sub	sp, #20
 8016610:	af00      	add	r7, sp, #0
 8016612:	6078      	str	r0, [r7, #4]
 8016614:	460b      	mov	r3, r1
 8016616:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801661e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016624:	2b00      	cmp	r3, #0
 8016626:	da0b      	bge.n	8016640 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016628:	78fb      	ldrb	r3, [r7, #3]
 801662a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801662e:	68f9      	ldr	r1, [r7, #12]
 8016630:	4613      	mov	r3, r2
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	4413      	add	r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	440b      	add	r3, r1
 801663a:	3316      	adds	r3, #22
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	e00b      	b.n	8016658 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016640:	78fb      	ldrb	r3, [r7, #3]
 8016642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016646:	68f9      	ldr	r1, [r7, #12]
 8016648:	4613      	mov	r3, r2
 801664a:	00db      	lsls	r3, r3, #3
 801664c:	4413      	add	r3, r2
 801664e:	009b      	lsls	r3, r3, #2
 8016650:	440b      	add	r3, r1
 8016652:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8016656:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016658:	4618      	mov	r0, r3
 801665a:	3714      	adds	r7, #20
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr

08016664 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
 801666c:	460b      	mov	r3, r1
 801666e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016670:	2300      	movs	r3, #0
 8016672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016674:	2300      	movs	r3, #0
 8016676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801667e:	78fa      	ldrb	r2, [r7, #3]
 8016680:	4611      	mov	r1, r2
 8016682:	4618      	mov	r0, r3
 8016684:	f7ed f876 	bl	8003774 <HAL_PCD_SetAddress>
 8016688:	4603      	mov	r3, r0
 801668a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801668c:	7bfb      	ldrb	r3, [r7, #15]
 801668e:	4618      	mov	r0, r3
 8016690:	f000 f874 	bl	801677c <USBD_Get_USB_Status>
 8016694:	4603      	mov	r3, r0
 8016696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016698:	7bbb      	ldrb	r3, [r7, #14]
}
 801669a:	4618      	mov	r0, r3
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b086      	sub	sp, #24
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	60f8      	str	r0, [r7, #12]
 80166aa:	607a      	str	r2, [r7, #4]
 80166ac:	603b      	str	r3, [r7, #0]
 80166ae:	460b      	mov	r3, r1
 80166b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166b6:	2300      	movs	r3, #0
 80166b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80166c0:	7af9      	ldrb	r1, [r7, #11]
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	687a      	ldr	r2, [r7, #4]
 80166c6:	f7ed f980 	bl	80039ca <HAL_PCD_EP_Transmit>
 80166ca:	4603      	mov	r3, r0
 80166cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80166ce:	7dfb      	ldrb	r3, [r7, #23]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f000 f853 	bl	801677c <USBD_Get_USB_Status>
 80166d6:	4603      	mov	r3, r0
 80166d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80166da:	7dbb      	ldrb	r3, [r7, #22]
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3718      	adds	r7, #24
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}

080166e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	607a      	str	r2, [r7, #4]
 80166ee:	603b      	str	r3, [r7, #0]
 80166f0:	460b      	mov	r3, r1
 80166f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80166f4:	2300      	movs	r3, #0
 80166f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80166f8:	2300      	movs	r3, #0
 80166fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8016702:	7af9      	ldrb	r1, [r7, #11]
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	687a      	ldr	r2, [r7, #4]
 8016708:	f7ed f90c 	bl	8003924 <HAL_PCD_EP_Receive>
 801670c:	4603      	mov	r3, r0
 801670e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016710:	7dfb      	ldrb	r3, [r7, #23]
 8016712:	4618      	mov	r0, r3
 8016714:	f000 f832 	bl	801677c <USBD_Get_USB_Status>
 8016718:	4603      	mov	r3, r0
 801671a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801671c:	7dbb      	ldrb	r3, [r7, #22]
}
 801671e:	4618      	mov	r0, r3
 8016720:	3718      	adds	r7, #24
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}

08016726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016726:	b580      	push	{r7, lr}
 8016728:	b082      	sub	sp, #8
 801672a:	af00      	add	r7, sp, #0
 801672c:	6078      	str	r0, [r7, #4]
 801672e:	460b      	mov	r3, r1
 8016730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016738:	78fa      	ldrb	r2, [r7, #3]
 801673a:	4611      	mov	r1, r2
 801673c:	4618      	mov	r0, r3
 801673e:	f7ed f92c 	bl	800399a <HAL_PCD_EP_GetRxCount>
 8016742:	4603      	mov	r3, r0
}
 8016744:	4618      	mov	r0, r3
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}

0801674c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801674c:	b480      	push	{r7}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016754:	4b03      	ldr	r3, [pc, #12]	@ (8016764 <USBD_static_malloc+0x18>)
}
 8016756:	4618      	mov	r0, r3
 8016758:	370c      	adds	r7, #12
 801675a:	46bd      	mov	sp, r7
 801675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016760:	4770      	bx	lr
 8016762:	bf00      	nop
 8016764:	20015690 	.word	0x20015690

08016768 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]

}
 8016770:	bf00      	nop
 8016772:	370c      	adds	r7, #12
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801677c:	b480      	push	{r7}
 801677e:	b085      	sub	sp, #20
 8016780:	af00      	add	r7, sp, #0
 8016782:	4603      	mov	r3, r0
 8016784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016786:	2300      	movs	r3, #0
 8016788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801678a:	79fb      	ldrb	r3, [r7, #7]
 801678c:	2b03      	cmp	r3, #3
 801678e:	d817      	bhi.n	80167c0 <USBD_Get_USB_Status+0x44>
 8016790:	a201      	add	r2, pc, #4	@ (adr r2, 8016798 <USBD_Get_USB_Status+0x1c>)
 8016792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016796:	bf00      	nop
 8016798:	080167a9 	.word	0x080167a9
 801679c:	080167af 	.word	0x080167af
 80167a0:	080167b5 	.word	0x080167b5
 80167a4:	080167bb 	.word	0x080167bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80167a8:	2300      	movs	r3, #0
 80167aa:	73fb      	strb	r3, [r7, #15]
    break;
 80167ac:	e00b      	b.n	80167c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80167ae:	2303      	movs	r3, #3
 80167b0:	73fb      	strb	r3, [r7, #15]
    break;
 80167b2:	e008      	b.n	80167c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80167b4:	2301      	movs	r3, #1
 80167b6:	73fb      	strb	r3, [r7, #15]
    break;
 80167b8:	e005      	b.n	80167c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80167ba:	2303      	movs	r3, #3
 80167bc:	73fb      	strb	r3, [r7, #15]
    break;
 80167be:	e002      	b.n	80167c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80167c0:	2303      	movs	r3, #3
 80167c2:	73fb      	strb	r3, [r7, #15]
    break;
 80167c4:	bf00      	nop
  }
  return usb_status;
 80167c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3714      	adds	r7, #20
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <rand>:
 80167d4:	4b16      	ldr	r3, [pc, #88]	@ (8016830 <rand+0x5c>)
 80167d6:	b510      	push	{r4, lr}
 80167d8:	681c      	ldr	r4, [r3, #0]
 80167da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80167dc:	b9b3      	cbnz	r3, 801680c <rand+0x38>
 80167de:	2018      	movs	r0, #24
 80167e0:	f000 fbf2 	bl	8016fc8 <malloc>
 80167e4:	4602      	mov	r2, r0
 80167e6:	6320      	str	r0, [r4, #48]	@ 0x30
 80167e8:	b920      	cbnz	r0, 80167f4 <rand+0x20>
 80167ea:	4b12      	ldr	r3, [pc, #72]	@ (8016834 <rand+0x60>)
 80167ec:	4812      	ldr	r0, [pc, #72]	@ (8016838 <rand+0x64>)
 80167ee:	2152      	movs	r1, #82	@ 0x52
 80167f0:	f000 fb82 	bl	8016ef8 <__assert_func>
 80167f4:	4911      	ldr	r1, [pc, #68]	@ (801683c <rand+0x68>)
 80167f6:	4b12      	ldr	r3, [pc, #72]	@ (8016840 <rand+0x6c>)
 80167f8:	e9c0 1300 	strd	r1, r3, [r0]
 80167fc:	4b11      	ldr	r3, [pc, #68]	@ (8016844 <rand+0x70>)
 80167fe:	6083      	str	r3, [r0, #8]
 8016800:	230b      	movs	r3, #11
 8016802:	8183      	strh	r3, [r0, #12]
 8016804:	2100      	movs	r1, #0
 8016806:	2001      	movs	r0, #1
 8016808:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801680c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801680e:	480e      	ldr	r0, [pc, #56]	@ (8016848 <rand+0x74>)
 8016810:	690b      	ldr	r3, [r1, #16]
 8016812:	694c      	ldr	r4, [r1, #20]
 8016814:	4a0d      	ldr	r2, [pc, #52]	@ (801684c <rand+0x78>)
 8016816:	4358      	muls	r0, r3
 8016818:	fb02 0004 	mla	r0, r2, r4, r0
 801681c:	fba3 3202 	umull	r3, r2, r3, r2
 8016820:	3301      	adds	r3, #1
 8016822:	eb40 0002 	adc.w	r0, r0, r2
 8016826:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801682a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801682e:	bd10      	pop	{r4, pc}
 8016830:	20000118 	.word	0x20000118
 8016834:	0801afb8 	.word	0x0801afb8
 8016838:	0801afcf 	.word	0x0801afcf
 801683c:	abcd330e 	.word	0xabcd330e
 8016840:	e66d1234 	.word	0xe66d1234
 8016844:	0005deec 	.word	0x0005deec
 8016848:	5851f42d 	.word	0x5851f42d
 801684c:	4c957f2d 	.word	0x4c957f2d

08016850 <std>:
 8016850:	2300      	movs	r3, #0
 8016852:	b510      	push	{r4, lr}
 8016854:	4604      	mov	r4, r0
 8016856:	e9c0 3300 	strd	r3, r3, [r0]
 801685a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801685e:	6083      	str	r3, [r0, #8]
 8016860:	8181      	strh	r1, [r0, #12]
 8016862:	6643      	str	r3, [r0, #100]	@ 0x64
 8016864:	81c2      	strh	r2, [r0, #14]
 8016866:	6183      	str	r3, [r0, #24]
 8016868:	4619      	mov	r1, r3
 801686a:	2208      	movs	r2, #8
 801686c:	305c      	adds	r0, #92	@ 0x5c
 801686e:	f000 fa61 	bl	8016d34 <memset>
 8016872:	4b0d      	ldr	r3, [pc, #52]	@ (80168a8 <std+0x58>)
 8016874:	6263      	str	r3, [r4, #36]	@ 0x24
 8016876:	4b0d      	ldr	r3, [pc, #52]	@ (80168ac <std+0x5c>)
 8016878:	62a3      	str	r3, [r4, #40]	@ 0x28
 801687a:	4b0d      	ldr	r3, [pc, #52]	@ (80168b0 <std+0x60>)
 801687c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801687e:	4b0d      	ldr	r3, [pc, #52]	@ (80168b4 <std+0x64>)
 8016880:	6323      	str	r3, [r4, #48]	@ 0x30
 8016882:	4b0d      	ldr	r3, [pc, #52]	@ (80168b8 <std+0x68>)
 8016884:	6224      	str	r4, [r4, #32]
 8016886:	429c      	cmp	r4, r3
 8016888:	d006      	beq.n	8016898 <std+0x48>
 801688a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801688e:	4294      	cmp	r4, r2
 8016890:	d002      	beq.n	8016898 <std+0x48>
 8016892:	33d0      	adds	r3, #208	@ 0xd0
 8016894:	429c      	cmp	r4, r3
 8016896:	d105      	bne.n	80168a4 <std+0x54>
 8016898:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168a0:	f000 bb18 	b.w	8016ed4 <__retarget_lock_init_recursive>
 80168a4:	bd10      	pop	{r4, pc}
 80168a6:	bf00      	nop
 80168a8:	08016b31 	.word	0x08016b31
 80168ac:	08016b53 	.word	0x08016b53
 80168b0:	08016b8b 	.word	0x08016b8b
 80168b4:	08016baf 	.word	0x08016baf
 80168b8:	200158b0 	.word	0x200158b0

080168bc <stdio_exit_handler>:
 80168bc:	4a02      	ldr	r2, [pc, #8]	@ (80168c8 <stdio_exit_handler+0xc>)
 80168be:	4903      	ldr	r1, [pc, #12]	@ (80168cc <stdio_exit_handler+0x10>)
 80168c0:	4803      	ldr	r0, [pc, #12]	@ (80168d0 <stdio_exit_handler+0x14>)
 80168c2:	f000 b869 	b.w	8016998 <_fwalk_sglue>
 80168c6:	bf00      	nop
 80168c8:	2000010c 	.word	0x2000010c
 80168cc:	08017a89 	.word	0x08017a89
 80168d0:	2000011c 	.word	0x2000011c

080168d4 <cleanup_stdio>:
 80168d4:	6841      	ldr	r1, [r0, #4]
 80168d6:	4b0c      	ldr	r3, [pc, #48]	@ (8016908 <cleanup_stdio+0x34>)
 80168d8:	4299      	cmp	r1, r3
 80168da:	b510      	push	{r4, lr}
 80168dc:	4604      	mov	r4, r0
 80168de:	d001      	beq.n	80168e4 <cleanup_stdio+0x10>
 80168e0:	f001 f8d2 	bl	8017a88 <_fflush_r>
 80168e4:	68a1      	ldr	r1, [r4, #8]
 80168e6:	4b09      	ldr	r3, [pc, #36]	@ (801690c <cleanup_stdio+0x38>)
 80168e8:	4299      	cmp	r1, r3
 80168ea:	d002      	beq.n	80168f2 <cleanup_stdio+0x1e>
 80168ec:	4620      	mov	r0, r4
 80168ee:	f001 f8cb 	bl	8017a88 <_fflush_r>
 80168f2:	68e1      	ldr	r1, [r4, #12]
 80168f4:	4b06      	ldr	r3, [pc, #24]	@ (8016910 <cleanup_stdio+0x3c>)
 80168f6:	4299      	cmp	r1, r3
 80168f8:	d004      	beq.n	8016904 <cleanup_stdio+0x30>
 80168fa:	4620      	mov	r0, r4
 80168fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016900:	f001 b8c2 	b.w	8017a88 <_fflush_r>
 8016904:	bd10      	pop	{r4, pc}
 8016906:	bf00      	nop
 8016908:	200158b0 	.word	0x200158b0
 801690c:	20015918 	.word	0x20015918
 8016910:	20015980 	.word	0x20015980

08016914 <global_stdio_init.part.0>:
 8016914:	b510      	push	{r4, lr}
 8016916:	4b0b      	ldr	r3, [pc, #44]	@ (8016944 <global_stdio_init.part.0+0x30>)
 8016918:	4c0b      	ldr	r4, [pc, #44]	@ (8016948 <global_stdio_init.part.0+0x34>)
 801691a:	4a0c      	ldr	r2, [pc, #48]	@ (801694c <global_stdio_init.part.0+0x38>)
 801691c:	601a      	str	r2, [r3, #0]
 801691e:	4620      	mov	r0, r4
 8016920:	2200      	movs	r2, #0
 8016922:	2104      	movs	r1, #4
 8016924:	f7ff ff94 	bl	8016850 <std>
 8016928:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801692c:	2201      	movs	r2, #1
 801692e:	2109      	movs	r1, #9
 8016930:	f7ff ff8e 	bl	8016850 <std>
 8016934:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016938:	2202      	movs	r2, #2
 801693a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801693e:	2112      	movs	r1, #18
 8016940:	f7ff bf86 	b.w	8016850 <std>
 8016944:	200159e8 	.word	0x200159e8
 8016948:	200158b0 	.word	0x200158b0
 801694c:	080168bd 	.word	0x080168bd

08016950 <__sfp_lock_acquire>:
 8016950:	4801      	ldr	r0, [pc, #4]	@ (8016958 <__sfp_lock_acquire+0x8>)
 8016952:	f000 bac0 	b.w	8016ed6 <__retarget_lock_acquire_recursive>
 8016956:	bf00      	nop
 8016958:	200159f1 	.word	0x200159f1

0801695c <__sfp_lock_release>:
 801695c:	4801      	ldr	r0, [pc, #4]	@ (8016964 <__sfp_lock_release+0x8>)
 801695e:	f000 babb 	b.w	8016ed8 <__retarget_lock_release_recursive>
 8016962:	bf00      	nop
 8016964:	200159f1 	.word	0x200159f1

08016968 <__sinit>:
 8016968:	b510      	push	{r4, lr}
 801696a:	4604      	mov	r4, r0
 801696c:	f7ff fff0 	bl	8016950 <__sfp_lock_acquire>
 8016970:	6a23      	ldr	r3, [r4, #32]
 8016972:	b11b      	cbz	r3, 801697c <__sinit+0x14>
 8016974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016978:	f7ff bff0 	b.w	801695c <__sfp_lock_release>
 801697c:	4b04      	ldr	r3, [pc, #16]	@ (8016990 <__sinit+0x28>)
 801697e:	6223      	str	r3, [r4, #32]
 8016980:	4b04      	ldr	r3, [pc, #16]	@ (8016994 <__sinit+0x2c>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d1f5      	bne.n	8016974 <__sinit+0xc>
 8016988:	f7ff ffc4 	bl	8016914 <global_stdio_init.part.0>
 801698c:	e7f2      	b.n	8016974 <__sinit+0xc>
 801698e:	bf00      	nop
 8016990:	080168d5 	.word	0x080168d5
 8016994:	200159e8 	.word	0x200159e8

08016998 <_fwalk_sglue>:
 8016998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801699c:	4607      	mov	r7, r0
 801699e:	4688      	mov	r8, r1
 80169a0:	4614      	mov	r4, r2
 80169a2:	2600      	movs	r6, #0
 80169a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169a8:	f1b9 0901 	subs.w	r9, r9, #1
 80169ac:	d505      	bpl.n	80169ba <_fwalk_sglue+0x22>
 80169ae:	6824      	ldr	r4, [r4, #0]
 80169b0:	2c00      	cmp	r4, #0
 80169b2:	d1f7      	bne.n	80169a4 <_fwalk_sglue+0xc>
 80169b4:	4630      	mov	r0, r6
 80169b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ba:	89ab      	ldrh	r3, [r5, #12]
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d907      	bls.n	80169d0 <_fwalk_sglue+0x38>
 80169c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169c4:	3301      	adds	r3, #1
 80169c6:	d003      	beq.n	80169d0 <_fwalk_sglue+0x38>
 80169c8:	4629      	mov	r1, r5
 80169ca:	4638      	mov	r0, r7
 80169cc:	47c0      	blx	r8
 80169ce:	4306      	orrs	r6, r0
 80169d0:	3568      	adds	r5, #104	@ 0x68
 80169d2:	e7e9      	b.n	80169a8 <_fwalk_sglue+0x10>

080169d4 <iprintf>:
 80169d4:	b40f      	push	{r0, r1, r2, r3}
 80169d6:	b507      	push	{r0, r1, r2, lr}
 80169d8:	4906      	ldr	r1, [pc, #24]	@ (80169f4 <iprintf+0x20>)
 80169da:	ab04      	add	r3, sp, #16
 80169dc:	6808      	ldr	r0, [r1, #0]
 80169de:	f853 2b04 	ldr.w	r2, [r3], #4
 80169e2:	6881      	ldr	r1, [r0, #8]
 80169e4:	9301      	str	r3, [sp, #4]
 80169e6:	f000 fd27 	bl	8017438 <_vfiprintf_r>
 80169ea:	b003      	add	sp, #12
 80169ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80169f0:	b004      	add	sp, #16
 80169f2:	4770      	bx	lr
 80169f4:	20000118 	.word	0x20000118

080169f8 <putchar>:
 80169f8:	4b02      	ldr	r3, [pc, #8]	@ (8016a04 <putchar+0xc>)
 80169fa:	4601      	mov	r1, r0
 80169fc:	6818      	ldr	r0, [r3, #0]
 80169fe:	6882      	ldr	r2, [r0, #8]
 8016a00:	f001 b8de 	b.w	8017bc0 <_putc_r>
 8016a04:	20000118 	.word	0x20000118

08016a08 <_puts_r>:
 8016a08:	6a03      	ldr	r3, [r0, #32]
 8016a0a:	b570      	push	{r4, r5, r6, lr}
 8016a0c:	6884      	ldr	r4, [r0, #8]
 8016a0e:	4605      	mov	r5, r0
 8016a10:	460e      	mov	r6, r1
 8016a12:	b90b      	cbnz	r3, 8016a18 <_puts_r+0x10>
 8016a14:	f7ff ffa8 	bl	8016968 <__sinit>
 8016a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a1a:	07db      	lsls	r3, r3, #31
 8016a1c:	d405      	bmi.n	8016a2a <_puts_r+0x22>
 8016a1e:	89a3      	ldrh	r3, [r4, #12]
 8016a20:	0598      	lsls	r0, r3, #22
 8016a22:	d402      	bmi.n	8016a2a <_puts_r+0x22>
 8016a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a26:	f000 fa56 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 8016a2a:	89a3      	ldrh	r3, [r4, #12]
 8016a2c:	0719      	lsls	r1, r3, #28
 8016a2e:	d502      	bpl.n	8016a36 <_puts_r+0x2e>
 8016a30:	6923      	ldr	r3, [r4, #16]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d135      	bne.n	8016aa2 <_puts_r+0x9a>
 8016a36:	4621      	mov	r1, r4
 8016a38:	4628      	mov	r0, r5
 8016a3a:	f000 f8fb 	bl	8016c34 <__swsetup_r>
 8016a3e:	b380      	cbz	r0, 8016aa2 <_puts_r+0x9a>
 8016a40:	f04f 35ff 	mov.w	r5, #4294967295
 8016a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a46:	07da      	lsls	r2, r3, #31
 8016a48:	d405      	bmi.n	8016a56 <_puts_r+0x4e>
 8016a4a:	89a3      	ldrh	r3, [r4, #12]
 8016a4c:	059b      	lsls	r3, r3, #22
 8016a4e:	d402      	bmi.n	8016a56 <_puts_r+0x4e>
 8016a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a52:	f000 fa41 	bl	8016ed8 <__retarget_lock_release_recursive>
 8016a56:	4628      	mov	r0, r5
 8016a58:	bd70      	pop	{r4, r5, r6, pc}
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	da04      	bge.n	8016a68 <_puts_r+0x60>
 8016a5e:	69a2      	ldr	r2, [r4, #24]
 8016a60:	429a      	cmp	r2, r3
 8016a62:	dc17      	bgt.n	8016a94 <_puts_r+0x8c>
 8016a64:	290a      	cmp	r1, #10
 8016a66:	d015      	beq.n	8016a94 <_puts_r+0x8c>
 8016a68:	6823      	ldr	r3, [r4, #0]
 8016a6a:	1c5a      	adds	r2, r3, #1
 8016a6c:	6022      	str	r2, [r4, #0]
 8016a6e:	7019      	strb	r1, [r3, #0]
 8016a70:	68a3      	ldr	r3, [r4, #8]
 8016a72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a76:	3b01      	subs	r3, #1
 8016a78:	60a3      	str	r3, [r4, #8]
 8016a7a:	2900      	cmp	r1, #0
 8016a7c:	d1ed      	bne.n	8016a5a <_puts_r+0x52>
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	da11      	bge.n	8016aa6 <_puts_r+0x9e>
 8016a82:	4622      	mov	r2, r4
 8016a84:	210a      	movs	r1, #10
 8016a86:	4628      	mov	r0, r5
 8016a88:	f000 f895 	bl	8016bb6 <__swbuf_r>
 8016a8c:	3001      	adds	r0, #1
 8016a8e:	d0d7      	beq.n	8016a40 <_puts_r+0x38>
 8016a90:	250a      	movs	r5, #10
 8016a92:	e7d7      	b.n	8016a44 <_puts_r+0x3c>
 8016a94:	4622      	mov	r2, r4
 8016a96:	4628      	mov	r0, r5
 8016a98:	f000 f88d 	bl	8016bb6 <__swbuf_r>
 8016a9c:	3001      	adds	r0, #1
 8016a9e:	d1e7      	bne.n	8016a70 <_puts_r+0x68>
 8016aa0:	e7ce      	b.n	8016a40 <_puts_r+0x38>
 8016aa2:	3e01      	subs	r6, #1
 8016aa4:	e7e4      	b.n	8016a70 <_puts_r+0x68>
 8016aa6:	6823      	ldr	r3, [r4, #0]
 8016aa8:	1c5a      	adds	r2, r3, #1
 8016aaa:	6022      	str	r2, [r4, #0]
 8016aac:	220a      	movs	r2, #10
 8016aae:	701a      	strb	r2, [r3, #0]
 8016ab0:	e7ee      	b.n	8016a90 <_puts_r+0x88>
	...

08016ab4 <puts>:
 8016ab4:	4b02      	ldr	r3, [pc, #8]	@ (8016ac0 <puts+0xc>)
 8016ab6:	4601      	mov	r1, r0
 8016ab8:	6818      	ldr	r0, [r3, #0]
 8016aba:	f7ff bfa5 	b.w	8016a08 <_puts_r>
 8016abe:	bf00      	nop
 8016ac0:	20000118 	.word	0x20000118

08016ac4 <sniprintf>:
 8016ac4:	b40c      	push	{r2, r3}
 8016ac6:	b530      	push	{r4, r5, lr}
 8016ac8:	4b18      	ldr	r3, [pc, #96]	@ (8016b2c <sniprintf+0x68>)
 8016aca:	1e0c      	subs	r4, r1, #0
 8016acc:	681d      	ldr	r5, [r3, #0]
 8016ace:	b09d      	sub	sp, #116	@ 0x74
 8016ad0:	da08      	bge.n	8016ae4 <sniprintf+0x20>
 8016ad2:	238b      	movs	r3, #139	@ 0x8b
 8016ad4:	602b      	str	r3, [r5, #0]
 8016ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8016ada:	b01d      	add	sp, #116	@ 0x74
 8016adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ae0:	b002      	add	sp, #8
 8016ae2:	4770      	bx	lr
 8016ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016aec:	f04f 0300 	mov.w	r3, #0
 8016af0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016af2:	bf14      	ite	ne
 8016af4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016af8:	4623      	moveq	r3, r4
 8016afa:	9304      	str	r3, [sp, #16]
 8016afc:	9307      	str	r3, [sp, #28]
 8016afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016b02:	9002      	str	r0, [sp, #8]
 8016b04:	9006      	str	r0, [sp, #24]
 8016b06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016b0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016b0c:	ab21      	add	r3, sp, #132	@ 0x84
 8016b0e:	a902      	add	r1, sp, #8
 8016b10:	4628      	mov	r0, r5
 8016b12:	9301      	str	r3, [sp, #4]
 8016b14:	f000 fb6a 	bl	80171ec <_svfiprintf_r>
 8016b18:	1c43      	adds	r3, r0, #1
 8016b1a:	bfbc      	itt	lt
 8016b1c:	238b      	movlt	r3, #139	@ 0x8b
 8016b1e:	602b      	strlt	r3, [r5, #0]
 8016b20:	2c00      	cmp	r4, #0
 8016b22:	d0da      	beq.n	8016ada <sniprintf+0x16>
 8016b24:	9b02      	ldr	r3, [sp, #8]
 8016b26:	2200      	movs	r2, #0
 8016b28:	701a      	strb	r2, [r3, #0]
 8016b2a:	e7d6      	b.n	8016ada <sniprintf+0x16>
 8016b2c:	20000118 	.word	0x20000118

08016b30 <__sread>:
 8016b30:	b510      	push	{r4, lr}
 8016b32:	460c      	mov	r4, r1
 8016b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b38:	f000 f984 	bl	8016e44 <_read_r>
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	bfab      	itete	ge
 8016b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016b42:	89a3      	ldrhlt	r3, [r4, #12]
 8016b44:	181b      	addge	r3, r3, r0
 8016b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016b4a:	bfac      	ite	ge
 8016b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016b4e:	81a3      	strhlt	r3, [r4, #12]
 8016b50:	bd10      	pop	{r4, pc}

08016b52 <__swrite>:
 8016b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b56:	461f      	mov	r7, r3
 8016b58:	898b      	ldrh	r3, [r1, #12]
 8016b5a:	05db      	lsls	r3, r3, #23
 8016b5c:	4605      	mov	r5, r0
 8016b5e:	460c      	mov	r4, r1
 8016b60:	4616      	mov	r6, r2
 8016b62:	d505      	bpl.n	8016b70 <__swrite+0x1e>
 8016b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b68:	2302      	movs	r3, #2
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	f000 f958 	bl	8016e20 <_lseek_r>
 8016b70:	89a3      	ldrh	r3, [r4, #12]
 8016b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016b7a:	81a3      	strh	r3, [r4, #12]
 8016b7c:	4632      	mov	r2, r6
 8016b7e:	463b      	mov	r3, r7
 8016b80:	4628      	mov	r0, r5
 8016b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b86:	f000 b96f 	b.w	8016e68 <_write_r>

08016b8a <__sseek>:
 8016b8a:	b510      	push	{r4, lr}
 8016b8c:	460c      	mov	r4, r1
 8016b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b92:	f000 f945 	bl	8016e20 <_lseek_r>
 8016b96:	1c43      	adds	r3, r0, #1
 8016b98:	89a3      	ldrh	r3, [r4, #12]
 8016b9a:	bf15      	itete	ne
 8016b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016ba6:	81a3      	strheq	r3, [r4, #12]
 8016ba8:	bf18      	it	ne
 8016baa:	81a3      	strhne	r3, [r4, #12]
 8016bac:	bd10      	pop	{r4, pc}

08016bae <__sclose>:
 8016bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bb2:	f000 b8c7 	b.w	8016d44 <_close_r>

08016bb6 <__swbuf_r>:
 8016bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bb8:	460e      	mov	r6, r1
 8016bba:	4614      	mov	r4, r2
 8016bbc:	4605      	mov	r5, r0
 8016bbe:	b118      	cbz	r0, 8016bc8 <__swbuf_r+0x12>
 8016bc0:	6a03      	ldr	r3, [r0, #32]
 8016bc2:	b90b      	cbnz	r3, 8016bc8 <__swbuf_r+0x12>
 8016bc4:	f7ff fed0 	bl	8016968 <__sinit>
 8016bc8:	69a3      	ldr	r3, [r4, #24]
 8016bca:	60a3      	str	r3, [r4, #8]
 8016bcc:	89a3      	ldrh	r3, [r4, #12]
 8016bce:	071a      	lsls	r2, r3, #28
 8016bd0:	d501      	bpl.n	8016bd6 <__swbuf_r+0x20>
 8016bd2:	6923      	ldr	r3, [r4, #16]
 8016bd4:	b943      	cbnz	r3, 8016be8 <__swbuf_r+0x32>
 8016bd6:	4621      	mov	r1, r4
 8016bd8:	4628      	mov	r0, r5
 8016bda:	f000 f82b 	bl	8016c34 <__swsetup_r>
 8016bde:	b118      	cbz	r0, 8016be8 <__swbuf_r+0x32>
 8016be0:	f04f 37ff 	mov.w	r7, #4294967295
 8016be4:	4638      	mov	r0, r7
 8016be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be8:	6823      	ldr	r3, [r4, #0]
 8016bea:	6922      	ldr	r2, [r4, #16]
 8016bec:	1a98      	subs	r0, r3, r2
 8016bee:	6963      	ldr	r3, [r4, #20]
 8016bf0:	b2f6      	uxtb	r6, r6
 8016bf2:	4283      	cmp	r3, r0
 8016bf4:	4637      	mov	r7, r6
 8016bf6:	dc05      	bgt.n	8016c04 <__swbuf_r+0x4e>
 8016bf8:	4621      	mov	r1, r4
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	f000 ff44 	bl	8017a88 <_fflush_r>
 8016c00:	2800      	cmp	r0, #0
 8016c02:	d1ed      	bne.n	8016be0 <__swbuf_r+0x2a>
 8016c04:	68a3      	ldr	r3, [r4, #8]
 8016c06:	3b01      	subs	r3, #1
 8016c08:	60a3      	str	r3, [r4, #8]
 8016c0a:	6823      	ldr	r3, [r4, #0]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	6022      	str	r2, [r4, #0]
 8016c10:	701e      	strb	r6, [r3, #0]
 8016c12:	6962      	ldr	r2, [r4, #20]
 8016c14:	1c43      	adds	r3, r0, #1
 8016c16:	429a      	cmp	r2, r3
 8016c18:	d004      	beq.n	8016c24 <__swbuf_r+0x6e>
 8016c1a:	89a3      	ldrh	r3, [r4, #12]
 8016c1c:	07db      	lsls	r3, r3, #31
 8016c1e:	d5e1      	bpl.n	8016be4 <__swbuf_r+0x2e>
 8016c20:	2e0a      	cmp	r6, #10
 8016c22:	d1df      	bne.n	8016be4 <__swbuf_r+0x2e>
 8016c24:	4621      	mov	r1, r4
 8016c26:	4628      	mov	r0, r5
 8016c28:	f000 ff2e 	bl	8017a88 <_fflush_r>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d0d9      	beq.n	8016be4 <__swbuf_r+0x2e>
 8016c30:	e7d6      	b.n	8016be0 <__swbuf_r+0x2a>
	...

08016c34 <__swsetup_r>:
 8016c34:	b538      	push	{r3, r4, r5, lr}
 8016c36:	4b29      	ldr	r3, [pc, #164]	@ (8016cdc <__swsetup_r+0xa8>)
 8016c38:	4605      	mov	r5, r0
 8016c3a:	6818      	ldr	r0, [r3, #0]
 8016c3c:	460c      	mov	r4, r1
 8016c3e:	b118      	cbz	r0, 8016c48 <__swsetup_r+0x14>
 8016c40:	6a03      	ldr	r3, [r0, #32]
 8016c42:	b90b      	cbnz	r3, 8016c48 <__swsetup_r+0x14>
 8016c44:	f7ff fe90 	bl	8016968 <__sinit>
 8016c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c4c:	0719      	lsls	r1, r3, #28
 8016c4e:	d422      	bmi.n	8016c96 <__swsetup_r+0x62>
 8016c50:	06da      	lsls	r2, r3, #27
 8016c52:	d407      	bmi.n	8016c64 <__swsetup_r+0x30>
 8016c54:	2209      	movs	r2, #9
 8016c56:	602a      	str	r2, [r5, #0]
 8016c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c5c:	81a3      	strh	r3, [r4, #12]
 8016c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c62:	e033      	b.n	8016ccc <__swsetup_r+0x98>
 8016c64:	0758      	lsls	r0, r3, #29
 8016c66:	d512      	bpl.n	8016c8e <__swsetup_r+0x5a>
 8016c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c6a:	b141      	cbz	r1, 8016c7e <__swsetup_r+0x4a>
 8016c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c70:	4299      	cmp	r1, r3
 8016c72:	d002      	beq.n	8016c7a <__swsetup_r+0x46>
 8016c74:	4628      	mov	r0, r5
 8016c76:	f000 f95d 	bl	8016f34 <_free_r>
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c7e:	89a3      	ldrh	r3, [r4, #12]
 8016c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016c84:	81a3      	strh	r3, [r4, #12]
 8016c86:	2300      	movs	r3, #0
 8016c88:	6063      	str	r3, [r4, #4]
 8016c8a:	6923      	ldr	r3, [r4, #16]
 8016c8c:	6023      	str	r3, [r4, #0]
 8016c8e:	89a3      	ldrh	r3, [r4, #12]
 8016c90:	f043 0308 	orr.w	r3, r3, #8
 8016c94:	81a3      	strh	r3, [r4, #12]
 8016c96:	6923      	ldr	r3, [r4, #16]
 8016c98:	b94b      	cbnz	r3, 8016cae <__swsetup_r+0x7a>
 8016c9a:	89a3      	ldrh	r3, [r4, #12]
 8016c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016ca4:	d003      	beq.n	8016cae <__swsetup_r+0x7a>
 8016ca6:	4621      	mov	r1, r4
 8016ca8:	4628      	mov	r0, r5
 8016caa:	f000 ff4d 	bl	8017b48 <__smakebuf_r>
 8016cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cb2:	f013 0201 	ands.w	r2, r3, #1
 8016cb6:	d00a      	beq.n	8016cce <__swsetup_r+0x9a>
 8016cb8:	2200      	movs	r2, #0
 8016cba:	60a2      	str	r2, [r4, #8]
 8016cbc:	6962      	ldr	r2, [r4, #20]
 8016cbe:	4252      	negs	r2, r2
 8016cc0:	61a2      	str	r2, [r4, #24]
 8016cc2:	6922      	ldr	r2, [r4, #16]
 8016cc4:	b942      	cbnz	r2, 8016cd8 <__swsetup_r+0xa4>
 8016cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016cca:	d1c5      	bne.n	8016c58 <__swsetup_r+0x24>
 8016ccc:	bd38      	pop	{r3, r4, r5, pc}
 8016cce:	0799      	lsls	r1, r3, #30
 8016cd0:	bf58      	it	pl
 8016cd2:	6962      	ldrpl	r2, [r4, #20]
 8016cd4:	60a2      	str	r2, [r4, #8]
 8016cd6:	e7f4      	b.n	8016cc2 <__swsetup_r+0x8e>
 8016cd8:	2000      	movs	r0, #0
 8016cda:	e7f7      	b.n	8016ccc <__swsetup_r+0x98>
 8016cdc:	20000118 	.word	0x20000118

08016ce0 <memcmp>:
 8016ce0:	b510      	push	{r4, lr}
 8016ce2:	3901      	subs	r1, #1
 8016ce4:	4402      	add	r2, r0
 8016ce6:	4290      	cmp	r0, r2
 8016ce8:	d101      	bne.n	8016cee <memcmp+0xe>
 8016cea:	2000      	movs	r0, #0
 8016cec:	e005      	b.n	8016cfa <memcmp+0x1a>
 8016cee:	7803      	ldrb	r3, [r0, #0]
 8016cf0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016cf4:	42a3      	cmp	r3, r4
 8016cf6:	d001      	beq.n	8016cfc <memcmp+0x1c>
 8016cf8:	1b18      	subs	r0, r3, r4
 8016cfa:	bd10      	pop	{r4, pc}
 8016cfc:	3001      	adds	r0, #1
 8016cfe:	e7f2      	b.n	8016ce6 <memcmp+0x6>

08016d00 <memmove>:
 8016d00:	4288      	cmp	r0, r1
 8016d02:	b510      	push	{r4, lr}
 8016d04:	eb01 0402 	add.w	r4, r1, r2
 8016d08:	d902      	bls.n	8016d10 <memmove+0x10>
 8016d0a:	4284      	cmp	r4, r0
 8016d0c:	4623      	mov	r3, r4
 8016d0e:	d807      	bhi.n	8016d20 <memmove+0x20>
 8016d10:	1e43      	subs	r3, r0, #1
 8016d12:	42a1      	cmp	r1, r4
 8016d14:	d008      	beq.n	8016d28 <memmove+0x28>
 8016d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016d1e:	e7f8      	b.n	8016d12 <memmove+0x12>
 8016d20:	4402      	add	r2, r0
 8016d22:	4601      	mov	r1, r0
 8016d24:	428a      	cmp	r2, r1
 8016d26:	d100      	bne.n	8016d2a <memmove+0x2a>
 8016d28:	bd10      	pop	{r4, pc}
 8016d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016d32:	e7f7      	b.n	8016d24 <memmove+0x24>

08016d34 <memset>:
 8016d34:	4402      	add	r2, r0
 8016d36:	4603      	mov	r3, r0
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d100      	bne.n	8016d3e <memset+0xa>
 8016d3c:	4770      	bx	lr
 8016d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8016d42:	e7f9      	b.n	8016d38 <memset+0x4>

08016d44 <_close_r>:
 8016d44:	b538      	push	{r3, r4, r5, lr}
 8016d46:	4d06      	ldr	r5, [pc, #24]	@ (8016d60 <_close_r+0x1c>)
 8016d48:	2300      	movs	r3, #0
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	4608      	mov	r0, r1
 8016d4e:	602b      	str	r3, [r5, #0]
 8016d50:	f7ea fa62 	bl	8001218 <_close>
 8016d54:	1c43      	adds	r3, r0, #1
 8016d56:	d102      	bne.n	8016d5e <_close_r+0x1a>
 8016d58:	682b      	ldr	r3, [r5, #0]
 8016d5a:	b103      	cbz	r3, 8016d5e <_close_r+0x1a>
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	bd38      	pop	{r3, r4, r5, pc}
 8016d60:	200159ec 	.word	0x200159ec

08016d64 <_reclaim_reent>:
 8016d64:	4b2d      	ldr	r3, [pc, #180]	@ (8016e1c <_reclaim_reent+0xb8>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	4283      	cmp	r3, r0
 8016d6a:	b570      	push	{r4, r5, r6, lr}
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	d053      	beq.n	8016e18 <_reclaim_reent+0xb4>
 8016d70:	69c3      	ldr	r3, [r0, #28]
 8016d72:	b31b      	cbz	r3, 8016dbc <_reclaim_reent+0x58>
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	b163      	cbz	r3, 8016d92 <_reclaim_reent+0x2e>
 8016d78:	2500      	movs	r5, #0
 8016d7a:	69e3      	ldr	r3, [r4, #28]
 8016d7c:	68db      	ldr	r3, [r3, #12]
 8016d7e:	5959      	ldr	r1, [r3, r5]
 8016d80:	b9b1      	cbnz	r1, 8016db0 <_reclaim_reent+0x4c>
 8016d82:	3504      	adds	r5, #4
 8016d84:	2d80      	cmp	r5, #128	@ 0x80
 8016d86:	d1f8      	bne.n	8016d7a <_reclaim_reent+0x16>
 8016d88:	69e3      	ldr	r3, [r4, #28]
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	68d9      	ldr	r1, [r3, #12]
 8016d8e:	f000 f8d1 	bl	8016f34 <_free_r>
 8016d92:	69e3      	ldr	r3, [r4, #28]
 8016d94:	6819      	ldr	r1, [r3, #0]
 8016d96:	b111      	cbz	r1, 8016d9e <_reclaim_reent+0x3a>
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f000 f8cb 	bl	8016f34 <_free_r>
 8016d9e:	69e3      	ldr	r3, [r4, #28]
 8016da0:	689d      	ldr	r5, [r3, #8]
 8016da2:	b15d      	cbz	r5, 8016dbc <_reclaim_reent+0x58>
 8016da4:	4629      	mov	r1, r5
 8016da6:	4620      	mov	r0, r4
 8016da8:	682d      	ldr	r5, [r5, #0]
 8016daa:	f000 f8c3 	bl	8016f34 <_free_r>
 8016dae:	e7f8      	b.n	8016da2 <_reclaim_reent+0x3e>
 8016db0:	680e      	ldr	r6, [r1, #0]
 8016db2:	4620      	mov	r0, r4
 8016db4:	f000 f8be 	bl	8016f34 <_free_r>
 8016db8:	4631      	mov	r1, r6
 8016dba:	e7e1      	b.n	8016d80 <_reclaim_reent+0x1c>
 8016dbc:	6961      	ldr	r1, [r4, #20]
 8016dbe:	b111      	cbz	r1, 8016dc6 <_reclaim_reent+0x62>
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	f000 f8b7 	bl	8016f34 <_free_r>
 8016dc6:	69e1      	ldr	r1, [r4, #28]
 8016dc8:	b111      	cbz	r1, 8016dd0 <_reclaim_reent+0x6c>
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f000 f8b2 	bl	8016f34 <_free_r>
 8016dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016dd2:	b111      	cbz	r1, 8016dda <_reclaim_reent+0x76>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f000 f8ad 	bl	8016f34 <_free_r>
 8016dda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016ddc:	b111      	cbz	r1, 8016de4 <_reclaim_reent+0x80>
 8016dde:	4620      	mov	r0, r4
 8016de0:	f000 f8a8 	bl	8016f34 <_free_r>
 8016de4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016de6:	b111      	cbz	r1, 8016dee <_reclaim_reent+0x8a>
 8016de8:	4620      	mov	r0, r4
 8016dea:	f000 f8a3 	bl	8016f34 <_free_r>
 8016dee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016df0:	b111      	cbz	r1, 8016df8 <_reclaim_reent+0x94>
 8016df2:	4620      	mov	r0, r4
 8016df4:	f000 f89e 	bl	8016f34 <_free_r>
 8016df8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016dfa:	b111      	cbz	r1, 8016e02 <_reclaim_reent+0x9e>
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	f000 f899 	bl	8016f34 <_free_r>
 8016e02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016e04:	b111      	cbz	r1, 8016e0c <_reclaim_reent+0xa8>
 8016e06:	4620      	mov	r0, r4
 8016e08:	f000 f894 	bl	8016f34 <_free_r>
 8016e0c:	6a23      	ldr	r3, [r4, #32]
 8016e0e:	b11b      	cbz	r3, 8016e18 <_reclaim_reent+0xb4>
 8016e10:	4620      	mov	r0, r4
 8016e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e16:	4718      	bx	r3
 8016e18:	bd70      	pop	{r4, r5, r6, pc}
 8016e1a:	bf00      	nop
 8016e1c:	20000118 	.word	0x20000118

08016e20 <_lseek_r>:
 8016e20:	b538      	push	{r3, r4, r5, lr}
 8016e22:	4d07      	ldr	r5, [pc, #28]	@ (8016e40 <_lseek_r+0x20>)
 8016e24:	4604      	mov	r4, r0
 8016e26:	4608      	mov	r0, r1
 8016e28:	4611      	mov	r1, r2
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	602a      	str	r2, [r5, #0]
 8016e2e:	461a      	mov	r2, r3
 8016e30:	f7ea fa19 	bl	8001266 <_lseek>
 8016e34:	1c43      	adds	r3, r0, #1
 8016e36:	d102      	bne.n	8016e3e <_lseek_r+0x1e>
 8016e38:	682b      	ldr	r3, [r5, #0]
 8016e3a:	b103      	cbz	r3, 8016e3e <_lseek_r+0x1e>
 8016e3c:	6023      	str	r3, [r4, #0]
 8016e3e:	bd38      	pop	{r3, r4, r5, pc}
 8016e40:	200159ec 	.word	0x200159ec

08016e44 <_read_r>:
 8016e44:	b538      	push	{r3, r4, r5, lr}
 8016e46:	4d07      	ldr	r5, [pc, #28]	@ (8016e64 <_read_r+0x20>)
 8016e48:	4604      	mov	r4, r0
 8016e4a:	4608      	mov	r0, r1
 8016e4c:	4611      	mov	r1, r2
 8016e4e:	2200      	movs	r2, #0
 8016e50:	602a      	str	r2, [r5, #0]
 8016e52:	461a      	mov	r2, r3
 8016e54:	f7ea f9a7 	bl	80011a6 <_read>
 8016e58:	1c43      	adds	r3, r0, #1
 8016e5a:	d102      	bne.n	8016e62 <_read_r+0x1e>
 8016e5c:	682b      	ldr	r3, [r5, #0]
 8016e5e:	b103      	cbz	r3, 8016e62 <_read_r+0x1e>
 8016e60:	6023      	str	r3, [r4, #0]
 8016e62:	bd38      	pop	{r3, r4, r5, pc}
 8016e64:	200159ec 	.word	0x200159ec

08016e68 <_write_r>:
 8016e68:	b538      	push	{r3, r4, r5, lr}
 8016e6a:	4d07      	ldr	r5, [pc, #28]	@ (8016e88 <_write_r+0x20>)
 8016e6c:	4604      	mov	r4, r0
 8016e6e:	4608      	mov	r0, r1
 8016e70:	4611      	mov	r1, r2
 8016e72:	2200      	movs	r2, #0
 8016e74:	602a      	str	r2, [r5, #0]
 8016e76:	461a      	mov	r2, r3
 8016e78:	f7ea f9b2 	bl	80011e0 <_write>
 8016e7c:	1c43      	adds	r3, r0, #1
 8016e7e:	d102      	bne.n	8016e86 <_write_r+0x1e>
 8016e80:	682b      	ldr	r3, [r5, #0]
 8016e82:	b103      	cbz	r3, 8016e86 <_write_r+0x1e>
 8016e84:	6023      	str	r3, [r4, #0]
 8016e86:	bd38      	pop	{r3, r4, r5, pc}
 8016e88:	200159ec 	.word	0x200159ec

08016e8c <__libc_init_array>:
 8016e8c:	b570      	push	{r4, r5, r6, lr}
 8016e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8016ec4 <__libc_init_array+0x38>)
 8016e90:	4c0d      	ldr	r4, [pc, #52]	@ (8016ec8 <__libc_init_array+0x3c>)
 8016e92:	1b64      	subs	r4, r4, r5
 8016e94:	10a4      	asrs	r4, r4, #2
 8016e96:	2600      	movs	r6, #0
 8016e98:	42a6      	cmp	r6, r4
 8016e9a:	d109      	bne.n	8016eb0 <__libc_init_array+0x24>
 8016e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8016ecc <__libc_init_array+0x40>)
 8016e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8016ed0 <__libc_init_array+0x44>)
 8016ea0:	f000 ff76 	bl	8017d90 <_init>
 8016ea4:	1b64      	subs	r4, r4, r5
 8016ea6:	10a4      	asrs	r4, r4, #2
 8016ea8:	2600      	movs	r6, #0
 8016eaa:	42a6      	cmp	r6, r4
 8016eac:	d105      	bne.n	8016eba <__libc_init_array+0x2e>
 8016eae:	bd70      	pop	{r4, r5, r6, pc}
 8016eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016eb4:	4798      	blx	r3
 8016eb6:	3601      	adds	r6, #1
 8016eb8:	e7ee      	b.n	8016e98 <__libc_init_array+0xc>
 8016eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8016ebe:	4798      	blx	r3
 8016ec0:	3601      	adds	r6, #1
 8016ec2:	e7f2      	b.n	8016eaa <__libc_init_array+0x1e>
 8016ec4:	0801b0a0 	.word	0x0801b0a0
 8016ec8:	0801b0a0 	.word	0x0801b0a0
 8016ecc:	0801b0a0 	.word	0x0801b0a0
 8016ed0:	0801b0a4 	.word	0x0801b0a4

08016ed4 <__retarget_lock_init_recursive>:
 8016ed4:	4770      	bx	lr

08016ed6 <__retarget_lock_acquire_recursive>:
 8016ed6:	4770      	bx	lr

08016ed8 <__retarget_lock_release_recursive>:
 8016ed8:	4770      	bx	lr

08016eda <memcpy>:
 8016eda:	440a      	add	r2, r1
 8016edc:	4291      	cmp	r1, r2
 8016ede:	f100 33ff 	add.w	r3, r0, #4294967295
 8016ee2:	d100      	bne.n	8016ee6 <memcpy+0xc>
 8016ee4:	4770      	bx	lr
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ef0:	4291      	cmp	r1, r2
 8016ef2:	d1f9      	bne.n	8016ee8 <memcpy+0xe>
 8016ef4:	bd10      	pop	{r4, pc}
	...

08016ef8 <__assert_func>:
 8016ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016efa:	4614      	mov	r4, r2
 8016efc:	461a      	mov	r2, r3
 8016efe:	4b09      	ldr	r3, [pc, #36]	@ (8016f24 <__assert_func+0x2c>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	4605      	mov	r5, r0
 8016f04:	68d8      	ldr	r0, [r3, #12]
 8016f06:	b14c      	cbz	r4, 8016f1c <__assert_func+0x24>
 8016f08:	4b07      	ldr	r3, [pc, #28]	@ (8016f28 <__assert_func+0x30>)
 8016f0a:	9100      	str	r1, [sp, #0]
 8016f0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016f10:	4906      	ldr	r1, [pc, #24]	@ (8016f2c <__assert_func+0x34>)
 8016f12:	462b      	mov	r3, r5
 8016f14:	f000 fde0 	bl	8017ad8 <fiprintf>
 8016f18:	f000 feb8 	bl	8017c8c <abort>
 8016f1c:	4b04      	ldr	r3, [pc, #16]	@ (8016f30 <__assert_func+0x38>)
 8016f1e:	461c      	mov	r4, r3
 8016f20:	e7f3      	b.n	8016f0a <__assert_func+0x12>
 8016f22:	bf00      	nop
 8016f24:	20000118 	.word	0x20000118
 8016f28:	0801b027 	.word	0x0801b027
 8016f2c:	0801b034 	.word	0x0801b034
 8016f30:	0801b062 	.word	0x0801b062

08016f34 <_free_r>:
 8016f34:	b538      	push	{r3, r4, r5, lr}
 8016f36:	4605      	mov	r5, r0
 8016f38:	2900      	cmp	r1, #0
 8016f3a:	d041      	beq.n	8016fc0 <_free_r+0x8c>
 8016f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f40:	1f0c      	subs	r4, r1, #4
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	bfb8      	it	lt
 8016f46:	18e4      	addlt	r4, r4, r3
 8016f48:	f000 f8e8 	bl	801711c <__malloc_lock>
 8016f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8016fc4 <_free_r+0x90>)
 8016f4e:	6813      	ldr	r3, [r2, #0]
 8016f50:	b933      	cbnz	r3, 8016f60 <_free_r+0x2c>
 8016f52:	6063      	str	r3, [r4, #4]
 8016f54:	6014      	str	r4, [r2, #0]
 8016f56:	4628      	mov	r0, r5
 8016f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f5c:	f000 b8e4 	b.w	8017128 <__malloc_unlock>
 8016f60:	42a3      	cmp	r3, r4
 8016f62:	d908      	bls.n	8016f76 <_free_r+0x42>
 8016f64:	6820      	ldr	r0, [r4, #0]
 8016f66:	1821      	adds	r1, r4, r0
 8016f68:	428b      	cmp	r3, r1
 8016f6a:	bf01      	itttt	eq
 8016f6c:	6819      	ldreq	r1, [r3, #0]
 8016f6e:	685b      	ldreq	r3, [r3, #4]
 8016f70:	1809      	addeq	r1, r1, r0
 8016f72:	6021      	streq	r1, [r4, #0]
 8016f74:	e7ed      	b.n	8016f52 <_free_r+0x1e>
 8016f76:	461a      	mov	r2, r3
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	b10b      	cbz	r3, 8016f80 <_free_r+0x4c>
 8016f7c:	42a3      	cmp	r3, r4
 8016f7e:	d9fa      	bls.n	8016f76 <_free_r+0x42>
 8016f80:	6811      	ldr	r1, [r2, #0]
 8016f82:	1850      	adds	r0, r2, r1
 8016f84:	42a0      	cmp	r0, r4
 8016f86:	d10b      	bne.n	8016fa0 <_free_r+0x6c>
 8016f88:	6820      	ldr	r0, [r4, #0]
 8016f8a:	4401      	add	r1, r0
 8016f8c:	1850      	adds	r0, r2, r1
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	6011      	str	r1, [r2, #0]
 8016f92:	d1e0      	bne.n	8016f56 <_free_r+0x22>
 8016f94:	6818      	ldr	r0, [r3, #0]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	6053      	str	r3, [r2, #4]
 8016f9a:	4408      	add	r0, r1
 8016f9c:	6010      	str	r0, [r2, #0]
 8016f9e:	e7da      	b.n	8016f56 <_free_r+0x22>
 8016fa0:	d902      	bls.n	8016fa8 <_free_r+0x74>
 8016fa2:	230c      	movs	r3, #12
 8016fa4:	602b      	str	r3, [r5, #0]
 8016fa6:	e7d6      	b.n	8016f56 <_free_r+0x22>
 8016fa8:	6820      	ldr	r0, [r4, #0]
 8016faa:	1821      	adds	r1, r4, r0
 8016fac:	428b      	cmp	r3, r1
 8016fae:	bf04      	itt	eq
 8016fb0:	6819      	ldreq	r1, [r3, #0]
 8016fb2:	685b      	ldreq	r3, [r3, #4]
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	bf04      	itt	eq
 8016fb8:	1809      	addeq	r1, r1, r0
 8016fba:	6021      	streq	r1, [r4, #0]
 8016fbc:	6054      	str	r4, [r2, #4]
 8016fbe:	e7ca      	b.n	8016f56 <_free_r+0x22>
 8016fc0:	bd38      	pop	{r3, r4, r5, pc}
 8016fc2:	bf00      	nop
 8016fc4:	200159f8 	.word	0x200159f8

08016fc8 <malloc>:
 8016fc8:	4b02      	ldr	r3, [pc, #8]	@ (8016fd4 <malloc+0xc>)
 8016fca:	4601      	mov	r1, r0
 8016fcc:	6818      	ldr	r0, [r3, #0]
 8016fce:	f000 b825 	b.w	801701c <_malloc_r>
 8016fd2:	bf00      	nop
 8016fd4:	20000118 	.word	0x20000118

08016fd8 <sbrk_aligned>:
 8016fd8:	b570      	push	{r4, r5, r6, lr}
 8016fda:	4e0f      	ldr	r6, [pc, #60]	@ (8017018 <sbrk_aligned+0x40>)
 8016fdc:	460c      	mov	r4, r1
 8016fde:	6831      	ldr	r1, [r6, #0]
 8016fe0:	4605      	mov	r5, r0
 8016fe2:	b911      	cbnz	r1, 8016fea <sbrk_aligned+0x12>
 8016fe4:	f000 fe42 	bl	8017c6c <_sbrk_r>
 8016fe8:	6030      	str	r0, [r6, #0]
 8016fea:	4621      	mov	r1, r4
 8016fec:	4628      	mov	r0, r5
 8016fee:	f000 fe3d 	bl	8017c6c <_sbrk_r>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	d103      	bne.n	8016ffe <sbrk_aligned+0x26>
 8016ff6:	f04f 34ff 	mov.w	r4, #4294967295
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	bd70      	pop	{r4, r5, r6, pc}
 8016ffe:	1cc4      	adds	r4, r0, #3
 8017000:	f024 0403 	bic.w	r4, r4, #3
 8017004:	42a0      	cmp	r0, r4
 8017006:	d0f8      	beq.n	8016ffa <sbrk_aligned+0x22>
 8017008:	1a21      	subs	r1, r4, r0
 801700a:	4628      	mov	r0, r5
 801700c:	f000 fe2e 	bl	8017c6c <_sbrk_r>
 8017010:	3001      	adds	r0, #1
 8017012:	d1f2      	bne.n	8016ffa <sbrk_aligned+0x22>
 8017014:	e7ef      	b.n	8016ff6 <sbrk_aligned+0x1e>
 8017016:	bf00      	nop
 8017018:	200159f4 	.word	0x200159f4

0801701c <_malloc_r>:
 801701c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017020:	1ccd      	adds	r5, r1, #3
 8017022:	f025 0503 	bic.w	r5, r5, #3
 8017026:	3508      	adds	r5, #8
 8017028:	2d0c      	cmp	r5, #12
 801702a:	bf38      	it	cc
 801702c:	250c      	movcc	r5, #12
 801702e:	2d00      	cmp	r5, #0
 8017030:	4606      	mov	r6, r0
 8017032:	db01      	blt.n	8017038 <_malloc_r+0x1c>
 8017034:	42a9      	cmp	r1, r5
 8017036:	d904      	bls.n	8017042 <_malloc_r+0x26>
 8017038:	230c      	movs	r3, #12
 801703a:	6033      	str	r3, [r6, #0]
 801703c:	2000      	movs	r0, #0
 801703e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017042:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017118 <_malloc_r+0xfc>
 8017046:	f000 f869 	bl	801711c <__malloc_lock>
 801704a:	f8d8 3000 	ldr.w	r3, [r8]
 801704e:	461c      	mov	r4, r3
 8017050:	bb44      	cbnz	r4, 80170a4 <_malloc_r+0x88>
 8017052:	4629      	mov	r1, r5
 8017054:	4630      	mov	r0, r6
 8017056:	f7ff ffbf 	bl	8016fd8 <sbrk_aligned>
 801705a:	1c43      	adds	r3, r0, #1
 801705c:	4604      	mov	r4, r0
 801705e:	d158      	bne.n	8017112 <_malloc_r+0xf6>
 8017060:	f8d8 4000 	ldr.w	r4, [r8]
 8017064:	4627      	mov	r7, r4
 8017066:	2f00      	cmp	r7, #0
 8017068:	d143      	bne.n	80170f2 <_malloc_r+0xd6>
 801706a:	2c00      	cmp	r4, #0
 801706c:	d04b      	beq.n	8017106 <_malloc_r+0xea>
 801706e:	6823      	ldr	r3, [r4, #0]
 8017070:	4639      	mov	r1, r7
 8017072:	4630      	mov	r0, r6
 8017074:	eb04 0903 	add.w	r9, r4, r3
 8017078:	f000 fdf8 	bl	8017c6c <_sbrk_r>
 801707c:	4581      	cmp	r9, r0
 801707e:	d142      	bne.n	8017106 <_malloc_r+0xea>
 8017080:	6821      	ldr	r1, [r4, #0]
 8017082:	1a6d      	subs	r5, r5, r1
 8017084:	4629      	mov	r1, r5
 8017086:	4630      	mov	r0, r6
 8017088:	f7ff ffa6 	bl	8016fd8 <sbrk_aligned>
 801708c:	3001      	adds	r0, #1
 801708e:	d03a      	beq.n	8017106 <_malloc_r+0xea>
 8017090:	6823      	ldr	r3, [r4, #0]
 8017092:	442b      	add	r3, r5
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	f8d8 3000 	ldr.w	r3, [r8]
 801709a:	685a      	ldr	r2, [r3, #4]
 801709c:	bb62      	cbnz	r2, 80170f8 <_malloc_r+0xdc>
 801709e:	f8c8 7000 	str.w	r7, [r8]
 80170a2:	e00f      	b.n	80170c4 <_malloc_r+0xa8>
 80170a4:	6822      	ldr	r2, [r4, #0]
 80170a6:	1b52      	subs	r2, r2, r5
 80170a8:	d420      	bmi.n	80170ec <_malloc_r+0xd0>
 80170aa:	2a0b      	cmp	r2, #11
 80170ac:	d917      	bls.n	80170de <_malloc_r+0xc2>
 80170ae:	1961      	adds	r1, r4, r5
 80170b0:	42a3      	cmp	r3, r4
 80170b2:	6025      	str	r5, [r4, #0]
 80170b4:	bf18      	it	ne
 80170b6:	6059      	strne	r1, [r3, #4]
 80170b8:	6863      	ldr	r3, [r4, #4]
 80170ba:	bf08      	it	eq
 80170bc:	f8c8 1000 	streq.w	r1, [r8]
 80170c0:	5162      	str	r2, [r4, r5]
 80170c2:	604b      	str	r3, [r1, #4]
 80170c4:	4630      	mov	r0, r6
 80170c6:	f000 f82f 	bl	8017128 <__malloc_unlock>
 80170ca:	f104 000b 	add.w	r0, r4, #11
 80170ce:	1d23      	adds	r3, r4, #4
 80170d0:	f020 0007 	bic.w	r0, r0, #7
 80170d4:	1ac2      	subs	r2, r0, r3
 80170d6:	bf1c      	itt	ne
 80170d8:	1a1b      	subne	r3, r3, r0
 80170da:	50a3      	strne	r3, [r4, r2]
 80170dc:	e7af      	b.n	801703e <_malloc_r+0x22>
 80170de:	6862      	ldr	r2, [r4, #4]
 80170e0:	42a3      	cmp	r3, r4
 80170e2:	bf0c      	ite	eq
 80170e4:	f8c8 2000 	streq.w	r2, [r8]
 80170e8:	605a      	strne	r2, [r3, #4]
 80170ea:	e7eb      	b.n	80170c4 <_malloc_r+0xa8>
 80170ec:	4623      	mov	r3, r4
 80170ee:	6864      	ldr	r4, [r4, #4]
 80170f0:	e7ae      	b.n	8017050 <_malloc_r+0x34>
 80170f2:	463c      	mov	r4, r7
 80170f4:	687f      	ldr	r7, [r7, #4]
 80170f6:	e7b6      	b.n	8017066 <_malloc_r+0x4a>
 80170f8:	461a      	mov	r2, r3
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	42a3      	cmp	r3, r4
 80170fe:	d1fb      	bne.n	80170f8 <_malloc_r+0xdc>
 8017100:	2300      	movs	r3, #0
 8017102:	6053      	str	r3, [r2, #4]
 8017104:	e7de      	b.n	80170c4 <_malloc_r+0xa8>
 8017106:	230c      	movs	r3, #12
 8017108:	6033      	str	r3, [r6, #0]
 801710a:	4630      	mov	r0, r6
 801710c:	f000 f80c 	bl	8017128 <__malloc_unlock>
 8017110:	e794      	b.n	801703c <_malloc_r+0x20>
 8017112:	6005      	str	r5, [r0, #0]
 8017114:	e7d6      	b.n	80170c4 <_malloc_r+0xa8>
 8017116:	bf00      	nop
 8017118:	200159f8 	.word	0x200159f8

0801711c <__malloc_lock>:
 801711c:	4801      	ldr	r0, [pc, #4]	@ (8017124 <__malloc_lock+0x8>)
 801711e:	f7ff beda 	b.w	8016ed6 <__retarget_lock_acquire_recursive>
 8017122:	bf00      	nop
 8017124:	200159f0 	.word	0x200159f0

08017128 <__malloc_unlock>:
 8017128:	4801      	ldr	r0, [pc, #4]	@ (8017130 <__malloc_unlock+0x8>)
 801712a:	f7ff bed5 	b.w	8016ed8 <__retarget_lock_release_recursive>
 801712e:	bf00      	nop
 8017130:	200159f0 	.word	0x200159f0

08017134 <__ssputs_r>:
 8017134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017138:	688e      	ldr	r6, [r1, #8]
 801713a:	461f      	mov	r7, r3
 801713c:	42be      	cmp	r6, r7
 801713e:	680b      	ldr	r3, [r1, #0]
 8017140:	4682      	mov	sl, r0
 8017142:	460c      	mov	r4, r1
 8017144:	4690      	mov	r8, r2
 8017146:	d82d      	bhi.n	80171a4 <__ssputs_r+0x70>
 8017148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801714c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017150:	d026      	beq.n	80171a0 <__ssputs_r+0x6c>
 8017152:	6965      	ldr	r5, [r4, #20]
 8017154:	6909      	ldr	r1, [r1, #16]
 8017156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801715a:	eba3 0901 	sub.w	r9, r3, r1
 801715e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017162:	1c7b      	adds	r3, r7, #1
 8017164:	444b      	add	r3, r9
 8017166:	106d      	asrs	r5, r5, #1
 8017168:	429d      	cmp	r5, r3
 801716a:	bf38      	it	cc
 801716c:	461d      	movcc	r5, r3
 801716e:	0553      	lsls	r3, r2, #21
 8017170:	d527      	bpl.n	80171c2 <__ssputs_r+0x8e>
 8017172:	4629      	mov	r1, r5
 8017174:	f7ff ff52 	bl	801701c <_malloc_r>
 8017178:	4606      	mov	r6, r0
 801717a:	b360      	cbz	r0, 80171d6 <__ssputs_r+0xa2>
 801717c:	6921      	ldr	r1, [r4, #16]
 801717e:	464a      	mov	r2, r9
 8017180:	f7ff feab 	bl	8016eda <memcpy>
 8017184:	89a3      	ldrh	r3, [r4, #12]
 8017186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801718a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801718e:	81a3      	strh	r3, [r4, #12]
 8017190:	6126      	str	r6, [r4, #16]
 8017192:	6165      	str	r5, [r4, #20]
 8017194:	444e      	add	r6, r9
 8017196:	eba5 0509 	sub.w	r5, r5, r9
 801719a:	6026      	str	r6, [r4, #0]
 801719c:	60a5      	str	r5, [r4, #8]
 801719e:	463e      	mov	r6, r7
 80171a0:	42be      	cmp	r6, r7
 80171a2:	d900      	bls.n	80171a6 <__ssputs_r+0x72>
 80171a4:	463e      	mov	r6, r7
 80171a6:	6820      	ldr	r0, [r4, #0]
 80171a8:	4632      	mov	r2, r6
 80171aa:	4641      	mov	r1, r8
 80171ac:	f7ff fda8 	bl	8016d00 <memmove>
 80171b0:	68a3      	ldr	r3, [r4, #8]
 80171b2:	1b9b      	subs	r3, r3, r6
 80171b4:	60a3      	str	r3, [r4, #8]
 80171b6:	6823      	ldr	r3, [r4, #0]
 80171b8:	4433      	add	r3, r6
 80171ba:	6023      	str	r3, [r4, #0]
 80171bc:	2000      	movs	r0, #0
 80171be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c2:	462a      	mov	r2, r5
 80171c4:	f000 fd69 	bl	8017c9a <_realloc_r>
 80171c8:	4606      	mov	r6, r0
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d1e0      	bne.n	8017190 <__ssputs_r+0x5c>
 80171ce:	6921      	ldr	r1, [r4, #16]
 80171d0:	4650      	mov	r0, sl
 80171d2:	f7ff feaf 	bl	8016f34 <_free_r>
 80171d6:	230c      	movs	r3, #12
 80171d8:	f8ca 3000 	str.w	r3, [sl]
 80171dc:	89a3      	ldrh	r3, [r4, #12]
 80171de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80171e2:	81a3      	strh	r3, [r4, #12]
 80171e4:	f04f 30ff 	mov.w	r0, #4294967295
 80171e8:	e7e9      	b.n	80171be <__ssputs_r+0x8a>
	...

080171ec <_svfiprintf_r>:
 80171ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171f0:	4698      	mov	r8, r3
 80171f2:	898b      	ldrh	r3, [r1, #12]
 80171f4:	061b      	lsls	r3, r3, #24
 80171f6:	b09d      	sub	sp, #116	@ 0x74
 80171f8:	4607      	mov	r7, r0
 80171fa:	460d      	mov	r5, r1
 80171fc:	4614      	mov	r4, r2
 80171fe:	d510      	bpl.n	8017222 <_svfiprintf_r+0x36>
 8017200:	690b      	ldr	r3, [r1, #16]
 8017202:	b973      	cbnz	r3, 8017222 <_svfiprintf_r+0x36>
 8017204:	2140      	movs	r1, #64	@ 0x40
 8017206:	f7ff ff09 	bl	801701c <_malloc_r>
 801720a:	6028      	str	r0, [r5, #0]
 801720c:	6128      	str	r0, [r5, #16]
 801720e:	b930      	cbnz	r0, 801721e <_svfiprintf_r+0x32>
 8017210:	230c      	movs	r3, #12
 8017212:	603b      	str	r3, [r7, #0]
 8017214:	f04f 30ff 	mov.w	r0, #4294967295
 8017218:	b01d      	add	sp, #116	@ 0x74
 801721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801721e:	2340      	movs	r3, #64	@ 0x40
 8017220:	616b      	str	r3, [r5, #20]
 8017222:	2300      	movs	r3, #0
 8017224:	9309      	str	r3, [sp, #36]	@ 0x24
 8017226:	2320      	movs	r3, #32
 8017228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801722c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017230:	2330      	movs	r3, #48	@ 0x30
 8017232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173d0 <_svfiprintf_r+0x1e4>
 8017236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801723a:	f04f 0901 	mov.w	r9, #1
 801723e:	4623      	mov	r3, r4
 8017240:	469a      	mov	sl, r3
 8017242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017246:	b10a      	cbz	r2, 801724c <_svfiprintf_r+0x60>
 8017248:	2a25      	cmp	r2, #37	@ 0x25
 801724a:	d1f9      	bne.n	8017240 <_svfiprintf_r+0x54>
 801724c:	ebba 0b04 	subs.w	fp, sl, r4
 8017250:	d00b      	beq.n	801726a <_svfiprintf_r+0x7e>
 8017252:	465b      	mov	r3, fp
 8017254:	4622      	mov	r2, r4
 8017256:	4629      	mov	r1, r5
 8017258:	4638      	mov	r0, r7
 801725a:	f7ff ff6b 	bl	8017134 <__ssputs_r>
 801725e:	3001      	adds	r0, #1
 8017260:	f000 80a7 	beq.w	80173b2 <_svfiprintf_r+0x1c6>
 8017264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017266:	445a      	add	r2, fp
 8017268:	9209      	str	r2, [sp, #36]	@ 0x24
 801726a:	f89a 3000 	ldrb.w	r3, [sl]
 801726e:	2b00      	cmp	r3, #0
 8017270:	f000 809f 	beq.w	80173b2 <_svfiprintf_r+0x1c6>
 8017274:	2300      	movs	r3, #0
 8017276:	f04f 32ff 	mov.w	r2, #4294967295
 801727a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801727e:	f10a 0a01 	add.w	sl, sl, #1
 8017282:	9304      	str	r3, [sp, #16]
 8017284:	9307      	str	r3, [sp, #28]
 8017286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801728a:	931a      	str	r3, [sp, #104]	@ 0x68
 801728c:	4654      	mov	r4, sl
 801728e:	2205      	movs	r2, #5
 8017290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017294:	484e      	ldr	r0, [pc, #312]	@ (80173d0 <_svfiprintf_r+0x1e4>)
 8017296:	f7e8 ffa3 	bl	80001e0 <memchr>
 801729a:	9a04      	ldr	r2, [sp, #16]
 801729c:	b9d8      	cbnz	r0, 80172d6 <_svfiprintf_r+0xea>
 801729e:	06d0      	lsls	r0, r2, #27
 80172a0:	bf44      	itt	mi
 80172a2:	2320      	movmi	r3, #32
 80172a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172a8:	0711      	lsls	r1, r2, #28
 80172aa:	bf44      	itt	mi
 80172ac:	232b      	movmi	r3, #43	@ 0x2b
 80172ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172b2:	f89a 3000 	ldrb.w	r3, [sl]
 80172b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80172b8:	d015      	beq.n	80172e6 <_svfiprintf_r+0xfa>
 80172ba:	9a07      	ldr	r2, [sp, #28]
 80172bc:	4654      	mov	r4, sl
 80172be:	2000      	movs	r0, #0
 80172c0:	f04f 0c0a 	mov.w	ip, #10
 80172c4:	4621      	mov	r1, r4
 80172c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172ca:	3b30      	subs	r3, #48	@ 0x30
 80172cc:	2b09      	cmp	r3, #9
 80172ce:	d94b      	bls.n	8017368 <_svfiprintf_r+0x17c>
 80172d0:	b1b0      	cbz	r0, 8017300 <_svfiprintf_r+0x114>
 80172d2:	9207      	str	r2, [sp, #28]
 80172d4:	e014      	b.n	8017300 <_svfiprintf_r+0x114>
 80172d6:	eba0 0308 	sub.w	r3, r0, r8
 80172da:	fa09 f303 	lsl.w	r3, r9, r3
 80172de:	4313      	orrs	r3, r2
 80172e0:	9304      	str	r3, [sp, #16]
 80172e2:	46a2      	mov	sl, r4
 80172e4:	e7d2      	b.n	801728c <_svfiprintf_r+0xa0>
 80172e6:	9b03      	ldr	r3, [sp, #12]
 80172e8:	1d19      	adds	r1, r3, #4
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	9103      	str	r1, [sp, #12]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	bfbb      	ittet	lt
 80172f2:	425b      	neglt	r3, r3
 80172f4:	f042 0202 	orrlt.w	r2, r2, #2
 80172f8:	9307      	strge	r3, [sp, #28]
 80172fa:	9307      	strlt	r3, [sp, #28]
 80172fc:	bfb8      	it	lt
 80172fe:	9204      	strlt	r2, [sp, #16]
 8017300:	7823      	ldrb	r3, [r4, #0]
 8017302:	2b2e      	cmp	r3, #46	@ 0x2e
 8017304:	d10a      	bne.n	801731c <_svfiprintf_r+0x130>
 8017306:	7863      	ldrb	r3, [r4, #1]
 8017308:	2b2a      	cmp	r3, #42	@ 0x2a
 801730a:	d132      	bne.n	8017372 <_svfiprintf_r+0x186>
 801730c:	9b03      	ldr	r3, [sp, #12]
 801730e:	1d1a      	adds	r2, r3, #4
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	9203      	str	r2, [sp, #12]
 8017314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017318:	3402      	adds	r4, #2
 801731a:	9305      	str	r3, [sp, #20]
 801731c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80173e0 <_svfiprintf_r+0x1f4>
 8017320:	7821      	ldrb	r1, [r4, #0]
 8017322:	2203      	movs	r2, #3
 8017324:	4650      	mov	r0, sl
 8017326:	f7e8 ff5b 	bl	80001e0 <memchr>
 801732a:	b138      	cbz	r0, 801733c <_svfiprintf_r+0x150>
 801732c:	9b04      	ldr	r3, [sp, #16]
 801732e:	eba0 000a 	sub.w	r0, r0, sl
 8017332:	2240      	movs	r2, #64	@ 0x40
 8017334:	4082      	lsls	r2, r0
 8017336:	4313      	orrs	r3, r2
 8017338:	3401      	adds	r4, #1
 801733a:	9304      	str	r3, [sp, #16]
 801733c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017340:	4824      	ldr	r0, [pc, #144]	@ (80173d4 <_svfiprintf_r+0x1e8>)
 8017342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017346:	2206      	movs	r2, #6
 8017348:	f7e8 ff4a 	bl	80001e0 <memchr>
 801734c:	2800      	cmp	r0, #0
 801734e:	d036      	beq.n	80173be <_svfiprintf_r+0x1d2>
 8017350:	4b21      	ldr	r3, [pc, #132]	@ (80173d8 <_svfiprintf_r+0x1ec>)
 8017352:	bb1b      	cbnz	r3, 801739c <_svfiprintf_r+0x1b0>
 8017354:	9b03      	ldr	r3, [sp, #12]
 8017356:	3307      	adds	r3, #7
 8017358:	f023 0307 	bic.w	r3, r3, #7
 801735c:	3308      	adds	r3, #8
 801735e:	9303      	str	r3, [sp, #12]
 8017360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017362:	4433      	add	r3, r6
 8017364:	9309      	str	r3, [sp, #36]	@ 0x24
 8017366:	e76a      	b.n	801723e <_svfiprintf_r+0x52>
 8017368:	fb0c 3202 	mla	r2, ip, r2, r3
 801736c:	460c      	mov	r4, r1
 801736e:	2001      	movs	r0, #1
 8017370:	e7a8      	b.n	80172c4 <_svfiprintf_r+0xd8>
 8017372:	2300      	movs	r3, #0
 8017374:	3401      	adds	r4, #1
 8017376:	9305      	str	r3, [sp, #20]
 8017378:	4619      	mov	r1, r3
 801737a:	f04f 0c0a 	mov.w	ip, #10
 801737e:	4620      	mov	r0, r4
 8017380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017384:	3a30      	subs	r2, #48	@ 0x30
 8017386:	2a09      	cmp	r2, #9
 8017388:	d903      	bls.n	8017392 <_svfiprintf_r+0x1a6>
 801738a:	2b00      	cmp	r3, #0
 801738c:	d0c6      	beq.n	801731c <_svfiprintf_r+0x130>
 801738e:	9105      	str	r1, [sp, #20]
 8017390:	e7c4      	b.n	801731c <_svfiprintf_r+0x130>
 8017392:	fb0c 2101 	mla	r1, ip, r1, r2
 8017396:	4604      	mov	r4, r0
 8017398:	2301      	movs	r3, #1
 801739a:	e7f0      	b.n	801737e <_svfiprintf_r+0x192>
 801739c:	ab03      	add	r3, sp, #12
 801739e:	9300      	str	r3, [sp, #0]
 80173a0:	462a      	mov	r2, r5
 80173a2:	4b0e      	ldr	r3, [pc, #56]	@ (80173dc <_svfiprintf_r+0x1f0>)
 80173a4:	a904      	add	r1, sp, #16
 80173a6:	4638      	mov	r0, r7
 80173a8:	f3af 8000 	nop.w
 80173ac:	1c42      	adds	r2, r0, #1
 80173ae:	4606      	mov	r6, r0
 80173b0:	d1d6      	bne.n	8017360 <_svfiprintf_r+0x174>
 80173b2:	89ab      	ldrh	r3, [r5, #12]
 80173b4:	065b      	lsls	r3, r3, #25
 80173b6:	f53f af2d 	bmi.w	8017214 <_svfiprintf_r+0x28>
 80173ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173bc:	e72c      	b.n	8017218 <_svfiprintf_r+0x2c>
 80173be:	ab03      	add	r3, sp, #12
 80173c0:	9300      	str	r3, [sp, #0]
 80173c2:	462a      	mov	r2, r5
 80173c4:	4b05      	ldr	r3, [pc, #20]	@ (80173dc <_svfiprintf_r+0x1f0>)
 80173c6:	a904      	add	r1, sp, #16
 80173c8:	4638      	mov	r0, r7
 80173ca:	f000 f9bb 	bl	8017744 <_printf_i>
 80173ce:	e7ed      	b.n	80173ac <_svfiprintf_r+0x1c0>
 80173d0:	0801b063 	.word	0x0801b063
 80173d4:	0801b06d 	.word	0x0801b06d
 80173d8:	00000000 	.word	0x00000000
 80173dc:	08017135 	.word	0x08017135
 80173e0:	0801b069 	.word	0x0801b069

080173e4 <__sfputc_r>:
 80173e4:	6893      	ldr	r3, [r2, #8]
 80173e6:	3b01      	subs	r3, #1
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	b410      	push	{r4}
 80173ec:	6093      	str	r3, [r2, #8]
 80173ee:	da08      	bge.n	8017402 <__sfputc_r+0x1e>
 80173f0:	6994      	ldr	r4, [r2, #24]
 80173f2:	42a3      	cmp	r3, r4
 80173f4:	db01      	blt.n	80173fa <__sfputc_r+0x16>
 80173f6:	290a      	cmp	r1, #10
 80173f8:	d103      	bne.n	8017402 <__sfputc_r+0x1e>
 80173fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173fe:	f7ff bbda 	b.w	8016bb6 <__swbuf_r>
 8017402:	6813      	ldr	r3, [r2, #0]
 8017404:	1c58      	adds	r0, r3, #1
 8017406:	6010      	str	r0, [r2, #0]
 8017408:	7019      	strb	r1, [r3, #0]
 801740a:	4608      	mov	r0, r1
 801740c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017410:	4770      	bx	lr

08017412 <__sfputs_r>:
 8017412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017414:	4606      	mov	r6, r0
 8017416:	460f      	mov	r7, r1
 8017418:	4614      	mov	r4, r2
 801741a:	18d5      	adds	r5, r2, r3
 801741c:	42ac      	cmp	r4, r5
 801741e:	d101      	bne.n	8017424 <__sfputs_r+0x12>
 8017420:	2000      	movs	r0, #0
 8017422:	e007      	b.n	8017434 <__sfputs_r+0x22>
 8017424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017428:	463a      	mov	r2, r7
 801742a:	4630      	mov	r0, r6
 801742c:	f7ff ffda 	bl	80173e4 <__sfputc_r>
 8017430:	1c43      	adds	r3, r0, #1
 8017432:	d1f3      	bne.n	801741c <__sfputs_r+0xa>
 8017434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017438 <_vfiprintf_r>:
 8017438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801743c:	460d      	mov	r5, r1
 801743e:	b09d      	sub	sp, #116	@ 0x74
 8017440:	4614      	mov	r4, r2
 8017442:	4698      	mov	r8, r3
 8017444:	4606      	mov	r6, r0
 8017446:	b118      	cbz	r0, 8017450 <_vfiprintf_r+0x18>
 8017448:	6a03      	ldr	r3, [r0, #32]
 801744a:	b90b      	cbnz	r3, 8017450 <_vfiprintf_r+0x18>
 801744c:	f7ff fa8c 	bl	8016968 <__sinit>
 8017450:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017452:	07d9      	lsls	r1, r3, #31
 8017454:	d405      	bmi.n	8017462 <_vfiprintf_r+0x2a>
 8017456:	89ab      	ldrh	r3, [r5, #12]
 8017458:	059a      	lsls	r2, r3, #22
 801745a:	d402      	bmi.n	8017462 <_vfiprintf_r+0x2a>
 801745c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801745e:	f7ff fd3a 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 8017462:	89ab      	ldrh	r3, [r5, #12]
 8017464:	071b      	lsls	r3, r3, #28
 8017466:	d501      	bpl.n	801746c <_vfiprintf_r+0x34>
 8017468:	692b      	ldr	r3, [r5, #16]
 801746a:	b99b      	cbnz	r3, 8017494 <_vfiprintf_r+0x5c>
 801746c:	4629      	mov	r1, r5
 801746e:	4630      	mov	r0, r6
 8017470:	f7ff fbe0 	bl	8016c34 <__swsetup_r>
 8017474:	b170      	cbz	r0, 8017494 <_vfiprintf_r+0x5c>
 8017476:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017478:	07dc      	lsls	r4, r3, #31
 801747a:	d504      	bpl.n	8017486 <_vfiprintf_r+0x4e>
 801747c:	f04f 30ff 	mov.w	r0, #4294967295
 8017480:	b01d      	add	sp, #116	@ 0x74
 8017482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017486:	89ab      	ldrh	r3, [r5, #12]
 8017488:	0598      	lsls	r0, r3, #22
 801748a:	d4f7      	bmi.n	801747c <_vfiprintf_r+0x44>
 801748c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801748e:	f7ff fd23 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017492:	e7f3      	b.n	801747c <_vfiprintf_r+0x44>
 8017494:	2300      	movs	r3, #0
 8017496:	9309      	str	r3, [sp, #36]	@ 0x24
 8017498:	2320      	movs	r3, #32
 801749a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801749e:	f8cd 800c 	str.w	r8, [sp, #12]
 80174a2:	2330      	movs	r3, #48	@ 0x30
 80174a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017654 <_vfiprintf_r+0x21c>
 80174a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174ac:	f04f 0901 	mov.w	r9, #1
 80174b0:	4623      	mov	r3, r4
 80174b2:	469a      	mov	sl, r3
 80174b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174b8:	b10a      	cbz	r2, 80174be <_vfiprintf_r+0x86>
 80174ba:	2a25      	cmp	r2, #37	@ 0x25
 80174bc:	d1f9      	bne.n	80174b2 <_vfiprintf_r+0x7a>
 80174be:	ebba 0b04 	subs.w	fp, sl, r4
 80174c2:	d00b      	beq.n	80174dc <_vfiprintf_r+0xa4>
 80174c4:	465b      	mov	r3, fp
 80174c6:	4622      	mov	r2, r4
 80174c8:	4629      	mov	r1, r5
 80174ca:	4630      	mov	r0, r6
 80174cc:	f7ff ffa1 	bl	8017412 <__sfputs_r>
 80174d0:	3001      	adds	r0, #1
 80174d2:	f000 80a7 	beq.w	8017624 <_vfiprintf_r+0x1ec>
 80174d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174d8:	445a      	add	r2, fp
 80174da:	9209      	str	r2, [sp, #36]	@ 0x24
 80174dc:	f89a 3000 	ldrb.w	r3, [sl]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	f000 809f 	beq.w	8017624 <_vfiprintf_r+0x1ec>
 80174e6:	2300      	movs	r3, #0
 80174e8:	f04f 32ff 	mov.w	r2, #4294967295
 80174ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174f0:	f10a 0a01 	add.w	sl, sl, #1
 80174f4:	9304      	str	r3, [sp, #16]
 80174f6:	9307      	str	r3, [sp, #28]
 80174f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80174fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80174fe:	4654      	mov	r4, sl
 8017500:	2205      	movs	r2, #5
 8017502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017506:	4853      	ldr	r0, [pc, #332]	@ (8017654 <_vfiprintf_r+0x21c>)
 8017508:	f7e8 fe6a 	bl	80001e0 <memchr>
 801750c:	9a04      	ldr	r2, [sp, #16]
 801750e:	b9d8      	cbnz	r0, 8017548 <_vfiprintf_r+0x110>
 8017510:	06d1      	lsls	r1, r2, #27
 8017512:	bf44      	itt	mi
 8017514:	2320      	movmi	r3, #32
 8017516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801751a:	0713      	lsls	r3, r2, #28
 801751c:	bf44      	itt	mi
 801751e:	232b      	movmi	r3, #43	@ 0x2b
 8017520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017524:	f89a 3000 	ldrb.w	r3, [sl]
 8017528:	2b2a      	cmp	r3, #42	@ 0x2a
 801752a:	d015      	beq.n	8017558 <_vfiprintf_r+0x120>
 801752c:	9a07      	ldr	r2, [sp, #28]
 801752e:	4654      	mov	r4, sl
 8017530:	2000      	movs	r0, #0
 8017532:	f04f 0c0a 	mov.w	ip, #10
 8017536:	4621      	mov	r1, r4
 8017538:	f811 3b01 	ldrb.w	r3, [r1], #1
 801753c:	3b30      	subs	r3, #48	@ 0x30
 801753e:	2b09      	cmp	r3, #9
 8017540:	d94b      	bls.n	80175da <_vfiprintf_r+0x1a2>
 8017542:	b1b0      	cbz	r0, 8017572 <_vfiprintf_r+0x13a>
 8017544:	9207      	str	r2, [sp, #28]
 8017546:	e014      	b.n	8017572 <_vfiprintf_r+0x13a>
 8017548:	eba0 0308 	sub.w	r3, r0, r8
 801754c:	fa09 f303 	lsl.w	r3, r9, r3
 8017550:	4313      	orrs	r3, r2
 8017552:	9304      	str	r3, [sp, #16]
 8017554:	46a2      	mov	sl, r4
 8017556:	e7d2      	b.n	80174fe <_vfiprintf_r+0xc6>
 8017558:	9b03      	ldr	r3, [sp, #12]
 801755a:	1d19      	adds	r1, r3, #4
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	9103      	str	r1, [sp, #12]
 8017560:	2b00      	cmp	r3, #0
 8017562:	bfbb      	ittet	lt
 8017564:	425b      	neglt	r3, r3
 8017566:	f042 0202 	orrlt.w	r2, r2, #2
 801756a:	9307      	strge	r3, [sp, #28]
 801756c:	9307      	strlt	r3, [sp, #28]
 801756e:	bfb8      	it	lt
 8017570:	9204      	strlt	r2, [sp, #16]
 8017572:	7823      	ldrb	r3, [r4, #0]
 8017574:	2b2e      	cmp	r3, #46	@ 0x2e
 8017576:	d10a      	bne.n	801758e <_vfiprintf_r+0x156>
 8017578:	7863      	ldrb	r3, [r4, #1]
 801757a:	2b2a      	cmp	r3, #42	@ 0x2a
 801757c:	d132      	bne.n	80175e4 <_vfiprintf_r+0x1ac>
 801757e:	9b03      	ldr	r3, [sp, #12]
 8017580:	1d1a      	adds	r2, r3, #4
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	9203      	str	r2, [sp, #12]
 8017586:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801758a:	3402      	adds	r4, #2
 801758c:	9305      	str	r3, [sp, #20]
 801758e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017664 <_vfiprintf_r+0x22c>
 8017592:	7821      	ldrb	r1, [r4, #0]
 8017594:	2203      	movs	r2, #3
 8017596:	4650      	mov	r0, sl
 8017598:	f7e8 fe22 	bl	80001e0 <memchr>
 801759c:	b138      	cbz	r0, 80175ae <_vfiprintf_r+0x176>
 801759e:	9b04      	ldr	r3, [sp, #16]
 80175a0:	eba0 000a 	sub.w	r0, r0, sl
 80175a4:	2240      	movs	r2, #64	@ 0x40
 80175a6:	4082      	lsls	r2, r0
 80175a8:	4313      	orrs	r3, r2
 80175aa:	3401      	adds	r4, #1
 80175ac:	9304      	str	r3, [sp, #16]
 80175ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175b2:	4829      	ldr	r0, [pc, #164]	@ (8017658 <_vfiprintf_r+0x220>)
 80175b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175b8:	2206      	movs	r2, #6
 80175ba:	f7e8 fe11 	bl	80001e0 <memchr>
 80175be:	2800      	cmp	r0, #0
 80175c0:	d03f      	beq.n	8017642 <_vfiprintf_r+0x20a>
 80175c2:	4b26      	ldr	r3, [pc, #152]	@ (801765c <_vfiprintf_r+0x224>)
 80175c4:	bb1b      	cbnz	r3, 801760e <_vfiprintf_r+0x1d6>
 80175c6:	9b03      	ldr	r3, [sp, #12]
 80175c8:	3307      	adds	r3, #7
 80175ca:	f023 0307 	bic.w	r3, r3, #7
 80175ce:	3308      	adds	r3, #8
 80175d0:	9303      	str	r3, [sp, #12]
 80175d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175d4:	443b      	add	r3, r7
 80175d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80175d8:	e76a      	b.n	80174b0 <_vfiprintf_r+0x78>
 80175da:	fb0c 3202 	mla	r2, ip, r2, r3
 80175de:	460c      	mov	r4, r1
 80175e0:	2001      	movs	r0, #1
 80175e2:	e7a8      	b.n	8017536 <_vfiprintf_r+0xfe>
 80175e4:	2300      	movs	r3, #0
 80175e6:	3401      	adds	r4, #1
 80175e8:	9305      	str	r3, [sp, #20]
 80175ea:	4619      	mov	r1, r3
 80175ec:	f04f 0c0a 	mov.w	ip, #10
 80175f0:	4620      	mov	r0, r4
 80175f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175f6:	3a30      	subs	r2, #48	@ 0x30
 80175f8:	2a09      	cmp	r2, #9
 80175fa:	d903      	bls.n	8017604 <_vfiprintf_r+0x1cc>
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d0c6      	beq.n	801758e <_vfiprintf_r+0x156>
 8017600:	9105      	str	r1, [sp, #20]
 8017602:	e7c4      	b.n	801758e <_vfiprintf_r+0x156>
 8017604:	fb0c 2101 	mla	r1, ip, r1, r2
 8017608:	4604      	mov	r4, r0
 801760a:	2301      	movs	r3, #1
 801760c:	e7f0      	b.n	80175f0 <_vfiprintf_r+0x1b8>
 801760e:	ab03      	add	r3, sp, #12
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	462a      	mov	r2, r5
 8017614:	4b12      	ldr	r3, [pc, #72]	@ (8017660 <_vfiprintf_r+0x228>)
 8017616:	a904      	add	r1, sp, #16
 8017618:	4630      	mov	r0, r6
 801761a:	f3af 8000 	nop.w
 801761e:	4607      	mov	r7, r0
 8017620:	1c78      	adds	r0, r7, #1
 8017622:	d1d6      	bne.n	80175d2 <_vfiprintf_r+0x19a>
 8017624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017626:	07d9      	lsls	r1, r3, #31
 8017628:	d405      	bmi.n	8017636 <_vfiprintf_r+0x1fe>
 801762a:	89ab      	ldrh	r3, [r5, #12]
 801762c:	059a      	lsls	r2, r3, #22
 801762e:	d402      	bmi.n	8017636 <_vfiprintf_r+0x1fe>
 8017630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017632:	f7ff fc51 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017636:	89ab      	ldrh	r3, [r5, #12]
 8017638:	065b      	lsls	r3, r3, #25
 801763a:	f53f af1f 	bmi.w	801747c <_vfiprintf_r+0x44>
 801763e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017640:	e71e      	b.n	8017480 <_vfiprintf_r+0x48>
 8017642:	ab03      	add	r3, sp, #12
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	462a      	mov	r2, r5
 8017648:	4b05      	ldr	r3, [pc, #20]	@ (8017660 <_vfiprintf_r+0x228>)
 801764a:	a904      	add	r1, sp, #16
 801764c:	4630      	mov	r0, r6
 801764e:	f000 f879 	bl	8017744 <_printf_i>
 8017652:	e7e4      	b.n	801761e <_vfiprintf_r+0x1e6>
 8017654:	0801b063 	.word	0x0801b063
 8017658:	0801b06d 	.word	0x0801b06d
 801765c:	00000000 	.word	0x00000000
 8017660:	08017413 	.word	0x08017413
 8017664:	0801b069 	.word	0x0801b069

08017668 <_printf_common>:
 8017668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801766c:	4616      	mov	r6, r2
 801766e:	4698      	mov	r8, r3
 8017670:	688a      	ldr	r2, [r1, #8]
 8017672:	690b      	ldr	r3, [r1, #16]
 8017674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017678:	4293      	cmp	r3, r2
 801767a:	bfb8      	it	lt
 801767c:	4613      	movlt	r3, r2
 801767e:	6033      	str	r3, [r6, #0]
 8017680:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017684:	4607      	mov	r7, r0
 8017686:	460c      	mov	r4, r1
 8017688:	b10a      	cbz	r2, 801768e <_printf_common+0x26>
 801768a:	3301      	adds	r3, #1
 801768c:	6033      	str	r3, [r6, #0]
 801768e:	6823      	ldr	r3, [r4, #0]
 8017690:	0699      	lsls	r1, r3, #26
 8017692:	bf42      	ittt	mi
 8017694:	6833      	ldrmi	r3, [r6, #0]
 8017696:	3302      	addmi	r3, #2
 8017698:	6033      	strmi	r3, [r6, #0]
 801769a:	6825      	ldr	r5, [r4, #0]
 801769c:	f015 0506 	ands.w	r5, r5, #6
 80176a0:	d106      	bne.n	80176b0 <_printf_common+0x48>
 80176a2:	f104 0a19 	add.w	sl, r4, #25
 80176a6:	68e3      	ldr	r3, [r4, #12]
 80176a8:	6832      	ldr	r2, [r6, #0]
 80176aa:	1a9b      	subs	r3, r3, r2
 80176ac:	42ab      	cmp	r3, r5
 80176ae:	dc26      	bgt.n	80176fe <_printf_common+0x96>
 80176b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80176b4:	6822      	ldr	r2, [r4, #0]
 80176b6:	3b00      	subs	r3, #0
 80176b8:	bf18      	it	ne
 80176ba:	2301      	movne	r3, #1
 80176bc:	0692      	lsls	r2, r2, #26
 80176be:	d42b      	bmi.n	8017718 <_printf_common+0xb0>
 80176c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176c4:	4641      	mov	r1, r8
 80176c6:	4638      	mov	r0, r7
 80176c8:	47c8      	blx	r9
 80176ca:	3001      	adds	r0, #1
 80176cc:	d01e      	beq.n	801770c <_printf_common+0xa4>
 80176ce:	6823      	ldr	r3, [r4, #0]
 80176d0:	6922      	ldr	r2, [r4, #16]
 80176d2:	f003 0306 	and.w	r3, r3, #6
 80176d6:	2b04      	cmp	r3, #4
 80176d8:	bf02      	ittt	eq
 80176da:	68e5      	ldreq	r5, [r4, #12]
 80176dc:	6833      	ldreq	r3, [r6, #0]
 80176de:	1aed      	subeq	r5, r5, r3
 80176e0:	68a3      	ldr	r3, [r4, #8]
 80176e2:	bf0c      	ite	eq
 80176e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80176e8:	2500      	movne	r5, #0
 80176ea:	4293      	cmp	r3, r2
 80176ec:	bfc4      	itt	gt
 80176ee:	1a9b      	subgt	r3, r3, r2
 80176f0:	18ed      	addgt	r5, r5, r3
 80176f2:	2600      	movs	r6, #0
 80176f4:	341a      	adds	r4, #26
 80176f6:	42b5      	cmp	r5, r6
 80176f8:	d11a      	bne.n	8017730 <_printf_common+0xc8>
 80176fa:	2000      	movs	r0, #0
 80176fc:	e008      	b.n	8017710 <_printf_common+0xa8>
 80176fe:	2301      	movs	r3, #1
 8017700:	4652      	mov	r2, sl
 8017702:	4641      	mov	r1, r8
 8017704:	4638      	mov	r0, r7
 8017706:	47c8      	blx	r9
 8017708:	3001      	adds	r0, #1
 801770a:	d103      	bne.n	8017714 <_printf_common+0xac>
 801770c:	f04f 30ff 	mov.w	r0, #4294967295
 8017710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017714:	3501      	adds	r5, #1
 8017716:	e7c6      	b.n	80176a6 <_printf_common+0x3e>
 8017718:	18e1      	adds	r1, r4, r3
 801771a:	1c5a      	adds	r2, r3, #1
 801771c:	2030      	movs	r0, #48	@ 0x30
 801771e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017722:	4422      	add	r2, r4
 8017724:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801772c:	3302      	adds	r3, #2
 801772e:	e7c7      	b.n	80176c0 <_printf_common+0x58>
 8017730:	2301      	movs	r3, #1
 8017732:	4622      	mov	r2, r4
 8017734:	4641      	mov	r1, r8
 8017736:	4638      	mov	r0, r7
 8017738:	47c8      	blx	r9
 801773a:	3001      	adds	r0, #1
 801773c:	d0e6      	beq.n	801770c <_printf_common+0xa4>
 801773e:	3601      	adds	r6, #1
 8017740:	e7d9      	b.n	80176f6 <_printf_common+0x8e>
	...

08017744 <_printf_i>:
 8017744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017748:	7e0f      	ldrb	r7, [r1, #24]
 801774a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801774c:	2f78      	cmp	r7, #120	@ 0x78
 801774e:	4691      	mov	r9, r2
 8017750:	4680      	mov	r8, r0
 8017752:	460c      	mov	r4, r1
 8017754:	469a      	mov	sl, r3
 8017756:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801775a:	d807      	bhi.n	801776c <_printf_i+0x28>
 801775c:	2f62      	cmp	r7, #98	@ 0x62
 801775e:	d80a      	bhi.n	8017776 <_printf_i+0x32>
 8017760:	2f00      	cmp	r7, #0
 8017762:	f000 80d1 	beq.w	8017908 <_printf_i+0x1c4>
 8017766:	2f58      	cmp	r7, #88	@ 0x58
 8017768:	f000 80b8 	beq.w	80178dc <_printf_i+0x198>
 801776c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017770:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017774:	e03a      	b.n	80177ec <_printf_i+0xa8>
 8017776:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801777a:	2b15      	cmp	r3, #21
 801777c:	d8f6      	bhi.n	801776c <_printf_i+0x28>
 801777e:	a101      	add	r1, pc, #4	@ (adr r1, 8017784 <_printf_i+0x40>)
 8017780:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017784:	080177dd 	.word	0x080177dd
 8017788:	080177f1 	.word	0x080177f1
 801778c:	0801776d 	.word	0x0801776d
 8017790:	0801776d 	.word	0x0801776d
 8017794:	0801776d 	.word	0x0801776d
 8017798:	0801776d 	.word	0x0801776d
 801779c:	080177f1 	.word	0x080177f1
 80177a0:	0801776d 	.word	0x0801776d
 80177a4:	0801776d 	.word	0x0801776d
 80177a8:	0801776d 	.word	0x0801776d
 80177ac:	0801776d 	.word	0x0801776d
 80177b0:	080178ef 	.word	0x080178ef
 80177b4:	0801781b 	.word	0x0801781b
 80177b8:	080178a9 	.word	0x080178a9
 80177bc:	0801776d 	.word	0x0801776d
 80177c0:	0801776d 	.word	0x0801776d
 80177c4:	08017911 	.word	0x08017911
 80177c8:	0801776d 	.word	0x0801776d
 80177cc:	0801781b 	.word	0x0801781b
 80177d0:	0801776d 	.word	0x0801776d
 80177d4:	0801776d 	.word	0x0801776d
 80177d8:	080178b1 	.word	0x080178b1
 80177dc:	6833      	ldr	r3, [r6, #0]
 80177de:	1d1a      	adds	r2, r3, #4
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	6032      	str	r2, [r6, #0]
 80177e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80177e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80177ec:	2301      	movs	r3, #1
 80177ee:	e09c      	b.n	801792a <_printf_i+0x1e6>
 80177f0:	6833      	ldr	r3, [r6, #0]
 80177f2:	6820      	ldr	r0, [r4, #0]
 80177f4:	1d19      	adds	r1, r3, #4
 80177f6:	6031      	str	r1, [r6, #0]
 80177f8:	0606      	lsls	r6, r0, #24
 80177fa:	d501      	bpl.n	8017800 <_printf_i+0xbc>
 80177fc:	681d      	ldr	r5, [r3, #0]
 80177fe:	e003      	b.n	8017808 <_printf_i+0xc4>
 8017800:	0645      	lsls	r5, r0, #25
 8017802:	d5fb      	bpl.n	80177fc <_printf_i+0xb8>
 8017804:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017808:	2d00      	cmp	r5, #0
 801780a:	da03      	bge.n	8017814 <_printf_i+0xd0>
 801780c:	232d      	movs	r3, #45	@ 0x2d
 801780e:	426d      	negs	r5, r5
 8017810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017814:	4858      	ldr	r0, [pc, #352]	@ (8017978 <_printf_i+0x234>)
 8017816:	230a      	movs	r3, #10
 8017818:	e011      	b.n	801783e <_printf_i+0xfa>
 801781a:	6821      	ldr	r1, [r4, #0]
 801781c:	6833      	ldr	r3, [r6, #0]
 801781e:	0608      	lsls	r0, r1, #24
 8017820:	f853 5b04 	ldr.w	r5, [r3], #4
 8017824:	d402      	bmi.n	801782c <_printf_i+0xe8>
 8017826:	0649      	lsls	r1, r1, #25
 8017828:	bf48      	it	mi
 801782a:	b2ad      	uxthmi	r5, r5
 801782c:	2f6f      	cmp	r7, #111	@ 0x6f
 801782e:	4852      	ldr	r0, [pc, #328]	@ (8017978 <_printf_i+0x234>)
 8017830:	6033      	str	r3, [r6, #0]
 8017832:	bf14      	ite	ne
 8017834:	230a      	movne	r3, #10
 8017836:	2308      	moveq	r3, #8
 8017838:	2100      	movs	r1, #0
 801783a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801783e:	6866      	ldr	r6, [r4, #4]
 8017840:	60a6      	str	r6, [r4, #8]
 8017842:	2e00      	cmp	r6, #0
 8017844:	db05      	blt.n	8017852 <_printf_i+0x10e>
 8017846:	6821      	ldr	r1, [r4, #0]
 8017848:	432e      	orrs	r6, r5
 801784a:	f021 0104 	bic.w	r1, r1, #4
 801784e:	6021      	str	r1, [r4, #0]
 8017850:	d04b      	beq.n	80178ea <_printf_i+0x1a6>
 8017852:	4616      	mov	r6, r2
 8017854:	fbb5 f1f3 	udiv	r1, r5, r3
 8017858:	fb03 5711 	mls	r7, r3, r1, r5
 801785c:	5dc7      	ldrb	r7, [r0, r7]
 801785e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017862:	462f      	mov	r7, r5
 8017864:	42bb      	cmp	r3, r7
 8017866:	460d      	mov	r5, r1
 8017868:	d9f4      	bls.n	8017854 <_printf_i+0x110>
 801786a:	2b08      	cmp	r3, #8
 801786c:	d10b      	bne.n	8017886 <_printf_i+0x142>
 801786e:	6823      	ldr	r3, [r4, #0]
 8017870:	07df      	lsls	r7, r3, #31
 8017872:	d508      	bpl.n	8017886 <_printf_i+0x142>
 8017874:	6923      	ldr	r3, [r4, #16]
 8017876:	6861      	ldr	r1, [r4, #4]
 8017878:	4299      	cmp	r1, r3
 801787a:	bfde      	ittt	le
 801787c:	2330      	movle	r3, #48	@ 0x30
 801787e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017882:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017886:	1b92      	subs	r2, r2, r6
 8017888:	6122      	str	r2, [r4, #16]
 801788a:	f8cd a000 	str.w	sl, [sp]
 801788e:	464b      	mov	r3, r9
 8017890:	aa03      	add	r2, sp, #12
 8017892:	4621      	mov	r1, r4
 8017894:	4640      	mov	r0, r8
 8017896:	f7ff fee7 	bl	8017668 <_printf_common>
 801789a:	3001      	adds	r0, #1
 801789c:	d14a      	bne.n	8017934 <_printf_i+0x1f0>
 801789e:	f04f 30ff 	mov.w	r0, #4294967295
 80178a2:	b004      	add	sp, #16
 80178a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a8:	6823      	ldr	r3, [r4, #0]
 80178aa:	f043 0320 	orr.w	r3, r3, #32
 80178ae:	6023      	str	r3, [r4, #0]
 80178b0:	4832      	ldr	r0, [pc, #200]	@ (801797c <_printf_i+0x238>)
 80178b2:	2778      	movs	r7, #120	@ 0x78
 80178b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178b8:	6823      	ldr	r3, [r4, #0]
 80178ba:	6831      	ldr	r1, [r6, #0]
 80178bc:	061f      	lsls	r7, r3, #24
 80178be:	f851 5b04 	ldr.w	r5, [r1], #4
 80178c2:	d402      	bmi.n	80178ca <_printf_i+0x186>
 80178c4:	065f      	lsls	r7, r3, #25
 80178c6:	bf48      	it	mi
 80178c8:	b2ad      	uxthmi	r5, r5
 80178ca:	6031      	str	r1, [r6, #0]
 80178cc:	07d9      	lsls	r1, r3, #31
 80178ce:	bf44      	itt	mi
 80178d0:	f043 0320 	orrmi.w	r3, r3, #32
 80178d4:	6023      	strmi	r3, [r4, #0]
 80178d6:	b11d      	cbz	r5, 80178e0 <_printf_i+0x19c>
 80178d8:	2310      	movs	r3, #16
 80178da:	e7ad      	b.n	8017838 <_printf_i+0xf4>
 80178dc:	4826      	ldr	r0, [pc, #152]	@ (8017978 <_printf_i+0x234>)
 80178de:	e7e9      	b.n	80178b4 <_printf_i+0x170>
 80178e0:	6823      	ldr	r3, [r4, #0]
 80178e2:	f023 0320 	bic.w	r3, r3, #32
 80178e6:	6023      	str	r3, [r4, #0]
 80178e8:	e7f6      	b.n	80178d8 <_printf_i+0x194>
 80178ea:	4616      	mov	r6, r2
 80178ec:	e7bd      	b.n	801786a <_printf_i+0x126>
 80178ee:	6833      	ldr	r3, [r6, #0]
 80178f0:	6825      	ldr	r5, [r4, #0]
 80178f2:	6961      	ldr	r1, [r4, #20]
 80178f4:	1d18      	adds	r0, r3, #4
 80178f6:	6030      	str	r0, [r6, #0]
 80178f8:	062e      	lsls	r6, r5, #24
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	d501      	bpl.n	8017902 <_printf_i+0x1be>
 80178fe:	6019      	str	r1, [r3, #0]
 8017900:	e002      	b.n	8017908 <_printf_i+0x1c4>
 8017902:	0668      	lsls	r0, r5, #25
 8017904:	d5fb      	bpl.n	80178fe <_printf_i+0x1ba>
 8017906:	8019      	strh	r1, [r3, #0]
 8017908:	2300      	movs	r3, #0
 801790a:	6123      	str	r3, [r4, #16]
 801790c:	4616      	mov	r6, r2
 801790e:	e7bc      	b.n	801788a <_printf_i+0x146>
 8017910:	6833      	ldr	r3, [r6, #0]
 8017912:	1d1a      	adds	r2, r3, #4
 8017914:	6032      	str	r2, [r6, #0]
 8017916:	681e      	ldr	r6, [r3, #0]
 8017918:	6862      	ldr	r2, [r4, #4]
 801791a:	2100      	movs	r1, #0
 801791c:	4630      	mov	r0, r6
 801791e:	f7e8 fc5f 	bl	80001e0 <memchr>
 8017922:	b108      	cbz	r0, 8017928 <_printf_i+0x1e4>
 8017924:	1b80      	subs	r0, r0, r6
 8017926:	6060      	str	r0, [r4, #4]
 8017928:	6863      	ldr	r3, [r4, #4]
 801792a:	6123      	str	r3, [r4, #16]
 801792c:	2300      	movs	r3, #0
 801792e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017932:	e7aa      	b.n	801788a <_printf_i+0x146>
 8017934:	6923      	ldr	r3, [r4, #16]
 8017936:	4632      	mov	r2, r6
 8017938:	4649      	mov	r1, r9
 801793a:	4640      	mov	r0, r8
 801793c:	47d0      	blx	sl
 801793e:	3001      	adds	r0, #1
 8017940:	d0ad      	beq.n	801789e <_printf_i+0x15a>
 8017942:	6823      	ldr	r3, [r4, #0]
 8017944:	079b      	lsls	r3, r3, #30
 8017946:	d413      	bmi.n	8017970 <_printf_i+0x22c>
 8017948:	68e0      	ldr	r0, [r4, #12]
 801794a:	9b03      	ldr	r3, [sp, #12]
 801794c:	4298      	cmp	r0, r3
 801794e:	bfb8      	it	lt
 8017950:	4618      	movlt	r0, r3
 8017952:	e7a6      	b.n	80178a2 <_printf_i+0x15e>
 8017954:	2301      	movs	r3, #1
 8017956:	4632      	mov	r2, r6
 8017958:	4649      	mov	r1, r9
 801795a:	4640      	mov	r0, r8
 801795c:	47d0      	blx	sl
 801795e:	3001      	adds	r0, #1
 8017960:	d09d      	beq.n	801789e <_printf_i+0x15a>
 8017962:	3501      	adds	r5, #1
 8017964:	68e3      	ldr	r3, [r4, #12]
 8017966:	9903      	ldr	r1, [sp, #12]
 8017968:	1a5b      	subs	r3, r3, r1
 801796a:	42ab      	cmp	r3, r5
 801796c:	dcf2      	bgt.n	8017954 <_printf_i+0x210>
 801796e:	e7eb      	b.n	8017948 <_printf_i+0x204>
 8017970:	2500      	movs	r5, #0
 8017972:	f104 0619 	add.w	r6, r4, #25
 8017976:	e7f5      	b.n	8017964 <_printf_i+0x220>
 8017978:	0801b074 	.word	0x0801b074
 801797c:	0801b085 	.word	0x0801b085

08017980 <__sflush_r>:
 8017980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017988:	0716      	lsls	r6, r2, #28
 801798a:	4605      	mov	r5, r0
 801798c:	460c      	mov	r4, r1
 801798e:	d454      	bmi.n	8017a3a <__sflush_r+0xba>
 8017990:	684b      	ldr	r3, [r1, #4]
 8017992:	2b00      	cmp	r3, #0
 8017994:	dc02      	bgt.n	801799c <__sflush_r+0x1c>
 8017996:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017998:	2b00      	cmp	r3, #0
 801799a:	dd48      	ble.n	8017a2e <__sflush_r+0xae>
 801799c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801799e:	2e00      	cmp	r6, #0
 80179a0:	d045      	beq.n	8017a2e <__sflush_r+0xae>
 80179a2:	2300      	movs	r3, #0
 80179a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179a8:	682f      	ldr	r7, [r5, #0]
 80179aa:	6a21      	ldr	r1, [r4, #32]
 80179ac:	602b      	str	r3, [r5, #0]
 80179ae:	d030      	beq.n	8017a12 <__sflush_r+0x92>
 80179b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179b2:	89a3      	ldrh	r3, [r4, #12]
 80179b4:	0759      	lsls	r1, r3, #29
 80179b6:	d505      	bpl.n	80179c4 <__sflush_r+0x44>
 80179b8:	6863      	ldr	r3, [r4, #4]
 80179ba:	1ad2      	subs	r2, r2, r3
 80179bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179be:	b10b      	cbz	r3, 80179c4 <__sflush_r+0x44>
 80179c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179c2:	1ad2      	subs	r2, r2, r3
 80179c4:	2300      	movs	r3, #0
 80179c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179c8:	6a21      	ldr	r1, [r4, #32]
 80179ca:	4628      	mov	r0, r5
 80179cc:	47b0      	blx	r6
 80179ce:	1c43      	adds	r3, r0, #1
 80179d0:	89a3      	ldrh	r3, [r4, #12]
 80179d2:	d106      	bne.n	80179e2 <__sflush_r+0x62>
 80179d4:	6829      	ldr	r1, [r5, #0]
 80179d6:	291d      	cmp	r1, #29
 80179d8:	d82b      	bhi.n	8017a32 <__sflush_r+0xb2>
 80179da:	4a2a      	ldr	r2, [pc, #168]	@ (8017a84 <__sflush_r+0x104>)
 80179dc:	40ca      	lsrs	r2, r1
 80179de:	07d6      	lsls	r6, r2, #31
 80179e0:	d527      	bpl.n	8017a32 <__sflush_r+0xb2>
 80179e2:	2200      	movs	r2, #0
 80179e4:	6062      	str	r2, [r4, #4]
 80179e6:	04d9      	lsls	r1, r3, #19
 80179e8:	6922      	ldr	r2, [r4, #16]
 80179ea:	6022      	str	r2, [r4, #0]
 80179ec:	d504      	bpl.n	80179f8 <__sflush_r+0x78>
 80179ee:	1c42      	adds	r2, r0, #1
 80179f0:	d101      	bne.n	80179f6 <__sflush_r+0x76>
 80179f2:	682b      	ldr	r3, [r5, #0]
 80179f4:	b903      	cbnz	r3, 80179f8 <__sflush_r+0x78>
 80179f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80179f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80179fa:	602f      	str	r7, [r5, #0]
 80179fc:	b1b9      	cbz	r1, 8017a2e <__sflush_r+0xae>
 80179fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a02:	4299      	cmp	r1, r3
 8017a04:	d002      	beq.n	8017a0c <__sflush_r+0x8c>
 8017a06:	4628      	mov	r0, r5
 8017a08:	f7ff fa94 	bl	8016f34 <_free_r>
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a10:	e00d      	b.n	8017a2e <__sflush_r+0xae>
 8017a12:	2301      	movs	r3, #1
 8017a14:	4628      	mov	r0, r5
 8017a16:	47b0      	blx	r6
 8017a18:	4602      	mov	r2, r0
 8017a1a:	1c50      	adds	r0, r2, #1
 8017a1c:	d1c9      	bne.n	80179b2 <__sflush_r+0x32>
 8017a1e:	682b      	ldr	r3, [r5, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d0c6      	beq.n	80179b2 <__sflush_r+0x32>
 8017a24:	2b1d      	cmp	r3, #29
 8017a26:	d001      	beq.n	8017a2c <__sflush_r+0xac>
 8017a28:	2b16      	cmp	r3, #22
 8017a2a:	d11e      	bne.n	8017a6a <__sflush_r+0xea>
 8017a2c:	602f      	str	r7, [r5, #0]
 8017a2e:	2000      	movs	r0, #0
 8017a30:	e022      	b.n	8017a78 <__sflush_r+0xf8>
 8017a32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a36:	b21b      	sxth	r3, r3
 8017a38:	e01b      	b.n	8017a72 <__sflush_r+0xf2>
 8017a3a:	690f      	ldr	r7, [r1, #16]
 8017a3c:	2f00      	cmp	r7, #0
 8017a3e:	d0f6      	beq.n	8017a2e <__sflush_r+0xae>
 8017a40:	0793      	lsls	r3, r2, #30
 8017a42:	680e      	ldr	r6, [r1, #0]
 8017a44:	bf08      	it	eq
 8017a46:	694b      	ldreq	r3, [r1, #20]
 8017a48:	600f      	str	r7, [r1, #0]
 8017a4a:	bf18      	it	ne
 8017a4c:	2300      	movne	r3, #0
 8017a4e:	eba6 0807 	sub.w	r8, r6, r7
 8017a52:	608b      	str	r3, [r1, #8]
 8017a54:	f1b8 0f00 	cmp.w	r8, #0
 8017a58:	dde9      	ble.n	8017a2e <__sflush_r+0xae>
 8017a5a:	6a21      	ldr	r1, [r4, #32]
 8017a5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a5e:	4643      	mov	r3, r8
 8017a60:	463a      	mov	r2, r7
 8017a62:	4628      	mov	r0, r5
 8017a64:	47b0      	blx	r6
 8017a66:	2800      	cmp	r0, #0
 8017a68:	dc08      	bgt.n	8017a7c <__sflush_r+0xfc>
 8017a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a72:	81a3      	strh	r3, [r4, #12]
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295
 8017a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a7c:	4407      	add	r7, r0
 8017a7e:	eba8 0800 	sub.w	r8, r8, r0
 8017a82:	e7e7      	b.n	8017a54 <__sflush_r+0xd4>
 8017a84:	20400001 	.word	0x20400001

08017a88 <_fflush_r>:
 8017a88:	b538      	push	{r3, r4, r5, lr}
 8017a8a:	690b      	ldr	r3, [r1, #16]
 8017a8c:	4605      	mov	r5, r0
 8017a8e:	460c      	mov	r4, r1
 8017a90:	b913      	cbnz	r3, 8017a98 <_fflush_r+0x10>
 8017a92:	2500      	movs	r5, #0
 8017a94:	4628      	mov	r0, r5
 8017a96:	bd38      	pop	{r3, r4, r5, pc}
 8017a98:	b118      	cbz	r0, 8017aa2 <_fflush_r+0x1a>
 8017a9a:	6a03      	ldr	r3, [r0, #32]
 8017a9c:	b90b      	cbnz	r3, 8017aa2 <_fflush_r+0x1a>
 8017a9e:	f7fe ff63 	bl	8016968 <__sinit>
 8017aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d0f3      	beq.n	8017a92 <_fflush_r+0xa>
 8017aaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017aac:	07d0      	lsls	r0, r2, #31
 8017aae:	d404      	bmi.n	8017aba <_fflush_r+0x32>
 8017ab0:	0599      	lsls	r1, r3, #22
 8017ab2:	d402      	bmi.n	8017aba <_fflush_r+0x32>
 8017ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ab6:	f7ff fa0e 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 8017aba:	4628      	mov	r0, r5
 8017abc:	4621      	mov	r1, r4
 8017abe:	f7ff ff5f 	bl	8017980 <__sflush_r>
 8017ac2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ac4:	07da      	lsls	r2, r3, #31
 8017ac6:	4605      	mov	r5, r0
 8017ac8:	d4e4      	bmi.n	8017a94 <_fflush_r+0xc>
 8017aca:	89a3      	ldrh	r3, [r4, #12]
 8017acc:	059b      	lsls	r3, r3, #22
 8017ace:	d4e1      	bmi.n	8017a94 <_fflush_r+0xc>
 8017ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ad2:	f7ff fa01 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017ad6:	e7dd      	b.n	8017a94 <_fflush_r+0xc>

08017ad8 <fiprintf>:
 8017ad8:	b40e      	push	{r1, r2, r3}
 8017ada:	b503      	push	{r0, r1, lr}
 8017adc:	4601      	mov	r1, r0
 8017ade:	ab03      	add	r3, sp, #12
 8017ae0:	4805      	ldr	r0, [pc, #20]	@ (8017af8 <fiprintf+0x20>)
 8017ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ae6:	6800      	ldr	r0, [r0, #0]
 8017ae8:	9301      	str	r3, [sp, #4]
 8017aea:	f7ff fca5 	bl	8017438 <_vfiprintf_r>
 8017aee:	b002      	add	sp, #8
 8017af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8017af4:	b003      	add	sp, #12
 8017af6:	4770      	bx	lr
 8017af8:	20000118 	.word	0x20000118

08017afc <__swhatbuf_r>:
 8017afc:	b570      	push	{r4, r5, r6, lr}
 8017afe:	460c      	mov	r4, r1
 8017b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b04:	2900      	cmp	r1, #0
 8017b06:	b096      	sub	sp, #88	@ 0x58
 8017b08:	4615      	mov	r5, r2
 8017b0a:	461e      	mov	r6, r3
 8017b0c:	da0d      	bge.n	8017b2a <__swhatbuf_r+0x2e>
 8017b0e:	89a3      	ldrh	r3, [r4, #12]
 8017b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017b14:	f04f 0100 	mov.w	r1, #0
 8017b18:	bf14      	ite	ne
 8017b1a:	2340      	movne	r3, #64	@ 0x40
 8017b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017b20:	2000      	movs	r0, #0
 8017b22:	6031      	str	r1, [r6, #0]
 8017b24:	602b      	str	r3, [r5, #0]
 8017b26:	b016      	add	sp, #88	@ 0x58
 8017b28:	bd70      	pop	{r4, r5, r6, pc}
 8017b2a:	466a      	mov	r2, sp
 8017b2c:	f000 f87c 	bl	8017c28 <_fstat_r>
 8017b30:	2800      	cmp	r0, #0
 8017b32:	dbec      	blt.n	8017b0e <__swhatbuf_r+0x12>
 8017b34:	9901      	ldr	r1, [sp, #4]
 8017b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017b3e:	4259      	negs	r1, r3
 8017b40:	4159      	adcs	r1, r3
 8017b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b46:	e7eb      	b.n	8017b20 <__swhatbuf_r+0x24>

08017b48 <__smakebuf_r>:
 8017b48:	898b      	ldrh	r3, [r1, #12]
 8017b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b4c:	079d      	lsls	r5, r3, #30
 8017b4e:	4606      	mov	r6, r0
 8017b50:	460c      	mov	r4, r1
 8017b52:	d507      	bpl.n	8017b64 <__smakebuf_r+0x1c>
 8017b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017b58:	6023      	str	r3, [r4, #0]
 8017b5a:	6123      	str	r3, [r4, #16]
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	6163      	str	r3, [r4, #20]
 8017b60:	b003      	add	sp, #12
 8017b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b64:	ab01      	add	r3, sp, #4
 8017b66:	466a      	mov	r2, sp
 8017b68:	f7ff ffc8 	bl	8017afc <__swhatbuf_r>
 8017b6c:	9f00      	ldr	r7, [sp, #0]
 8017b6e:	4605      	mov	r5, r0
 8017b70:	4639      	mov	r1, r7
 8017b72:	4630      	mov	r0, r6
 8017b74:	f7ff fa52 	bl	801701c <_malloc_r>
 8017b78:	b948      	cbnz	r0, 8017b8e <__smakebuf_r+0x46>
 8017b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b7e:	059a      	lsls	r2, r3, #22
 8017b80:	d4ee      	bmi.n	8017b60 <__smakebuf_r+0x18>
 8017b82:	f023 0303 	bic.w	r3, r3, #3
 8017b86:	f043 0302 	orr.w	r3, r3, #2
 8017b8a:	81a3      	strh	r3, [r4, #12]
 8017b8c:	e7e2      	b.n	8017b54 <__smakebuf_r+0xc>
 8017b8e:	89a3      	ldrh	r3, [r4, #12]
 8017b90:	6020      	str	r0, [r4, #0]
 8017b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017b96:	81a3      	strh	r3, [r4, #12]
 8017b98:	9b01      	ldr	r3, [sp, #4]
 8017b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017b9e:	b15b      	cbz	r3, 8017bb8 <__smakebuf_r+0x70>
 8017ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ba4:	4630      	mov	r0, r6
 8017ba6:	f000 f851 	bl	8017c4c <_isatty_r>
 8017baa:	b128      	cbz	r0, 8017bb8 <__smakebuf_r+0x70>
 8017bac:	89a3      	ldrh	r3, [r4, #12]
 8017bae:	f023 0303 	bic.w	r3, r3, #3
 8017bb2:	f043 0301 	orr.w	r3, r3, #1
 8017bb6:	81a3      	strh	r3, [r4, #12]
 8017bb8:	89a3      	ldrh	r3, [r4, #12]
 8017bba:	431d      	orrs	r5, r3
 8017bbc:	81a5      	strh	r5, [r4, #12]
 8017bbe:	e7cf      	b.n	8017b60 <__smakebuf_r+0x18>

08017bc0 <_putc_r>:
 8017bc0:	b570      	push	{r4, r5, r6, lr}
 8017bc2:	460d      	mov	r5, r1
 8017bc4:	4614      	mov	r4, r2
 8017bc6:	4606      	mov	r6, r0
 8017bc8:	b118      	cbz	r0, 8017bd2 <_putc_r+0x12>
 8017bca:	6a03      	ldr	r3, [r0, #32]
 8017bcc:	b90b      	cbnz	r3, 8017bd2 <_putc_r+0x12>
 8017bce:	f7fe fecb 	bl	8016968 <__sinit>
 8017bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017bd4:	07d8      	lsls	r0, r3, #31
 8017bd6:	d405      	bmi.n	8017be4 <_putc_r+0x24>
 8017bd8:	89a3      	ldrh	r3, [r4, #12]
 8017bda:	0599      	lsls	r1, r3, #22
 8017bdc:	d402      	bmi.n	8017be4 <_putc_r+0x24>
 8017bde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017be0:	f7ff f979 	bl	8016ed6 <__retarget_lock_acquire_recursive>
 8017be4:	68a3      	ldr	r3, [r4, #8]
 8017be6:	3b01      	subs	r3, #1
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	60a3      	str	r3, [r4, #8]
 8017bec:	da05      	bge.n	8017bfa <_putc_r+0x3a>
 8017bee:	69a2      	ldr	r2, [r4, #24]
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	db12      	blt.n	8017c1a <_putc_r+0x5a>
 8017bf4:	b2eb      	uxtb	r3, r5
 8017bf6:	2b0a      	cmp	r3, #10
 8017bf8:	d00f      	beq.n	8017c1a <_putc_r+0x5a>
 8017bfa:	6823      	ldr	r3, [r4, #0]
 8017bfc:	1c5a      	adds	r2, r3, #1
 8017bfe:	6022      	str	r2, [r4, #0]
 8017c00:	701d      	strb	r5, [r3, #0]
 8017c02:	b2ed      	uxtb	r5, r5
 8017c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c06:	07da      	lsls	r2, r3, #31
 8017c08:	d405      	bmi.n	8017c16 <_putc_r+0x56>
 8017c0a:	89a3      	ldrh	r3, [r4, #12]
 8017c0c:	059b      	lsls	r3, r3, #22
 8017c0e:	d402      	bmi.n	8017c16 <_putc_r+0x56>
 8017c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c12:	f7ff f961 	bl	8016ed8 <__retarget_lock_release_recursive>
 8017c16:	4628      	mov	r0, r5
 8017c18:	bd70      	pop	{r4, r5, r6, pc}
 8017c1a:	4629      	mov	r1, r5
 8017c1c:	4622      	mov	r2, r4
 8017c1e:	4630      	mov	r0, r6
 8017c20:	f7fe ffc9 	bl	8016bb6 <__swbuf_r>
 8017c24:	4605      	mov	r5, r0
 8017c26:	e7ed      	b.n	8017c04 <_putc_r+0x44>

08017c28 <_fstat_r>:
 8017c28:	b538      	push	{r3, r4, r5, lr}
 8017c2a:	4d07      	ldr	r5, [pc, #28]	@ (8017c48 <_fstat_r+0x20>)
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	4604      	mov	r4, r0
 8017c30:	4608      	mov	r0, r1
 8017c32:	4611      	mov	r1, r2
 8017c34:	602b      	str	r3, [r5, #0]
 8017c36:	f7e9 fafb 	bl	8001230 <_fstat>
 8017c3a:	1c43      	adds	r3, r0, #1
 8017c3c:	d102      	bne.n	8017c44 <_fstat_r+0x1c>
 8017c3e:	682b      	ldr	r3, [r5, #0]
 8017c40:	b103      	cbz	r3, 8017c44 <_fstat_r+0x1c>
 8017c42:	6023      	str	r3, [r4, #0]
 8017c44:	bd38      	pop	{r3, r4, r5, pc}
 8017c46:	bf00      	nop
 8017c48:	200159ec 	.word	0x200159ec

08017c4c <_isatty_r>:
 8017c4c:	b538      	push	{r3, r4, r5, lr}
 8017c4e:	4d06      	ldr	r5, [pc, #24]	@ (8017c68 <_isatty_r+0x1c>)
 8017c50:	2300      	movs	r3, #0
 8017c52:	4604      	mov	r4, r0
 8017c54:	4608      	mov	r0, r1
 8017c56:	602b      	str	r3, [r5, #0]
 8017c58:	f7e9 fafa 	bl	8001250 <_isatty>
 8017c5c:	1c43      	adds	r3, r0, #1
 8017c5e:	d102      	bne.n	8017c66 <_isatty_r+0x1a>
 8017c60:	682b      	ldr	r3, [r5, #0]
 8017c62:	b103      	cbz	r3, 8017c66 <_isatty_r+0x1a>
 8017c64:	6023      	str	r3, [r4, #0]
 8017c66:	bd38      	pop	{r3, r4, r5, pc}
 8017c68:	200159ec 	.word	0x200159ec

08017c6c <_sbrk_r>:
 8017c6c:	b538      	push	{r3, r4, r5, lr}
 8017c6e:	4d06      	ldr	r5, [pc, #24]	@ (8017c88 <_sbrk_r+0x1c>)
 8017c70:	2300      	movs	r3, #0
 8017c72:	4604      	mov	r4, r0
 8017c74:	4608      	mov	r0, r1
 8017c76:	602b      	str	r3, [r5, #0]
 8017c78:	f7e9 fb02 	bl	8001280 <_sbrk>
 8017c7c:	1c43      	adds	r3, r0, #1
 8017c7e:	d102      	bne.n	8017c86 <_sbrk_r+0x1a>
 8017c80:	682b      	ldr	r3, [r5, #0]
 8017c82:	b103      	cbz	r3, 8017c86 <_sbrk_r+0x1a>
 8017c84:	6023      	str	r3, [r4, #0]
 8017c86:	bd38      	pop	{r3, r4, r5, pc}
 8017c88:	200159ec 	.word	0x200159ec

08017c8c <abort>:
 8017c8c:	b508      	push	{r3, lr}
 8017c8e:	2006      	movs	r0, #6
 8017c90:	f000 f85a 	bl	8017d48 <raise>
 8017c94:	2001      	movs	r0, #1
 8017c96:	f7e9 fa7b 	bl	8001190 <_exit>

08017c9a <_realloc_r>:
 8017c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c9e:	4607      	mov	r7, r0
 8017ca0:	4614      	mov	r4, r2
 8017ca2:	460d      	mov	r5, r1
 8017ca4:	b921      	cbnz	r1, 8017cb0 <_realloc_r+0x16>
 8017ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017caa:	4611      	mov	r1, r2
 8017cac:	f7ff b9b6 	b.w	801701c <_malloc_r>
 8017cb0:	b92a      	cbnz	r2, 8017cbe <_realloc_r+0x24>
 8017cb2:	f7ff f93f 	bl	8016f34 <_free_r>
 8017cb6:	4625      	mov	r5, r4
 8017cb8:	4628      	mov	r0, r5
 8017cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cbe:	f000 f85f 	bl	8017d80 <_malloc_usable_size_r>
 8017cc2:	4284      	cmp	r4, r0
 8017cc4:	4606      	mov	r6, r0
 8017cc6:	d802      	bhi.n	8017cce <_realloc_r+0x34>
 8017cc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ccc:	d8f4      	bhi.n	8017cb8 <_realloc_r+0x1e>
 8017cce:	4621      	mov	r1, r4
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	f7ff f9a3 	bl	801701c <_malloc_r>
 8017cd6:	4680      	mov	r8, r0
 8017cd8:	b908      	cbnz	r0, 8017cde <_realloc_r+0x44>
 8017cda:	4645      	mov	r5, r8
 8017cdc:	e7ec      	b.n	8017cb8 <_realloc_r+0x1e>
 8017cde:	42b4      	cmp	r4, r6
 8017ce0:	4622      	mov	r2, r4
 8017ce2:	4629      	mov	r1, r5
 8017ce4:	bf28      	it	cs
 8017ce6:	4632      	movcs	r2, r6
 8017ce8:	f7ff f8f7 	bl	8016eda <memcpy>
 8017cec:	4629      	mov	r1, r5
 8017cee:	4638      	mov	r0, r7
 8017cf0:	f7ff f920 	bl	8016f34 <_free_r>
 8017cf4:	e7f1      	b.n	8017cda <_realloc_r+0x40>

08017cf6 <_raise_r>:
 8017cf6:	291f      	cmp	r1, #31
 8017cf8:	b538      	push	{r3, r4, r5, lr}
 8017cfa:	4605      	mov	r5, r0
 8017cfc:	460c      	mov	r4, r1
 8017cfe:	d904      	bls.n	8017d0a <_raise_r+0x14>
 8017d00:	2316      	movs	r3, #22
 8017d02:	6003      	str	r3, [r0, #0]
 8017d04:	f04f 30ff 	mov.w	r0, #4294967295
 8017d08:	bd38      	pop	{r3, r4, r5, pc}
 8017d0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017d0c:	b112      	cbz	r2, 8017d14 <_raise_r+0x1e>
 8017d0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d12:	b94b      	cbnz	r3, 8017d28 <_raise_r+0x32>
 8017d14:	4628      	mov	r0, r5
 8017d16:	f000 f831 	bl	8017d7c <_getpid_r>
 8017d1a:	4622      	mov	r2, r4
 8017d1c:	4601      	mov	r1, r0
 8017d1e:	4628      	mov	r0, r5
 8017d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d24:	f000 b818 	b.w	8017d58 <_kill_r>
 8017d28:	2b01      	cmp	r3, #1
 8017d2a:	d00a      	beq.n	8017d42 <_raise_r+0x4c>
 8017d2c:	1c59      	adds	r1, r3, #1
 8017d2e:	d103      	bne.n	8017d38 <_raise_r+0x42>
 8017d30:	2316      	movs	r3, #22
 8017d32:	6003      	str	r3, [r0, #0]
 8017d34:	2001      	movs	r0, #1
 8017d36:	e7e7      	b.n	8017d08 <_raise_r+0x12>
 8017d38:	2100      	movs	r1, #0
 8017d3a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017d3e:	4620      	mov	r0, r4
 8017d40:	4798      	blx	r3
 8017d42:	2000      	movs	r0, #0
 8017d44:	e7e0      	b.n	8017d08 <_raise_r+0x12>
	...

08017d48 <raise>:
 8017d48:	4b02      	ldr	r3, [pc, #8]	@ (8017d54 <raise+0xc>)
 8017d4a:	4601      	mov	r1, r0
 8017d4c:	6818      	ldr	r0, [r3, #0]
 8017d4e:	f7ff bfd2 	b.w	8017cf6 <_raise_r>
 8017d52:	bf00      	nop
 8017d54:	20000118 	.word	0x20000118

08017d58 <_kill_r>:
 8017d58:	b538      	push	{r3, r4, r5, lr}
 8017d5a:	4d07      	ldr	r5, [pc, #28]	@ (8017d78 <_kill_r+0x20>)
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4604      	mov	r4, r0
 8017d60:	4608      	mov	r0, r1
 8017d62:	4611      	mov	r1, r2
 8017d64:	602b      	str	r3, [r5, #0]
 8017d66:	f7e9 fa01 	bl	800116c <_kill>
 8017d6a:	1c43      	adds	r3, r0, #1
 8017d6c:	d102      	bne.n	8017d74 <_kill_r+0x1c>
 8017d6e:	682b      	ldr	r3, [r5, #0]
 8017d70:	b103      	cbz	r3, 8017d74 <_kill_r+0x1c>
 8017d72:	6023      	str	r3, [r4, #0]
 8017d74:	bd38      	pop	{r3, r4, r5, pc}
 8017d76:	bf00      	nop
 8017d78:	200159ec 	.word	0x200159ec

08017d7c <_getpid_r>:
 8017d7c:	f7e9 b9ee 	b.w	800115c <_getpid>

08017d80 <_malloc_usable_size_r>:
 8017d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d84:	1f18      	subs	r0, r3, #4
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	bfbc      	itt	lt
 8017d8a:	580b      	ldrlt	r3, [r1, r0]
 8017d8c:	18c0      	addlt	r0, r0, r3
 8017d8e:	4770      	bx	lr

08017d90 <_init>:
 8017d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d92:	bf00      	nop
 8017d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d96:	bc08      	pop	{r3}
 8017d98:	469e      	mov	lr, r3
 8017d9a:	4770      	bx	lr

08017d9c <_fini>:
 8017d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d9e:	bf00      	nop
 8017da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017da2:	bc08      	pop	{r3}
 8017da4:	469e      	mov	lr, r3
 8017da6:	4770      	bx	lr

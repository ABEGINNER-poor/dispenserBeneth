
dispenserBeneth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004940  0801ea30  0801ea30  0001fa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023370  08023370  00025168  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023370  08023370  00024370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023378  08023378  00025168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023378  08023378  00024378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802337c  0802337c  0002437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08023380  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00025168  2**0
                  CONTENTS
 10 .bss          0000e6e4  20000168  20000168  00025168  2**2
                  ALLOC
 11 .eth_desc     00000014  2000e84c  2000e84c  00025168  2**0
                  ALLOC
 12 .eth_buf      00000000  2000e860  2000e860  00025168  2**0
                  CONTENTS
 13 ._user_heap_stack 00000600  2000e860  2000e860  00025168  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003d252  00000000  00000000  00025198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a3ac  00000000  00000000  000623ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c80  00000000  00000000  0006c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000022ee  00000000  00000000  0006f418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037991  00000000  00000000  00071706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047970  00000000  00000000  000a9097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f75a9  00000000  00000000  000f0a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e7fb0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c1bc  00000000  00000000  001e7ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001f41b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ea18 	.word	0x0801ea18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	0801ea18 	.word	0x0801ea18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <app_business_init>:

/**
  * @brief  初始化应用层业务逻辑
  * @retval None
  */
void app_business_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
    // 初始化寄存器默认值
    
    // 初始化舵机相关寄存器
    holding_regs[REG_ROTATION_TRIGGER] = 3;               // 40023 转动触发：3=上电初始化值
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <app_business_init+0xd0>)
 80005b4:	2203      	movs	r2, #3
 80005b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    // 初始化当前角度寄存器为默认值500 (40017-40022)
    holding_regs[REG_CURRENT_ANGLE1] = 500;
 80005b8:	4b30      	ldr	r3, [pc, #192]	@ (800067c <app_business_init+0xd0>)
 80005ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005be:	845a      	strh	r2, [r3, #34]	@ 0x22
    holding_regs[REG_CURRENT_ANGLE2] = 500;
 80005c0:	4b2e      	ldr	r3, [pc, #184]	@ (800067c <app_business_init+0xd0>)
 80005c2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    holding_regs[REG_CURRENT_ANGLE3] = 500;
 80005c8:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <app_business_init+0xd0>)
 80005ca:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    holding_regs[REG_CURRENT_ANGLE4] = 500;
 80005d0:	4b2a      	ldr	r3, [pc, #168]	@ (800067c <app_business_init+0xd0>)
 80005d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    holding_regs[REG_CURRENT_ANGLE5] = 500;
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <app_business_init+0xd0>)
 80005da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    holding_regs[REG_CURRENT_ANGLE6] = 500;
 80005e0:	4b26      	ldr	r3, [pc, #152]	@ (800067c <app_business_init+0xd0>)
 80005e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    
    // 初始化泵相关寄存器
    holding_regs[REG_PUMP1_STATUS] = 999;                 // 40029 泵1状态：999=未知状态，等待查询
 80005e8:	4b24      	ldr	r3, [pc, #144]	@ (800067c <app_business_init+0xd0>)
 80005ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005ee:	875a      	strh	r2, [r3, #58]	@ 0x3a
    holding_regs[REG_PUMP2_STATUS] = 999;                 // 40034 泵2状态：999=未知状态，等待查询
 80005f0:	4b22      	ldr	r3, [pc, #136]	@ (800067c <app_business_init+0xd0>)
 80005f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    
    // 初始化业务状态变量
    last_rotation_trigger = 3;    // 对应寄存器的初始值
 80005fa:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <app_business_init+0xd4>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
    last_weight_control = 0;
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <app_business_init+0xd8>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
    last_pump1_init_trigger = 0;
 8000606:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <app_business_init+0xdc>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
    last_pump1_control_trigger = 0;
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <app_business_init+0xe0>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
    last_pump2_init_trigger = 0;
 8000612:	4b1f      	ldr	r3, [pc, #124]	@ (8000690 <app_business_init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
    last_pump2_control_trigger = 0;
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <app_business_init+0xe8>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
    
    // 初始化泵状态变量
    pump1_busy = 0;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <app_business_init+0xec>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
    pump2_busy = 0;
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <app_business_init+0xf0>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
    pump1_current_pos = 0;
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <app_business_init+0xf4>)
 800062c:	2200      	movs	r2, #0
 800062e:	801a      	strh	r2, [r3, #0]
    pump2_current_pos = 0;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <app_business_init+0xf8>)
 8000632:	2200      	movs	r2, #0
 8000634:	801a      	strh	r2, [r3, #0]
    pump1_move_start_time = 0;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <app_business_init+0xfc>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
    pump2_move_start_time = 0;
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <app_business_init+0x100>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
    
    // 初始化舵机状态变量
    servo_moving = 0;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <app_business_init+0x104>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
    servo_move_start_time = 0;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <app_business_init+0x108>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	e008      	b.n	8000666 <app_business_init+0xba>
        servo_current_positions[i] = 500;  // 默认位置500
 8000654:	4a18      	ldr	r2, [pc, #96]	@ (80006b8 <app_business_init+0x10c>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800065c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 6; i++) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b05      	cmp	r3, #5
 800066a:	ddf3      	ble.n	8000654 <app_business_init+0xa8>
    }
    
    cdc_debug_print("Business logic initialized");
 800066c:	4813      	ldr	r0, [pc, #76]	@ (80006bc <app_business_init+0x110>)
 800066e:	f000 f833 	bl	80006d8 <cdc_debug_print>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000590 	.word	0x20000590
 8000680:	20000184 	.word	0x20000184
 8000684:	20000188 	.word	0x20000188
 8000688:	2000018c 	.word	0x2000018c
 800068c:	20000190 	.word	0x20000190
 8000690:	20000194 	.word	0x20000194
 8000694:	20000198 	.word	0x20000198
 8000698:	2000021c 	.word	0x2000021c
 800069c:	2000021d 	.word	0x2000021d
 80006a0:	2000021e 	.word	0x2000021e
 80006a4:	20000220 	.word	0x20000220
 80006a8:	20000224 	.word	0x20000224
 80006ac:	20000228 	.word	0x20000228
 80006b0:	2000022c 	.word	0x2000022c
 80006b4:	20000230 	.word	0x20000230
 80006b8:	20000234 	.word	0x20000234
 80006bc:	0801ea30 	.word	0x0801ea30

080006c0 <app_business_process>:

/**
  * @brief  主业务逻辑处理函数 - 每100ms调用一次
  * @retval None
  */
void app_business_process(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    // 1. 处理舵机相关命令
    process_servo_commands();
 80006c4:	f000 f828 	bl	8000718 <process_servo_commands>
    
    // 2. 处理称重相关命令
    process_weight_commands();
 80006c8:	f000 f906 	bl	80008d8 <process_weight_commands>
    
    // 3. 处理泵相关命令
    process_pump_commands();
 80006cc:	f000 f926 	bl	800091c <process_pump_commands>
    
    // 4. 更新传感器数据 (只读寄存器)
    update_sensor_data();
 80006d0:	f000 fada 	bl	8000c88 <update_sensor_data>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <cdc_debug_print>:
/**
  * @brief  调试信息输出函数
  * @param  message: 要输出的调试信息
  * @retval None
  */
static void cdc_debug_print(const char* message) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    int len = snprintf(debug_buf, sizeof(debug_buf), "[BUSINESS] %s\r\n", message);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <cdc_debug_print+0x38>)
 80006e4:	2180      	movs	r1, #128	@ 0x80
 80006e6:	480b      	ldr	r0, [pc, #44]	@ (8000714 <cdc_debug_print+0x3c>)
 80006e8:	f01d f83a 	bl	801d760 <sniprintf>
 80006ec:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(debug_buf)) {
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	dd08      	ble.n	8000706 <cdc_debug_print+0x2e>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80006f8:	d805      	bhi.n	8000706 <cdc_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)debug_buf, len);  // 暂时启用调试输出
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <cdc_debug_print+0x3c>)
 8000702:	f01c fa37 	bl	801cb74 <CDC_Transmit_FS>
    }
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	0801ea4c 	.word	0x0801ea4c
 8000714:	2000019c 	.word	0x2000019c

08000718 <process_servo_commands>:

/**
  * @brief  处理舵机相关命令
  * @retval None
  */
static void process_servo_commands(void) {
 8000718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071a:	b0ad      	sub	sp, #180	@ 0xb4
 800071c:	af06      	add	r7, sp, #24
    // 状态机逻辑：
    // 1 = 正在执行任务（忙）
    // 2 = 任务完成，可重新写入1开始新任务
    // 3 = 上电初始化值，可接受写入1
    // 当写入1时执行移动，执行期间保持状态1，完成后置为状态2
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800071e:	4b63      	ldr	r3, [pc, #396]	@ (80008ac <process_servo_commands+0x194>)
 8000720:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000722:	2b01      	cmp	r3, #1
 8000724:	f040 80ac 	bne.w	8000880 <process_servo_commands+0x168>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000728:	4b61      	ldr	r3, [pc, #388]	@ (80008b0 <process_servo_commands+0x198>)
 800072a:	681b      	ldr	r3, [r3, #0]
    if (holding_regs[REG_ROTATION_TRIGGER] == 1 && 
 800072c:	2b02      	cmp	r3, #2
 800072e:	d004      	beq.n	800073a <process_servo_commands+0x22>
        (last_rotation_trigger == 2 || last_rotation_trigger == 3)) {  // 只有从状态2或3才能接受状态1
 8000730:	4b5f      	ldr	r3, [pc, #380]	@ (80008b0 <process_servo_commands+0x198>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b03      	cmp	r3, #3
 8000736:	f040 80a3 	bne.w	8000880 <process_servo_commands+0x168>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800073a:	4b5e      	ldr	r3, [pc, #376]	@ (80008b4 <process_servo_commands+0x19c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f040 809a 	bne.w	8000878 <process_servo_commands+0x160>
            cdc_debug_print("Servo rotation triggered, status 1 (busy)");
 8000744:	485c      	ldr	r0, [pc, #368]	@ (80008b8 <process_servo_commands+0x1a0>)
 8000746:	f7ff ffc7 	bl	80006d8 <cdc_debug_print>
            
            // 获取转动时间 (40010) - 现在只用一个寄存器
            uint16_t rotation_time = holding_regs[REG_ROTATION_TIME];
 800074a:	4b58      	ldr	r3, [pc, #352]	@ (80008ac <process_servo_commands+0x194>)
 800074c:	8a9b      	ldrh	r3, [r3, #20]
 800074e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
            
            // 验证转动时间范围 (1-65535ms)
            if (rotation_time == 0) {
 8000752:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000756:	2b00      	cmp	r3, #0
 8000758:	d106      	bne.n	8000768 <process_servo_commands+0x50>
                rotation_time = 1000;  // 默认1秒
 800075a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
                cdc_debug_print("Using default rotation time: 1000ms");
 8000762:	4856      	ldr	r0, [pc, #344]	@ (80008bc <process_servo_commands+0x1a4>)
 8000764:	f7ff ffb8 	bl	80006d8 <cdc_debug_print>
            }
            
            // 获取目标角度 (40011-40016，每个角度占用1个寄存器)
            uint16_t target_angles[6];
            target_angles[0] = holding_regs[REG_TARGET_ANGLE1];
 8000768:	4b50      	ldr	r3, [pc, #320]	@ (80008ac <process_servo_commands+0x194>)
 800076a:	8adb      	ldrh	r3, [r3, #22]
 800076c:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
            target_angles[1] = holding_regs[REG_TARGET_ANGLE2];
 8000770:	4b4e      	ldr	r3, [pc, #312]	@ (80008ac <process_servo_commands+0x194>)
 8000772:	8b1b      	ldrh	r3, [r3, #24]
 8000774:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            target_angles[2] = holding_regs[REG_TARGET_ANGLE3];
 8000778:	4b4c      	ldr	r3, [pc, #304]	@ (80008ac <process_servo_commands+0x194>)
 800077a:	8b5b      	ldrh	r3, [r3, #26]
 800077c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
            target_angles[3] = holding_regs[REG_TARGET_ANGLE4];
 8000780:	4b4a      	ldr	r3, [pc, #296]	@ (80008ac <process_servo_commands+0x194>)
 8000782:	8b9b      	ldrh	r3, [r3, #28]
 8000784:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
            target_angles[4] = holding_regs[REG_TARGET_ANGLE5];
 8000788:	4b48      	ldr	r3, [pc, #288]	@ (80008ac <process_servo_commands+0x194>)
 800078a:	8bdb      	ldrh	r3, [r3, #30]
 800078c:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
            target_angles[5] = holding_regs[REG_TARGET_ANGLE6];
 8000790:	4b46      	ldr	r3, [pc, #280]	@ (80008ac <process_servo_commands+0x194>)
 8000792:	8c1b      	ldrh	r3, [r3, #32]
 8000794:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
            
            // 验证角度范围 (0-1000)
            for (int i = 0; i < 6; i++) {
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800079e:	e02c      	b.n	80007fa <process_servo_commands+0xe2>
                if (target_angles[i] > 1000) {
 80007a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	3398      	adds	r3, #152	@ 0x98
 80007a8:	443b      	add	r3, r7
 80007aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007b2:	d91d      	bls.n	80007f0 <process_servo_commands+0xd8>
                    char warning_msg[60];
                    snprintf(warning_msg, sizeof(warning_msg), "Servo%d angle limited to 1000 (was %d)", i+1, target_angles[i]);
 80007b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007b8:	1c5a      	adds	r2, r3, #1
 80007ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	3398      	adds	r3, #152	@ 0x98
 80007c2:	443b      	add	r3, r7
 80007c4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80007c8:	1d38      	adds	r0, r7, #4
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	4a3c      	ldr	r2, [pc, #240]	@ (80008c0 <process_servo_commands+0x1a8>)
 80007d0:	213c      	movs	r1, #60	@ 0x3c
 80007d2:	f01c ffc5 	bl	801d760 <sniprintf>
                    cdc_debug_print(warning_msg);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff7d 	bl	80006d8 <cdc_debug_print>
                    target_angles[i] = 1000;
 80007de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	3398      	adds	r3, #152	@ 0x98
 80007e6:	443b      	add	r3, r7
 80007e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ec:	f823 2c14 	strh.w	r2, [r3, #-20]
            for (int i = 0; i < 6; i++) {
 80007f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007f4:	3301      	adds	r3, #1
 80007f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80007fe:	2b05      	cmp	r3, #5
 8000800:	ddce      	ble.n	80007a0 <process_servo_commands+0x88>
            }
            
            // 调试信息：显示所有目标角度
            char angles_msg[128];
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
                    target_angles[0], target_angles[1], target_angles[2], 
 8000802:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000806:	469c      	mov	ip, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 8000808:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800080c:	461a      	mov	r2, r3
                    target_angles[0], target_angles[1], target_angles[2], 
 800080e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000812:	4619      	mov	r1, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000814:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000818:	461c      	mov	r4, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 800081a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 800081e:	461d      	mov	r5, r3
                    target_angles[3], target_angles[4], target_angles[5], rotation_time);
 8000820:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
            snprintf(angles_msg, sizeof(angles_msg), "Target angles: [%d,%d,%d,%d,%d,%d] Time:%dms", 
 8000824:	461e      	mov	r6, r3
 8000826:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800082a:	1d38      	adds	r0, r7, #4
 800082c:	9305      	str	r3, [sp, #20]
 800082e:	9604      	str	r6, [sp, #16]
 8000830:	9503      	str	r5, [sp, #12]
 8000832:	9402      	str	r4, [sp, #8]
 8000834:	9101      	str	r1, [sp, #4]
 8000836:	9200      	str	r2, [sp, #0]
 8000838:	4663      	mov	r3, ip
 800083a:	4a22      	ldr	r2, [pc, #136]	@ (80008c4 <process_servo_commands+0x1ac>)
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	f01c ff8f 	bl	801d760 <sniprintf>
            cdc_debug_print(angles_msg);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ff47 	bl	80006d8 <cdc_debug_print>
            
            // 发送舵机控制命令到各个舵机 (ID 1-6)
            servo_move_all(target_angles, rotation_time);
 800084a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 800084e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fbf7 	bl	8001048 <servo_move_all>
            
            // 设置移动状态
            servo_moving = 1;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <process_servo_commands+0x19c>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
            servo_move_start_time = HAL_GetTick();
 8000860:	f003 ffc4 	bl	80047ec <HAL_GetTick>
 8000864:	4603      	mov	r3, r0
 8000866:	4a18      	ldr	r2, [pc, #96]	@ (80008c8 <process_servo_commands+0x1b0>)
 8000868:	6013      	str	r3, [r2, #0]
            
            // 状态保持为1表示正在执行任务（忙）
            // holding_regs[REG_ROTATION_TRIGGER] = 1;  // 状态已经是1，不需要改变
            last_rotation_trigger = 1;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <process_servo_commands+0x198>)
 800086c:	2201      	movs	r2, #1
 800086e:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo rotation commands sent, status remains 1 (busy)");
 8000870:	4816      	ldr	r0, [pc, #88]	@ (80008cc <process_servo_commands+0x1b4>)
 8000872:	f7ff ff31 	bl	80006d8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 8000876:	e00e      	b.n	8000896 <process_servo_commands+0x17e>
        } else {
            cdc_debug_print("Servos are busy, ignoring rotation command");
 8000878:	4815      	ldr	r0, [pc, #84]	@ (80008d0 <process_servo_commands+0x1b8>)
 800087a:	f7ff ff2d 	bl	80006d8 <cdc_debug_print>
        if (!servo_moving) {  // 只有在舵机不在移动时才处理新命令
 800087e:	e00a      	b.n	8000896 <process_servo_commands+0x17e>
        }
    } else if (holding_regs[REG_ROTATION_TRIGGER] == 1 && last_rotation_trigger == 1) {
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <process_servo_commands+0x194>)
 8000882:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8000884:	2b01      	cmp	r3, #1
 8000886:	d106      	bne.n	8000896 <process_servo_commands+0x17e>
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <process_servo_commands+0x198>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d102      	bne.n	8000896 <process_servo_commands+0x17e>
        // 如果连续写入1，给出警告（系统正忙）
        cdc_debug_print("Warning: Servo rotation command ignored - system busy (status 1)");
 8000890:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <process_servo_commands+0x1bc>)
 8000892:	f7ff ff21 	bl	80006d8 <cdc_debug_print>
    }
    
    // 更新舵机状态（检查是否完成移动）
    servo_update_status();
 8000896:	f000 fca3 	bl	80011e0 <servo_update_status>
    
    // 更新上次状态
    last_rotation_trigger = holding_regs[REG_ROTATION_TRIGGER];
 800089a:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <process_servo_commands+0x194>)
 800089c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800089e:	461a      	mov	r2, r3
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <process_servo_commands+0x198>)
 80008a2:	601a      	str	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	379c      	adds	r7, #156	@ 0x9c
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ac:	20000590 	.word	0x20000590
 80008b0:	20000184 	.word	0x20000184
 80008b4:	2000022c 	.word	0x2000022c
 80008b8:	0801ea5c 	.word	0x0801ea5c
 80008bc:	0801ea88 	.word	0x0801ea88
 80008c0:	0801eaac 	.word	0x0801eaac
 80008c4:	0801ead4 	.word	0x0801ead4
 80008c8:	20000230 	.word	0x20000230
 80008cc:	0801eb04 	.word	0x0801eb04
 80008d0:	0801eb3c 	.word	0x0801eb3c
 80008d4:	0801eb68 	.word	0x0801eb68

080008d8 <process_weight_commands>:

/**
  * @brief  处理称重相关命令
  * @retval None
  */
static void process_weight_commands(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    // 检查称重控制位 (40040)
    if (holding_regs[REG_WEIGHT_CONTROL] == 1 && last_weight_control != 1) {
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <process_weight_commands+0x34>)
 80008de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10c      	bne.n	80008fe <process_weight_commands+0x26>
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <process_weight_commands+0x38>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d008      	beq.n	80008fe <process_weight_commands+0x26>
        cdc_debug_print("Weight measurement started");
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <process_weight_commands+0x3c>)
 80008ee:	f7ff fef3 	bl	80006d8 <cdc_debug_print>
        
        // 置为忙状态
        holding_regs[REG_WEIGHT_CONTROL] = 2;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <process_weight_commands+0x34>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	865a      	strh	r2, [r3, #50]	@ 0x32
        
        // 4. 称重完成，置状态为3
        holding_regs[REG_WEIGHT_CONTROL] = 3;
        */
        
        cdc_debug_print("Weight measurement in progress");
 80008f8:	4807      	ldr	r0, [pc, #28]	@ (8000918 <process_weight_commands+0x40>)
 80008fa:	f7ff feed 	bl	80006d8 <cdc_debug_print>
    }
    
    // 更新上次状态
    last_weight_control = holding_regs[REG_WEIGHT_CONTROL];
 80008fe:	4b03      	ldr	r3, [pc, #12]	@ (800090c <process_weight_commands+0x34>)
 8000900:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000902:	461a      	mov	r2, r3
 8000904:	4b02      	ldr	r3, [pc, #8]	@ (8000910 <process_weight_commands+0x38>)
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000590 	.word	0x20000590
 8000910:	20000188 	.word	0x20000188
 8000914:	0801ebac 	.word	0x0801ebac
 8000918:	0801ebc8 	.word	0x0801ebc8

0800091c <process_pump_commands>:

/**
  * @brief  处理泵相关命令
  * @retval None
  */
static void process_pump_commands(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	@ 0x60
 8000920:	af02      	add	r7, sp, #8
    // 处理泵1命令
    // 检查泵1初始化触发 (40026) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 8000922:	4ba3      	ldr	r3, [pc, #652]	@ (8000bb0 <process_pump_commands+0x294>)
 8000924:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000926:	2b01      	cmp	r3, #1
 8000928:	d121      	bne.n	800096e <process_pump_commands+0x52>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 800092a:	4ba1      	ldr	r3, [pc, #644]	@ (8000bb0 <process_pump_commands+0x294>)
 800092c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11d      	bne.n	800096e <process_pump_commands+0x52>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000932:	4ba0      	ldr	r3, [pc, #640]	@ (8000bb4 <process_pump_commands+0x298>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d119      	bne.n	800096e <process_pump_commands+0x52>
        cdc_debug_print("Pump1 initialization triggered (idle & no error)");
 800093a:	489f      	ldr	r0, [pc, #636]	@ (8000bb8 <process_pump_commands+0x29c>)
 800093c:	f7ff fecc 	bl	80006d8 <cdc_debug_print>
        
        // 发送泵1初始化命令
        if (pump_init_device(1) == 0) {
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f9e7 	bl	8000d14 <pump_init_device>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <process_pump_commands+0x44>
            cdc_debug_print("Pump1 init command sent successfully");
 800094c:	489b      	ldr	r0, [pc, #620]	@ (8000bbc <process_pump_commands+0x2a0>)
 800094e:	f7ff fec3 	bl	80006d8 <cdc_debug_print>
            // 发送后立即置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000952:	4b97      	ldr	r3, [pc, #604]	@ (8000bb0 <process_pump_commands+0x294>)
 8000954:	2202      	movs	r2, #2
 8000956:	869a      	strh	r2, [r3, #52]	@ 0x34
            last_pump1_init_trigger = 2;
 8000958:	4b99      	ldr	r3, [pc, #612]	@ (8000bc0 <process_pump_commands+0x2a4>)
 800095a:	2202      	movs	r2, #2
 800095c:	601a      	str	r2, [r3, #0]
        if (pump_init_device(1) == 0) {
 800095e:	e025      	b.n	80009ac <process_pump_commands+0x90>
        } else {
            cdc_debug_print("Pump1 init command failed");
 8000960:	4898      	ldr	r0, [pc, #608]	@ (8000bc4 <process_pump_commands+0x2a8>)
 8000962:	f7ff feb9 	bl	80006d8 <cdc_debug_print>
            // 发送失败也置状态为2
            holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 8000966:	4b92      	ldr	r3, [pc, #584]	@ (8000bb0 <process_pump_commands+0x294>)
 8000968:	2202      	movs	r2, #2
 800096a:	869a      	strh	r2, [r3, #52]	@ 0x34
        if (pump_init_device(1) == 0) {
 800096c:	e01e      	b.n	80009ac <process_pump_commands+0x90>
        }
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800096e:	4b90      	ldr	r3, [pc, #576]	@ (8000bb0 <process_pump_commands+0x294>)
 8000970:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000972:	2b01      	cmp	r3, #1
 8000974:	d11a      	bne.n	80009ac <process_pump_commands+0x90>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000976:	4b8e      	ldr	r3, [pc, #568]	@ (8000bb0 <process_pump_commands+0x294>)
 8000978:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_INIT_TRIGGER] == 1 && 
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <process_pump_commands+0x6a>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 800097e:	4b8d      	ldr	r3, [pc, #564]	@ (8000bb4 <process_pump_commands+0x298>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d112      	bne.n	80009ac <process_pump_commands+0x90>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000986:	4b8a      	ldr	r3, [pc, #552]	@ (8000bb0 <process_pump_commands+0x294>)
 8000988:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 init rejected: error=%d, busy=%d", 
 800098a:	461a      	mov	r2, r3
 800098c:	4b89      	ldr	r3, [pc, #548]	@ (8000bb4 <process_pump_commands+0x298>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	1d38      	adds	r0, r7, #4
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4613      	mov	r3, r2
 8000996:	4a8c      	ldr	r2, [pc, #560]	@ (8000bc8 <process_pump_commands+0x2ac>)
 8000998:	2150      	movs	r1, #80	@ 0x50
 800099a:	f01c fee1 	bl	801d760 <sniprintf>
        cdc_debug_print(reject_msg);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fe99 	bl	80006d8 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP1_INIT_TRIGGER] = 2;
 80009a6:	4b82      	ldr	r3, [pc, #520]	@ (8000bb0 <process_pump_commands+0x294>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
    
    // 检查泵1控制触发 (40028) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009ac:	4b80      	ldr	r3, [pc, #512]	@ (8000bb0 <process_pump_commands+0x294>)
 80009ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d145      	bne.n	8000a40 <process_pump_commands+0x124>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009b4:	4b7e      	ldr	r3, [pc, #504]	@ (8000bb0 <process_pump_commands+0x294>)
 80009b6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d141      	bne.n	8000a40 <process_pump_commands+0x124>
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 80009bc:	4b7d      	ldr	r3, [pc, #500]	@ (8000bb4 <process_pump_commands+0x298>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d13d      	bne.n	8000a40 <process_pump_commands+0x124>
        cdc_debug_print("Pump1 control triggered (idle & no error)");
 80009c4:	4881      	ldr	r0, [pc, #516]	@ (8000bcc <process_pump_commands+0x2b0>)
 80009c6:	f7ff fe87 	bl	80006d8 <cdc_debug_print>
        
        // 获取目标位置 (40027)
        uint16_t target_position = holding_regs[REG_PUMP1_ABS_POSITION];
 80009ca:	4b79      	ldr	r3, [pc, #484]	@ (8000bb0 <process_pump_commands+0x294>)
 80009cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80009ce:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        
        // 验证目标位置范围 (0-6000)
        if (target_position <= 6000) {
 80009d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009d6:	f241 7270 	movw	r2, #6000	@ 0x1770
 80009da:	4293      	cmp	r3, r2
 80009dc:	d829      	bhi.n	8000a32 <process_pump_commands+0x116>
            // 发送泵1移动命令
            if (pump_move_absolute_device(1, target_position) == 0) {
 80009de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80009e2:	4619      	mov	r1, r3
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 f9a3 	bl	8000d30 <pump_move_absolute_device>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d119      	bne.n	8000a24 <process_pump_commands+0x108>
                pump1_move_start_time = HAL_GetTick();  // 记录开始时间
 80009f0:	f003 fefc 	bl	80047ec <HAL_GetTick>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a76      	ldr	r2, [pc, #472]	@ (8000bd0 <process_pump_commands+0x2b4>)
 80009f8:	6013      	str	r3, [r2, #0]
                cdc_debug_print("Pump1 move command sent successfully");
 80009fa:	4876      	ldr	r0, [pc, #472]	@ (8000bd4 <process_pump_commands+0x2b8>)
 80009fc:	f7ff fe6c 	bl	80006d8 <cdc_debug_print>
                
                // 调试信息：显示目标位置
                char pos_msg[50];
                snprintf(pos_msg, sizeof(pos_msg), "Pump1 moving to position: %d", target_position);
 8000a00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000a04:	1d38      	adds	r0, r7, #4
 8000a06:	4a74      	ldr	r2, [pc, #464]	@ (8000bd8 <process_pump_commands+0x2bc>)
 8000a08:	2132      	movs	r1, #50	@ 0x32
 8000a0a:	f01c fea9 	bl	801d760 <sniprintf>
                cdc_debug_print(pos_msg);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe61 	bl	80006d8 <cdc_debug_print>
                
                // 发送后立即置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a16:	4b66      	ldr	r3, [pc, #408]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a18:	2202      	movs	r2, #2
 8000a1a:	871a      	strh	r2, [r3, #56]	@ 0x38
                last_pump1_control_trigger = 2;
 8000a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8000bdc <process_pump_commands+0x2c0>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a22:	e02c      	b.n	8000a7e <process_pump_commands+0x162>
            } else {
                cdc_debug_print("Pump1 move command failed");
 8000a24:	486e      	ldr	r0, [pc, #440]	@ (8000be0 <process_pump_commands+0x2c4>)
 8000a26:	f7ff fe57 	bl	80006d8 <cdc_debug_print>
                // 发送失败也置状态为2
                holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a2a:	4b61      	ldr	r3, [pc, #388]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a30:	e025      	b.n	8000a7e <process_pump_commands+0x162>
            }
        } else {
            cdc_debug_print("Pump1 target position out of range (0-6000)");
 8000a32:	486c      	ldr	r0, [pc, #432]	@ (8000be4 <process_pump_commands+0x2c8>)
 8000a34:	f7ff fe50 	bl	80006d8 <cdc_debug_print>
            // 参数错误也置状态为2
            holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a38:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	871a      	strh	r2, [r3, #56]	@ 0x38
        holding_regs[REG_PUMP1_STATUS] == 0 && pump1_busy == 0) {  // 错误码为0且不忙
 8000a3e:	e01e      	b.n	8000a7e <process_pump_commands+0x162>
        }
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a40:	4b5b      	ldr	r3, [pc, #364]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a42:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d11a      	bne.n	8000a7e <process_pump_commands+0x162>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a48:	4b59      	ldr	r3, [pc, #356]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a4a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
    } else if (holding_regs[REG_PUMP1_CONTROL_TRIGGER] == 1 && 
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <process_pump_commands+0x13c>
               (holding_regs[REG_PUMP1_STATUS] != 0 || pump1_busy == 1)) {
 8000a50:	4b58      	ldr	r3, [pc, #352]	@ (8000bb4 <process_pump_commands+0x298>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d112      	bne.n	8000a7e <process_pump_commands+0x162>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP1_STATUS], pump1_busy);
 8000a58:	4b55      	ldr	r3, [pc, #340]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a5a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
        snprintf(reject_msg, sizeof(reject_msg), "Pump1 control rejected: error=%d, busy=%d", 
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b55      	ldr	r3, [pc, #340]	@ (8000bb4 <process_pump_commands+0x298>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	1d38      	adds	r0, r7, #4
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	4a5f      	ldr	r2, [pc, #380]	@ (8000be8 <process_pump_commands+0x2cc>)
 8000a6a:	2150      	movs	r1, #80	@ 0x50
 8000a6c:	f01c fe78 	bl	801d760 <sniprintf>
        cdc_debug_print(reject_msg);
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fe30 	bl	80006d8 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP1_CONTROL_TRIGGER] = 2;
 8000a78:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	871a      	strh	r2, [r3, #56]	@ 0x38
    }
    
    // 处理泵2命令 (类似泵1)
    // 检查泵2初始化触发 (40031) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d122      	bne.n	8000acc <process_pump_commands+0x1b0>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a86:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb0 <process_pump_commands+0x294>)
 8000a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11d      	bne.n	8000acc <process_pump_commands+0x1b0>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000a90:	4b56      	ldr	r3, [pc, #344]	@ (8000bec <process_pump_commands+0x2d0>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d119      	bne.n	8000acc <process_pump_commands+0x1b0>
        cdc_debug_print("Pump2 initialization triggered (idle & no error)");
 8000a98:	4855      	ldr	r0, [pc, #340]	@ (8000bf0 <process_pump_commands+0x2d4>)
 8000a9a:	f7ff fe1d 	bl	80006d8 <cdc_debug_print>
        
        // 发送泵2初始化命令
        if (pump_init_device(2) == 0) {
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 f938 	bl	8000d14 <pump_init_device>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d109      	bne.n	8000abe <process_pump_commands+0x1a2>
            cdc_debug_print("Pump2 init command sent successfully");
 8000aaa:	4852      	ldr	r0, [pc, #328]	@ (8000bf4 <process_pump_commands+0x2d8>)
 8000aac:	f7ff fe14 	bl	80006d8 <cdc_debug_print>
            // 发送后立即置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
            last_pump2_init_trigger = 2;
 8000ab6:	4b50      	ldr	r3, [pc, #320]	@ (8000bf8 <process_pump_commands+0x2dc>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	601a      	str	r2, [r3, #0]
        if (pump_init_device(2) == 0) {
 8000abc:	e027      	b.n	8000b0e <process_pump_commands+0x1f2>
        } else {
            cdc_debug_print("Pump2 init command failed");
 8000abe:	484f      	ldr	r0, [pc, #316]	@ (8000bfc <process_pump_commands+0x2e0>)
 8000ac0:	f7ff fe0a 	bl	80006d8 <cdc_debug_print>
            // 发送失败也置状态为2
            holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        if (pump_init_device(2) == 0) {
 8000aca:	e020      	b.n	8000b0e <process_pump_commands+0x1f2>
        }
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000acc:	4b38      	ldr	r3, [pc, #224]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d11c      	bne.n	8000b0e <process_pump_commands+0x1f2>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000ad4:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_INIT_TRIGGER] == 1 && 
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <process_pump_commands+0x1ca>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000ade:	4b43      	ldr	r3, [pc, #268]	@ (8000bec <process_pump_commands+0x2d0>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d113      	bne.n	8000b0e <process_pump_commands+0x1f2>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000ae6:	4b32      	ldr	r3, [pc, #200]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ae8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 init rejected: error=%d, busy=%d", 
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b3f      	ldr	r3, [pc, #252]	@ (8000bec <process_pump_commands+0x2d0>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	1d38      	adds	r0, r7, #4
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4613      	mov	r3, r2
 8000af8:	4a41      	ldr	r2, [pc, #260]	@ (8000c00 <process_pump_commands+0x2e4>)
 8000afa:	2150      	movs	r1, #80	@ 0x50
 8000afc:	f01c fe30 	bl	801d760 <sniprintf>
        cdc_debug_print(reject_msg);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fde8 	bl	80006d8 <cdc_debug_print>
        // 立即置初始化位为2，表示无法执行
        holding_regs[REG_PUMP2_INIT_TRIGGER] = 2;
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    
    // 检查泵2控制触发 (40033) - 只有当错误码为0且不忙时才允许
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b10:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	f040 8083 	bne.w	8000c20 <process_pump_commands+0x304>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d17d      	bne.n	8000c20 <process_pump_commands+0x304>
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b24:	4b31      	ldr	r3, [pc, #196]	@ (8000bec <process_pump_commands+0x2d0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d179      	bne.n	8000c20 <process_pump_commands+0x304>
            cdc_debug_print("Pump2 control triggered (idle & no error)");
 8000b2c:	4835      	ldr	r0, [pc, #212]	@ (8000c04 <process_pump_commands+0x2e8>)
 8000b2e:	f7ff fdd3 	bl	80006d8 <cdc_debug_print>
            
            // 获取目标位置 (40032)
            uint16_t target_position = holding_regs[REG_PUMP2_ABS_POSITION];
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000b38:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            
            // 验证目标位置范围 (0-6000)
            if (target_position <= 6000) {
 8000b3c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b40:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d82b      	bhi.n	8000ba0 <process_pump_commands+0x284>
                // 发送泵2移动命令
                if (pump_move_absolute_device(2, target_position) == 0) {
 8000b48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f000 f8ee 	bl	8000d30 <pump_move_absolute_device>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11a      	bne.n	8000b90 <process_pump_commands+0x274>
                    pump2_move_start_time = HAL_GetTick();  // 记录开始时间
 8000b5a:	f003 fe47 	bl	80047ec <HAL_GetTick>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <process_pump_commands+0x2ec>)
 8000b62:	6013      	str	r3, [r2, #0]
                    cdc_debug_print("Pump2 move command sent successfully");
 8000b64:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <process_pump_commands+0x2f0>)
 8000b66:	f7ff fdb7 	bl	80006d8 <cdc_debug_print>
                    
                    // 调试信息：显示目标位置
                    char pos_msg[50];
                    snprintf(pos_msg, sizeof(pos_msg), "Pump2 moving to position: %d", target_position);
 8000b6a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b6e:	1d38      	adds	r0, r7, #4
 8000b70:	4a27      	ldr	r2, [pc, #156]	@ (8000c10 <process_pump_commands+0x2f4>)
 8000b72:	2132      	movs	r1, #50	@ 0x32
 8000b74:	f01c fdf4 	bl	801d760 <sniprintf>
                    cdc_debug_print(pos_msg);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fdac 	bl	80006d8 <cdc_debug_print>
                    
                    // 发送后立即置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
                    last_pump2_control_trigger = 2;
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <process_pump_commands+0x2f8>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	601a      	str	r2, [r3, #0]
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b8e:	e06a      	b.n	8000c66 <process_pump_commands+0x34a>
                } else {
                    cdc_debug_print("Pump2 move command failed");
 8000b90:	4821      	ldr	r0, [pc, #132]	@ (8000c18 <process_pump_commands+0x2fc>)
 8000b92:	f7ff fda1 	bl	80006d8 <cdc_debug_print>
                    // 发送失败也置状态为2
                    holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <process_pump_commands+0x294>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000b9e:	e062      	b.n	8000c66 <process_pump_commands+0x34a>
                }
            } else {
                cdc_debug_print("Pump2 target position out of range (0-6000)");
 8000ba0:	481e      	ldr	r0, [pc, #120]	@ (8000c1c <process_pump_commands+0x300>)
 8000ba2:	f7ff fd99 	bl	80006d8 <cdc_debug_print>
                // 参数错误也置状态为2
                holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000ba6:	4b02      	ldr	r3, [pc, #8]	@ (8000bb0 <process_pump_commands+0x294>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
        holding_regs[REG_PUMP2_STATUS] == 0 && pump2_busy == 0) {  // 错误码为0且不忙
 8000bae:	e05a      	b.n	8000c66 <process_pump_commands+0x34a>
 8000bb0:	20000590 	.word	0x20000590
 8000bb4:	2000021c 	.word	0x2000021c
 8000bb8:	0801ebe8 	.word	0x0801ebe8
 8000bbc:	0801ec1c 	.word	0x0801ec1c
 8000bc0:	2000018c 	.word	0x2000018c
 8000bc4:	0801ec44 	.word	0x0801ec44
 8000bc8:	0801ec60 	.word	0x0801ec60
 8000bcc:	0801ec88 	.word	0x0801ec88
 8000bd0:	20000224 	.word	0x20000224
 8000bd4:	0801ecb4 	.word	0x0801ecb4
 8000bd8:	0801ecdc 	.word	0x0801ecdc
 8000bdc:	20000190 	.word	0x20000190
 8000be0:	0801ecfc 	.word	0x0801ecfc
 8000be4:	0801ed18 	.word	0x0801ed18
 8000be8:	0801ed44 	.word	0x0801ed44
 8000bec:	2000021d 	.word	0x2000021d
 8000bf0:	0801ed70 	.word	0x0801ed70
 8000bf4:	0801eda4 	.word	0x0801eda4
 8000bf8:	20000194 	.word	0x20000194
 8000bfc:	0801edcc 	.word	0x0801edcc
 8000c00:	0801ede8 	.word	0x0801ede8
 8000c04:	0801ee10 	.word	0x0801ee10
 8000c08:	20000228 	.word	0x20000228
 8000c0c:	0801ee3c 	.word	0x0801ee3c
 8000c10:	0801ee64 	.word	0x0801ee64
 8000c14:	20000198 	.word	0x20000198
 8000c18:	0801ee84 	.word	0x0801ee84
 8000c1c:	0801eea0 	.word	0x0801eea0
            }
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <process_pump_commands+0x360>)
 8000c22:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d11d      	bne.n	8000c66 <process_pump_commands+0x34a>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <process_pump_commands+0x360>)
 8000c2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
    } else if (holding_regs[REG_PUMP2_CONTROL_TRIGGER] == 1 && 
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <process_pump_commands+0x320>
               (holding_regs[REG_PUMP2_STATUS] != 0 || pump2_busy == 1)) {
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <process_pump_commands+0x364>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d114      	bne.n	8000c66 <process_pump_commands+0x34a>
        char reject_msg[80];
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
                holding_regs[REG_PUMP2_STATUS], pump2_busy);
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <process_pump_commands+0x360>)
 8000c3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
        snprintf(reject_msg, sizeof(reject_msg), "Pump2 control rejected: error=%d, busy=%d", 
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <process_pump_commands+0x364>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	1d38      	adds	r0, r7, #4
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <process_pump_commands+0x368>)
 8000c50:	2150      	movs	r1, #80	@ 0x50
 8000c52:	f01c fd85 	bl	801d760 <sniprintf>
        cdc_debug_print(reject_msg);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fd3d 	bl	80006d8 <cdc_debug_print>
        // 立即置控制位为2，表示无法执行
        holding_regs[REG_PUMP2_CONTROL_TRIGGER] = 2;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <process_pump_commands+0x360>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    }
    
    // 更新泵状态（检查是否完成移动）
    pump_update_status(1);  // 更新泵1状态
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 f876 	bl	8000d58 <pump_update_status>
    pump_update_status(2);  // 更新泵2状态
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 f873 	bl	8000d58 <pump_update_status>
}
 8000c72:	bf00      	nop
 8000c74:	3758      	adds	r7, #88	@ 0x58
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000590 	.word	0x20000590
 8000c80:	2000021d 	.word	0x2000021d
 8000c84:	0801eecc 	.word	0x0801eecc

08000c88 <update_sensor_data>:

/**
  * @brief  更新传感器数据 (只读寄存器)
  * @retval None
  */
static void update_sensor_data(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    // TODO: 在这里添加传感器数据更新业务代码
    
    // 示例1：更新舵机当前角度 (40017-40022，每个角度占用1个寄存器)
    // 注意：舵机位置已在servo_update_status中更新，这里做周期性验证
    static uint32_t servo_read_counter = 0;
    if (servo_read_counter % 10 == 0 && !servo_moving) {  // 每1秒更新一次，且不在移动时
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <update_sensor_data+0x74>)
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <update_sensor_data+0x78>)
 8000c92:	fba3 2301 	umull	r2, r3, r3, r1
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	1aca      	subs	r2, r1, r3
 8000ca2:	2a00      	cmp	r2, #0
 8000ca4:	d11d      	bne.n	8000ce2 <update_sensor_data+0x5a>
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <update_sensor_data+0x7c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d119      	bne.n	8000ce2 <update_sensor_data+0x5a>
        // 周期性读取舵机位置进行验证
        servo_read_all_positions();
 8000cae:	f000 fa13 	bl	80010d8 <servo_read_all_positions>
        // 更新当前角度寄存器 (40017-40022)
        holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <update_sensor_data+0x80>)
 8000cb4:	881a      	ldrh	r2, [r3, #0]
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <update_sensor_data+0x84>)
 8000cb8:	845a      	strh	r2, [r3, #34]	@ 0x22
        holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <update_sensor_data+0x80>)
 8000cbc:	885a      	ldrh	r2, [r3, #2]
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <update_sensor_data+0x84>)
 8000cc0:	849a      	strh	r2, [r3, #36]	@ 0x24
        holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <update_sensor_data+0x80>)
 8000cc4:	889a      	ldrh	r2, [r3, #4]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <update_sensor_data+0x84>)
 8000cc8:	84da      	strh	r2, [r3, #38]	@ 0x26
        holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8000cca:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <update_sensor_data+0x80>)
 8000ccc:	88da      	ldrh	r2, [r3, #6]
 8000cce:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <update_sensor_data+0x84>)
 8000cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <update_sensor_data+0x80>)
 8000cd4:	891a      	ldrh	r2, [r3, #8]
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <update_sensor_data+0x84>)
 8000cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8000cda:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <update_sensor_data+0x80>)
 8000cdc:	895a      	ldrh	r2, [r3, #10]
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <update_sensor_data+0x84>)
 8000ce0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }
    servo_read_counter++;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <update_sensor_data+0x74>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <update_sensor_data+0x74>)
 8000cea:	6013      	str	r3, [r2, #0]
        /*
        pump_get_status_device(1);
        pump_get_status_device(2);
        */
    }
    pump_read_counter++;
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <update_sensor_data+0x88>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <update_sensor_data+0x88>)
 8000cf4:	6013      	str	r3, [r2, #0]
        uint8_t object_detected = gpio_read_object_sensor();
        holding_regs[REG_OBJECT_DETECTION] = object_detected ? 2 : 1;  // 1=无物体；2=有
    }
    detection_read_counter++;
    */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000240 	.word	0x20000240
 8000d00:	cccccccd 	.word	0xcccccccd
 8000d04:	2000022c 	.word	0x2000022c
 8000d08:	20000234 	.word	0x20000234
 8000d0c:	20000590 	.word	0x20000590
 8000d10:	20000244 	.word	0x20000244

08000d14 <pump_init_device>:
/**
  * @brief  初始化指定泵
  * @param  pump_id: 泵ID (1或2)
  * @retval 0: 成功, -1: 失败
  */
static int pump_init_device(uint8_t pump_id) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
    return pump_init(pump_id);
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 ff37 	bl	8003b94 <pump_init>
 8000d26:	4603      	mov	r3, r0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <pump_move_absolute_device>:
  * @brief  泵移动到绝对位置
  * @param  pump_id: 泵ID (1或2)
  * @param  position: 目标位置 (0-6000步)
  * @retval 0: 成功, -1: 失败
  */
static int pump_move_absolute_device(uint8_t pump_id, uint16_t position) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80bb      	strh	r3, [r7, #4]
    return pump_move_absolute(pump_id, position);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	88ba      	ldrh	r2, [r7, #4]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 ff36 	bl	8003bb8 <pump_move_absolute>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <pump_update_status>:
/**
  * @brief  更新泵状态 - 使用实际的DT协议查询
  * @param  pump_id: 泵ID (1或2)
  * @retval None
  */
static void pump_update_status(uint8_t pump_id) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0e4      	sub	sp, #400	@ 0x190
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d64:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000d68:	701a      	strb	r2, [r3, #0]
    static uint32_t last_update_time1 = 0;  // 泵1的时间控制
    static uint32_t last_update_time2 = 0;  // 泵2的时间控制
    uint32_t current_time = HAL_GetTick();
 8000d6a:	f003 fd3f 	bl	80047ec <HAL_GetTick>
 8000d6e:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    
    // 根据泵ID选择对应的时间控制变量
    uint32_t* last_time_ptr = (pump_id == 1) ? &last_update_time1 : &last_update_time2;
 8000d72:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000d76:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <pump_update_status+0x2c>
 8000d80:	4ba0      	ldr	r3, [pc, #640]	@ (8001004 <pump_update_status+0x2ac>)
 8000d82:	e000      	b.n	8000d86 <pump_update_status+0x2e>
 8000d84:	4ba0      	ldr	r3, [pc, #640]	@ (8001008 <pump_update_status+0x2b0>)
 8000d86:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    
    // 降低查询频率，每1秒查询一次
    if (current_time - *last_time_ptr < 1000) {
 8000d8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d9a:	f0c0 812e 	bcc.w	8000ffa <pump_update_status+0x2a2>
        return;
    }
    *last_time_ptr = current_time;
 8000d9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000da2:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8000da6:	601a      	str	r2, [r3, #0]
    
    char error_response[256];
    int current_position;
    
    if (pump_id == 1) {
 8000da8:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000dac:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	f040 808b 	bne.w	8000ece <pump_update_status+0x176>
        // 查询错误码 (/1QR)
        if (pump_query_error(1, error_response) == 0) {
 8000db8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f002 ff14 	bl	8003bec <pump_query_error>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d149      	bne.n	8000e5e <pump_update_status+0x106>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000dca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dce:	2160      	movs	r1, #96	@ 0x60
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f01c fd7f 	bl	801d8d4 <strchr>
 8000dd6:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
            if (status_byte_ptr != NULL) {
 8000dda:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d047      	beq.n	8000e72 <pump_update_status+0x11a>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000de2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000dec:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 ffb1 	bl	8003d58 <pump_parse_status_byte>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 3172 	strb.w	r3, [r7, #370]	@ 0x172
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000dfc:	f897 3173 	ldrb.w	r3, [r7, #371]	@ 0x173
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fff9 	bl	8003df8 <pump_parse_busy_state>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 3171 	strb.w	r3, [r7, #369]	@ 0x171
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP1_STATUS] = (uint16_t)error_code;
 8000e0c:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b7e      	ldr	r3, [pc, #504]	@ (800100c <pump_update_status+0x2b4>)
 8000e14:	875a      	strh	r2, [r3, #58]	@ 0x3a
                
                // 更新内部忙状态逻辑
                pump1_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000e16:	f897 3171 	ldrb.w	r3, [r7, #369]	@ 0x171
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b7a      	ldr	r3, [pc, #488]	@ (8001010 <pump_update_status+0x2b8>)
 8000e28:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump1: byte=0x%02X, error=%d, busy=%s", 
 8000e2a:	f897 1173 	ldrb.w	r1, [r7, #371]	@ 0x173
 8000e2e:	f897 3172 	ldrb.w	r3, [r7, #370]	@ 0x172
 8000e32:	f897 2171 	ldrb.w	r2, [r7, #369]	@ 0x171
 8000e36:	2a01      	cmp	r2, #1
 8000e38:	d101      	bne.n	8000e3e <pump_update_status+0xe6>
 8000e3a:	4a76      	ldr	r2, [pc, #472]	@ (8001014 <pump_update_status+0x2bc>)
 8000e3c:	e000      	b.n	8000e40 <pump_update_status+0xe8>
 8000e3e:	4a76      	ldr	r2, [pc, #472]	@ (8001018 <pump_update_status+0x2c0>)
 8000e40:	f107 0008 	add.w	r0, r7, #8
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4a74      	ldr	r2, [pc, #464]	@ (800101c <pump_update_status+0x2c4>)
 8000e4c:	2164      	movs	r1, #100	@ 0x64
 8000e4e:	f01c fc87 	bl	801d760 <sniprintf>
                        status_byte, error_code, (busy_state == PUMP_STATE_BUSY) ? "YES" : "NO");
                cdc_debug_print(debug_msg);
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc3e 	bl	80006d8 <cdc_debug_print>
 8000e5c:	e009      	b.n	8000e72 <pump_update_status+0x11a>
            }
        } else {
            cdc_debug_print("Pump1 query error failed");
 8000e5e:	4870      	ldr	r0, [pc, #448]	@ (8001020 <pump_update_status+0x2c8>)
 8000e60:	f7ff fc3a 	bl	80006d8 <cdc_debug_print>
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP1_STATUS] = 999;  // 999 = 通信失败
 8000e64:	4b69      	ldr	r3, [pc, #420]	@ (800100c <pump_update_status+0x2b4>)
 8000e66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e6a:	875a      	strh	r2, [r3, #58]	@ 0x3a
            pump1_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000e6c:	4b68      	ldr	r3, [pc, #416]	@ (8001010 <pump_update_status+0x2b8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/1?4R)
        if (pump_query_position(1, &current_position) == 0) {
 8000e72:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000e76:	4619      	mov	r1, r3
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f002 fecb 	bl	8003c14 <pump_query_position>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d120      	bne.n	8000ec6 <pump_update_status+0x16e>
            pump1_current_pos = current_position;
 8000e84:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e88:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b64      	ldr	r3, [pc, #400]	@ (8001024 <pump_update_status+0x2cc>)
 8000e92:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP1_CURRENT_POSITION] = current_position;
 8000e94:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e98:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b5a      	ldr	r3, [pc, #360]	@ (800100c <pump_update_status+0x2b4>)
 8000ea2:	879a      	strh	r2, [r3, #60]	@ 0x3c
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump1 position: %d", current_position);
 8000ea4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ea8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f107 0008 	add.w	r0, r7, #8
 8000eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8001028 <pump_update_status+0x2d0>)
 8000eb4:	2132      	movs	r1, #50	@ 0x32
 8000eb6:	f01c fc53 	bl	801d760 <sniprintf>
            cdc_debug_print(pos_msg);
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc0a 	bl	80006d8 <cdc_debug_print>
 8000ec4:	e09a      	b.n	8000ffc <pump_update_status+0x2a4>
        } else {
            cdc_debug_print("Pump1 position query failed");
 8000ec6:	4859      	ldr	r0, [pc, #356]	@ (800102c <pump_update_status+0x2d4>)
 8000ec8:	f7ff fc06 	bl	80006d8 <cdc_debug_print>
 8000ecc:	e096      	b.n	8000ffc <pump_update_status+0x2a4>
        }
        
    } else if (pump_id == 2) {
 8000ece:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ed2:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	f040 808f 	bne.w	8000ffc <pump_update_status+0x2a4>
        // 查询错误码 (/2QR)
        if (pump_query_error(2, error_response) == 0) {
 8000ede:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f002 fe81 	bl	8003bec <pump_query_error>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d14a      	bne.n	8000f86 <pump_update_status+0x22e>
            // 从响应中解析状态字节
            // 响应格式：FF /0`3000 03 0D 0A
            // 第3个字节（'`'字符）是状态字节的HEX值
            char* status_byte_ptr = strchr(error_response, '`');
 8000ef0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ef4:	2160      	movs	r1, #96	@ 0x60
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f01c fcec 	bl	801d8d4 <strchr>
 8000efc:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
            if (status_byte_ptr != NULL) {
 8000f00:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d049      	beq.n	8000f9c <pump_update_status+0x244>
                // 提取状态字节
                uint8_t status_byte = (uint8_t)(*status_byte_ptr);
 8000f08:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
                
                // 使用枚举解析状态字节，转换为错误编号
                PumpErrorCode_t error_code = pump_parse_status_byte(status_byte);
 8000f12:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000f16:	4618      	mov	r0, r3
 8000f18:	f002 ff1e 	bl	8003d58 <pump_parse_status_byte>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
                PumpBusyState_t busy_state = pump_parse_busy_state(status_byte);
 8000f22:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 ff66 	bl	8003df8 <pump_parse_busy_state>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
                
                // 直接将错误码写入状态寄存器
                holding_regs[REG_PUMP2_STATUS] = (uint16_t)error_code;
 8000f32:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <pump_update_status+0x2b4>)
 8000f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
                
                // 更新内部忙状态逻辑
                pump2_busy = (busy_state == PUMP_STATE_BUSY) ? 1 : 0;
 8000f3e:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <pump_update_status+0x2d8>)
 8000f50:	701a      	strb	r2, [r3, #0]
                
                char debug_msg[100];
                snprintf(debug_msg, sizeof(debug_msg), "Pump2: byte=0x%02X, error=%d, busy=%s", 
 8000f52:	f897 117b 	ldrb.w	r1, [r7, #379]	@ 0x17b
 8000f56:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 8000f5a:	f897 2179 	ldrb.w	r2, [r7, #377]	@ 0x179
 8000f5e:	2a01      	cmp	r2, #1
 8000f60:	d101      	bne.n	8000f66 <pump_update_status+0x20e>
 8000f62:	4a2c      	ldr	r2, [pc, #176]	@ (8001014 <pump_update_status+0x2bc>)
 8000f64:	e000      	b.n	8000f68 <pump_update_status+0x210>
 8000f66:	4a2c      	ldr	r2, [pc, #176]	@ (8001018 <pump_update_status+0x2c0>)
 8000f68:	f107 0008 	add.w	r0, r7, #8
 8000f6c:	9201      	str	r2, [sp, #4]
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	460b      	mov	r3, r1
 8000f72:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <pump_update_status+0x2dc>)
 8000f74:	2164      	movs	r1, #100	@ 0x64
 8000f76:	f01c fbf3 	bl	801d760 <sniprintf>
                        status_byte, error_code, (busy_state == PUMP_STATE_BUSY) ? "YES" : "NO");
                cdc_debug_print(debug_msg);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fbaa 	bl	80006d8 <cdc_debug_print>
 8000f84:	e00a      	b.n	8000f9c <pump_update_status+0x244>
            }
        } else {
            cdc_debug_print("Pump2 UART RX timeout");
 8000f86:	482c      	ldr	r0, [pc, #176]	@ (8001038 <pump_update_status+0x2e0>)
 8000f88:	f7ff fba6 	bl	80006d8 <cdc_debug_print>
            // 通信失败，设置为通信错误状态
            holding_regs[REG_PUMP2_STATUS] = 999;  // 999 = 通信失败
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <pump_update_status+0x2b4>)
 8000f8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
            pump2_busy = 1;  // 通信失败时认为忙碌（安全考虑）
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <pump_update_status+0x2d8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
        }
        
        // 查询当前活塞位置 (/2?4R)
        if (pump_query_position(2, &current_position) == 0) {
 8000f9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f002 fe36 	bl	8003c14 <pump_query_position>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d121      	bne.n	8000ff2 <pump_update_status+0x29a>
            pump2_current_pos = current_position;
 8000fae:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000fb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b20      	ldr	r3, [pc, #128]	@ (800103c <pump_update_status+0x2e4>)
 8000fbc:	801a      	strh	r2, [r3, #0]
            holding_regs[REG_PUMP2_CURRENT_POSITION] = current_position;
 8000fbe:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000fc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <pump_update_status+0x2b4>)
 8000fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
            
            char pos_msg[50];
            snprintf(pos_msg, sizeof(pos_msg), "Pump2 position: %d", current_position);
 8000fd0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000fd4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f107 0008 	add.w	r0, r7, #8
 8000fde:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <pump_update_status+0x2e8>)
 8000fe0:	2132      	movs	r1, #50	@ 0x32
 8000fe2:	f01c fbbd 	bl	801d760 <sniprintf>
            cdc_debug_print(pos_msg);
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fb74 	bl	80006d8 <cdc_debug_print>
 8000ff0:	e004      	b.n	8000ffc <pump_update_status+0x2a4>
        } else {
            cdc_debug_print("Pump2 position query failed");
 8000ff2:	4814      	ldr	r0, [pc, #80]	@ (8001044 <pump_update_status+0x2ec>)
 8000ff4:	f7ff fb70 	bl	80006d8 <cdc_debug_print>
 8000ff8:	e000      	b.n	8000ffc <pump_update_status+0x2a4>
        return;
 8000ffa:	bf00      	nop
        }
    }
}
 8000ffc:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000248 	.word	0x20000248
 8001008:	2000024c 	.word	0x2000024c
 800100c:	20000590 	.word	0x20000590
 8001010:	2000021c 	.word	0x2000021c
 8001014:	0801eef8 	.word	0x0801eef8
 8001018:	0801eefc 	.word	0x0801eefc
 800101c:	0801ef00 	.word	0x0801ef00
 8001020:	0801ef28 	.word	0x0801ef28
 8001024:	2000021e 	.word	0x2000021e
 8001028:	0801ef44 	.word	0x0801ef44
 800102c:	0801ef58 	.word	0x0801ef58
 8001030:	2000021d 	.word	0x2000021d
 8001034:	0801ef74 	.word	0x0801ef74
 8001038:	0801ef9c 	.word	0x0801ef9c
 800103c:	20000220 	.word	0x20000220
 8001040:	0801efb4 	.word	0x0801efb4
 8001044:	0801efc8 	.word	0x0801efc8

08001048 <servo_move_all>:
  * @brief  控制所有舵机移动到目标位置
  * @param  target_angles: 6个舵机的目标角度数组
  * @param  move_time: 移动时间(ms)
  * @retval None
  */
static void servo_move_all(uint16_t* target_angles, uint32_t move_time) {
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b0ab      	sub	sp, #172	@ 0xac
 800104c:	af06      	add	r7, sp, #24
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    // 使用多舵机同时移动命令 - 更高效的方式
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 8001052:	4a1f      	ldr	r2, [pc, #124]	@ (80010d0 <servo_move_all+0x88>)
 8001054:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001058:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105c:	6018      	str	r0, [r3, #0]
 800105e:	3304      	adds	r3, #4
 8001060:	8019      	strh	r1, [r3, #0]
    BusServo_MultMove(servo_ids, target_angles, 6, (uint16_t)move_time);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 800106a:	2206      	movs	r2, #6
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	f000 f9c5 	bl	80013fc <BusServo_MultMove>
    
    // 调试信息：显示发送的命令
    char move_msg[128];
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
            target_angles[0], target_angles[1], target_angles[2], 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8001076:	469c      	mov	ip, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3302      	adds	r3, #2
 800107c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 800107e:	461a      	mov	r2, r3
            target_angles[0], target_angles[1], target_angles[2], 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8001086:	4619      	mov	r1, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3306      	adds	r3, #6
 800108c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 800108e:	461c      	mov	r4, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3308      	adds	r3, #8
 8001094:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 8001096:	461d      	mov	r5, r3
            target_angles[3], target_angles[4], target_angles[5], move_time);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	330a      	adds	r3, #10
 800109c:	881b      	ldrh	r3, [r3, #0]
    snprintf(move_msg, sizeof(move_msg), "MultMove sent: [%d,%d,%d,%d,%d,%d] time:%lums", 
 800109e:	461e      	mov	r6, r3
 80010a0:	f107 0008 	add.w	r0, r7, #8
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	9305      	str	r3, [sp, #20]
 80010a8:	9604      	str	r6, [sp, #16]
 80010aa:	9503      	str	r5, [sp, #12]
 80010ac:	9402      	str	r4, [sp, #8]
 80010ae:	9101      	str	r1, [sp, #4]
 80010b0:	9200      	str	r2, [sp, #0]
 80010b2:	4663      	mov	r3, ip
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <servo_move_all+0x8c>)
 80010b6:	2180      	movs	r1, #128	@ 0x80
 80010b8:	f01c fb52 	bl	801d760 <sniprintf>
    cdc_debug_print(move_msg);
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fb09 	bl	80006d8 <cdc_debug_print>
        snprintf(move_msg, sizeof(move_msg), "Servo%d -> %d (time:%lums) sent", 
                servo_id, target_angles[servo_id-1], move_time);
        cdc_debug_print(move_msg);
    }
    */
}
 80010c6:	bf00      	nop
 80010c8:	3794      	adds	r7, #148	@ 0x94
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0801f014 	.word	0x0801f014
 80010d4:	0801efe4 	.word	0x0801efe4

080010d8 <servo_read_all_positions>:

/**
  * @brief  读取所有舵机的当前位置
  * @retval None
  */
static void servo_read_all_positions(void) {
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b0bd      	sub	sp, #244	@ 0xf4
 80010dc:	af06      	add	r7, sp, #24
    uint8_t servo_ids[6] = {1, 2, 3, 4, 5, 6};
 80010de:	4a3b      	ldr	r2, [pc, #236]	@ (80011cc <servo_read_all_positions+0xf4>)
 80010e0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e8:	6018      	str	r0, [r3, #0]
 80010ea:	3304      	adds	r3, #4
 80010ec:	8019      	strh	r1, [r3, #0]
    uint16_t positions[6];
    
    // 使用多舵机位置读取函数（非阻塞版本）
    BusServo_MultPosRead(servo_ids, 6, positions);
 80010ee:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80010f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010f6:	2106      	movs	r1, #6
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fa31 	bl	8001560 <BusServo_MultPosRead>
    
    // 更新内部状态并记录调试信息
    char pos_debug[128];
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 80010fe:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001102:	461e      	mov	r6, r3
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001104:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 8001108:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	@ 0xc4
 800110c:	f8b7 10c6 	ldrh.w	r1, [r7, #198]	@ 0xc6
 8001110:	f8b7 00c8 	ldrh.w	r0, [r7, #200]	@ 0xc8
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 8001114:	4604      	mov	r4, r0
            positions[0], positions[1], positions[2], positions[3], positions[4], positions[5]);
 8001116:	f8b7 00ca 	ldrh.w	r0, [r7, #202]	@ 0xca
    snprintf(pos_debug, sizeof(pos_debug), "Raw read result: [%d,%d,%d,%d,%d,%d]", 
 800111a:	4605      	mov	r5, r0
 800111c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8001120:	9504      	str	r5, [sp, #16]
 8001122:	9403      	str	r4, [sp, #12]
 8001124:	9102      	str	r1, [sp, #8]
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	4633      	mov	r3, r6
 800112c:	4a28      	ldr	r2, [pc, #160]	@ (80011d0 <servo_read_all_positions+0xf8>)
 800112e:	2180      	movs	r1, #128	@ 0x80
 8001130:	f01c fb16 	bl	801d760 <sniprintf>
    cdc_debug_print(pos_debug);
 8001134:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff facd 	bl	80006d8 <cdc_debug_print>
    
    // 更新内部状态
    for (int i = 0; i < 6; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001144:	e037      	b.n	80011b6 <servo_read_all_positions+0xde>
        // 只有当读取到的值在合理范围内时才更新，否则保持原值
        if (positions[i] <= 1000) {
 8001146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	33d8      	adds	r3, #216	@ 0xd8
 800114e:	443b      	add	r3, r7
 8001150:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001154:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001158:	d80c      	bhi.n	8001174 <servo_read_all_positions+0x9c>
            servo_current_positions[i] = positions[i];
 800115a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	33d8      	adds	r3, #216	@ 0xd8
 8001162:	443b      	add	r3, r7
 8001164:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8001168:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <servo_read_all_positions+0xfc>)
 800116a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800116e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001172:	e01b      	b.n	80011ac <servo_read_all_positions+0xd4>
        } else {
            // 如果读取值异常，记录警告但保持原值
            char warning[60];
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001174:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001178:	1c5a      	adds	r2, r3, #1
                    i+1, positions[i], servo_current_positions[i]);
 800117a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	33d8      	adds	r3, #216	@ 0xd8
 8001182:	443b      	add	r3, r7
 8001184:	f833 3c18 	ldrh.w	r3, [r3, #-24]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001188:	461c      	mov	r4, r3
                    i+1, positions[i], servo_current_positions[i]);
 800118a:	4912      	ldr	r1, [pc, #72]	@ (80011d4 <servo_read_all_positions+0xfc>)
 800118c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001190:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
            snprintf(warning, sizeof(warning), "Servo%d invalid position %d, keeping %d", 
 8001194:	1d38      	adds	r0, r7, #4
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	9400      	str	r4, [sp, #0]
 800119a:	4613      	mov	r3, r2
 800119c:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <servo_read_all_positions+0x100>)
 800119e:	213c      	movs	r1, #60	@ 0x3c
 80011a0:	f01c fade 	bl	801d760 <sniprintf>
            cdc_debug_print(warning);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fa96 	bl	80006d8 <cdc_debug_print>
    for (int i = 0; i < 6; i++) {
 80011ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011b0:	3301      	adds	r3, #1
 80011b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80011b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011ba:	2b05      	cmp	r3, #5
 80011bc:	ddc3      	ble.n	8001146 <servo_read_all_positions+0x6e>
        }
    }
    
    cdc_debug_print("Servo positions read with timeout protection");
 80011be:	4807      	ldr	r0, [pc, #28]	@ (80011dc <servo_read_all_positions+0x104>)
 80011c0:	f7ff fa8a 	bl	80006d8 <cdc_debug_print>
}
 80011c4:	bf00      	nop
 80011c6:	37dc      	adds	r7, #220	@ 0xdc
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	0801f014 	.word	0x0801f014
 80011d0:	0801f01c 	.word	0x0801f01c
 80011d4:	20000234 	.word	0x20000234
 80011d8:	0801f044 	.word	0x0801f044
 80011dc:	0801f06c 	.word	0x0801f06c

080011e0 <servo_update_status>:

/**
  * @brief  更新舵机状态
  * @retval None
  */
static void servo_update_status(void) {
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b0ab      	sub	sp, #172	@ 0xac
 80011e4:	af06      	add	r7, sp, #24
    if (servo_moving) {
 80011e6:	4b38      	ldr	r3, [pc, #224]	@ (80012c8 <servo_update_status+0xe8>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d068      	beq.n	80012c0 <servo_update_status+0xe0>
        uint32_t current_time = HAL_GetTick();
 80011ee:	f003 fafd 	bl	80047ec <HAL_GetTick>
 80011f2:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
        uint32_t elapsed_time = current_time - servo_move_start_time;
 80011f6:	4b35      	ldr	r3, [pc, #212]	@ (80012cc <servo_update_status+0xec>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        
        // 获取当前设置的移动时间
        uint32_t expected_move_time = holding_regs[REG_ROTATION_TIME];
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <servo_update_status+0xf0>)
 8001206:	8a9b      	ldrh	r3, [r3, #20]
 8001208:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        
        if (expected_move_time == 0) {
 800120c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <servo_update_status+0x3c>
            expected_move_time = 1000;  // 默认1秒
 8001214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
        
        // 添加500ms缓冲时间，确保舵机完全到位
        uint32_t timeout_time = expected_move_time + 500;
 800121c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001220:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001224:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        
        if (elapsed_time >= timeout_time) {
 8001228:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800122c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001230:	429a      	cmp	r2, r3
 8001232:	d345      	bcc.n	80012c0 <servo_update_status+0xe0>
            servo_moving = 0;
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <servo_update_status+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
            
            // 读取当前位置并更新寄存器
            servo_read_all_positions();
 800123a:	f7ff ff4d 	bl	80010d8 <servo_read_all_positions>
            // 更新当前角度寄存器 (40017-40022)
            holding_regs[REG_CURRENT_ANGLE1] = servo_current_positions[0];
 800123e:	4b25      	ldr	r3, [pc, #148]	@ (80012d4 <servo_update_status+0xf4>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <servo_update_status+0xf0>)
 8001244:	845a      	strh	r2, [r3, #34]	@ 0x22
            holding_regs[REG_CURRENT_ANGLE2] = servo_current_positions[1];
 8001246:	4b23      	ldr	r3, [pc, #140]	@ (80012d4 <servo_update_status+0xf4>)
 8001248:	885a      	ldrh	r2, [r3, #2]
 800124a:	4b21      	ldr	r3, [pc, #132]	@ (80012d0 <servo_update_status+0xf0>)
 800124c:	849a      	strh	r2, [r3, #36]	@ 0x24
            holding_regs[REG_CURRENT_ANGLE3] = servo_current_positions[2];
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <servo_update_status+0xf4>)
 8001250:	889a      	ldrh	r2, [r3, #4]
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <servo_update_status+0xf0>)
 8001254:	84da      	strh	r2, [r3, #38]	@ 0x26
            holding_regs[REG_CURRENT_ANGLE4] = servo_current_positions[3];
 8001256:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <servo_update_status+0xf4>)
 8001258:	88da      	ldrh	r2, [r3, #6]
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <servo_update_status+0xf0>)
 800125c:	851a      	strh	r2, [r3, #40]	@ 0x28
            holding_regs[REG_CURRENT_ANGLE5] = servo_current_positions[4];
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <servo_update_status+0xf4>)
 8001260:	891a      	ldrh	r2, [r3, #8]
 8001262:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <servo_update_status+0xf0>)
 8001264:	855a      	strh	r2, [r3, #42]	@ 0x2a
            holding_regs[REG_CURRENT_ANGLE6] = servo_current_positions[5];
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <servo_update_status+0xf4>)
 8001268:	895a      	ldrh	r2, [r3, #10]
 800126a:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <servo_update_status+0xf0>)
 800126c:	859a      	strh	r2, [r3, #44]	@ 0x2c
            
            // 转动时间到达后，置状态为2（完成状态，可以重新写1进行新转动）
            holding_regs[REG_ROTATION_TRIGGER] = 2;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <servo_update_status+0xf0>)
 8001270:	2202      	movs	r2, #2
 8001272:	85da      	strh	r2, [r3, #46]	@ 0x2e
            last_rotation_trigger = 2;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <servo_update_status+0xf8>)
 8001276:	2202      	movs	r2, #2
 8001278:	601a      	str	r2, [r3, #0]
            
            cdc_debug_print("Servo movement completed, status set to 2 (ready for new command)");
 800127a:	4818      	ldr	r0, [pc, #96]	@ (80012dc <servo_update_status+0xfc>)
 800127c:	f7ff fa2c 	bl	80006d8 <cdc_debug_print>
            
            // 调试信息：显示最终位置
            char final_pos_msg[128];
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <servo_update_status+0xf4>)
 8001282:	881b      	ldrh	r3, [r3, #0]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001284:	461e      	mov	r6, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <servo_update_status+0xf4>)
 8001288:	885b      	ldrh	r3, [r3, #2]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800128a:	461a      	mov	r2, r3
                    servo_current_positions[0], servo_current_positions[1], servo_current_positions[2],
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <servo_update_status+0xf4>)
 800128e:	889b      	ldrh	r3, [r3, #4]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001290:	4619      	mov	r1, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <servo_update_status+0xf4>)
 8001294:	88db      	ldrh	r3, [r3, #6]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 8001296:	461c      	mov	r4, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 8001298:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <servo_update_status+0xf4>)
 800129a:	891b      	ldrh	r3, [r3, #8]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 800129c:	461d      	mov	r5, r3
                    servo_current_positions[3], servo_current_positions[4], servo_current_positions[5]);
 800129e:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <servo_update_status+0xf4>)
 80012a0:	895b      	ldrh	r3, [r3, #10]
            snprintf(final_pos_msg, sizeof(final_pos_msg), "Final positions: [%d,%d,%d,%d,%d,%d]", 
 80012a2:	4638      	mov	r0, r7
 80012a4:	9304      	str	r3, [sp, #16]
 80012a6:	9503      	str	r5, [sp, #12]
 80012a8:	9402      	str	r4, [sp, #8]
 80012aa:	9101      	str	r1, [sp, #4]
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	4633      	mov	r3, r6
 80012b0:	4a0b      	ldr	r2, [pc, #44]	@ (80012e0 <servo_update_status+0x100>)
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	f01c fa54 	bl	801d760 <sniprintf>
            cdc_debug_print(final_pos_msg);
 80012b8:	463b      	mov	r3, r7
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fa0c 	bl	80006d8 <cdc_debug_print>
        }
    }
}
 80012c0:	bf00      	nop
 80012c2:	3794      	adds	r7, #148	@ 0x94
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	2000022c 	.word	0x2000022c
 80012cc:	20000230 	.word	0x20000230
 80012d0:	20000590 	.word	0x20000590
 80012d4:	20000234 	.word	0x20000234
 80012d8:	20000184 	.word	0x20000184
 80012dc:	0801f09c 	.word	0x0801f09c
 80012e0:	0801f0e0 	.word	0x0801f0e0

080012e4 <BusServo_SendCmd>:
#include "bus_servo.h"
#include <string.h>

// 发送通用指令
void BusServo_SendCmd(uint8_t cmd, uint8_t *params, uint8_t param_cnt) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0c4      	sub	sp, #272	@ 0x110
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012f2:	6019      	str	r1, [r3, #0]
 80012f4:	4611      	mov	r1, r2
 80012f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012fa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80012fe:	4602      	mov	r2, r0
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001306:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800130a:	460a      	mov	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]
    uint8_t buf[256];  // 缓冲区，足够大
    uint8_t idx = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    buf[idx++] = 0x55;  // 帧头
 8001314:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 800131e:	461a      	mov	r2, r3
 8001320:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001328:	2155      	movs	r1, #85	@ 0x55
 800132a:	5499      	strb	r1, [r3, r2]
    buf[idx++] = 0x55;
 800132c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001336:	461a      	mov	r2, r3
 8001338:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800133c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001340:	2155      	movs	r1, #85	@ 0x55
 8001342:	5499      	strb	r1, [r3, r2]
    buf[idx++] = param_cnt + 2;  // Length = N + 2
 8001344:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 800134e:	461a      	mov	r2, r3
 8001350:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001354:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3302      	adds	r3, #2
 800135c:	b2d9      	uxtb	r1, r3
 800135e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001362:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001366:	5499      	strb	r1, [r3, r2]
    buf[idx++] = cmd;
 8001368:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001372:	4619      	mov	r1, r3
 8001374:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800137c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001380:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	545a      	strb	r2, [r3, r1]
    if (params && param_cnt > 0) {
 8001388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800138c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d021      	beq.n	80013da <BusServo_SendCmd+0xf6>
 8001396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800139a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01a      	beq.n	80013da <BusServo_SendCmd+0xf6>
        memcpy(&buf[idx], params, param_cnt);
 80013a4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013a8:	f107 020c 	add.w	r2, r7, #12
 80013ac:	18d0      	adds	r0, r2, r3
 80013ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013b2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	f01c fb6e 	bl	801daa2 <memcpy>
        idx += param_cnt;
 80013c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80013ca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80013ce:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    }
    HAL_UART_Transmit(&huart6, buf, idx, HAL_MAX_DELAY);  // 发送
 80013da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013de:	b29a      	uxth	r2, r3
 80013e0:	f107 010c 	add.w	r1, r7, #12
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	4803      	ldr	r0, [pc, #12]	@ (80013f8 <BusServo_SendCmd+0x114>)
 80013ea:	f007 fcf9 	bl	8008de0 <HAL_UART_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000800 	.word	0x20000800

080013fc <BusServo_MultMove>:
    params[5] = (position >> 8) & 0xFF;  // 高8位
    BusServo_SendCmd(CMD_SERVO_MOVE, params, 6);
}

// 控制多舵机同时转动
void BusServo_MultMove(uint8_t *ids, uint16_t *positions, uint8_t servo_count, uint16_t time) {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b0c7      	sub	sp, #284	@ 0x11c
 8001400:	af00      	add	r7, sp, #0
 8001402:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8001406:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 800140a:	6020      	str	r0, [r4, #0]
 800140c:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8001410:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8001414:	6001      	str	r1, [r0, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800141c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001420:	701a      	strb	r2, [r3, #0]
 8001422:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001426:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800142a:	460a      	mov	r2, r1
 800142c:	801a      	strh	r2, [r3, #0]
    uint8_t params[256];  // 足够大的缓冲区
    uint8_t idx = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    params[idx++] = servo_count;    // 舵机数量
 8001434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800143e:	4619      	mov	r1, r3
 8001440:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001448:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800144c:	f2a2 1211 	subw	r2, r2, #273	@ 0x111
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	545a      	strb	r2, [r3, r1]
    params[idx++] = time & 0xFF;    // 时间低8位  
 8001454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800145e:	461a      	mov	r2, r3
 8001460:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001464:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b2d9      	uxtb	r1, r3
 800146c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001474:	5499      	strb	r1, [r3, r2]
    params[idx++] = (time >> 8) & 0xFF;  // 时间高8位
 8001476:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b299      	uxth	r1, r3
 8001484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800148e:	461a      	mov	r2, r3
 8001490:	b2c9      	uxtb	r1, r1
 8001492:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001496:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800149a:	5499      	strb	r1, [r3, r2]
    
    // 添加每个舵机的ID和位置
    for (uint8_t i = 0; i < servo_count; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80014a2:	e046      	b.n	8001532 <BusServo_MultMove+0x136>
        params[idx++] = ids[i];     // 舵机ID
 80014a4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80014a8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80014ac:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	441a      	add	r2, r3
 80014b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014b8:	1c59      	adds	r1, r3, #1
 80014ba:	f887 1117 	strb.w	r1, [r7, #279]	@ 0x117
 80014be:	4619      	mov	r1, r3
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014ca:	545a      	strb	r2, [r3, r1]
        params[idx++] = positions[i] & 0xFF;        // 位置低8位
 80014cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80014d6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	8819      	ldrh	r1, [r3, #0]
 80014e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 80014ea:	461a      	mov	r2, r3
 80014ec:	b2c9      	uxtb	r1, r1
 80014ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80014f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80014f6:	5499      	strb	r1, [r3, r2]
        params[idx++] = (positions[i] >> 8) & 0xFF; // 位置高8位
 80014f8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001502:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	4413      	add	r3, r2
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	b299      	uxth	r1, r3
 8001510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	f887 2117 	strb.w	r2, [r7, #279]	@ 0x117
 800151a:	461a      	mov	r2, r3
 800151c:	b2c9      	uxtb	r1, r1
 800151e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001526:	5499      	strb	r1, [r3, r2]
    for (uint8_t i = 0; i < servo_count; i++) {
 8001528:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800152c:	3301      	adds	r3, #1
 800152e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8001532:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001536:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800153a:	f897 2116 	ldrb.w	r2, [r7, #278]	@ 0x116
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d3af      	bcc.n	80014a4 <BusServo_MultMove+0xa8>
    }
    
    BusServo_SendCmd(CMD_SERVO_MOVE, params, idx);
 8001544:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	2003      	movs	r0, #3
 8001550:	f7ff fec8 	bl	80012e4 <BusServo_SendCmd>
}
 8001554:	bf00      	nop
 8001556:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800155a:	46bd      	mov	sp, r7
 800155c:	bd90      	pop	{r4, r7, pc}
	...

08001560 <BusServo_MultPosRead>:
    memcpy(&params[1], ids, id_cnt);
    BusServo_SendCmd(CMD_MULT_SERVO_UNLOAD, params, id_cnt + 1);
}

// 读取多舵机位置（positions数组需预分配空间）
void BusServo_MultPosRead(uint8_t *ids, uint8_t id_cnt, uint16_t *positions) {
 8001560:	b580      	push	{r7, lr}
 8001562:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8001566:	af00      	add	r7, sp, #0
 8001568:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800156c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001570:	6018      	str	r0, [r3, #0]
 8001572:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001576:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001580:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001584:	460a      	mov	r2, r1
 8001586:	701a      	strb	r2, [r3, #0]
    uint8_t params[256];
    params[0] = id_cnt;
 8001588:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800158c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001590:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001594:	f2a2 220d 	subw	r2, r2, #525	@ 0x20d
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
    memcpy(&params[1], ids, id_cnt);
 800159c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015a0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80015a4:	7819      	ldrb	r1, [r3, #0]
 80015a6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015aa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80015ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015b2:	1c50      	adds	r0, r2, #1
 80015b4:	460a      	mov	r2, r1
 80015b6:	6819      	ldr	r1, [r3, #0]
 80015b8:	f01c fa73 	bl	801daa2 <memcpy>
    BusServo_SendCmd(CMD_MULT_SERVO_POS_READ, params, id_cnt + 1);
 80015bc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015c0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ce:	4619      	mov	r1, r3
 80015d0:	2015      	movs	r0, #21
 80015d2:	f7ff fe87 	bl	80012e4 <BusServo_SendCmd>

    // 接收响应：使用较短的超时时间，避免长时间阻塞
    uint8_t rx_len = id_cnt * 3 + 5;  // 总长度：头2 + len1 + cmd1 + data
 80015d6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80015da:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	0052      	lsls	r2, r2, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	3305      	adds	r3, #5
 80015ea:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint8_t rx_buf[256];
    
    // 初始化位置数组为默认值
    for (uint8_t i = 0; i < id_cnt; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 80015f4:	e00f      	b.n	8001616 <BusServo_MultPosRead+0xb6>
        positions[i] = 3;  // 默认位置3代表读取失败
 80015f6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8001600:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	4413      	add	r3, r2
 8001608:	2203      	movs	r2, #3
 800160a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < id_cnt; i++) {
 800160c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8001616:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800161a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 800161e:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	429a      	cmp	r2, r3
 8001626:	d3e6      	bcc.n	80015f6 <BusServo_MultPosRead+0x96>
    }
    
    // 使用较短超时时间 (200ms) 而不是HAL_MAX_DELAY
    HAL_StatusTypeDef status = HAL_UART_Receive(&huart6, rx_buf, rx_len, 200);
 8001628:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 800162c:	b29a      	uxth	r2, r3
 800162e:	f107 0110 	add.w	r1, r7, #16
 8001632:	23c8      	movs	r3, #200	@ 0xc8
 8001634:	483c      	ldr	r0, [pc, #240]	@ (8001728 <BusServo_MultPosRead+0x1c8>)
 8001636:	f007 fc5e 	bl	8008ef6 <HAL_UART_Receive>
 800163a:	4603      	mov	r3, r0
 800163c:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
    
    if (status == HAL_OK) {
 8001640:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8001644:	2b00      	cmp	r3, #0
 8001646:	d169      	bne.n	800171c <BusServo_MultPosRead+0x1bc>
        // 检查响应帧头和命令码
        if (rx_buf[0] == 0x55 && rx_buf[1] == 0x55 && rx_buf[3] == CMD_MULT_SERVO_POS_READ) {
 8001648:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800164c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b55      	cmp	r3, #85	@ 0x55
 8001654:	d162      	bne.n	800171c <BusServo_MultPosRead+0x1bc>
 8001656:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800165a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b55      	cmp	r3, #85	@ 0x55
 8001662:	d15b      	bne.n	800171c <BusServo_MultPosRead+0x1bc>
 8001664:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001668:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800166c:	78db      	ldrb	r3, [r3, #3]
 800166e:	2b15      	cmp	r3, #21
 8001670:	d154      	bne.n	800171c <BusServo_MultPosRead+0x1bc>
            // 解析实际返回的舵机数量
            uint8_t actual_count = rx_buf[2] / 3;  // 数据长度除以3得到舵机数量
 8001672:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001676:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <BusServo_MultPosRead+0x1cc>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
            uint8_t parse_count = (actual_count < id_cnt) ? actual_count : id_cnt;
 8001688:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800168c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8001696:	4293      	cmp	r3, r2
 8001698:	bf28      	it	cs
 800169a:	4613      	movcs	r3, r2
 800169c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
            
            for (uint8_t i = 0; i < parse_count; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 80016a6:	e033      	b.n	8001710 <BusServo_MultPosRead+0x1b0>
                uint8_t offset = 4 + i * 3;  // 数据从rx_buf[4]开始
 80016a8:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80016ac:	461a      	mov	r2, r3
 80016ae:	0052      	lsls	r2, r2, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3304      	adds	r3, #4
 80016b6:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
                if (offset + 2 < sizeof(rx_buf)) {  // 边界检查
 80016ba:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80016be:	3302      	adds	r3, #2
 80016c0:	2bff      	cmp	r3, #255	@ 0xff
 80016c2:	d820      	bhi.n	8001706 <BusServo_MultPosRead+0x1a6>
                    positions[i] = (rx_buf[offset + 2] << 8) | rx_buf[offset + 1];
 80016c4:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80016c8:	3302      	adds	r3, #2
 80016ca:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80016ce:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 80016d2:	5cd3      	ldrb	r3, [r2, r3]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b21a      	sxth	r2, r3
 80016da:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 80016de:	3301      	adds	r3, #1
 80016e0:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80016e4:	f5a1 7102 	sub.w	r1, r1, #520	@ 0x208
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b219      	sxth	r1, r3
 80016f0:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 80016fa:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	4413      	add	r3, r2
 8001702:	b28a      	uxth	r2, r1
 8001704:	801a      	strh	r2, [r3, #0]
            for (uint8_t i = 0; i < parse_count; i++) {
 8001706:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 800170a:	3301      	adds	r3, #1
 800170c:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8001710:	f897 2216 	ldrb.w	r2, [r7, #534]	@ 0x216
 8001714:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8001718:	429a      	cmp	r2, r3
 800171a:	d3c5      	bcc.n	80016a8 <BusServo_MultPosRead+0x148>
    } else if (status == HAL_TIMEOUT) {
        // 超时情况下保持默认值，不做额外处理
        // positions数组已经初始化为默认值500
    }
    // 对于其他错误情况，也保持默认值
}
 800171c:	bf00      	nop
 800171e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000800 	.word	0x20000800
 800172c:	aaaaaaab 	.word	0xaaaaaaab

08001730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_DMA_Init+0x3c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <MX_DMA_Init+0x3c>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_DMA_Init+0x3c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	200c      	movs	r0, #12
 8001758:	f003 f930 	bl	80049bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800175c:	200c      	movs	r0, #12
 800175e:	f003 f949 	bl	80049f4 <HAL_NVIC_EnableIRQ>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <vApplicationGetIdleTaskMemory+0x2c>)
 8001780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4a06      	ldr	r2, [pc, #24]	@ (80017a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000029c 	.word	0x2000029c
 80017a0:	2000033c 	.word	0x2000033c

080017a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <MX_FREERTOS_Init+0x30>)
 80017ac:	1d3c      	adds	r4, r7, #4
 80017ae:	461d      	mov	r5, r3
 80017b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2100      	movs	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00d fa79 	bl	800ecb8 <osThreadCreate>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4a03      	ldr	r2, [pc, #12]	@ (80017d8 <MX_FREERTOS_Init+0x34>)
 80017ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bdb0      	pop	{r4, r5, r7, pc}
 80017d4:	0801f114 	.word	0x0801f114
 80017d8:	20000298 	.word	0x20000298

080017dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80017e4:	f01b f908 	bl	801c9f8 <MX_USB_DEVICE_Init>

  /* init code for LWIP */
  MX_LWIP_Init();
 80017e8:	f009 ffa4 	bl	800b734 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  modbus_tcp_init();
 80017ec:	f001 fa34 	bl	8002c58 <modbus_tcp_init>
  app_business_init();
 80017f0:	f7fe fedc 	bl	80005ac <app_business_init>
  
  /* Infinite loop */
  for(;;)
  {
    // 每100ms执行一次业务逻辑处理
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 80017f4:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <StartDefaultTask+0x90>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001870 <StartDefaultTask+0x94>)
 80017fa:	fba3 1302 	umull	r1, r3, r3, r2
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2164      	movs	r1, #100	@ 0x64
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <StartDefaultTask+0x34>
      app_business_process();
 800180c:	f7fe ff58 	bl	80006c0 <app_business_process>
    }
    
    // Keep alive 消息每1000ms（约1秒）发送一次 - 暂时注释掉避免调试信息过载
    
    if (keep_alive_counter % 1000 == 0) {
 8001810:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <StartDefaultTask+0x98>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <StartDefaultTask+0x9c>)
 8001816:	fba3 1302 	umull	r1, r3, r3, r2
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d111      	bne.n	800184e <StartDefaultTask+0x72>
      int len = snprintf(debug_buf, sizeof(debug_buf), "Keep Alive: %lu\r\n", keep_alive_counter / 1000);
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <StartDefaultTask+0x98>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a12      	ldr	r2, [pc, #72]	@ (8001878 <StartDefaultTask+0x9c>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <StartDefaultTask+0xa0>)
 8001838:	2140      	movs	r1, #64	@ 0x40
 800183a:	4811      	ldr	r0, [pc, #68]	@ (8001880 <StartDefaultTask+0xa4>)
 800183c:	f01b ff90 	bl	801d760 <sniprintf>
 8001840:	60f8      	str	r0, [r7, #12]
      CDC_Transmit_FS((uint8_t*)debug_buf, len);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <StartDefaultTask+0xa4>)
 800184a:	f01b f993 	bl	801cb74 <CDC_Transmit_FS>
    }
    
    
    business_cycle_counter++;
 800184e:	4b07      	ldr	r3, [pc, #28]	@ (800186c <StartDefaultTask+0x90>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a05      	ldr	r2, [pc, #20]	@ (800186c <StartDefaultTask+0x90>)
 8001856:	6013      	str	r3, [r2, #0]
    keep_alive_counter++;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <StartDefaultTask+0x98>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <StartDefaultTask+0x98>)
 8001860:	6013      	str	r3, [r2, #0]
    osDelay(1);  // 1ms延时
 8001862:	2001      	movs	r0, #1
 8001864:	f00d fa74 	bl	800ed50 <osDelay>
    if (business_cycle_counter % BUSINESS_PROCESS_CYCLE_MS == 0) {
 8001868:	e7c4      	b.n	80017f4 <StartDefaultTask+0x18>
 800186a:	bf00      	nop
 800186c:	20000250 	.word	0x20000250
 8001870:	51eb851f 	.word	0x51eb851f
 8001874:	20000294 	.word	0x20000294
 8001878:	10624dd3 	.word	0x10624dd3
 800187c:	0801f130 	.word	0x0801f130
 8001880:	20000254 	.word	0x20000254

08001884 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram3;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM3 memory initialization sequence
  */
  hsram3.Instance = FSMC_NORSRAM_DEVICE;
 800189c:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <MX_FSMC_Init+0xb4>)
 800189e:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80018a2:	601a      	str	r2, [r3, #0]
  hsram3.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80018a4:	4b24      	ldr	r3, [pc, #144]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018a6:	4a25      	ldr	r2, [pc, #148]	@ (800193c <MX_FSMC_Init+0xb8>)
 80018a8:	605a      	str	r2, [r3, #4]
  /* hsram3.Init */
  hsram3.Init.NSBank = FSMC_NORSRAM_BANK3;
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	609a      	str	r2, [r3, #8]
  hsram3.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  hsram3.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80018b6:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  hsram3.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018be:	2210      	movs	r2, #16
 80018c0:	615a      	str	r2, [r3, #20]
  hsram3.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80018c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hsram3.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hsram3.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  hsram3.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram3.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80018da:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram3.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80018e0:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram3.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram3.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram3.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram3.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_FSMC_Init+0xb4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80018fe:	230f      	movs	r3, #15
 8001900:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001902:	230f      	movs	r3, #15
 8001904:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001906:	23ff      	movs	r3, #255	@ 0xff
 8001908:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800190a:	230f      	movs	r3, #15
 800190c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800190e:	2310      	movs	r3, #16
 8001910:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001912:	2311      	movs	r3, #17
 8001914:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram3, &Timing, NULL) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_FSMC_Init+0xb4>)
 8001922:	f006 feb7 	bl	8008694 <HAL_SRAM_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 800192c:	f000 f996 	bl	8001c5c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001930:	bf00      	nop
 8001932:	3720      	adds	r7, #32
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	2000053c 	.word	0x2000053c
 800193c:	a0000104 	.word	0xa0000104

08001940 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001954:	4b2c      	ldr	r3, [pc, #176]	@ (8001a08 <HAL_FSMC_MspInit+0xc8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d151      	bne.n	8001a00 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800195c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_FSMC_MspInit+0xc8>)
 800195e:	2201      	movs	r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <HAL_FSMC_MspInit+0xcc>)
 8001968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196a:	4a28      	ldr	r2, [pc, #160]	@ (8001a0c <HAL_FSMC_MspInit+0xcc>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6393      	str	r3, [r2, #56]	@ 0x38
 8001972:	4b26      	ldr	r3, [pc, #152]	@ (8001a0c <HAL_FSMC_MspInit+0xcc>)
 8001974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG10   ------> FSMC_NE3
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800197e:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001982:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001990:	230c      	movs	r3, #12
 8001992:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	4619      	mov	r1, r3
 8001998:	481d      	ldr	r0, [pc, #116]	@ (8001a10 <HAL_FSMC_MspInit+0xd0>)
 800199a:	f004 fde9 	bl	8006570 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800199e:	f240 433f 	movw	r3, #1087	@ 0x43f
 80019a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019b0:	230c      	movs	r3, #12
 80019b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <HAL_FSMC_MspInit+0xd4>)
 80019ba:	f004 fdd9 	bl	8006570 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80019be:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80019c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c4:	2302      	movs	r3, #2
 80019c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019d0:	230c      	movs	r3, #12
 80019d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	480f      	ldr	r0, [pc, #60]	@ (8001a18 <HAL_FSMC_MspInit+0xd8>)
 80019da:	f004 fdc9 	bl	8006570 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019de:	f64f 7333 	movw	r3, #65331	@ 0xff33
 80019e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80019f0:	230c      	movs	r3, #12
 80019f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4808      	ldr	r0, [pc, #32]	@ (8001a1c <HAL_FSMC_MspInit+0xdc>)
 80019fa:	f004 fdb9 	bl	8006570 <HAL_GPIO_Init>
 80019fe:	e000      	b.n	8001a02 <HAL_FSMC_MspInit+0xc2>
    return;
 8001a00:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000058c 	.word	0x2000058c
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40020c00 	.word	0x40020c00

08001a20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001a28:	f7ff ff8a 	bl	8001940 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a39      	ldr	r2, [pc, #228]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a32      	ldr	r2, [pc, #200]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a16      	ldr	r2, [pc, #88]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001ad0:	f043 0310 	orr.w	r3, r3, #16
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a08      	ldr	r2, [pc, #32]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <MX_GPIO_Init+0xf4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

}
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f002 fe26 	bl	8004780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b34:	f000 f816 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b38:	f7ff ff7c 	bl	8001a34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b3c:	f7ff fdf8 	bl	8001730 <MX_DMA_Init>
  MX_FSMC_Init();
 8001b40:	f7ff fea0 	bl	8001884 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b44:	f002 faac 	bl	80040a0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001b48:	f002 fafe 	bl	8004148 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001b4c:	f002 fa4a 	bl	8003fe4 <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8001b50:	f002 fad0 	bl	80040f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b54:	f7ff fe26 	bl	80017a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b58:	f00d f897 	bl	800ec8a <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f002 fe51 	bl	8004804 <HAL_Delay>
 8001b62:	e7fb      	b.n	8001b5c <main+0x30>

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	@ 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	@ 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f01b fe97 	bl	801d8a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	4a27      	ldr	r2, [pc, #156]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b98:	4b25      	ldr	r3, [pc, #148]	@ (8001c30 <SystemClock_Config+0xcc>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <SystemClock_Config+0xd0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a21      	ldr	r2, [pc, #132]	@ (8001c34 <SystemClock_Config+0xd0>)
 8001bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <SystemClock_Config+0xd0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bd8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001bdc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001be2:	2307      	movs	r3, #7
 8001be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 f8c8 	bl	8007d80 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bf6:	f000 f831 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c06:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2105      	movs	r1, #5
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f006 fb29 	bl	8008270 <HAL_RCC_ClockConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c24:	f000 f81a 	bl	8001c5c <Error_Handler>
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3750      	adds	r7, #80	@ 0x50
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c4a:	f002 fdbb 	bl	80047c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40002000 	.word	0x40002000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <Error_Handler+0x8>

08001c68 <cdc_debug_log>:
#include <string.h>
#include "usbd_cdc_if.h"  // 包含CDC传输函数

// 简单的调试日志函数，输出到CDC
static void cdc_debug_log(const char* tag, const char* message)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b0a5      	sub	sp, #148	@ 0x94
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
    char debug_buf[128];
    uint32_t len = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    
    // 手动拼接字符串，避免使用sprintf
    const char* ptr;
    
    // 复制tag
    ptr = tag;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 20) {
 8001c7e:	e00e      	b.n	8001c9e <cdc_debug_log+0x36>
        debug_buf[len++] = *ptr++;
 8001c80:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001c84:	1c53      	adds	r3, r2, #1
 8001c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	3390      	adds	r3, #144	@ 0x90
 8001c98:	443b      	add	r3, r7
 8001c9a:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 20) {
 8001c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <cdc_debug_log+0x48>
 8001ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cac:	2b13      	cmp	r3, #19
 8001cae:	d9e7      	bls.n	8001c80 <cdc_debug_log+0x18>
    }
    
    // 添加分隔符
    debug_buf[len++] = ':';
 8001cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cb4:	1c5a      	adds	r2, r3, #1
 8001cb6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cba:	3390      	adds	r3, #144	@ 0x90
 8001cbc:	443b      	add	r3, r7
 8001cbe:	223a      	movs	r2, #58	@ 0x3a
 8001cc0:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = ' ';
 8001cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001cce:	3390      	adds	r3, #144	@ 0x90
 8001cd0:	443b      	add	r3, r7
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 复制message
    ptr = message;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    while (*ptr && len < 120) {
 8001cde:	e00e      	b.n	8001cfe <cdc_debug_log+0x96>
        debug_buf[len++] = *ptr++;
 8001ce0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ce4:	1c53      	adds	r3, r2, #1
 8001ce6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	3390      	adds	r3, #144	@ 0x90
 8001cf8:	443b      	add	r3, r7
 8001cfa:	f803 2c88 	strb.w	r2, [r3, #-136]
    while (*ptr && len < 120) {
 8001cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <cdc_debug_log+0xa8>
 8001d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d0c:	2b77      	cmp	r3, #119	@ 0x77
 8001d0e:	d9e7      	bls.n	8001ce0 <cdc_debug_log+0x78>
    }
    
    // 添加换行
    debug_buf[len++] = '\r';
 8001d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d1a:	3390      	adds	r3, #144	@ 0x90
 8001d1c:	443b      	add	r3, r7
 8001d1e:	220d      	movs	r2, #13
 8001d20:	f803 2c88 	strb.w	r2, [r3, #-136]
    debug_buf[len++] = '\n';
 8001d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001d2e:	3390      	adds	r3, #144	@ 0x90
 8001d30:	443b      	add	r3, r7
 8001d32:	220a      	movs	r2, #10
 8001d34:	f803 2c88 	strb.w	r2, [r3, #-136]
    
    // 通过CDC发送
    /*if (len < sizeof(debug_buf)) {
        CDC_Transmit_FS((uint8_t*)debug_buf, len);
    }*/
}
 8001d38:	bf00      	nop
 8001d3a:	3794      	adds	r7, #148	@ 0x94
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <int_to_str>:

// 简单的整数转字符串函数
static void int_to_str(int value, char* str, int max_len)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	@ 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    int is_negative = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
    
    if (value < 0) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da04      	bge.n	8001d68 <int_to_str+0x24>
        is_negative = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	623b      	str	r3, [r7, #32]
        value = -value;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	425b      	negs	r3, r3
 8001d66:	60fb      	str	r3, [r7, #12]
    }
    
    // 处理特殊情况0
    if (value == 0) {
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d12b      	bne.n	8001dc6 <int_to_str+0x82>
        str[i++] = '0';
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d74:	461a      	mov	r2, r3
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4413      	add	r3, r2
 8001d7a:	2230      	movs	r2, #48	@ 0x30
 8001d7c:	701a      	strb	r2, [r3, #0]
        str[i] = '\0';
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
        return;
 8001d88:	e05c      	b.n	8001e44 <int_to_str+0x100>
    }
    
    // 转换数字
    while (value > 0 && i < max_len - 2) {
        str[i++] = '0' + (value % 10);
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <int_to_str+0x10c>)
 8001d8e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d92:	1099      	asrs	r1, r3, #2
 8001d94:	17d3      	asrs	r3, r2, #31
 8001d96:	1ac9      	subs	r1, r1, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	1ad1      	subs	r1, r2, r3
 8001da2:	b2ca      	uxtb	r2, r1
 8001da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da6:	1c59      	adds	r1, r3, #1
 8001da8:	6279      	str	r1, [r7, #36]	@ 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	440b      	add	r3, r1
 8001db0:	3230      	adds	r2, #48	@ 0x30
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
        value /= 10;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a25      	ldr	r2, [pc, #148]	@ (8001e50 <int_to_str+0x10c>)
 8001dba:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbe:	1092      	asrs	r2, r2, #2
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	60fb      	str	r3, [r7, #12]
    while (value > 0 && i < max_len - 2) {
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd04      	ble.n	8001dd6 <int_to_str+0x92>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b02      	subs	r3, #2
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	dbd9      	blt.n	8001d8a <int_to_str+0x46>
    }
    
    // 添加负号
    if (is_negative && i < max_len - 1) {
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <int_to_str+0xb2>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de2:	429a      	cmp	r2, r3
 8001de4:	da07      	bge.n	8001df6 <int_to_str+0xb2>
        str[i++] = '-';
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	222d      	movs	r2, #45	@ 0x2d
 8001df4:	701a      	strb	r2, [r3, #0]
    }
    
    str[i] = '\0';
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
    
    // 反转字符串
    int start = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    int end = i - 1;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	3b01      	subs	r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001e0a:	e017      	b.n	8001e3c <int_to_str+0xf8>
        char temp = str[start];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	75fb      	strb	r3, [r7, #23]
        str[start] = str[end];
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	441a      	add	r2, r3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	440b      	add	r3, r1
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	701a      	strb	r2, [r3, #0]
        str[end] = temp;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	7dfa      	ldrb	r2, [r7, #23]
 8001e2e:	701a      	strb	r2, [r3, #0]
        start++;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	3301      	adds	r3, #1
 8001e34:	61fb      	str	r3, [r7, #28]
        end--;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
    while (start < end) {
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbe3      	blt.n	8001e0c <int_to_str+0xc8>
    }
}
 8001e44:	372c      	adds	r7, #44	@ 0x2c
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	66666667 	.word	0x66666667

08001e54 <hex_to_str>:

// 十六进制转换函数
static void hex_to_str(uint8_t value, char* str)
{
 8001e54:	b4b0      	push	{r4, r5, r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
    const char hex_chars[] = "0123456789ABCDEF";
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <hex_to_str+0x54>)
 8001e62:	f107 040c 	add.w	r4, r7, #12
 8001e66:	461d      	mov	r5, r3
 8001e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6c:	682b      	ldr	r3, [r5, #0]
 8001e6e:	7023      	strb	r3, [r4, #0]
    str[0] = hex_chars[value >> 4];
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3320      	adds	r3, #32
 8001e78:	443b      	add	r3, r7
 8001e7a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	701a      	strb	r2, [r3, #0]
    str[1] = hex_chars[value & 0x0F];
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 020f 	and.w	r2, r3, #15
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	3220      	adds	r2, #32
 8001e8e:	443a      	add	r2, r7
 8001e90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001e94:	701a      	strb	r2, [r3, #0]
    str[2] = '\0';
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	@ 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bcb0      	pop	{r4, r5, r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	0801f144 	.word	0x0801f144

08001eac <dump_data>:

// 数据转储函数 - 显示接收到的原始数据
static void dump_data(const uint8_t* data, uint16_t len)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0a8      	sub	sp, #160	@ 0xa0
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
    char dump_buf[128];
    char hex_str[3];
    uint16_t dump_len = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 添加前缀
    const char* prefix = "Data: ";
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <dump_data+0x108>)
 8001ec0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    strcpy(dump_buf, prefix);
 8001ec4:	f107 0310 	add.w	r3, r7, #16
 8001ec8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f01b fde0 	bl	801da92 <strcpy>
    dump_len = strlen(prefix);
 8001ed2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001ed6:	f7fe f97b 	bl	80001d0 <strlen>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    
    // 最多显示前16字节的数据
    uint16_t max_bytes = (len > 16) ? 16 : len;
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	bf28      	it	cs
 8001ee6:	2310      	movcs	r3, #16
 8001ee8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001ef2:	e032      	b.n	8001f5a <dump_data+0xae>
        hex_to_str(data[i], hex_str);
 8001ef4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	f107 020c 	add.w	r2, r7, #12
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ffa5 	bl	8001e54 <hex_to_str>
        if (dump_len + 3 < sizeof(dump_buf)) {
 8001f0a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f0e:	3303      	adds	r3, #3
 8001f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f12:	d81d      	bhi.n	8001f50 <dump_data+0xa4>
            dump_buf[dump_len++] = hex_str[0];
 8001f14:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001f1e:	7b3a      	ldrb	r2, [r7, #12]
 8001f20:	33a0      	adds	r3, #160	@ 0xa0
 8001f22:	443b      	add	r3, r7
 8001f24:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = hex_str[1];
 8001f28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001f32:	7b7a      	ldrb	r2, [r7, #13]
 8001f34:	33a0      	adds	r3, #160	@ 0xa0
 8001f36:	443b      	add	r3, r7
 8001f38:	f803 2c90 	strb.w	r2, [r3, #-144]
            dump_buf[dump_len++] = ' ';
 8001f3c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	f8a7 209e 	strh.w	r2, [r7, #158]	@ 0x9e
 8001f46:	33a0      	adds	r3, #160	@ 0xa0
 8001f48:	443b      	add	r3, r7
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f803 2c90 	strb.w	r2, [r3, #-144]
    for (uint16_t i = 0; i < max_bytes && dump_len < 120; i++) {
 8001f50:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001f5a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8001f5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d203      	bcs.n	8001f6e <dump_data+0xc2>
 8001f66:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f6a:	2b77      	cmp	r3, #119	@ 0x77
 8001f6c:	d9c2      	bls.n	8001ef4 <dump_data+0x48>
        }
    }
    
    if (len > 16) {
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d90e      	bls.n	8001f92 <dump_data+0xe6>
        const char* more = "...";
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <dump_data+0x10c>)
 8001f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        strcat(dump_buf, more);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001f82:	4618      	mov	r0, r3
 8001f84:	f01b fc97 	bl	801d8b6 <strcat>
        dump_len += 3;
 8001f88:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    }
    
    dump_buf[dump_len] = '\0';
 8001f92:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001f96:	33a0      	adds	r3, #160	@ 0xa0
 8001f98:	443b      	add	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f803 2c90 	strb.w	r2, [r3, #-144]
    cdc_debug_log("MODBUS_TCP", dump_buf);
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <dump_data+0x110>)
 8001fa8:	f7ff fe5e 	bl	8001c68 <cdc_debug_log>
}
 8001fac:	bf00      	nop
 8001fae:	37a0      	adds	r7, #160	@ 0xa0
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	0801f158 	.word	0x0801f158
 8001fb8:	0801f160 	.word	0x0801f160
 8001fbc:	0801f164 	.word	0x0801f164

08001fc0 <process_modbus_request>:
// Holding Registers数组（根据PDF初始化默认值）
uint16_t holding_regs[100]; // 100个寄存器足够使用

// 处理单个Modbus TCP请求
static err_t process_modbus_request(struct tcp_pcb *tpcb, uint8_t* buf, uint16_t offset)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	f5ad 6d9e 	sub.w	sp, sp, #1264	@ 0x4f0
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fcc:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001fd0:	6018      	str	r0, [r3, #0]
 8001fd2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fd6:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8001fda:	6019      	str	r1, [r3, #0]
 8001fdc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fe0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001fe4:	801a      	strh	r2, [r3, #0]
    // 解析Modbus TCP帧头
    uint16_t trans_id = (buf[offset] << 8) | buf[offset+1];     // 事务ID
 8001fe6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001fea:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8001ff4:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002008:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002014:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002018:	6809      	ldr	r1, [r1, #0]
 800201a:	440b      	add	r3, r1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	f8a7 34e4 	strh.w	r3, [r7, #1252]	@ 0x4e4
    uint16_t protocol_id = (buf[offset+2] << 8) | buf[offset+3];  // 协议ID (应该是0)
 8002028:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800202c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	3302      	adds	r3, #2
 8002034:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002038:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b21b      	sxth	r3, r3
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800204c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	3303      	adds	r3, #3
 8002054:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002058:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800205c:	6809      	ldr	r1, [r1, #0]
 800205e:	440b      	add	r3, r1
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	f8a7 34e2 	strh.w	r3, [r7, #1250]	@ 0x4e2
    uint16_t length = (buf[offset+4] << 8) | buf[offset+5];       // 长度字段
 800206c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002070:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	3304      	adds	r3, #4
 8002078:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800207c:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	b21b      	sxth	r3, r3
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002090:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	3305      	adds	r3, #5
 8002098:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800209c:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80020a0:	6809      	ldr	r1, [r1, #0]
 80020a2:	440b      	add	r3, r1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b21b      	sxth	r3, r3
 80020a8:	4313      	orrs	r3, r2
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
    
    // 验证协议ID
    if (protocol_id != 0) {
 80020b0:	f8b7 34e2 	ldrh.w	r3, [r7, #1250]	@ 0x4e2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d007      	beq.n	80020c8 <process_modbus_request+0x108>
        cdc_debug_log("MODBUS_TCP", "Invalid protocol ID");
 80020b8:	49d7      	ldr	r1, [pc, #860]	@ (8002418 <process_modbus_request+0x458>)
 80020ba:	48d8      	ldr	r0, [pc, #864]	@ (800241c <process_modbus_request+0x45c>)
 80020bc:	f7ff fdd4 	bl	8001c68 <cdc_debug_log>
        return ERR_VAL;
 80020c0:	f06f 0305 	mvn.w	r3, #5
 80020c4:	f000 bdb5 	b.w	8002c32 <process_modbus_request+0xc72>
    }
    
    // 验证最小长度（至少要有单元ID和功能码）
    if (length < 2) {
 80020c8:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d807      	bhi.n	80020e0 <process_modbus_request+0x120>
        cdc_debug_log("MODBUS_TCP", "Invalid length field");
 80020d0:	49d3      	ldr	r1, [pc, #844]	@ (8002420 <process_modbus_request+0x460>)
 80020d2:	48d2      	ldr	r0, [pc, #840]	@ (800241c <process_modbus_request+0x45c>)
 80020d4:	f7ff fdc8 	bl	8001c68 <cdc_debug_log>
        return ERR_VAL;
 80020d8:	f06f 0305 	mvn.w	r3, #5
 80020dc:	f000 bda9 	b.w	8002c32 <process_modbus_request+0xc72>
    }

    uint8_t unit_id = buf[offset+6];                       // 单元ID
 80020e0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80020e4:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	3306      	adds	r3, #6
 80020ec:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80020f0:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
    uint8_t fc = buf[offset+7];                            // 函数码
 80020fe:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002102:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3307      	adds	r3, #7
 800210a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800210e:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	4413      	add	r3, r2
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f887 34de 	strb.w	r3, [r7, #1246]	@ 0x4de

    // 添加调试信息
    char frame_info[80];
    strcpy(frame_info, "Frame: TID=");
 800211c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002120:	4ac0      	ldr	r2, [pc, #768]	@ (8002424 <process_modbus_request+0x464>)
 8002122:	ca07      	ldmia	r2, {r0, r1, r2}
 8002124:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(trans_id, frame_info + strlen(frame_info), 10);
 8002128:	f8b7 44e4 	ldrh.w	r4, [r7, #1252]	@ 0x4e4
 800212c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe f84d 	bl	80001d0 <strlen>
 8002136:	4602      	mov	r2, r0
 8002138:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800213c:	4413      	add	r3, r2
 800213e:	220a      	movs	r2, #10
 8002140:	4619      	mov	r1, r3
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff fdfe 	bl	8001d44 <int_to_str>
    const char* len_prefix = " Len=";
 8002148:	4bb7      	ldr	r3, [pc, #732]	@ (8002428 <process_modbus_request+0x468>)
 800214a:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
    strcat(frame_info, len_prefix);
 800214e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002152:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8002156:	4618      	mov	r0, r3
 8002158:	f01b fbad 	bl	801d8b6 <strcat>
    int_to_str(length, frame_info + strlen(frame_info), 10);
 800215c:	f8b7 44e0 	ldrh.w	r4, [r7, #1248]	@ 0x4e0
 8002160:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f833 	bl	80001d0 <strlen>
 800216a:	4602      	mov	r2, r0
 800216c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002170:	4413      	add	r3, r2
 8002172:	220a      	movs	r2, #10
 8002174:	4619      	mov	r1, r3
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff fde4 	bl	8001d44 <int_to_str>
    const char* fc_prefix = " FC=";
 800217c:	4bab      	ldr	r3, [pc, #684]	@ (800242c <process_modbus_request+0x46c>)
 800217e:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcat(frame_info, fc_prefix);
 8002182:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002186:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 800218a:	4618      	mov	r0, r3
 800218c:	f01b fb93 	bl	801d8b6 <strcat>
    int_to_str(fc, frame_info + strlen(frame_info), 10);
 8002190:	f897 44de 	ldrb.w	r4, [r7, #1246]	@ 0x4de
 8002194:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f819 	bl	80001d0 <strlen>
 800219e:	4602      	mov	r2, r0
 80021a0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80021a4:	4413      	add	r3, r2
 80021a6:	220a      	movs	r2, #10
 80021a8:	4619      	mov	r1, r3
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff fdca 	bl	8001d44 <int_to_str>
    cdc_debug_log("MODBUS_TCP", frame_info);
 80021b0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80021b4:	4619      	mov	r1, r3
 80021b6:	4899      	ldr	r0, [pc, #612]	@ (800241c <process_modbus_request+0x45c>)
 80021b8:	f7ff fd56 	bl	8001c68 <cdc_debug_log>

    uint8_t reply[1024];
    reply[0] = buf[offset]; reply[1] = buf[offset+1]; // 事务ID
 80021bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80021c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80021ca:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80021d8:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80021e2:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80021ee:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80021fc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002200:	705a      	strb	r2, [r3, #1]
    reply[2] = 0; reply[3] = 0;           // 协议ID (0)
 8002202:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002206:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800220a:	2200      	movs	r2, #0
 800220c:	709a      	strb	r2, [r3, #2]
 800220e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002212:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002216:	2200      	movs	r2, #0
 8002218:	70da      	strb	r2, [r3, #3]
    reply[6] = unit_id;                   // 单元ID
 800221a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800221e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002222:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 8002226:	719a      	strb	r2, [r3, #6]
    uint16_t reply_data_len = 0;          // 数据部分长度（不包含单元ID）
 8002228:	2300      	movs	r3, #0
 800222a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee

    if (fc == FC_READ_HOLDING) {
 800222e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002232:	2b03      	cmp	r3, #3
 8002234:	f040 8145 	bne.w	80024c2 <process_modbus_request+0x502>
        cdc_debug_log("MODBUS_TCP", "Processing read holding");
 8002238:	497d      	ldr	r1, [pc, #500]	@ (8002430 <process_modbus_request+0x470>)
 800223a:	4878      	ldr	r0, [pc, #480]	@ (800241c <process_modbus_request+0x45c>)
 800223c:	f7ff fd14 	bl	8001c68 <cdc_debug_log>
        
        // 检查数据长度是否足够
        if (length < 6) { // 单元ID + 功能码 + 起始地址 + 数量 = 1+1+2+2 = 6
 8002240:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002244:	2b05      	cmp	r3, #5
 8002246:	d817      	bhi.n	8002278 <process_modbus_request+0x2b8>
            cdc_debug_log("MODBUS_TCP", "Read request too short");
 8002248:	497a      	ldr	r1, [pc, #488]	@ (8002434 <process_modbus_request+0x474>)
 800224a:	4874      	ldr	r0, [pc, #464]	@ (800241c <process_modbus_request+0x45c>)
 800224c:	f7ff fd0c 	bl	8001c68 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002250:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002254:	3b80      	subs	r3, #128	@ 0x80
 8002256:	b2da      	uxtb	r2, r3
 8002258:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800225c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002260:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002262:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002266:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800226a:	2203      	movs	r2, #3
 800226c:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002274:	f000 bc0e 	b.w	8002a94 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9]; // 起始地址
 8002278:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800227c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	3308      	adds	r3, #8
 8002284:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002288:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4413      	add	r3, r2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b21b      	sxth	r3, r3
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800229c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	3309      	adds	r3, #9
 80022a4:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80022a8:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80022ac:	6809      	ldr	r1, [r1, #0]
 80022ae:	440b      	add	r3, r1
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11]; // 数量
 80022bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80022c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	330a      	adds	r3, #10
 80022c8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80022cc:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b21a      	sxth	r2, r3
 80022dc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80022e0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	330b      	adds	r3, #11
 80022e8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80022ec:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80022f0:	6809      	ldr	r1, [r1, #0]
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	f8a7 34b4 	strh.w	r3, [r7, #1204]	@ 0x4b4
            
            char addr_info[50];
            strcpy(addr_info, "Read addr=");
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4a4c      	ldr	r2, [pc, #304]	@ (8002438 <process_modbus_request+0x478>)
 8002306:	ca07      	ldmia	r2, {r0, r1, r2}
 8002308:	c303      	stmia	r3!, {r0, r1}
 800230a:	801a      	strh	r2, [r3, #0]
 800230c:	3302      	adds	r3, #2
 800230e:	0c12      	lsrs	r2, r2, #16
 8002310:	701a      	strb	r2, [r3, #0]
            int_to_str(addr, addr_info + strlen(addr_info), 10);
 8002312:	f8b7 44b6 	ldrh.w	r4, [r7, #1206]	@ 0x4b6
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ff58 	bl	80001d0 <strlen>
 8002320:	4602      	mov	r2, r0
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4413      	add	r3, r2
 8002328:	220a      	movs	r2, #10
 800232a:	4619      	mov	r1, r3
 800232c:	4620      	mov	r0, r4
 800232e:	f7ff fd09 	bl	8001d44 <int_to_str>
            const char* qty_prefix = " qty=";
 8002332:	4b42      	ldr	r3, [pc, #264]	@ (800243c <process_modbus_request+0x47c>)
 8002334:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            strcat(addr_info, qty_prefix);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8002340:	4618      	mov	r0, r3
 8002342:	f01b fab8 	bl	801d8b6 <strcat>
            int_to_str(qty, addr_info + strlen(addr_info), 10);
 8002346:	f8b7 44b4 	ldrh.w	r4, [r7, #1204]	@ 0x4b4
 800234a:	f107 0314 	add.w	r3, r7, #20
 800234e:	4618      	mov	r0, r3
 8002350:	f7fd ff3e 	bl	80001d0 <strlen>
 8002354:	4602      	mov	r2, r0
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4413      	add	r3, r2
 800235c:	220a      	movs	r2, #10
 800235e:	4619      	mov	r1, r3
 8002360:	4620      	mov	r0, r4
 8002362:	f7ff fcef 	bl	8001d44 <int_to_str>
            cdc_debug_log("MODBUS_TCP", addr_info);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	482b      	ldr	r0, [pc, #172]	@ (800241c <process_modbus_request+0x45c>)
 800236e:	f7ff fc7b 	bl	8001c68 <cdc_debug_log>
            
            // 验证数量范围
            if (qty == 0 || qty > 125) { // Modbus标准限制单次最多读125个寄存器
 8002372:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <process_modbus_request+0x3c2>
 800237a:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 800237e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002380:	d916      	bls.n	80023b0 <process_modbus_request+0x3f0>
                cdc_debug_log("MODBUS_TCP", "Invalid quantity");
 8002382:	492f      	ldr	r1, [pc, #188]	@ (8002440 <process_modbus_request+0x480>)
 8002384:	4825      	ldr	r0, [pc, #148]	@ (800241c <process_modbus_request+0x45c>)
 8002386:	f7ff fc6f 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800238a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800238e:	3b80      	subs	r3, #128	@ 0x80
 8002390:	b2da      	uxtb	r2, r3
 8002392:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002396:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800239a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 800239c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023a0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80023a4:	2203      	movs	r2, #3
 80023a6:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80023ae:	e371      	b.n	8002a94 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 错误：越界，现在只有100个寄存器
 80023b0:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 80023b4:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80023b8:	4413      	add	r3, r2
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	dd16      	ble.n	80023ec <process_modbus_request+0x42c>
                cdc_debug_log("MODBUS_TCP", "Address out of bounds");
 80023be:	4921      	ldr	r1, [pc, #132]	@ (8002444 <process_modbus_request+0x484>)
 80023c0:	4816      	ldr	r0, [pc, #88]	@ (800241c <process_modbus_request+0x45c>)
 80023c2:	f7ff fc51 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80023c6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80023ca:	3b80      	subs	r3, #128	@ 0x80
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023d2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80023d6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 80023d8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023dc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80023e0:	2202      	movs	r2, #2
 80023e2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80023e4:	2302      	movs	r3, #2
 80023e6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80023ea:	e353      	b.n	8002a94 <process_modbus_request+0xad4>
            } else {
                reply[7] = fc;              // 函数码
 80023ec:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80023f0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80023f4:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80023f8:	71da      	strb	r2, [r3, #7]
                reply[8] = qty * 2;         // 字节数
 80023fa:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002408:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800240c:	721a      	strb	r2, [r3, #8]
                for (uint16_t i = 0; i < qty; i++) {
 800240e:	2300      	movs	r3, #0
 8002410:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 8002414:	e043      	b.n	800249e <process_modbus_request+0x4de>
 8002416:	bf00      	nop
 8002418:	0801f170 	.word	0x0801f170
 800241c:	0801f164 	.word	0x0801f164
 8002420:	0801f184 	.word	0x0801f184
 8002424:	0801f19c 	.word	0x0801f19c
 8002428:	0801f1a8 	.word	0x0801f1a8
 800242c:	0801f1b0 	.word	0x0801f1b0
 8002430:	0801f1b8 	.word	0x0801f1b8
 8002434:	0801f1d0 	.word	0x0801f1d0
 8002438:	0801f1e8 	.word	0x0801f1e8
 800243c:	0801f1f4 	.word	0x0801f1f4
 8002440:	0801f1fc 	.word	0x0801f1fc
 8002444:	0801f210 	.word	0x0801f210
                    reply[9 + i*2] = holding_regs[addr + i] >> 8;
 8002448:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 800244c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002450:	4413      	add	r3, r2
 8002452:	4abe      	ldr	r2, [pc, #760]	@ (800274c <process_modbus_request+0x78c>)
 8002454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29a      	uxth	r2, r3
 800245c:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	3309      	adds	r3, #9
 8002464:	b2d1      	uxtb	r1, r2
 8002466:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800246a:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 800246e:	54d1      	strb	r1, [r2, r3]
                    reply[10 + i*2] = holding_regs[addr + i] & 0xFF;
 8002470:	f8b7 24b6 	ldrh.w	r2, [r7, #1206]	@ 0x4b6
 8002474:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002478:	4413      	add	r3, r2
 800247a:	4ab4      	ldr	r2, [pc, #720]	@ (800274c <process_modbus_request+0x78c>)
 800247c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002480:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002484:	3305      	adds	r3, #5
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	b2d1      	uxtb	r1, r2
 800248a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800248e:	f5a2 6293 	sub.w	r2, r2, #1176	@ 0x498
 8002492:	54d1      	strb	r1, [r2, r3]
                for (uint16_t i = 0; i < qty; i++) {
 8002494:	f8b7 34ec 	ldrh.w	r3, [r7, #1260]	@ 0x4ec
 8002498:	3301      	adds	r3, #1
 800249a:	f8a7 34ec 	strh.w	r3, [r7, #1260]	@ 0x4ec
 800249e:	f8b7 24ec 	ldrh.w	r2, [r7, #1260]	@ 0x4ec
 80024a2:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d3ce      	bcc.n	8002448 <process_modbus_request+0x488>
                }
                reply_data_len = 2 + qty * 2; // 单元ID + 函数码 + 字节数 + 数据
 80024aa:	f8b7 34b4 	ldrh.w	r3, [r7, #1204]	@ 0x4b4
 80024ae:	3301      	adds	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Read success");
 80024b8:	49a5      	ldr	r1, [pc, #660]	@ (8002750 <process_modbus_request+0x790>)
 80024ba:	48a6      	ldr	r0, [pc, #664]	@ (8002754 <process_modbus_request+0x794>)
 80024bc:	f7ff fbd4 	bl	8001c68 <cdc_debug_log>
 80024c0:	e2e8      	b.n	8002a94 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_SINGLE) {
 80024c2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	f040 811c 	bne.w	8002704 <process_modbus_request+0x744>
        cdc_debug_log("MODBUS_TCP", "Processing write single");
 80024cc:	49a2      	ldr	r1, [pc, #648]	@ (8002758 <process_modbus_request+0x798>)
 80024ce:	48a1      	ldr	r0, [pc, #644]	@ (8002754 <process_modbus_request+0x794>)
 80024d0:	f7ff fbca 	bl	8001c68 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 地址 + 值 = 1+1+2+2 = 6
        if (length < 6) {
 80024d4:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 80024d8:	2b05      	cmp	r3, #5
 80024da:	d816      	bhi.n	800250a <process_modbus_request+0x54a>
            cdc_debug_log("MODBUS_TCP", "Write single request too short");
 80024dc:	499f      	ldr	r1, [pc, #636]	@ (800275c <process_modbus_request+0x79c>)
 80024de:	489d      	ldr	r0, [pc, #628]	@ (8002754 <process_modbus_request+0x794>)
 80024e0:	f7ff fbc2 	bl	8001c68 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 80024e4:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80024e8:	3b80      	subs	r3, #128	@ 0x80
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024f0:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80024f4:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 80024f6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80024fa:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80024fe:	2203      	movs	r2, #3
 8002500:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8002502:	2302      	movs	r3, #2
 8002504:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002508:	e2c4      	b.n	8002a94 <process_modbus_request+0xad4>
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 寄存器地址
 800250a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800250e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	3308      	adds	r3, #8
 8002516:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800251a:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b21b      	sxth	r3, r3
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b21a      	sxth	r2, r3
 800252a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800252e:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	3309      	adds	r3, #9
 8002536:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800253a:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 800253e:	6809      	ldr	r1, [r1, #0]
 8002540:	440b      	add	r3, r1
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b21b      	sxth	r3, r3
 8002546:	4313      	orrs	r3, r2
 8002548:	b21b      	sxth	r3, r3
 800254a:	f8a7 34c4 	strh.w	r3, [r7, #1220]	@ 0x4c4
            uint16_t value = (buf[offset+10] << 8) | buf[offset+11]; // 要写入的值
 800254e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002552:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	330a      	adds	r3, #10
 800255a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800255e:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b21b      	sxth	r3, r3
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	b21a      	sxth	r2, r3
 800256e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002572:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	330b      	adds	r3, #11
 800257a:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800257e:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 8002582:	6809      	ldr	r1, [r1, #0]
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b21b      	sxth	r3, r3
 800258e:	f8a7 34c2 	strh.w	r3, [r7, #1218]	@ 0x4c2
            
            char write_info[60];
            strcpy(write_info, "Write addr=");
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4a72      	ldr	r2, [pc, #456]	@ (8002760 <process_modbus_request+0x7a0>)
 8002598:	ca07      	ldmia	r2, {r0, r1, r2}
 800259a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            int_to_str(addr, write_info + strlen(write_info), 10);
 800259e:	f8b7 44c4 	ldrh.w	r4, [r7, #1220]	@ 0x4c4
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fe12 	bl	80001d0 <strlen>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4413      	add	r3, r2
 80025b4:	220a      	movs	r2, #10
 80025b6:	4619      	mov	r1, r3
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fbc3 	bl	8001d44 <int_to_str>
            const char* val_prefix = " val=0x";
 80025be:	4b69      	ldr	r3, [pc, #420]	@ (8002764 <process_modbus_request+0x7a4>)
 80025c0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
            strcat(write_info, val_prefix);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 80025cc:	4618      	mov	r0, r3
 80025ce:	f01b f972 	bl	801d8b6 <strcat>
            // 简单的十六进制转换
            char hex_str[5];
            hex_str[4] = '\0';
 80025d2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80025d6:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 80025da:	2200      	movs	r2, #0
 80025dc:	711a      	strb	r2, [r3, #4]
            for (int j = 3; j >= 0; j--) {
 80025de:	2303      	movs	r3, #3
 80025e0:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 80025e4:	e027      	b.n	8002636 <process_modbus_request+0x676>
                int nibble = (value >> (j * 4)) & 0xF;
 80025e6:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 80025ea:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa42 f303 	asr.w	r3, r2, r3
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
                hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 80025fc:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002600:	2b09      	cmp	r3, #9
 8002602:	dc05      	bgt.n	8002610 <process_modbus_request+0x650>
 8002604:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002608:	b2db      	uxtb	r3, r3
 800260a:	3330      	adds	r3, #48	@ 0x30
 800260c:	b2db      	uxtb	r3, r3
 800260e:	e004      	b.n	800261a <process_modbus_request+0x65a>
 8002610:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8002614:	b2db      	uxtb	r3, r3
 8002616:	3337      	adds	r3, #55	@ 0x37
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	@ 0x4e8
 800261e:	f1c2 0203 	rsb	r2, r2, #3
 8002622:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 8002626:	f5a1 6194 	sub.w	r1, r1, #1184	@ 0x4a0
 800262a:	548b      	strb	r3, [r1, r2]
            for (int j = 3; j >= 0; j--) {
 800262c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 8002630:	3b01      	subs	r3, #1
 8002632:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8002636:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 800263a:	2b00      	cmp	r3, #0
 800263c:	dad3      	bge.n	80025e6 <process_modbus_request+0x626>
            }
            strcat(write_info, hex_str);
 800263e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f01b f934 	bl	801d8b6 <strcat>
            cdc_debug_log("MODBUS_TCP", write_info);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	483f      	ldr	r0, [pc, #252]	@ (8002754 <process_modbus_request+0x794>)
 8002656:	f7ff fb07 	bl	8001c68 <cdc_debug_log>
            
            // 验证地址范围
            if (addr >= 100) {
 800265a:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 800265e:	2b63      	cmp	r3, #99	@ 0x63
 8002660:	d916      	bls.n	8002690 <process_modbus_request+0x6d0>
                cdc_debug_log("MODBUS_TCP", "Write address out of bounds");
 8002662:	4941      	ldr	r1, [pc, #260]	@ (8002768 <process_modbus_request+0x7a8>)
 8002664:	483b      	ldr	r0, [pc, #236]	@ (8002754 <process_modbus_request+0x794>)
 8002666:	f7ff faff 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800266a:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800266e:	3b80      	subs	r3, #128	@ 0x80
 8002670:	b2da      	uxtb	r2, r3
 8002672:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002676:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800267a:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 800267c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002680:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002684:	2202      	movs	r2, #2
 8002686:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002688:	2302      	movs	r3, #2
 800268a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800268e:	e201      	b.n	8002a94 <process_modbus_request+0xad4>
            } else {
                // 写入寄存器
                holding_regs[addr] = value;
 8002690:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 8002694:	492d      	ldr	r1, [pc, #180]	@ (800274c <process_modbus_request+0x78c>)
 8002696:	f8b7 24c2 	ldrh.w	r2, [r7, #1218]	@ 0x4c2
 800269a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                
                // 回显请求（标准Modbus写单个寄存器响应）
                reply[7] = fc;                           // 函数码
 800269e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026a2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026a6:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80026aa:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;          // 地址高字节
 80026ac:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026ba:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026be:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                 // 地址低字节
 80026c0:	f8b7 34c4 	ldrh.w	r3, [r7, #1220]	@ 0x4c4
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026ca:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026ce:	725a      	strb	r2, [r3, #9]
                reply[10] = (value >> 8) & 0xFF;        // 值高字节
 80026d0:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026de:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026e2:	729a      	strb	r2, [r3, #10]
                reply[11] = value & 0xFF;               // 值低字节
 80026e4:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	@ 0x4c2
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80026ee:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80026f2:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 值 = 1+2+2 = 5
 80026f4:	2305      	movs	r3, #5
 80026f6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write single success");
 80026fa:	491c      	ldr	r1, [pc, #112]	@ (800276c <process_modbus_request+0x7ac>)
 80026fc:	4815      	ldr	r0, [pc, #84]	@ (8002754 <process_modbus_request+0x794>)
 80026fe:	f7ff fab3 	bl	8001c68 <cdc_debug_log>
 8002702:	e1c7      	b.n	8002a94 <process_modbus_request+0xad4>
            }
        }
    } else if (fc == FC_WRITE_MULTIPLE) {
 8002704:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002708:	2b10      	cmp	r3, #16
 800270a:	f040 81ad 	bne.w	8002a68 <process_modbus_request+0xaa8>
        cdc_debug_log("MODBUS_TCP", "Processing write multiple");
 800270e:	4918      	ldr	r1, [pc, #96]	@ (8002770 <process_modbus_request+0x7b0>)
 8002710:	4810      	ldr	r0, [pc, #64]	@ (8002754 <process_modbus_request+0x794>)
 8002712:	f7ff faa9 	bl	8001c68 <cdc_debug_log>
        
        // 检查数据长度是否足够：单元ID + 功能码 + 起始地址 + 数量 + 字节数 = 1+1+2+2+1 = 7
        if (length < 7) {
 8002716:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 800271a:	2b06      	cmp	r3, #6
 800271c:	d82c      	bhi.n	8002778 <process_modbus_request+0x7b8>
            cdc_debug_log("MODBUS_TCP", "Write multiple request too short");
 800271e:	4915      	ldr	r1, [pc, #84]	@ (8002774 <process_modbus_request+0x7b4>)
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <process_modbus_request+0x794>)
 8002722:	f7ff faa1 	bl	8001c68 <cdc_debug_log>
            reply[7] = fc + 0x80;  // 异常函数码
 8002726:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 800272a:	3b80      	subs	r3, #128	@ 0x80
 800272c:	b2da      	uxtb	r2, r3
 800272e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002732:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002736:	71da      	strb	r2, [r3, #7]
            reply[8] = 0x03;       // 异常代码：非法数据值
 8002738:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800273c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002740:	2203      	movs	r2, #3
 8002742:	721a      	strb	r2, [r3, #8]
            reply_data_len = 2;
 8002744:	2302      	movs	r3, #2
 8002746:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 800274a:	e1a3      	b.n	8002a94 <process_modbus_request+0xad4>
 800274c:	20000590 	.word	0x20000590
 8002750:	0801f228 	.word	0x0801f228
 8002754:	0801f164 	.word	0x0801f164
 8002758:	0801f238 	.word	0x0801f238
 800275c:	0801f250 	.word	0x0801f250
 8002760:	0801f270 	.word	0x0801f270
 8002764:	0801f27c 	.word	0x0801f27c
 8002768:	0801f284 	.word	0x0801f284
 800276c:	0801f2a0 	.word	0x0801f2a0
 8002770:	0801f2b8 	.word	0x0801f2b8
 8002774:	0801f2d4 	.word	0x0801f2d4
        } else {
            uint16_t addr = (buf[offset+8] << 8) | buf[offset+9];   // 起始地址
 8002778:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800277c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	3308      	adds	r3, #8
 8002784:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002788:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b21b      	sxth	r3, r3
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b21a      	sxth	r2, r3
 8002798:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800279c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	3309      	adds	r3, #9
 80027a4:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80027a8:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80027ac:	6809      	ldr	r1, [r1, #0]
 80027ae:	440b      	add	r3, r1
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
            uint16_t qty = (buf[offset+10] << 8) | buf[offset+11];  // 寄存器数量
 80027bc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027c0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	330a      	adds	r3, #10
 80027c8:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 80027cc:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	b21a      	sxth	r2, r3
 80027dc:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80027e0:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	330b      	adds	r3, #11
 80027e8:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 80027ec:	f5a1 619d 	sub.w	r1, r1, #1256	@ 0x4e8
 80027f0:	6809      	ldr	r1, [r1, #0]
 80027f2:	440b      	add	r3, r1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	b21b      	sxth	r3, r3
 80027fc:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
            uint8_t byte_count = buf[offset+12];                    // 字节数
 8002800:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002804:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8002810:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f887 34cf 	strb.w	r3, [r7, #1231]	@ 0x4cf
            
            char write_info[60];
            strcpy(write_info, "Write mult addr=");
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4a89      	ldr	r2, [pc, #548]	@ (8002a48 <process_modbus_request+0xa88>)
 8002824:	461c      	mov	r4, r3
 8002826:	4615      	mov	r5, r2
 8002828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800282a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	7023      	strb	r3, [r4, #0]
            int_to_str(addr, write_info + strlen(write_info), 10);
 8002830:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fcc9 	bl	80001d0 <strlen>
 800283e:	4602      	mov	r2, r0
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4413      	add	r3, r2
 8002846:	220a      	movs	r2, #10
 8002848:	4619      	mov	r1, r3
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff fa7a 	bl	8001d44 <int_to_str>
            const char* qty_prefix = " qty=";
 8002850:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <process_modbus_request+0xa8c>)
 8002852:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
            strcat(write_info, qty_prefix);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 800285e:	4618      	mov	r0, r3
 8002860:	f01b f829 	bl	801d8b6 <strcat>
            int_to_str(qty, write_info + strlen(write_info), 10);
 8002864:	f8b7 44d0 	ldrh.w	r4, [r7, #1232]	@ 0x4d0
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fcaf 	bl	80001d0 <strlen>
 8002872:	4602      	mov	r2, r0
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4413      	add	r3, r2
 800287a:	220a      	movs	r2, #10
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fa60 	bl	8001d44 <int_to_str>
            cdc_debug_log("MODBUS_TCP", write_info);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4619      	mov	r1, r3
 800288a:	4871      	ldr	r0, [pc, #452]	@ (8002a50 <process_modbus_request+0xa90>)
 800288c:	f7ff f9ec 	bl	8001c68 <cdc_debug_log>
            
            // 验证参数
            if (qty == 0 || qty > 123 || byte_count != qty * 2) { // Modbus标准限制
 8002890:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <process_modbus_request+0x8ee>
 8002898:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 800289c:	2b7b      	cmp	r3, #123	@ 0x7b
 800289e:	d806      	bhi.n	80028ae <process_modbus_request+0x8ee>
 80028a0:	f897 24cf 	ldrb.w	r2, [r7, #1231]	@ 0x4cf
 80028a4:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d016      	beq.n	80028dc <process_modbus_request+0x91c>
                cdc_debug_log("MODBUS_TCP", "Invalid write multiple parameters");
 80028ae:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <process_modbus_request+0xa94>)
 80028b0:	4867      	ldr	r0, [pc, #412]	@ (8002a50 <process_modbus_request+0xa90>)
 80028b2:	f7ff f9d9 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80028b6:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028ba:	3b80      	subs	r3, #128	@ 0x80
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028c2:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028c6:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 80028c8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028cc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80028d0:	2203      	movs	r2, #3
 80028d2:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 80028d4:	2302      	movs	r3, #2
 80028d6:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 80028da:	e0db      	b.n	8002a94 <process_modbus_request+0xad4>
            } else if (addr + qty > 100) { // 地址越界检查
 80028dc:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 80028e0:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80028e4:	4413      	add	r3, r2
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	dd16      	ble.n	8002918 <process_modbus_request+0x958>
                cdc_debug_log("MODBUS_TCP", "Write multiple address out of bounds");
 80028ea:	495b      	ldr	r1, [pc, #364]	@ (8002a58 <process_modbus_request+0xa98>)
 80028ec:	4858      	ldr	r0, [pc, #352]	@ (8002a50 <process_modbus_request+0xa90>)
 80028ee:	f7ff f9bb 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 80028f2:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 80028f6:	3b80      	subs	r3, #128	@ 0x80
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80028fe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002902:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x02;       // 异常代码：非法数据地址
 8002904:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002908:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800290c:	2202      	movs	r2, #2
 800290e:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 8002910:	2302      	movs	r3, #2
 8002912:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002916:	e0bd      	b.n	8002a94 <process_modbus_request+0xad4>
            } else if (length < 7 + byte_count) { // 检查是否有足够的数据
 8002918:	f897 34cf 	ldrb.w	r3, [r7, #1231]	@ 0x4cf
 800291c:	1d9a      	adds	r2, r3, #6
 800291e:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8002922:	429a      	cmp	r2, r3
 8002924:	db16      	blt.n	8002954 <process_modbus_request+0x994>
                cdc_debug_log("MODBUS_TCP", "Write multiple data incomplete");
 8002926:	494d      	ldr	r1, [pc, #308]	@ (8002a5c <process_modbus_request+0xa9c>)
 8002928:	4849      	ldr	r0, [pc, #292]	@ (8002a50 <process_modbus_request+0xa90>)
 800292a:	f7ff f99d 	bl	8001c68 <cdc_debug_log>
                reply[7] = fc + 0x80;  // 异常函数码
 800292e:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002932:	3b80      	subs	r3, #128	@ 0x80
 8002934:	b2da      	uxtb	r2, r3
 8002936:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800293a:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800293e:	71da      	strb	r2, [r3, #7]
                reply[8] = 0x03;       // 异常代码：非法数据值
 8002940:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002944:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002948:	2203      	movs	r2, #3
 800294a:	721a      	strb	r2, [r3, #8]
                reply_data_len = 2;
 800294c:	2302      	movs	r3, #2
 800294e:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
 8002952:	e09f      	b.n	8002a94 <process_modbus_request+0xad4>
            } else {
                // 写入多个寄存器
                for (uint16_t i = 0; i < qty; i++) {
 8002954:	2300      	movs	r3, #0
 8002956:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 800295a:	e03c      	b.n	80029d6 <process_modbus_request+0xa16>
                    uint16_t value = (buf[offset+13+i*2] << 8) | buf[offset+14+i*2];
 800295c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002960:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	f103 020d 	add.w	r2, r3, #13
 800296a:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	461a      	mov	r2, r3
 8002974:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002978:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	b21b      	sxth	r3, r3
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	b21a      	sxth	r2, r3
 8002988:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800298c:	f2a3 43ea 	subw	r3, r3, #1258	@ 0x4ea
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	f103 010e 	add.w	r1, r3, #14
 8002996:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	440b      	add	r3, r1
 800299e:	4619      	mov	r1, r3
 80029a0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029a4:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	440b      	add	r3, r1
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	f8a7 34c6 	strh.w	r3, [r7, #1222]	@ 0x4c6
                    holding_regs[addr + i] = value;
 80029b8:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 80029bc:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 80029c0:	4413      	add	r3, r2
 80029c2:	4927      	ldr	r1, [pc, #156]	@ (8002a60 <process_modbus_request+0xaa0>)
 80029c4:	f8b7 24c6 	ldrh.w	r2, [r7, #1222]	@ 0x4c6
 80029c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                for (uint16_t i = 0; i < qty; i++) {
 80029cc:	f8b7 34e6 	ldrh.w	r3, [r7, #1254]	@ 0x4e6
 80029d0:	3301      	adds	r3, #1
 80029d2:	f8a7 34e6 	strh.w	r3, [r7, #1254]	@ 0x4e6
 80029d6:	f8b7 24e6 	ldrh.w	r2, [r7, #1254]	@ 0x4e6
 80029da:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3bc      	bcc.n	800295c <process_modbus_request+0x99c>
                }
                
                // 响应：功能码 + 起始地址 + 寄存器数量
                reply[7] = fc;                          // 函数码
 80029e2:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029e6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80029ea:	f897 24de 	ldrb.w	r2, [r7, #1246]	@ 0x4de
 80029ee:	71da      	strb	r2, [r3, #7]
                reply[8] = (addr >> 8) & 0xFF;         // 起始地址高字节
 80029f0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 80029fe:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a02:	721a      	strb	r2, [r3, #8]
                reply[9] = addr & 0xFF;                // 起始地址低字节
 8002a04:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a0e:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a12:	725a      	strb	r2, [r3, #9]
                reply[10] = (qty >> 8) & 0xFF;         // 数量高字节
 8002a14:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a22:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a26:	729a      	strb	r2, [r3, #10]
                reply[11] = qty & 0xFF;                // 数量低字节
 8002a28:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a32:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a36:	72da      	strb	r2, [r3, #11]
                reply_data_len = 5; // 功能码 + 地址 + 数量 = 1+2+2 = 5
 8002a38:	2305      	movs	r3, #5
 8002a3a:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
                cdc_debug_log("MODBUS_TCP", "Write multiple success");
 8002a3e:	4909      	ldr	r1, [pc, #36]	@ (8002a64 <process_modbus_request+0xaa4>)
 8002a40:	4803      	ldr	r0, [pc, #12]	@ (8002a50 <process_modbus_request+0xa90>)
 8002a42:	f7ff f911 	bl	8001c68 <cdc_debug_log>
 8002a46:	e025      	b.n	8002a94 <process_modbus_request+0xad4>
 8002a48:	0801f2f8 	.word	0x0801f2f8
 8002a4c:	0801f1f4 	.word	0x0801f1f4
 8002a50:	0801f164 	.word	0x0801f164
 8002a54:	0801f30c 	.word	0x0801f30c
 8002a58:	0801f330 	.word	0x0801f330
 8002a5c:	0801f358 	.word	0x0801f358
 8002a60:	20000590 	.word	0x20000590
 8002a64:	0801f378 	.word	0x0801f378
            }
        }
    } else {
        // 其他功能码暂时返回不支持
        cdc_debug_log("MODBUS_TCP", "Unsupported function code");
 8002a68:	4974      	ldr	r1, [pc, #464]	@ (8002c3c <process_modbus_request+0xc7c>)
 8002a6a:	4875      	ldr	r0, [pc, #468]	@ (8002c40 <process_modbus_request+0xc80>)
 8002a6c:	f7ff f8fc 	bl	8001c68 <cdc_debug_log>
        reply[7] = fc + 0x80;  // 异常函数码
 8002a70:	f897 34de 	ldrb.w	r3, [r7, #1246]	@ 0x4de
 8002a74:	3b80      	subs	r3, #128	@ 0x80
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a7c:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a80:	71da      	strb	r2, [r3, #7]
        reply[8] = 0x01;       // 异常代码：非法函数码
 8002a82:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002a86:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	721a      	strb	r2, [r3, #8]
        reply_data_len = 2;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f8a7 34ee 	strh.w	r3, [r7, #1262]	@ 0x4ee
    }

    // 设置长度字段 (包含单元ID + 数据部分)
    uint16_t total_length = reply_data_len + 1; // +1 for unit_id
 8002a94:	f8b7 34ee 	ldrh.w	r3, [r7, #1262]	@ 0x4ee
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8a7 34ae 	strh.w	r3, [r7, #1198]	@ 0x4ae
    reply[4] = (total_length >> 8) & 0xFF; 
 8002a9e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002aac:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ab0:	711a      	strb	r2, [r3, #4]
    reply[5] = total_length & 0xFF;
 8002ab2:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002abc:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8002ac0:	715a      	strb	r2, [r3, #5]
    
    cdc_debug_log("MODBUS_TCP", "Sending reply");
 8002ac2:	4960      	ldr	r1, [pc, #384]	@ (8002c44 <process_modbus_request+0xc84>)
 8002ac4:	485e      	ldr	r0, [pc, #376]	@ (8002c40 <process_modbus_request+0xc80>)
 8002ac6:	f7ff f8cf 	bl	8001c68 <cdc_debug_log>
    
    // 发送完整的TCP帧 (6字节头 + 数据部分)
    uint16_t total_frame_len = 6 + total_length;
 8002aca:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	@ 0x4ae
 8002ace:	3306      	adds	r3, #6
 8002ad0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	@ 0x4ac
    
    // 检查TCP发送缓冲区是否有足够空间
    u16_t available_space = tcp_sndbuf(tpcb);
 8002ad4:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002ad8:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002ae2:	f8a7 34aa 	strh.w	r3, [r7, #1194]	@ 0x4aa
    if (available_space < total_frame_len) {
 8002ae6:	f8b7 24aa 	ldrh.w	r2, [r7, #1194]	@ 0x4aa
 8002aea:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	@ 0x4ac
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d223      	bcs.n	8002b3a <process_modbus_request+0xb7a>
        char space_msg[50];
        strcpy(space_msg, "TCP buffer low: available=");
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4a54      	ldr	r2, [pc, #336]	@ (8002c48 <process_modbus_request+0xc88>)
 8002af8:	461c      	mov	r4, r3
 8002afa:	4615      	mov	r5, r2
 8002afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b04:	c403      	stmia	r4!, {r0, r1}
 8002b06:	8022      	strh	r2, [r4, #0]
 8002b08:	3402      	adds	r4, #2
 8002b0a:	0c13      	lsrs	r3, r2, #16
 8002b0c:	7023      	strb	r3, [r4, #0]
        int_to_str(available_space, space_msg + strlen(space_msg), 10);
 8002b0e:	f8b7 44aa 	ldrh.w	r4, [r7, #1194]	@ 0x4aa
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fb5a 	bl	80001d0 <strlen>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4413      	add	r3, r2
 8002b24:	220a      	movs	r2, #10
 8002b26:	4619      	mov	r1, r3
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff f90b 	bl	8001d44 <int_to_str>
        cdc_debug_log("MODBUS_TCP", space_msg);
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	4619      	mov	r1, r3
 8002b34:	4842      	ldr	r0, [pc, #264]	@ (8002c40 <process_modbus_request+0xc80>)
 8002b36:	f7ff f897 	bl	8001c68 <cdc_debug_log>
        // 仍然尝试发送，但记录警告
    }
    
    err_t write_err = tcp_write(tpcb, reply, total_frame_len, TCP_WRITE_FLAG_COPY);
 8002b3a:	f8b7 24ac 	ldrh.w	r2, [r7, #1196]	@ 0x4ac
 8002b3e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002b42:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002b46:	f2a3 40e4 	subw	r0, r3, #1252	@ 0x4e4
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	6800      	ldr	r0, [r0, #0]
 8002b4e:	f015 fa85 	bl	801805c <tcp_write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 34a9 	strb.w	r3, [r7, #1193]	@ 0x4a9
    if (write_err != ERR_OK) {
 8002b58:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02f      	beq.n	8002bc0 <process_modbus_request+0xc00>
        char write_err_msg[40];
        strcpy(write_err_msg, "TCP write failed err=");
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	4a39      	ldr	r2, [pc, #228]	@ (8002c4c <process_modbus_request+0xc8c>)
 8002b66:	461c      	mov	r4, r3
 8002b68:	4615      	mov	r5, r2
 8002b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b72:	6020      	str	r0, [r4, #0]
 8002b74:	3404      	adds	r4, #4
 8002b76:	8021      	strh	r1, [r4, #0]
        int_to_str(write_err, write_err_msg + strlen(write_err_msg), 10);
 8002b78:	f997 44a9 	ldrsb.w	r4, [r7, #1193]	@ 0x4a9
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fb25 	bl	80001d0 <strlen>
 8002b86:	4602      	mov	r2, r0
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4413      	add	r3, r2
 8002b8e:	220a      	movs	r2, #10
 8002b90:	4619      	mov	r1, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7ff f8d6 	bl	8001d44 <int_to_str>
        cdc_debug_log("MODBUS_TCP", write_err_msg);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4828      	ldr	r0, [pc, #160]	@ (8002c40 <process_modbus_request+0xc80>)
 8002ba0:	f7ff f862 	bl	8001c68 <cdc_debug_log>
        
        // 如果发送缓冲区满了，强制输出
        if (write_err == ERR_MEM) {
 8002ba4:	f997 34a9 	ldrsb.w	r3, [r7, #1193]	@ 0x4a9
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d106      	bne.n	8002bbc <process_modbus_request+0xbfc>
            tcp_output(tpcb);
 8002bae:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002bb2:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f016 f83a 	bl	8018c30 <tcp_output>
        }
        return ERR_OK; // 即使写入失败也返回OK，避免连接中断
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e038      	b.n	8002c32 <process_modbus_request+0xc72>
    }
    
    err_t output_err = tcp_output(tpcb);
 8002bc0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8002bc4:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	f016 f831 	bl	8018c30 <tcp_output>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f887 34a8 	strb.w	r3, [r7, #1192]	@ 0x4a8
    if (output_err != ERR_OK) {
 8002bd4:	f997 34a8 	ldrsb.w	r3, [r7, #1192]	@ 0x4a8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d025      	beq.n	8002c28 <process_modbus_request+0xc68>
        char output_err_msg[40];
        strcpy(output_err_msg, "TCP output failed err=");
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <process_modbus_request+0xc90>)
 8002be2:	461c      	mov	r4, r3
 8002be4:	4615      	mov	r5, r2
 8002be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002bee:	6020      	str	r0, [r4, #0]
 8002bf0:	3404      	adds	r4, #4
 8002bf2:	8021      	strh	r1, [r4, #0]
 8002bf4:	3402      	adds	r4, #2
 8002bf6:	0c0b      	lsrs	r3, r1, #16
 8002bf8:	7023      	strb	r3, [r4, #0]
        int_to_str(output_err, output_err_msg + strlen(output_err_msg), 10);
 8002bfa:	f997 44a8 	ldrsb.w	r4, [r7, #1192]	@ 0x4a8
 8002bfe:	f107 0314 	add.w	r3, r7, #20
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fae4 	bl	80001d0 <strlen>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4413      	add	r3, r2
 8002c10:	220a      	movs	r2, #10
 8002c12:	4619      	mov	r1, r3
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff f895 	bl	8001d44 <int_to_str>
        cdc_debug_log("MODBUS_TCP", output_err_msg);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4807      	ldr	r0, [pc, #28]	@ (8002c40 <process_modbus_request+0xc80>)
 8002c22:	f7ff f821 	bl	8001c68 <cdc_debug_log>
 8002c26:	e003      	b.n	8002c30 <process_modbus_request+0xc70>
    } else {
        cdc_debug_log("MODBUS_TCP", "Reply sent successfully");
 8002c28:	490a      	ldr	r1, [pc, #40]	@ (8002c54 <process_modbus_request+0xc94>)
 8002c2a:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <process_modbus_request+0xc80>)
 8002c2c:	f7ff f81c 	bl	8001c68 <cdc_debug_log>
    }
    
    return ERR_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	f507 679e 	add.w	r7, r7, #1264	@ 0x4f0
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c3c:	0801f390 	.word	0x0801f390
 8002c40:	0801f164 	.word	0x0801f164
 8002c44:	0801f3ac 	.word	0x0801f3ac
 8002c48:	0801f3bc 	.word	0x0801f3bc
 8002c4c:	0801f3d8 	.word	0x0801f3d8
 8002c50:	0801f3f0 	.word	0x0801f3f0
 8002c54:	0801f408 	.word	0x0801f408

08002c58 <modbus_tcp_init>:

// 初始化TCP Server
void modbus_tcp_init(void) {
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b0ac      	sub	sp, #176	@ 0xb0
 8002c5c:	af00      	add	r7, sp, #0
    // 首先清零所有寄存器
    for (int i = 0; i < 100; i++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c64:	e00a      	b.n	8002c7c <modbus_tcp_init+0x24>
        holding_regs[i] = 3;
 8002c66:	4a8f      	ldr	r2, [pc, #572]	@ (8002ea4 <modbus_tcp_init+0x24c>)
 8002c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 100; i++) {
 8002c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c76:	3301      	adds	r3, #1
 8002c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c80:	2b63      	cmp	r3, #99	@ 0x63
 8002c82:	ddf0      	ble.n	8002c66 <modbus_tcp_init+0xe>
    }
    

    
    cdc_debug_log("MODBUS_TCP", "Clearing and initializing registers");
 8002c84:	4988      	ldr	r1, [pc, #544]	@ (8002ea8 <modbus_tcp_init+0x250>)
 8002c86:	4889      	ldr	r0, [pc, #548]	@ (8002eac <modbus_tcp_init+0x254>)
 8002c88:	f7fe ffee 	bl	8001c68 <cdc_debug_log>
    
    // 验证寄存器初始值并输出调试信息
    char reg_info[80];
    for (int i = 0; i < 4; i++) {
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c92:	e09f      	b.n	8002dd4 <modbus_tcp_init+0x17c>
        strcpy(reg_info, "Reg[");
 8002c94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c98:	4a85      	ldr	r2, [pc, #532]	@ (8002eb0 <modbus_tcp_init+0x258>)
 8002c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c9e:	6018      	str	r0, [r3, #0]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	7019      	strb	r1, [r3, #0]
        int_to_str(i, reg_info + strlen(reg_info), 10);
 8002ca4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fa91 	bl	80001d0 <strlen>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cb4:	4413      	add	r3, r2
 8002cb6:	220a      	movs	r2, #10
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002cbe:	f7ff f841 	bl	8001d44 <int_to_str>
        strcat(reg_info, "]=0x");
 8002cc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd fa82 	bl	80001d0 <strlen>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4a77      	ldr	r2, [pc, #476]	@ (8002eb4 <modbus_tcp_init+0x25c>)
 8002cd8:	6810      	ldr	r0, [r2, #0]
 8002cda:	6018      	str	r0, [r3, #0]
 8002cdc:	7912      	ldrb	r2, [r2, #4]
 8002cde:	711a      	strb	r2, [r3, #4]
        // 简单的十六进制转换
        uint16_t val = holding_regs[i];
 8002ce0:	4a70      	ldr	r2, [pc, #448]	@ (8002ea4 <modbus_tcp_init+0x24c>)
 8002ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
        char hex_str[5];
        hex_str[4] = '\0';
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        for (int j = 3; j >= 0; j--) {
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002cfa:	e026      	b.n	8002d4a <modbus_tcp_init+0xf2>
            int nibble = (val >> (j * 4)) & 0xF;
 8002cfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002d00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	fa42 f303 	asr.w	r3, r2, r3
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
            hex_str[3-j] = (nibble < 10) ? ('0' + nibble) : ('A' + nibble - 10);
 8002d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	dc05      	bgt.n	8002d26 <modbus_tcp_init+0xce>
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3330      	adds	r3, #48	@ 0x30
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	e004      	b.n	8002d30 <modbus_tcp_init+0xd8>
 8002d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3337      	adds	r3, #55	@ 0x37
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002d34:	f1c2 0203 	rsb	r2, r2, #3
 8002d38:	32b0      	adds	r2, #176	@ 0xb0
 8002d3a:	443a      	add	r2, r7
 8002d3c:	f802 3c78 	strb.w	r3, [r2, #-120]
        for (int j = 3; j >= 0; j--) {
 8002d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d44:	3b01      	subs	r3, #1
 8002d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	dad4      	bge.n	8002cfc <modbus_tcp_init+0xa4>
        }
        strcat(reg_info, hex_str);
 8002d52:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002d56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f01a fdaa 	bl	801d8b6 <strcat>
        strcat(reg_info, " (");
 8002d62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd fa32 	bl	80001d0 <strlen>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d74:	4413      	add	r3, r2
 8002d76:	4a50      	ldr	r2, [pc, #320]	@ (8002eb8 <modbus_tcp_init+0x260>)
 8002d78:	8811      	ldrh	r1, [r2, #0]
 8002d7a:	7892      	ldrb	r2, [r2, #2]
 8002d7c:	8019      	strh	r1, [r3, #0]
 8002d7e:	709a      	strb	r2, [r3, #2]
        int_to_str(val, reg_info + strlen(reg_info), 10);
 8002d80:	f8b7 4096 	ldrh.w	r4, [r7, #150]	@ 0x96
 8002d84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fd fa21 	bl	80001d0 <strlen>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d94:	4413      	add	r3, r2
 8002d96:	220a      	movs	r2, #10
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7fe ffd2 	bl	8001d44 <int_to_str>
        strcat(reg_info, ")");
 8002da0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd fa13 	bl	80001d0 <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002db2:	4413      	add	r3, r2
 8002db4:	4941      	ldr	r1, [pc, #260]	@ (8002ebc <modbus_tcp_init+0x264>)
 8002db6:	461a      	mov	r2, r3
 8002db8:	460b      	mov	r3, r1
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	8013      	strh	r3, [r2, #0]
        cdc_debug_log("MODBUS_TCP", reg_info);
 8002dbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4839      	ldr	r0, [pc, #228]	@ (8002eac <modbus_tcp_init+0x254>)
 8002dc6:	f7fe ff4f 	bl	8001c68 <cdc_debug_log>
    for (int i = 0; i < 4; i++) {
 8002dca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	f77f af5b 	ble.w	8002c94 <modbus_tcp_init+0x3c>
    }
    
    cdc_debug_log("MODBUS_TCP", "Register initialization verified");
 8002dde:	4938      	ldr	r1, [pc, #224]	@ (8002ec0 <modbus_tcp_init+0x268>)
 8002de0:	4832      	ldr	r0, [pc, #200]	@ (8002eac <modbus_tcp_init+0x254>)
 8002de2:	f7fe ff41 	bl	8001c68 <cdc_debug_log>
    
    struct tcp_pcb *tpcb = tcp_new();
 8002de6:	f012 fa37 	bl	8015258 <tcp_new>
 8002dea:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <modbus_tcp_init+0x1a8>
        cdc_debug_log("MODBUS_TCP", "Failed to create TCP PCB");
 8002df6:	4933      	ldr	r1, [pc, #204]	@ (8002ec4 <modbus_tcp_init+0x26c>)
 8002df8:	482c      	ldr	r0, [pc, #176]	@ (8002eac <modbus_tcp_init+0x254>)
 8002dfa:	f7fe ff35 	bl	8001c68 <cdc_debug_log>
        return;
 8002dfe:	e04e      	b.n	8002e9e <modbus_tcp_init+0x246>
    }
    
    err_t bind_err = tcp_bind(tpcb, IP_ADDR_ANY, 502); // Modbus TCP端口502
 8002e00:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8002e04:	4930      	ldr	r1, [pc, #192]	@ (8002ec8 <modbus_tcp_init+0x270>)
 8002e06:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002e0a:	f011 f97f 	bl	801410c <tcp_bind>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bind_err != ERR_OK) {
 8002e14:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d027      	beq.n	8002e6c <modbus_tcp_init+0x214>
        char err_msg[50];
        const char* prefix = "TCP bind failed: ";
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <modbus_tcp_init+0x274>)
 8002e1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        strcpy(err_msg, prefix);
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f01a fe32 	bl	801da92 <strcpy>
        int_to_str(bind_err, err_msg + strlen(prefix), sizeof(err_msg) - strlen(prefix));
 8002e2e:	f997 409f 	ldrsb.w	r4, [r7, #159]	@ 0x9f
 8002e32:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002e36:	f7fd f9cb 	bl	80001d0 <strlen>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	189d      	adds	r5, r3, r2
 8002e40:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8002e44:	f7fd f9c4 	bl	80001d0 <strlen>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
 8002e4e:	461a      	mov	r2, r3
 8002e50:	4629      	mov	r1, r5
 8002e52:	4620      	mov	r0, r4
 8002e54:	f7fe ff76 	bl	8001d44 <int_to_str>
        cdc_debug_log("MODBUS_TCP", err_msg);
 8002e58:	1d3b      	adds	r3, r7, #4
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4813      	ldr	r0, [pc, #76]	@ (8002eac <modbus_tcp_init+0x254>)
 8002e5e:	f7fe ff03 	bl	8001c68 <cdc_debug_log>
        tcp_close(tpcb);
 8002e62:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002e66:	f011 f85b 	bl	8013f20 <tcp_close>
 8002e6a:	e018      	b.n	8002e9e <modbus_tcp_init+0x246>
        return;
    }
    
    tpcb = tcp_listen(tpcb);
 8002e6c:	21ff      	movs	r1, #255	@ 0xff
 8002e6e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002e72:	f011 fa03 	bl	801427c <tcp_listen_with_backlog>
 8002e76:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    if (tpcb == NULL) {
 8002e7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <modbus_tcp_init+0x234>
        cdc_debug_log("MODBUS_TCP", "Failed to set TCP to listen mode");
 8002e82:	4913      	ldr	r1, [pc, #76]	@ (8002ed0 <modbus_tcp_init+0x278>)
 8002e84:	4809      	ldr	r0, [pc, #36]	@ (8002eac <modbus_tcp_init+0x254>)
 8002e86:	f7fe feef 	bl	8001c68 <cdc_debug_log>
        return;
 8002e8a:	e008      	b.n	8002e9e <modbus_tcp_init+0x246>
    }
    
    tcp_accept(tpcb, modbus_tcp_accept);
 8002e8c:	4911      	ldr	r1, [pc, #68]	@ (8002ed4 <modbus_tcp_init+0x27c>)
 8002e8e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002e92:	f012 fa4f 	bl	8015334 <tcp_accept>
    cdc_debug_log("MODBUS_TCP", "TCP server started on port 502");
 8002e96:	4910      	ldr	r1, [pc, #64]	@ (8002ed8 <modbus_tcp_init+0x280>)
 8002e98:	4804      	ldr	r0, [pc, #16]	@ (8002eac <modbus_tcp_init+0x254>)
 8002e9a:	f7fe fee5 	bl	8001c68 <cdc_debug_log>
}
 8002e9e:	37b0      	adds	r7, #176	@ 0xb0
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea4:	20000590 	.word	0x20000590
 8002ea8:	0801f420 	.word	0x0801f420
 8002eac:	0801f164 	.word	0x0801f164
 8002eb0:	0801f444 	.word	0x0801f444
 8002eb4:	0801f44c 	.word	0x0801f44c
 8002eb8:	0801f454 	.word	0x0801f454
 8002ebc:	0801f458 	.word	0x0801f458
 8002ec0:	0801f45c 	.word	0x0801f45c
 8002ec4:	0801f480 	.word	0x0801f480
 8002ec8:	08023174 	.word	0x08023174
 8002ecc:	0801f49c 	.word	0x0801f49c
 8002ed0:	0801f4b0 	.word	0x0801f4b0
 8002ed4:	08002fad 	.word	0x08002fad
 8002ed8:	0801f4d4 	.word	0x0801f4d4

08002edc <modbus_tcp_sent>:

// 发送确认回调
err_t modbus_tcp_sent(void *arg, struct tcp_pcb *tpcb, u16_t len) {
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b08f      	sub	sp, #60	@ 0x3c
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
    // 简单记录发送确认
    char sent_msg[40];
    strcpy(sent_msg, "TCP sent ");
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	4a17      	ldr	r2, [pc, #92]	@ (8002f4c <modbus_tcp_sent+0x70>)
 8002ef0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ef2:	c303      	stmia	r3!, {r0, r1}
 8002ef4:	801a      	strh	r2, [r3, #0]
    int_to_str(len, sent_msg + strlen(sent_msg), 10);
 8002ef6:	88fc      	ldrh	r4, [r7, #6]
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd f967 	bl	80001d0 <strlen>
 8002f02:	4602      	mov	r2, r0
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	4413      	add	r3, r2
 8002f0a:	220a      	movs	r2, #10
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7fe ff18 	bl	8001d44 <int_to_str>
    strcat(sent_msg, " bytes");
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd f959 	bl	80001d0 <strlen>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	4413      	add	r3, r2
 8002f28:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <modbus_tcp_sent+0x74>)
 8002f2a:	6810      	ldr	r0, [r2, #0]
 8002f2c:	6018      	str	r0, [r3, #0]
 8002f2e:	8891      	ldrh	r1, [r2, #4]
 8002f30:	7992      	ldrb	r2, [r2, #6]
 8002f32:	8099      	strh	r1, [r3, #4]
 8002f34:	719a      	strb	r2, [r3, #6]
    cdc_debug_log("MODBUS_TCP", sent_msg);
 8002f36:	f107 0310 	add.w	r3, r7, #16
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <modbus_tcp_sent+0x78>)
 8002f3e:	f7fe fe93 	bl	8001c68 <cdc_debug_log>
    return ERR_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	373c      	adds	r7, #60	@ 0x3c
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}
 8002f4c:	0801f4f4 	.word	0x0801f4f4
 8002f50:	0801f500 	.word	0x0801f500
 8002f54:	0801f164 	.word	0x0801f164

08002f58 <modbus_tcp_error>:

// 连接错误回调
void modbus_tcp_error(void *arg, err_t err) {
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08d      	sub	sp, #52	@ 0x34
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
    char err_msg[40];
    strcpy(err_msg, "TCP error: ");
 8002f64:	f107 0308 	add.w	r3, r7, #8
 8002f68:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <modbus_tcp_error+0x4c>)
 8002f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    int_to_str(err, err_msg + strlen(err_msg), 10);
 8002f70:	f997 4003 	ldrsb.w	r4, [r7, #3]
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd f929 	bl	80001d0 <strlen>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	4413      	add	r3, r2
 8002f86:	220a      	movs	r2, #10
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7fe feda 	bl	8001d44 <int_to_str>
    cdc_debug_log("MODBUS_TCP", err_msg);
 8002f90:	f107 0308 	add.w	r3, r7, #8
 8002f94:	4619      	mov	r1, r3
 8002f96:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <modbus_tcp_error+0x50>)
 8002f98:	f7fe fe66 	bl	8001c68 <cdc_debug_log>
}
 8002f9c:	bf00      	nop
 8002f9e:	3734      	adds	r7, #52	@ 0x34
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}
 8002fa4:	0801f508 	.word	0x0801f508
 8002fa8:	0801f164 	.word	0x0801f164

08002fac <modbus_tcp_accept>:

// Accept回调
err_t modbus_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK || newpcb == NULL) {
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d102      	bne.n	8002fc8 <modbus_tcp_accept+0x1c>
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <modbus_tcp_accept+0x2a>
        cdc_debug_log("MODBUS_TCP", "Accept failed");
 8002fc8:	4911      	ldr	r1, [pc, #68]	@ (8003010 <modbus_tcp_accept+0x64>)
 8002fca:	4812      	ldr	r0, [pc, #72]	@ (8003014 <modbus_tcp_accept+0x68>)
 8002fcc:	f7fe fe4c 	bl	8001c68 <cdc_debug_log>
        return err;
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	e017      	b.n	8003006 <modbus_tcp_accept+0x5a>
    }
    
    cdc_debug_log("MODBUS_TCP", "Client connected");
 8002fd6:	4910      	ldr	r1, [pc, #64]	@ (8003018 <modbus_tcp_accept+0x6c>)
 8002fd8:	480e      	ldr	r0, [pc, #56]	@ (8003014 <modbus_tcp_accept+0x68>)
 8002fda:	f7fe fe45 	bl	8001c68 <cdc_debug_log>
    
    // 设置连接参数
    tcp_setprio(newpcb, TCP_PRIO_MIN);
 8002fde:	2101      	movs	r1, #1
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f011 ff47 	bl	8014e74 <tcp_setprio>
    tcp_recv(newpcb, modbus_tcp_recv);
 8002fe6:	490d      	ldr	r1, [pc, #52]	@ (800301c <modbus_tcp_accept+0x70>)
 8002fe8:	68b8      	ldr	r0, [r7, #8]
 8002fea:	f012 f93d 	bl	8015268 <tcp_recv>
    tcp_sent(newpcb, modbus_tcp_sent);  // 添加发送确认回调
 8002fee:	490c      	ldr	r1, [pc, #48]	@ (8003020 <modbus_tcp_accept+0x74>)
 8002ff0:	68b8      	ldr	r0, [r7, #8]
 8002ff2:	f012 f95b 	bl	80152ac <tcp_sent>
    tcp_err(newpcb, modbus_tcp_error);
 8002ff6:	490b      	ldr	r1, [pc, #44]	@ (8003024 <modbus_tcp_accept+0x78>)
 8002ff8:	68b8      	ldr	r0, [r7, #8]
 8002ffa:	f012 f979 	bl	80152f0 <tcp_err>
    
    // 设置保活参数，防止连接超时
    tcp_keepalive(newpcb);
 8002ffe:	68b8      	ldr	r0, [r7, #8]
 8003000:	f016 fc7e 	bl	8019900 <tcp_keepalive>
    
    return ERR_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	0801f514 	.word	0x0801f514
 8003014:	0801f164 	.word	0x0801f164
 8003018:	0801f524 	.word	0x0801f524
 800301c:	08003029 	.word	0x08003029
 8003020:	08002edd 	.word	0x08002edd
 8003024:	08002f59 	.word	0x08002f59

08003028 <modbus_tcp_recv>:

// Recv回调：处理Modbus请求
err_t modbus_tcp_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 800302e:	af00      	add	r7, sp, #0
 8003030:	f507 649c 	add.w	r4, r7, #1248	@ 0x4e0
 8003034:	f2a4 44d4 	subw	r4, r4, #1236	@ 0x4d4
 8003038:	6020      	str	r0, [r4, #0]
 800303a:	f507 609c 	add.w	r0, r7, #1248	@ 0x4e0
 800303e:	f5a0 609b 	sub.w	r0, r0, #1240	@ 0x4d8
 8003042:	6001      	str	r1, [r0, #0]
 8003044:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8003048:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800304c:	600a      	str	r2, [r1, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003054:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003058:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 800305a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800305e:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003062:	f993 3000 	ldrsb.w	r3, [r3]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <modbus_tcp_recv+0x74>
        cdc_debug_log("MODBUS_TCP", "Receive error");
 800306a:	49bf      	ldr	r1, [pc, #764]	@ (8003368 <modbus_tcp_recv+0x340>)
 800306c:	48bf      	ldr	r0, [pc, #764]	@ (800336c <modbus_tcp_recv+0x344>)
 800306e:	f7fe fdfb 	bl	8001c68 <cdc_debug_log>
        if (p != NULL) {
 8003072:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003076:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <modbus_tcp_recv+0x66>
            pbuf_free(p);
 8003080:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003084:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f010 fa9f 	bl	80135cc <pbuf_free>
        }
        return err;
 800308e:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003092:	f2a3 43dd 	subw	r3, r3, #1245	@ 0x4dd
 8003096:	f993 3000 	ldrsb.w	r3, [r3]
 800309a:	e15f      	b.n	800335c <modbus_tcp_recv+0x334>
    }
    
    if (p == NULL) { // 连接关闭
 800309c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80030a0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <modbus_tcp_recv+0x9c>
        cdc_debug_log("MODBUS_TCP", "Client disconnected");
 80030aa:	49b1      	ldr	r1, [pc, #708]	@ (8003370 <modbus_tcp_recv+0x348>)
 80030ac:	48af      	ldr	r0, [pc, #700]	@ (800336c <modbus_tcp_recv+0x344>)
 80030ae:	f7fe fddb 	bl	8001c68 <cdc_debug_log>
        tcp_close(tpcb);
 80030b2:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80030b6:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	f010 ff30 	bl	8013f20 <tcp_close>
        return ERR_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e14b      	b.n	800335c <modbus_tcp_recv+0x334>
    }

    // 获取数据长度并通知TCP栈已接收
    uint16_t data_len = p->tot_len;
 80030c4:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80030c8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	891b      	ldrh	r3, [r3, #8]
 80030d0:	f8a7 34da 	strh.w	r3, [r7, #1242]	@ 0x4da
    tcp_recved(tpcb, data_len); // 重要：通知LwIP已处理数据
 80030d4:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 80030d8:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 80030dc:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80030e0:	4611      	mov	r1, r2
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	f011 f9e0 	bl	80144a8 <tcp_recved>
    
    // 添加更详细的接收数据信息
    char recv_info[60];
    const char* prefix = "Received data len=";
 80030e8:	4ba2      	ldr	r3, [pc, #648]	@ (8003374 <modbus_tcp_recv+0x34c>)
 80030ea:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
    strcpy(recv_info, prefix);
 80030ee:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80030f2:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	@ 0x4d4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f01a fccb 	bl	801da92 <strcpy>
    int_to_str(data_len, recv_info + strlen(prefix), sizeof(recv_info) - strlen(prefix));
 80030fc:	f8b7 44da 	ldrh.w	r4, [r7, #1242]	@ 0x4da
 8003100:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8003104:	f7fd f864 	bl	80001d0 <strlen>
 8003108:	4602      	mov	r2, r0
 800310a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800310e:	189d      	adds	r5, r3, r2
 8003110:	f8d7 04d4 	ldr.w	r0, [r7, #1236]	@ 0x4d4
 8003114:	f7fd f85c 	bl	80001d0 <strlen>
 8003118:	4603      	mov	r3, r0
 800311a:	f1c3 033c 	rsb	r3, r3, #60	@ 0x3c
 800311e:	461a      	mov	r2, r3
 8003120:	4629      	mov	r1, r5
 8003122:	4620      	mov	r0, r4
 8003124:	f7fe fe0e 	bl	8001d44 <int_to_str>
    cdc_debug_log("MODBUS_TCP", recv_info);
 8003128:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800312c:	4619      	mov	r1, r3
 800312e:	488f      	ldr	r0, [pc, #572]	@ (800336c <modbus_tcp_recv+0x344>)
 8003130:	f7fe fd9a 	bl	8001c68 <cdc_debug_log>

    uint8_t buf[1024];
    uint16_t len = pbuf_copy_partial(p, buf, data_len, 0);
 8003134:	f8b7 24da 	ldrh.w	r2, [r7, #1242]	@ 0x4da
 8003138:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800313c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003140:	f2a3 40dc 	subw	r0, r3, #1244	@ 0x4dc
 8003144:	2300      	movs	r3, #0
 8003146:	6800      	ldr	r0, [r0, #0]
 8003148:	f010 fc36 	bl	80139b8 <pbuf_copy_partial>
 800314c:	4603      	mov	r3, r0
 800314e:	f8a7 34d2 	strh.w	r3, [r7, #1234]	@ 0x4d2
    pbuf_free(p);
 8003152:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003156:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	f010 fa36 	bl	80135cc <pbuf_free>

    // 转储接收到的原始数据用于调试
    dump_data(buf, len);
 8003160:	f8b7 24d2 	ldrh.w	r2, [r7, #1234]	@ 0x4d2
 8003164:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fe9e 	bl	8001eac <dump_data>

    // 检查最小帧长度
    if (len < 8) { // Modbus TCP最小长度: 6字节头 + 2字节最小数据
 8003170:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 8003174:	2b07      	cmp	r3, #7
 8003176:	d806      	bhi.n	8003186 <modbus_tcp_recv+0x15e>
        cdc_debug_log("MODBUS_TCP", "Frame too short");
 8003178:	497f      	ldr	r1, [pc, #508]	@ (8003378 <modbus_tcp_recv+0x350>)
 800317a:	487c      	ldr	r0, [pc, #496]	@ (800336c <modbus_tcp_recv+0x344>)
 800317c:	f7fe fd74 	bl	8001c68 <cdc_debug_log>
        return ERR_VAL;
 8003180:	f06f 0305 	mvn.w	r3, #5
 8003184:	e0ea      	b.n	800335c <modbus_tcp_recv+0x334>
    }

    // 处理可能包含多个Modbus请求的数据包
    uint16_t offset = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
    uint16_t processed_frames = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
    
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 8003192:	e092      	b.n	80032ba <modbus_tcp_recv+0x292>
        // 检查是否还有足够的数据读取帧头
        if (offset + 6 > len) {
 8003194:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8003198:	1d5a      	adds	r2, r3, #5
 800319a:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 800319e:	429a      	cmp	r2, r3
 80031a0:	db04      	blt.n	80031ac <modbus_tcp_recv+0x184>
            cdc_debug_log("MODBUS_TCP", "No more complete frames");
 80031a2:	4976      	ldr	r1, [pc, #472]	@ (800337c <modbus_tcp_recv+0x354>)
 80031a4:	4871      	ldr	r0, [pc, #452]	@ (800336c <modbus_tcp_recv+0x344>)
 80031a6:	f7fe fd5f 	bl	8001c68 <cdc_debug_log>
            break;
 80031aa:	e093      	b.n	80032d4 <modbus_tcp_recv+0x2ac>
        }
        
        // 获取长度字段
        uint16_t frame_length = (buf[offset+4] << 8) | buf[offset+5];
 80031ac:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80031b0:	3304      	adds	r3, #4
 80031b2:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 80031b6:	f5a2 628b 	sub.w	r2, r2, #1112	@ 0x458
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	b21b      	sxth	r3, r3
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	b21a      	sxth	r2, r3
 80031c2:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80031c6:	3305      	adds	r3, #5
 80031c8:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 80031cc:	f5a1 618b 	sub.w	r1, r1, #1112	@ 0x458
 80031d0:	5ccb      	ldrb	r3, [r1, r3]
 80031d2:	b21b      	sxth	r3, r3
 80031d4:	4313      	orrs	r3, r2
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	f8a7 34d0 	strh.w	r3, [r7, #1232]	@ 0x4d0
        uint16_t total_frame_size = 6 + frame_length; // 6字节头 + 数据部分
 80031dc:	f8b7 34d0 	ldrh.w	r3, [r7, #1232]	@ 0x4d0
 80031e0:	3306      	adds	r3, #6
 80031e2:	f8a7 34ce 	strh.w	r3, [r7, #1230]	@ 0x4ce
        
        // 检查是否有完整的帧
        if (offset + total_frame_size > len) {
 80031e6:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80031ea:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 80031ee:	441a      	add	r2, r3
 80031f0:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dd21      	ble.n	800323c <modbus_tcp_recv+0x214>
            char incomplete_msg[60];
            strcpy(incomplete_msg, "Incomplete frame at offset=");
 80031f8:	f107 0310 	add.w	r3, r7, #16
 80031fc:	4a60      	ldr	r2, [pc, #384]	@ (8003380 <modbus_tcp_recv+0x358>)
 80031fe:	461c      	mov	r4, r3
 8003200:	4615      	mov	r5, r2
 8003202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800320a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            int_to_str(offset, incomplete_msg + strlen(incomplete_msg), 10);
 800320e:	f8b7 44de 	ldrh.w	r4, [r7, #1246]	@ 0x4de
 8003212:	f107 0310 	add.w	r3, r7, #16
 8003216:	4618      	mov	r0, r3
 8003218:	f7fc ffda 	bl	80001d0 <strlen>
 800321c:	4602      	mov	r2, r0
 800321e:	f107 0310 	add.w	r3, r7, #16
 8003222:	4413      	add	r3, r2
 8003224:	220a      	movs	r2, #10
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f7fe fd8b 	bl	8001d44 <int_to_str>
            cdc_debug_log("MODBUS_TCP", incomplete_msg);
 800322e:	f107 0310 	add.w	r3, r7, #16
 8003232:	4619      	mov	r1, r3
 8003234:	484d      	ldr	r0, [pc, #308]	@ (800336c <modbus_tcp_recv+0x344>)
 8003236:	f7fe fd17 	bl	8001c68 <cdc_debug_log>
            break;
 800323a:	e04b      	b.n	80032d4 <modbus_tcp_recv+0x2ac>
        }
        
        // 处理这个帧
        char frame_msg[50];
        strcpy(frame_msg, "Processing frame ");
 800323c:	f107 0310 	add.w	r3, r7, #16
 8003240:	4a50      	ldr	r2, [pc, #320]	@ (8003384 <modbus_tcp_recv+0x35c>)
 8003242:	461c      	mov	r4, r3
 8003244:	4615      	mov	r5, r2
 8003246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800324a:	682b      	ldr	r3, [r5, #0]
 800324c:	8023      	strh	r3, [r4, #0]
        int_to_str(processed_frames + 1, frame_msg + strlen(frame_msg), 10);
 800324e:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 8003252:	1c5c      	adds	r4, r3, #1
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	4618      	mov	r0, r3
 800325a:	f7fc ffb9 	bl	80001d0 <strlen>
 800325e:	4602      	mov	r2, r0
 8003260:	f107 0310 	add.w	r3, r7, #16
 8003264:	4413      	add	r3, r2
 8003266:	220a      	movs	r2, #10
 8003268:	4619      	mov	r1, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f7fe fd6a 	bl	8001d44 <int_to_str>
        cdc_debug_log("MODBUS_TCP", frame_msg);
 8003270:	f107 0310 	add.w	r3, r7, #16
 8003274:	4619      	mov	r1, r3
 8003276:	483d      	ldr	r0, [pc, #244]	@ (800336c <modbus_tcp_recv+0x344>)
 8003278:	f7fe fcf6 	bl	8001c68 <cdc_debug_log>
        
        process_modbus_request(tpcb, buf, offset);
 800327c:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003280:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8003284:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8003288:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f7fe fe97 	bl	8001fc0 <process_modbus_request>
        
        // 移动到下一个帧
        offset += total_frame_size;
 8003292:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 8003296:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	@ 0x4ce
 800329a:	4413      	add	r3, r2
 800329c:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
        processed_frames++;
 80032a0:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80032a4:	3301      	adds	r3, #1
 80032a6:	f8a7 34dc 	strh.w	r3, [r7, #1244]	@ 0x4dc
        
        // 如果只有一个标准的12字节请求，直接退出
        if (len == 12 && processed_frames == 1) {
 80032aa:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d103      	bne.n	80032ba <modbus_tcp_recv+0x292>
 80032b2:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d00b      	beq.n	80032d2 <modbus_tcp_recv+0x2aa>
    while (offset < len && processed_frames < 10) { // 最多处理10个帧，防止无限循环
 80032ba:	f8b7 24de 	ldrh.w	r2, [r7, #1246]	@ 0x4de
 80032be:	f8b7 34d2 	ldrh.w	r3, [r7, #1234]	@ 0x4d2
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d206      	bcs.n	80032d4 <modbus_tcp_recv+0x2ac>
 80032c6:	f8b7 34dc 	ldrh.w	r3, [r7, #1244]	@ 0x4dc
 80032ca:	2b09      	cmp	r3, #9
 80032cc:	f67f af62 	bls.w	8003194 <modbus_tcp_recv+0x16c>
 80032d0:	e000      	b.n	80032d4 <modbus_tcp_recv+0x2ac>
            break;
 80032d2:	bf00      	nop
        }
    }
    
    char summary_msg[60];
    strcpy(summary_msg, "Processed ");
 80032d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003388 <modbus_tcp_recv+0x360>)
 80032da:	ca07      	ldmia	r2, {r0, r1, r2}
 80032dc:	c303      	stmia	r3!, {r0, r1}
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	3302      	adds	r3, #2
 80032e2:	0c12      	lsrs	r2, r2, #16
 80032e4:	701a      	strb	r2, [r3, #0]
    int_to_str(processed_frames, summary_msg + strlen(summary_msg), 10);
 80032e6:	f8b7 44dc 	ldrh.w	r4, [r7, #1244]	@ 0x4dc
 80032ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fc ff6e 	bl	80001d0 <strlen>
 80032f4:	4602      	mov	r2, r0
 80032f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80032fa:	4413      	add	r3, r2
 80032fc:	220a      	movs	r2, #10
 80032fe:	4619      	mov	r1, r3
 8003300:	4620      	mov	r0, r4
 8003302:	f7fe fd1f 	bl	8001d44 <int_to_str>
    const char* frames_suffix = " frames from ";
 8003306:	4b21      	ldr	r3, [pc, #132]	@ (800338c <modbus_tcp_recv+0x364>)
 8003308:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
    strcat(summary_msg, frames_suffix);
 800330c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003310:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8003314:	4618      	mov	r0, r3
 8003316:	f01a face 	bl	801d8b6 <strcat>
    int_to_str(len, summary_msg + strlen(summary_msg), 10);
 800331a:	f8b7 44d2 	ldrh.w	r4, [r7, #1234]	@ 0x4d2
 800331e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003322:	4618      	mov	r0, r3
 8003324:	f7fc ff54 	bl	80001d0 <strlen>
 8003328:	4602      	mov	r2, r0
 800332a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800332e:	4413      	add	r3, r2
 8003330:	220a      	movs	r2, #10
 8003332:	4619      	mov	r1, r3
 8003334:	4620      	mov	r0, r4
 8003336:	f7fe fd05 	bl	8001d44 <int_to_str>
    const char* bytes_suffix = " bytes";
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <modbus_tcp_recv+0x368>)
 800333c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
    strcat(summary_msg, bytes_suffix);
 8003340:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003344:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 8003348:	4618      	mov	r0, r3
 800334a:	f01a fab4 	bl	801d8b6 <strcat>
    cdc_debug_log("MODBUS_TCP", summary_msg);
 800334e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <modbus_tcp_recv+0x344>)
 8003356:	f7fe fc87 	bl	8001c68 <cdc_debug_log>

    return ERR_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 8003362:	46bd      	mov	sp, r7
 8003364:	bdb0      	pop	{r4, r5, r7, pc}
 8003366:	bf00      	nop
 8003368:	0801f538 	.word	0x0801f538
 800336c:	0801f164 	.word	0x0801f164
 8003370:	0801f548 	.word	0x0801f548
 8003374:	0801f55c 	.word	0x0801f55c
 8003378:	0801f570 	.word	0x0801f570
 800337c:	0801f580 	.word	0x0801f580
 8003380:	0801f598 	.word	0x0801f598
 8003384:	0801f5b4 	.word	0x0801f5b4
 8003388:	0801f5c8 	.word	0x0801f5c8
 800338c:	0801f5d4 	.word	0x0801f5d4
 8003390:	0801f500 	.word	0x0801f500

08003394 <HAL_ETH_MspInit>:
  *   - Peripheral's GPIO Configuration  
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b092      	sub	sp, #72	@ 0x48
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a84      	ldr	r2, [pc, #528]	@ (80035c4 <HAL_ETH_MspInit+0x230>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	f040 8101 	bne.w	80035ba <HAL_ETH_MspInit+0x226>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80033bc:	4b82      	ldr	r3, [pc, #520]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	4a81      	ldr	r2, [pc, #516]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c8:	4b7f      	ldr	r3, [pc, #508]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d8:	4b7b      	ldr	r3, [pc, #492]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033dc:	4a7a      	ldr	r2, [pc, #488]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e4:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033f4:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f8:	4a73      	ldr	r2, [pc, #460]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80033fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003400:	4b71      	ldr	r3, [pc, #452]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_ETHMAC_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003410:	4b6d      	ldr	r3, [pc, #436]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	4a6c      	ldr	r2, [pc, #432]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003416:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800341a:	6313      	str	r3, [r2, #48]	@ 0x30
 800341c:	4b6a      	ldr	r3, [pc, #424]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_ETHMACTX_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	4b66      	ldr	r3, [pc, #408]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	4a65      	ldr	r2, [pc, #404]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003432:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003436:	6313      	str	r3, [r2, #48]	@ 0x30
 8003438:	4b63      	ldr	r3, [pc, #396]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003440:	623b      	str	r3, [r7, #32]
 8003442:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHMACRX_CLK_ENABLE();
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	4b5f      	ldr	r3, [pc, #380]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800344a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344c:	4a5e      	ldr	r2, [pc, #376]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800344e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003452:	6313      	str	r3, [r2, #48]	@ 0x30
 8003454:	4b5c      	ldr	r3, [pc, #368]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	69fb      	ldr	r3, [r7, #28]
    
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003460:	2300      	movs	r3, #0
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	4b58      	ldr	r3, [pc, #352]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	4a57      	ldr	r2, [pc, #348]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003470:	4b55      	ldr	r3, [pc, #340]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	4b51      	ldr	r3, [pc, #324]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003484:	4a50      	ldr	r2, [pc, #320]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	6313      	str	r3, [r2, #48]	@ 0x30
 800348c:	4b4e      	ldr	r3, [pc, #312]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	4b4a      	ldr	r3, [pc, #296]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 800349e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a0:	4a49      	ldr	r2, [pc, #292]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034a2:	f043 0304 	orr.w	r3, r3, #4
 80034a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a8:	4b47      	ldr	r3, [pc, #284]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	4b43      	ldr	r3, [pc, #268]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	4a42      	ldr	r2, [pc, #264]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c4:	4b40      	ldr	r3, [pc, #256]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b3c      	ldr	r3, [pc, #240]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4a3b      	ldr	r2, [pc, #236]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034da:	f043 0308 	orr.w	r3, r3, #8
 80034de:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e0:	4b39      	ldr	r3, [pc, #228]	@ (80035c8 <HAL_ETH_MspInit+0x234>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    PD3      ------> ETH_RESET
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034ec:	2302      	movs	r3, #2
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f8:	2303      	movs	r3, #3
 80034fa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034fc:	230b      	movs	r3, #11
 80034fe:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003500:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003504:	4619      	mov	r1, r3
 8003506:	4831      	ldr	r0, [pc, #196]	@ (80035cc <HAL_ETH_MspInit+0x238>)
 8003508:	f003 f832 	bl	8006570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800350c:	2386      	movs	r3, #134	@ 0x86
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003518:	2303      	movs	r3, #3
 800351a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800351c:	230b      	movs	r3, #11
 800351e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003520:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003524:	4619      	mov	r1, r3
 8003526:	482a      	ldr	r0, [pc, #168]	@ (80035d0 <HAL_ETH_MspInit+0x23c>)
 8003528:	f003 f822 	bl	8006570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800352c:	2330      	movs	r3, #48	@ 0x30
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800353c:	230b      	movs	r3, #11
 800353e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003544:	4619      	mov	r1, r3
 8003546:	4821      	ldr	r0, [pc, #132]	@ (80035cc <HAL_ETH_MspInit+0x238>)
 8003548:	f003 f812 	bl	8006570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800354c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003552:	2302      	movs	r3, #2
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003556:	2300      	movs	r3, #0
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800355e:	230b      	movs	r3, #11
 8003560:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003566:	4619      	mov	r1, r3
 8003568:	481a      	ldr	r0, [pc, #104]	@ (80035d4 <HAL_ETH_MspInit+0x240>)
 800356a:	f003 f801 	bl	8006570 <HAL_GPIO_Init>

    /* Configure ETH_RESET Pin (PD3) */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800356e:	2308      	movs	r3, #8
 8003570:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003572:	2301      	movs	r3, #1
 8003574:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003576:	2301      	movs	r3, #1
 8003578:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357a:	2300      	movs	r3, #0
 800357c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800357e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003582:	4619      	mov	r1, r3
 8003584:	4814      	ldr	r0, [pc, #80]	@ (80035d8 <HAL_ETH_MspInit+0x244>)
 8003586:	f002 fff3 	bl	8006570 <HAL_GPIO_Init>
    
    /* Reset PHY */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	2108      	movs	r1, #8
 800358e:	4812      	ldr	r0, [pc, #72]	@ (80035d8 <HAL_ETH_MspInit+0x244>)
 8003590:	f003 f98a 	bl	80068a8 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003594:	200a      	movs	r0, #10
 8003596:	f001 f935 	bl	8004804 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	480e      	ldr	r0, [pc, #56]	@ (80035d8 <HAL_ETH_MspInit+0x244>)
 80035a0:	f003 f982 	bl	80068a8 <HAL_GPIO_WritePin>

    HAL_Delay(100);
 80035a4:	2064      	movs	r0, #100	@ 0x64
 80035a6:	f001 f92d 	bl	8004804 <HAL_Delay>

    /* USER CODE BEGIN ETH_MspInit 1 */
    /* Configure ETH interrupt */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 80035aa:	2200      	movs	r2, #0
 80035ac:	2106      	movs	r1, #6
 80035ae:	203d      	movs	r0, #61	@ 0x3d
 80035b0:	f001 fa04 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80035b4:	203d      	movs	r0, #61	@ 0x3d
 80035b6:	f001 fa1d 	bl	80049f4 <HAL_NVIC_EnableIRQ>
    /* USER CODE END ETH_MspInit 1 */
  }
}
 80035ba:	bf00      	nop
 80035bc:	3748      	adds	r7, #72	@ 0x48
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40028000 	.word	0x40028000
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020000 	.word	0x40020000
 80035d4:	40021800 	.word	0x40021800
 80035d8:	40020c00 	.word	0x40020c00

080035dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_MspInit+0x54>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ea:	4a11      	ldr	r2, [pc, #68]	@ (8003630 <HAL_MspInit+0x54>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_MspInit+0x54>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_MspInit+0x54>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <HAL_MspInit+0x54>)
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800360c:	6413      	str	r3, [r2, #64]	@ 0x40
 800360e:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_MspInit+0x54>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	210f      	movs	r1, #15
 800361e:	f06f 0001 	mvn.w	r0, #1
 8003622:	f001 f9cb 	bl	80049bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	@ 0x38
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	4b33      	ldr	r3, [pc, #204]	@ (8003718 <HAL_InitTick+0xe4>)
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	4a32      	ldr	r2, [pc, #200]	@ (8003718 <HAL_InitTick+0xe4>)
 800364e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003652:	6413      	str	r3, [r2, #64]	@ 0x40
 8003654:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_InitTick+0xe4>)
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003660:	f107 0210 	add.w	r2, r7, #16
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f004 ffe0 	bl	8008630 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800367a:	f004 ffb1 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800367e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003680:	e004      	b.n	800368c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003682:	f004 ffad 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 8003686:	4603      	mov	r3, r0
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800368c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368e:	4a23      	ldr	r2, [pc, #140]	@ (800371c <HAL_InitTick+0xe8>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3b01      	subs	r3, #1
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800369a:	4b21      	ldr	r3, [pc, #132]	@ (8003720 <HAL_InitTick+0xec>)
 800369c:	4a21      	ldr	r2, [pc, #132]	@ (8003724 <HAL_InitTick+0xf0>)
 800369e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80036a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003720 <HAL_InitTick+0xec>)
 80036a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036a6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80036a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_InitTick+0xec>)
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80036ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003720 <HAL_InitTick+0xec>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_InitTick+0xec>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ba:	4b19      	ldr	r3, [pc, #100]	@ (8003720 <HAL_InitTick+0xec>)
 80036bc:	2200      	movs	r2, #0
 80036be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80036c0:	4817      	ldr	r0, [pc, #92]	@ (8003720 <HAL_InitTick+0xec>)
 80036c2:	f005 f82f 	bl	8008724 <HAL_TIM_Base_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11b      	bne.n	800370c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80036d4:	4812      	ldr	r0, [pc, #72]	@ (8003720 <HAL_InitTick+0xec>)
 80036d6:	f005 f875 	bl	80087c4 <HAL_TIM_Base_Start_IT>
 80036da:	4603      	mov	r3, r0
 80036dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d111      	bne.n	800370c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80036e8:	202d      	movs	r0, #45	@ 0x2d
 80036ea:	f001 f983 	bl	80049f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b0f      	cmp	r3, #15
 80036f2:	d808      	bhi.n	8003706 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80036f4:	2200      	movs	r2, #0
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	202d      	movs	r0, #45	@ 0x2d
 80036fa:	f001 f95f 	bl	80049bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <HAL_InitTick+0xf4>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e002      	b.n	800370c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800370c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003710:	4618      	mov	r0, r3
 8003712:	3738      	adds	r7, #56	@ 0x38
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40023800 	.word	0x40023800
 800371c:	431bde83 	.word	0x431bde83
 8003720:	20000658 	.word	0x20000658
 8003724:	40002000 	.word	0x40002000
 8003728:	20000004 	.word	0x20000004

0800372c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <NMI_Handler+0x4>

08003734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <HardFault_Handler+0x4>

0800373c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <MemManage_Handler+0x4>

08003744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003748:	bf00      	nop
 800374a:	e7fd      	b.n	8003748 <BusFault_Handler+0x4>

0800374c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003750:	bf00      	nop
 8003752:	e7fd      	b.n	8003750 <UsageFault_Handler+0x4>

08003754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003768:	4802      	ldr	r0, [pc, #8]	@ (8003774 <DMA1_Stream1_IRQHandler+0x10>)
 800376a:	f001 fa91 	bl	8004c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000848 	.word	0x20000848

08003778 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800377c:	4802      	ldr	r0, [pc, #8]	@ (8003788 <USART3_IRQHandler+0x10>)
 800377e:	f005 fc51 	bl	8009024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200007b8 	.word	0x200007b8

0800378c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003790:	4802      	ldr	r0, [pc, #8]	@ (800379c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003792:	f005 f887 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000658 	.word	0x20000658

080037a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80037a4:	4802      	ldr	r0, [pc, #8]	@ (80037b0 <TIM7_IRQHandler+0x10>)
 80037a6:	f005 f87d 	bl	80088a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000728 	.word	0x20000728

080037b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
           (dma_status & ETH_DMASR_TS) ? 1UL : 0UL);  // Transmit status
  
  CDC_Transmit_FS((uint8_t*)debug_msg, strlen(debug_msg));
  */
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80037b8:	4802      	ldr	r0, [pc, #8]	@ (80037c4 <ETH_IRQHandler+0x10>)
 80037ba:	f002 f833 	bl	8005824 <HAL_ETH_IRQHandler>
  /*
  char completion_msg[] = "[ETH_IRQ] IRQ Handler completed\r\n";
  CDC_Transmit_FS((uint8_t*)completion_msg, strlen(completion_msg));
  */
  /* USER CODE END ETH_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	2000540c 	.word	0x2000540c

080037c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037cc:	4802      	ldr	r0, [pc, #8]	@ (80037d8 <OTG_FS_IRQHandler+0x10>)
 80037ce:	f003 f9c8 	bl	8006b62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	2000dffc 	.word	0x2000dffc

080037dc <pump_debug_print>:
/**
  * @brief  泵驱动调试输出函数
  * @param  message: 调试信息字符串
  * @retval None
  */
static void pump_debug_print(const char* message) {
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    int len = snprintf(pump_debug_buf, sizeof(pump_debug_buf), "[PUMP] %s\r\n", message);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003814 <pump_debug_print+0x38>)
 80037e8:	2180      	movs	r1, #128	@ 0x80
 80037ea:	480b      	ldr	r0, [pc, #44]	@ (8003818 <pump_debug_print+0x3c>)
 80037ec:	f019 ffb8 	bl	801d760 <sniprintf>
 80037f0:	60f8      	str	r0, [r7, #12]
    if (len > 0 && len < sizeof(pump_debug_buf)) {
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	dd08      	ble.n	800380a <pump_debug_print+0x2e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80037fc:	d805      	bhi.n	800380a <pump_debug_print+0x2e>
        CDC_Transmit_FS((uint8_t*)pump_debug_buf, len);  // 暂时启用调试输出
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	b29b      	uxth	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	4804      	ldr	r0, [pc, #16]	@ (8003818 <pump_debug_print+0x3c>)
 8003806:	f019 f9b5 	bl	801cb74 <CDC_Transmit_FS>
    }
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	0801f5e4 	.word	0x0801f5e4
 8003818:	200006a0 	.word	0x200006a0

0800381c <send_command>:

// 发送命令并读取响应 - STM32 USART3版本 - 简化的不定长接收
int send_command(int pump_id, const char* cmd, char* response, size_t resp_size) {
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8003822:	af02      	add	r7, sp, #8
 8003824:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003828:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 800382c:	6020      	str	r0, [r4, #0]
 800382e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8003832:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 8003836:	6001      	str	r1, [r0, #0]
 8003838:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800383c:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 8003840:	600a      	str	r2, [r1, #0]
 8003842:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003846:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800384a:	6013      	str	r3, [r2, #0]
    char debug_msg[128];
    char pump_address;
    HAL_StatusTypeDef status;
    
    // 根据pump_id选择地址
    if (pump_id == 1) {
 800384c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003850:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d103      	bne.n	8003862 <send_command+0x46>
        pump_address = '1';  // 泵1地址为'1'
 800385a:	2331      	movs	r3, #49	@ 0x31
 800385c:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003860:	e01d      	b.n	800389e <send_command+0x82>
    } else if (pump_id == 2) {
 8003862:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003866:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d103      	bne.n	8003878 <send_command+0x5c>
        pump_address = '2';  // 泵2地址为'2'
 8003870:	2332      	movs	r3, #50	@ 0x32
 8003872:	f887 32b7 	strb.w	r3, [r7, #695]	@ 0x2b7
 8003876:	e012      	b.n	800389e <send_command+0x82>
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Invalid pump_id: %d", pump_id);
 8003878:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800387c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003880:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4ab9      	ldr	r2, [pc, #740]	@ (8003b6c <send_command+0x350>)
 8003888:	2180      	movs	r1, #128	@ 0x80
 800388a:	f019 ff69 	bl	801d760 <sniprintf>
        pump_debug_print(debug_msg);
 800388e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ffa2 	bl	80037dc <pump_debug_print>
        return -1;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	e160      	b.n	8003b60 <send_command+0x344>
    }
    
    // 格式化命令: /地址命令CR+LF (根据手册需要CRLF结尾)
    snprintf(buffer, sizeof(buffer), "/%c%s\r\n", pump_address, cmd);
 800389e:	f897 22b7 	ldrb.w	r2, [r7, #695]	@ 0x2b7
 80038a2:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 80038a6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80038aa:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	4aae      	ldr	r2, [pc, #696]	@ (8003b70 <send_command+0x354>)
 80038b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ba:	f019 ff51 	bl	801d760 <sniprintf>
    
    // 调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Pump%d TX: %s", pump_id, buffer);
 80038be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80038c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80038c6:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 80038ca:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 80038ce:	9200      	str	r2, [sp, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4aa8      	ldr	r2, [pc, #672]	@ (8003b74 <send_command+0x358>)
 80038d4:	2180      	movs	r1, #128	@ 0x80
 80038d6:	f019 ff43 	bl	801d760 <sniprintf>
    pump_debug_print(debug_msg);
 80038da:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff ff7c 	bl	80037dc <pump_debug_print>
    
    // 通过USART3发送命令
    status = HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), 1000);
 80038e4:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fc fc71 	bl	80001d0 <strlen>
 80038ee:	4603      	mov	r3, r0
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 80038f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038fa:	489f      	ldr	r0, [pc, #636]	@ (8003b78 <send_command+0x35c>)
 80038fc:	f005 fa70 	bl	8008de0 <HAL_UART_Transmit>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
    if (status != HAL_OK) {
 8003906:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 800390a:	2b00      	cmp	r3, #0
 800390c:	d015      	beq.n	800393a <send_command+0x11e>
        snprintf(debug_msg, sizeof(debug_msg), "Pump%d UART TX failed: %d", pump_id, status);
 800390e:	f897 22a7 	ldrb.w	r2, [r7, #679]	@ 0x2a7
 8003912:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003916:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800391a:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800391e:	9200      	str	r2, [sp, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a96      	ldr	r2, [pc, #600]	@ (8003b7c <send_command+0x360>)
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	f019 ff1b 	bl	801d760 <sniprintf>
        pump_debug_print(debug_msg);
 800392a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ff54 	bl	80037dc <pump_debug_print>
        return -1;
 8003934:	f04f 33ff 	mov.w	r3, #4294967295
 8003938:	e112      	b.n	8003b60 <send_command+0x344>
    }
    
    // 读取响应（如果需要）- 使用逐字节接收
    if (response && resp_size > 0) {
 800393a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800393e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 810a 	beq.w	8003b5e <send_command+0x342>
 800394a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800394e:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8102 	beq.w	8003b5e <send_command+0x342>
        memset(response, 0, resp_size);
 800395a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800395e:	f5a3 722e 	sub.w	r2, r3, #696	@ 0x2b8
 8003962:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003966:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	2100      	movs	r1, #0
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f019 ff99 	bl	801d8a6 <memset>
        
        uint8_t rx_char;
        size_t received_count = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
        uint32_t start_time = HAL_GetTick();
 800397a:	f000 ff37 	bl	80047ec <HAL_GetTick>
 800397e:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
        uint32_t timeout_ms = 200;  // 总超时200ms
 8003982:	23c8      	movs	r3, #200	@ 0xc8
 8003984:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
        uint32_t char_timeout_ms = 50;  // 单字符超时50ms
 8003988:	2332      	movs	r3, #50	@ 0x32
 800398a:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
        
        // 逐字节接收，直到遇到结束符或超时
        while (received_count < (resp_size - 1)) {
 800398e:	e05f      	b.n	8003a50 <send_command+0x234>
            status = HAL_UART_Receive(&huart3, &rx_char, 1, char_timeout_ms);
 8003990:	f207 111b 	addw	r1, r7, #283	@ 0x11b
 8003994:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 8003998:	2201      	movs	r2, #1
 800399a:	4877      	ldr	r0, [pc, #476]	@ (8003b78 <send_command+0x35c>)
 800399c:	f005 faab 	bl	8008ef6 <HAL_UART_Receive>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
            
            if (status == HAL_OK) {
 80039a6:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12e      	bne.n	8003a0c <send_command+0x1f0>
                response[received_count] = rx_char;
 80039ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80039b2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80039bc:	4413      	add	r3, r2
 80039be:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80039c2:	f2a2 129d 	subw	r2, r2, #413	@ 0x19d
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	701a      	strb	r2, [r3, #0]
                received_count++;
 80039ca:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80039ce:	3301      	adds	r3, #1
 80039d0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
                
                // 检查是否收到完整的结束符序列 (CRLF)
                // 只有当收到LF并且前一个字符是CR时才结束
                if (received_count >= 2 && 
 80039d4:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d912      	bls.n	8003a02 <send_command+0x1e6>
                    rx_char == 0x0A && 
 80039dc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80039e0:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80039e4:	781b      	ldrb	r3, [r3, #0]
                if (received_count >= 2 && 
 80039e6:	2b0a      	cmp	r3, #10
 80039e8:	d10b      	bne.n	8003a02 <send_command+0x1e6>
                    response[received_count-2] == 0x0D) {
 80039ea:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80039ee:	3b02      	subs	r3, #2
 80039f0:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80039f4:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	781b      	ldrb	r3, [r3, #0]
                    rx_char == 0x0A && 
 80039fe:	2b0d      	cmp	r3, #13
 8003a00:	d031      	beq.n	8003a66 <send_command+0x24a>
                    break;
                }
                
                // 重置总超时计时器（收到数据说明设备在响应）
                start_time = HAL_GetTick();
 8003a02:	f000 fef3 	bl	80047ec <HAL_GetTick>
 8003a06:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
 8003a0a:	e021      	b.n	8003a50 <send_command+0x234>
            } else if (status == HAL_TIMEOUT) {
 8003a0c:	f897 32a7 	ldrb.w	r3, [r7, #679]	@ 0x2a7
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d12a      	bne.n	8003a6a <send_command+0x24e>
                // 单字符超时，检查是否已经接收到数据
                if (received_count > 0) {
 8003a14:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00f      	beq.n	8003a3c <send_command+0x220>
                    // 已有数据，可能接收完成，等待一下看是否还有数据
                    HAL_Delay(5);  // 减少延时时间
 8003a1c:	2005      	movs	r0, #5
 8003a1e:	f000 fef1 	bl	8004804 <HAL_Delay>
                    // 给已收到数据情况下额外3次重试机会
                    static int retry_count = 0;
                    retry_count++;
 8003a22:	4b57      	ldr	r3, [pc, #348]	@ (8003b80 <send_command+0x364>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3301      	adds	r3, #1
 8003a28:	4a55      	ldr	r2, [pc, #340]	@ (8003b80 <send_command+0x364>)
 8003a2a:	6013      	str	r3, [r2, #0]
                    if (retry_count > 3) {
 8003a2c:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <send_command+0x364>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	dd03      	ble.n	8003a3c <send_command+0x220>
                        retry_count = 0;
 8003a34:	4b52      	ldr	r3, [pc, #328]	@ (8003b80 <send_command+0x364>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
                        break;  // 重试次数用完，退出
 8003a3a:	e019      	b.n	8003a70 <send_command+0x254>
                    }
                }
                
                // 检查总超时
                if (HAL_GetTick() - start_time > timeout_ms) {
 8003a3c:	f000 fed6 	bl	80047ec <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d30e      	bcc.n	8003a6e <send_command+0x252>
        while (received_count < (resp_size - 1)) {
 8003a50:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003a54:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d395      	bcc.n	8003990 <send_command+0x174>
 8003a64:	e004      	b.n	8003a70 <send_command+0x254>
                    break;
 8003a66:	bf00      	nop
 8003a68:	e002      	b.n	8003a70 <send_command+0x254>
                    break;  // 总超时，退出
                }
            } else {
                // 其他错误，退出
                break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <send_command+0x254>
                    break;  // 总超时，退出
 8003a6e:	bf00      	nop
            }
        }
        
        // 确保字符串结束
        response[received_count] = '\0';
 8003a70:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003a74:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003a7e:	4413      	add	r3, r2
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
        
        if (received_count > 0) {
 8003a84:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d055      	beq.n	8003b38 <send_command+0x31c>
            // 调试信息：显示响应 (修复格式化问题)
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX (%u bytes): [%s]", pump_id, (unsigned int)received_count, response);
 8003a8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003a90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003a94:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003a98:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8003a9c:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	9201      	str	r2, [sp, #4]
 8003aa4:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8003aa8:	9200      	str	r2, [sp, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a35      	ldr	r2, [pc, #212]	@ (8003b84 <send_command+0x368>)
 8003aae:	2180      	movs	r1, #128	@ 0x80
 8003ab0:	f019 fe56 	bl	801d760 <sniprintf>
            pump_debug_print(debug_msg);
 8003ab4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff fe8f 	bl	80037dc <pump_debug_print>
            
            // 添加十六进制显示，帮助调试
            char hex_debug[256];
            snprintf(hex_debug, sizeof(hex_debug), "Pump%d RX_HEX: ", pump_id);
 8003abe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003ac2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003ac6:	f107 0014 	add.w	r0, r7, #20
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <send_command+0x36c>)
 8003ace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ad2:	f019 fe45 	bl	801d760 <sniprintf>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003adc:	e01b      	b.n	8003b16 <send_command+0x2fa>
                char hex_byte[4];
                snprintf(hex_byte, sizeof(hex_byte), "%02X ", (unsigned char)response[i]);
 8003ade:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003ae2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8003af4:	4a25      	ldr	r2, [pc, #148]	@ (8003b8c <send_command+0x370>)
 8003af6:	2104      	movs	r1, #4
 8003af8:	f019 fe32 	bl	801d760 <sniprintf>
                strcat(hex_debug, hex_byte);
 8003afc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f019 fed5 	bl	801d8b6 <strcat>
            for (size_t i = 0; i < received_count && i < 20; i++) {  // 只显示前20个字节
 8003b0c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003b10:	3301      	adds	r3, #1
 8003b12:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8003b16:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8003b1a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d203      	bcs.n	8003b2a <send_command+0x30e>
 8003b22:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 8003b26:	2b13      	cmp	r3, #19
 8003b28:	d9d9      	bls.n	8003ade <send_command+0x2c2>
            }
            pump_debug_print(hex_debug);
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fe54 	bl	80037dc <pump_debug_print>
            
            return 0;  // 成功
 8003b34:	2300      	movs	r3, #0
 8003b36:	e013      	b.n	8003b60 <send_command+0x344>
        } else {
            snprintf(debug_msg, sizeof(debug_msg), "Pump%d RX: No data received", pump_id);
 8003b38:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003b3c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003b40:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a12      	ldr	r2, [pc, #72]	@ (8003b90 <send_command+0x374>)
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	f019 fe09 	bl	801d760 <sniprintf>
            pump_debug_print(debug_msg);
 8003b4e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fe42 	bl	80037dc <pump_debug_print>
            return -1;  // 超时无数据
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5c:	e000      	b.n	8003b60 <send_command+0x344>
        }
    }

    return 0;  // 只发送，不接收
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd90      	pop	{r4, r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0801f5f0 	.word	0x0801f5f0
 8003b70:	0801f604 	.word	0x0801f604
 8003b74:	0801f60c 	.word	0x0801f60c
 8003b78:	200007b8 	.word	0x200007b8
 8003b7c:	0801f61c 	.word	0x0801f61c
 8003b80:	20000720 	.word	0x20000720
 8003b84:	0801f638 	.word	0x0801f638
 8003b88:	0801f654 	.word	0x0801f654
 8003b8c:	0801f664 	.word	0x0801f664
 8003b90:	0801f66c 	.word	0x0801f66c

08003b94 <pump_init>:

// 初始化泵
int pump_init(int pump_id) {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    return send_command(pump_id, CMD_INIT, NULL, 0);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	4904      	ldr	r1, [pc, #16]	@ (8003bb4 <pump_init+0x20>)
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe3a 	bl	800381c <send_command>
 8003ba8:	4603      	mov	r3, r0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	0801f688 	.word	0x0801f688

08003bb8 <pump_move_absolute>:

// 绝对位置移动
int pump_move_absolute(int pump_id, int position) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08a      	sub	sp, #40	@ 0x28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    char cmd[32];
    snprintf(cmd, sizeof(cmd), CMD_ABS_MOVE, position);
 8003bc2:	f107 0008 	add.w	r0, r7, #8
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	@ (8003be8 <pump_move_absolute+0x30>)
 8003bca:	2120      	movs	r1, #32
 8003bcc:	f019 fdc8 	bl	801d760 <sniprintf>
    return send_command(pump_id, cmd, NULL, 0);
 8003bd0:	f107 0108 	add.w	r1, r7, #8
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fe1f 	bl	800381c <send_command>
 8003bde:	4603      	mov	r3, r0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	@ 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	0801f68c 	.word	0x0801f68c

08003bec <pump_query_error>:
int pump_get_status(int pump_id, char* status) {
    return send_command(pump_id, CMD_STATUS, status, 256);
}

// 查询错误码
int pump_query_error(int pump_id, char* error_code) {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
    return send_command(pump_id, CMD_ERROR_QUERY, error_code, 256);
 8003bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4904      	ldr	r1, [pc, #16]	@ (8003c10 <pump_query_error+0x24>)
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fe0c 	bl	800381c <send_command>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	0801f6b4 	.word	0x0801f6b4

08003c14 <pump_query_position>:

// 查询当前活塞位置
int pump_query_position(int pump_id, int* position) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b0e6      	sub	sp, #408	@ 0x198
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003c1e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c22:	6018      	str	r0, [r3, #0]
 8003c24:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003c28:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c2c:	6019      	str	r1, [r3, #0]
    char response[256];
    char debug_msg[128];
    
    int result = send_command(pump_id, CMD_POSITION_QUERY, response, sizeof(response));
 8003c2e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8003c32:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003c36:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8003c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c3e:	4940      	ldr	r1, [pc, #256]	@ (8003d40 <pump_query_position+0x12c>)
 8003c40:	6800      	ldr	r0, [r0, #0]
 8003c42:	f7ff fdeb 	bl	800381c <send_command>
 8003c46:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
    
    // 添加详细的调试信息
    snprintf(debug_msg, sizeof(debug_msg), "Position query result: %d", result);
 8003c4a:	f107 0008 	add.w	r0, r7, #8
 8003c4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003c52:	4a3c      	ldr	r2, [pc, #240]	@ (8003d44 <pump_query_position+0x130>)
 8003c54:	2180      	movs	r1, #128	@ 0x80
 8003c56:	f019 fd83 	bl	801d760 <sniprintf>
    pump_debug_print(debug_msg);
 8003c5a:	f107 0308 	add.w	r3, r7, #8
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fdbc 	bl	80037dc <pump_debug_print>
    
    if (result == 0 && position != NULL) {
 8003c64:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d14f      	bne.n	8003d0c <pump_query_position+0xf8>
 8003c6c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003c70:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d048      	beq.n	8003d0c <pump_query_position+0xf8>
        // 解析响应，从类似 "FF /0`3000 03 0D 0A" 格式中提取位置
        snprintf(debug_msg, sizeof(debug_msg), "Parsing response: [%s]", response);
 8003c7a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003c7e:	f107 0008 	add.w	r0, r7, #8
 8003c82:	4a31      	ldr	r2, [pc, #196]	@ (8003d48 <pump_query_position+0x134>)
 8003c84:	2180      	movs	r1, #128	@ 0x80
 8003c86:	f019 fd6b 	bl	801d760 <sniprintf>
        pump_debug_print(debug_msg);
 8003c8a:	f107 0308 	add.w	r3, r7, #8
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fda4 	bl	80037dc <pump_debug_print>
        
        // 寻找 '`' 字符后的数字
        char* pos_start = strchr(response, '`');
 8003c94:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003c98:	2160      	movs	r1, #96	@ 0x60
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f019 fe1a 	bl	801d8d4 <strchr>
 8003ca0:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        if (pos_start != NULL) {
 8003ca4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d021      	beq.n	8003cf0 <pump_query_position+0xdc>
            pos_start++; // 跳过 '`' 字符
 8003cac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            *position = atoi(pos_start);
 8003cb6:	f8d7 0188 	ldr.w	r0, [r7, #392]	@ 0x188
 8003cba:	f019 fbb7 	bl	801d42c <atoi>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003cc4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	601a      	str	r2, [r3, #0]
            snprintf(debug_msg, sizeof(debug_msg), "Parsed position: %d", *position);
 8003ccc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003cd0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f107 0008 	add.w	r0, r7, #8
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d4c <pump_query_position+0x138>)
 8003cde:	2180      	movs	r1, #128	@ 0x80
 8003ce0:	f019 fd3e 	bl	801d760 <sniprintf>
            pump_debug_print(debug_msg);
 8003ce4:	f107 0308 	add.w	r3, r7, #8
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fd77 	bl	80037dc <pump_debug_print>
    if (result == 0 && position != NULL) {
 8003cee:	e020      	b.n	8003d32 <pump_query_position+0x11e>
        } else {
            pump_debug_print("Error: No '`' character found in response");
 8003cf0:	4817      	ldr	r0, [pc, #92]	@ (8003d50 <pump_query_position+0x13c>)
 8003cf2:	f7ff fd73 	bl	80037dc <pump_debug_print>
            *position = -1;  // 解析失败
 8003cf6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003cfa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f04f 32ff 	mov.w	r2, #4294967295
 8003d04:	601a      	str	r2, [r3, #0]
            return -1;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e014      	b.n	8003d36 <pump_query_position+0x122>
        }
    } else {
        snprintf(debug_msg, sizeof(debug_msg), "Position query failed: result=%d, position=%p", 
 8003d0c:	f107 0008 	add.w	r0, r7, #8
 8003d10:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003d14:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003d20:	4a0c      	ldr	r2, [pc, #48]	@ (8003d54 <pump_query_position+0x140>)
 8003d22:	2180      	movs	r1, #128	@ 0x80
 8003d24:	f019 fd1c 	bl	801d760 <sniprintf>
                result, (void*)position);
        pump_debug_print(debug_msg);
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fd55 	bl	80037dc <pump_debug_print>
    }
    
    return result;
 8003d32:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0801f6b8 	.word	0x0801f6b8
 8003d44:	0801f6bc 	.word	0x0801f6bc
 8003d48:	0801f6d8 	.word	0x0801f6d8
 8003d4c:	0801f6f0 	.word	0x0801f6f0
 8003d50:	0801f704 	.word	0x0801f704
 8003d54:	0801f730 	.word	0x0801f730

08003d58 <pump_parse_status_byte>:
  * @brief  解析DT协议状态字节，转换为错误编号
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 对应的错误编号
  * @note   根据DT协议状态字节表进行映射，忙碌和空闲状态的错误编号相同
  */
PumpErrorCode_t pump_parse_status_byte(uint8_t status_byte) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
    // 提取低4位作为错误编号
    uint8_t error_bits = status_byte & 0x0F;
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	73fb      	strb	r3, [r7, #15]
    
    switch (error_bits) {
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	d83b      	bhi.n	8003de8 <pump_parse_status_byte+0x90>
 8003d70:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <pump_parse_status_byte+0x20>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003dbd 	.word	0x08003dbd
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003de9 	.word	0x08003de9
 8003d8c:	08003de9 	.word	0x08003de9
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dcd 	.word	0x08003dcd
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003ddd 	.word	0x08003ddd
 8003dac:	08003de9 	.word	0x08003de9
 8003db0:	08003de1 	.word	0x08003de1
 8003db4:	08003de5 	.word	0x08003de5
        case 0x00:  // 0000 - 无误
            return PUMP_ERROR_NO_ERROR;         // 0
 8003db8:	2300      	movs	r3, #0
 8003dba:	e016      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x01:  // 0001 - 初始化
            return PUMP_ERROR_INITIALIZED;      // 1
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e014      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x02:  // 0010 - 无效指令
            return PUMP_ERROR_NO_COMMAND;       // 2
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e012      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x03:  // 0011 - 无效参数
            return PUMP_ERROR_INVALID_PARAM;    // 3
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e010      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x06:  // 0110 - EEPROM故障
            return PUMP_ERROR_EEPROM_FAULT;     // 6
 8003dc8:	2306      	movs	r3, #6
 8003dca:	e00e      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x07:  // 0111 - 设备未初始化
            return PUMP_ERROR_DEVICE_NOT_INIT;  // 7
 8003dcc:	2307      	movs	r3, #7
 8003dce:	e00c      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x09:  // 1001 - 柱塞过载
            return PUMP_ERROR_OVERLOAD;         // 9
 8003dd0:	2309      	movs	r3, #9
 8003dd2:	e00a      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x0A:  // 1010 - 阀过载
            return PUMP_ERROR_VALVE_OVERLOAD;   // 10
 8003dd4:	230a      	movs	r3, #10
 8003dd6:	e008      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x0B:  // 1011 - 不支持柱移动
            return PUMP_ERROR_PLUNGER_MOVE_NOT_ALLOWED; // 11
 8003dd8:	230b      	movs	r3, #11
 8003dda:	e006      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x0C:  // 1100 - 内部故障
            return PUMP_ERROR_INTERNAL_FAULT;   // 12
 8003ddc:	230c      	movs	r3, #12
 8003dde:	e004      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x0E:  // 1110 - A/D转换器故障
            return PUMP_ERROR_AD_FAULT;         // 14
 8003de0:	230e      	movs	r3, #14
 8003de2:	e002      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        case 0x0F:  // 1111 - 指令溢出
            return PUMP_ERROR_CMD_OVERFLOW;     // 15
 8003de4:	230f      	movs	r3, #15
 8003de6:	e000      	b.n	8003dea <pump_parse_status_byte+0x92>
            
        default:
            // 未知错误码，默认返回内部故障
            return PUMP_ERROR_INTERNAL_FAULT;
 8003de8:	230c      	movs	r3, #12
    }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <pump_parse_busy_state>:
  * @brief  解析DT协议状态字节，提取忙碌状态
  * @param  status_byte: 从泵响应中提取的状态字节（HEX值）
  * @retval 忙碌状态 (PUMP_STATE_IDLE 或 PUMP_STATE_BUSY)
  * @note   高4位表示忙碌状态：0x4X=忙碌，0x6X=空闲
  */
PumpBusyState_t pump_parse_busy_state(uint8_t status_byte) {
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
    // 检查高4位
    uint8_t busy_bits = status_byte & 0xF0;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f023 030f 	bic.w	r3, r3, #15
 8003e08:	73fb      	strb	r3, [r7, #15]
    
    if (busy_bits == 0x40) {
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	2b40      	cmp	r3, #64	@ 0x40
 8003e0e:	d101      	bne.n	8003e14 <pump_parse_busy_state+0x1c>
        return PUMP_STATE_BUSY;   // 0x4X = 忙碌
 8003e10:	2301      	movs	r3, #1
 8003e12:	e005      	b.n	8003e20 <pump_parse_busy_state+0x28>
    } else if (busy_bits == 0x60) {
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b60      	cmp	r3, #96	@ 0x60
 8003e18:	d101      	bne.n	8003e1e <pump_parse_busy_state+0x26>
        return PUMP_STATE_IDLE;   // 0x6X = 空闲
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e000      	b.n	8003e20 <pump_parse_busy_state+0x28>
    } else {
        // 未知状态，默认为忙碌（安全考虑）
        return PUMP_STATE_BUSY;
 8003e1e:	2301      	movs	r3, #1
    }
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return 1;
 8003e30:	2301      	movs	r3, #1
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <_kill>:

int _kill(int pid, int sig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e46:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <_kill+0x20>)
 8003e48:	2216      	movs	r2, #22
 8003e4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	2000e83c 	.word	0x2000e83c

08003e60 <_exit>:

void _exit (int status)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f7ff ffe5 	bl	8003e3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <_exit+0x12>

08003e76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e00a      	b.n	8003e9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e88:	f3af 8000 	nop.w
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	60ba      	str	r2, [r7, #8]
 8003e94:	b2ca      	uxtb	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	617b      	str	r3, [r7, #20]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	dbf0      	blt.n	8003e88 <_read+0x12>
  }

  return len;
 8003ea6:	687b      	ldr	r3, [r7, #4]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e009      	b.n	8003ed6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	60ba      	str	r2, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dbf1      	blt.n	8003ec2 <_write+0x12>
  }
  return len;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3718      	adds	r7, #24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_close>:

int _close(int file)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f10:	605a      	str	r2, [r3, #4]
  return 0;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <_isatty>:

int _isatty(int file)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f28:	2301      	movs	r3, #1
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b085      	sub	sp, #20
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <_sbrk+0x5c>)
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <_sbrk+0x60>)
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <_sbrk+0x64>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d102      	bne.n	8003f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f6c:	4b11      	ldr	r3, [pc, #68]	@ (8003fb4 <_sbrk+0x64>)
 8003f6e:	4a12      	ldr	r2, [pc, #72]	@ (8003fb8 <_sbrk+0x68>)
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f72:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <_sbrk+0x64>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4413      	add	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d205      	bcs.n	8003f8c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003f80:	4b0e      	ldr	r3, [pc, #56]	@ (8003fbc <_sbrk+0x6c>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8a:	e009      	b.n	8003fa0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	@ (8003fb4 <_sbrk+0x64>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f92:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <_sbrk+0x64>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4413      	add	r3, r2
 8003f9a:	4a06      	ldr	r2, [pc, #24]	@ (8003fb4 <_sbrk+0x64>)
 8003f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20020000 	.word	0x20020000
 8003fb0:	00000400 	.word	0x00000400
 8003fb4:	20000724 	.word	0x20000724
 8003fb8:	2000e860 	.word	0x2000e860
 8003fbc:	2000e83c 	.word	0x2000e83c

08003fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fc4:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <SystemInit+0x20>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fca:	4a05      	ldr	r2, [pc, #20]	@ (8003fe0 <SystemInit+0x20>)
 8003fcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000ed00 	.word	0xe000ed00

08003fe4 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fea:	463b      	mov	r3, r7
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <MX_TIM7_Init+0x64>)
 8003ff4:	4a15      	ldr	r2, [pc, #84]	@ (800404c <MX_TIM7_Init+0x68>)
 8003ff6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003ff8:	4b13      	ldr	r3, [pc, #76]	@ (8004048 <MX_TIM7_Init+0x64>)
 8003ffa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003ffe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004000:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <MX_TIM7_Init+0x64>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <MX_TIM7_Init+0x64>)
 8004008:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800400c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400e:	4b0e      	ldr	r3, [pc, #56]	@ (8004048 <MX_TIM7_Init+0x64>)
 8004010:	2200      	movs	r2, #0
 8004012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004014:	480c      	ldr	r0, [pc, #48]	@ (8004048 <MX_TIM7_Init+0x64>)
 8004016:	f004 fb85 	bl	8008724 <HAL_TIM_Base_Init>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004020:	f7fd fe1c 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004028:	2300      	movs	r3, #0
 800402a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800402c:	463b      	mov	r3, r7
 800402e:	4619      	mov	r1, r3
 8004030:	4805      	ldr	r0, [pc, #20]	@ (8004048 <MX_TIM7_Init+0x64>)
 8004032:	f004 fdf5 	bl	8008c20 <HAL_TIMEx_MasterConfigSynchronization>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800403c:	f7fd fe0e 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004040:	bf00      	nop
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000728 	.word	0x20000728
 800404c:	40001400 	.word	0x40001400

08004050 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0e      	ldr	r2, [pc, #56]	@ (8004098 <HAL_TIM_Base_MspInit+0x48>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d115      	bne.n	800408e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_TIM_Base_MspInit+0x4c>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	4a0c      	ldr	r2, [pc, #48]	@ (800409c <HAL_TIM_Base_MspInit+0x4c>)
 800406c:	f043 0320 	orr.w	r3, r3, #32
 8004070:	6413      	str	r3, [r2, #64]	@ 0x40
 8004072:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <HAL_TIM_Base_MspInit+0x4c>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800407e:	2200      	movs	r2, #0
 8004080:	2105      	movs	r1, #5
 8004082:	2037      	movs	r0, #55	@ 0x37
 8004084:	f000 fc9a 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004088:	2037      	movs	r0, #55	@ 0x37
 800408a:	f000 fcb3 	bl	80049f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40001400 	.word	0x40001400
 800409c:	40023800 	.word	0x40023800

080040a0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <MX_USART1_UART_Init+0x50>)
 80040a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040b2:	4b0e      	ldr	r3, [pc, #56]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040be:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040c4:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040c6:	220c      	movs	r2, #12
 80040c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040ca:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80040d6:	4805      	ldr	r0, [pc, #20]	@ (80040ec <MX_USART1_UART_Init+0x4c>)
 80040d8:	f004 fe32 	bl	8008d40 <HAL_UART_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80040e2:	f7fd fdbb 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000770 	.word	0x20000770
 80040f0:	40011000 	.word	0x40011000

080040f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040f8:	4b11      	ldr	r3, [pc, #68]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <MX_USART3_UART_Init+0x50>)
 80040fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80040fe:	4b10      	ldr	r3, [pc, #64]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 8004100:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004104:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004106:	4b0e      	ldr	r3, [pc, #56]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 8004108:	2200      	movs	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 800410e:	2200      	movs	r2, #0
 8004110:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004112:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004118:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 800411a:	220c      	movs	r2, #12
 800411c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411e:	4b08      	ldr	r3, [pc, #32]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004124:	4b06      	ldr	r3, [pc, #24]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 8004126:	2200      	movs	r2, #0
 8004128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800412a:	4805      	ldr	r0, [pc, #20]	@ (8004140 <MX_USART3_UART_Init+0x4c>)
 800412c:	f004 fe08 	bl	8008d40 <HAL_UART_Init>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004136:	f7fd fd91 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200007b8 	.word	0x200007b8
 8004144:	40004800 	.word	0x40004800

08004148 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <MX_USART6_UART_Init+0x50>)
 8004150:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 8004154:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004158:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800415a:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004160:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 8004162:	2200      	movs	r2, #0
 8004164:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004166:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 8004168:	2200      	movs	r2, #0
 800416a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 800416e:	220c      	movs	r2, #12
 8004170:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 8004174:	2200      	movs	r2, #0
 8004176:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800417e:	4805      	ldr	r0, [pc, #20]	@ (8004194 <MX_USART6_UART_Init+0x4c>)
 8004180:	f004 fdde 	bl	8008d40 <HAL_UART_Init>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800418a:	f7fd fd67 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000800 	.word	0x20000800
 8004198:	40011400 	.word	0x40011400

0800419c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08e      	sub	sp, #56	@ 0x38
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a67      	ldr	r2, [pc, #412]	@ (8004358 <HAL_UART_MspInit+0x1bc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d12d      	bne.n	800421a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041c8:	f043 0310 	orr.w	r3, r3, #16
 80041cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80041ce:	4b63      	ldr	r3, [pc, #396]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	4b5f      	ldr	r3, [pc, #380]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	4a5e      	ldr	r2, [pc, #376]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ea:	4b5c      	ldr	r3, [pc, #368]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80041fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fc:	2302      	movs	r3, #2
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004200:	2300      	movs	r3, #0
 8004202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004204:	2303      	movs	r3, #3
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004208:	2307      	movs	r3, #7
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004210:	4619      	mov	r1, r3
 8004212:	4853      	ldr	r0, [pc, #332]	@ (8004360 <HAL_UART_MspInit+0x1c4>)
 8004214:	f002 f9ac 	bl	8006570 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004218:	e099      	b.n	800434e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a51      	ldr	r2, [pc, #324]	@ (8004364 <HAL_UART_MspInit+0x1c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d163      	bne.n	80042ec <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	4b4c      	ldr	r3, [pc, #304]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	4a4b      	ldr	r2, [pc, #300]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 800422e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004232:	6413      	str	r3, [r2, #64]	@ 0x40
 8004234:	4b49      	ldr	r3, [pc, #292]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004238:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	4b45      	ldr	r3, [pc, #276]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	4a44      	ldr	r2, [pc, #272]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 800424a:	f043 0302 	orr.w	r3, r3, #2
 800424e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004250:	4b42      	ldr	r3, [pc, #264]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800425c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004266:	2300      	movs	r3, #0
 8004268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800426a:	2303      	movs	r3, #3
 800426c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800426e:	2307      	movs	r3, #7
 8004270:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004276:	4619      	mov	r1, r3
 8004278:	483b      	ldr	r0, [pc, #236]	@ (8004368 <HAL_UART_MspInit+0x1cc>)
 800427a:	f002 f979 	bl	8006570 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800427e:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 8004280:	4a3b      	ldr	r2, [pc, #236]	@ (8004370 <HAL_UART_MspInit+0x1d4>)
 8004282:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004284:	4b39      	ldr	r3, [pc, #228]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 8004286:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800428a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800428c:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004292:	4b36      	ldr	r3, [pc, #216]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 8004294:	2200      	movs	r2, #0
 8004296:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004298:	4b34      	ldr	r3, [pc, #208]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 800429a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800429e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042a0:	4b32      	ldr	r3, [pc, #200]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042a6:	4b31      	ldr	r3, [pc, #196]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80042ac:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042b8:	4b2c      	ldr	r3, [pc, #176]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80042be:	482b      	ldr	r0, [pc, #172]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042c0:	f000 fba6 	bl	8004a10 <HAL_DMA_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_UART_MspInit+0x132>
      Error_Handler();
 80042ca:	f7fd fcc7 	bl	8001c5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <HAL_UART_MspInit+0x1d0>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042da:	2200      	movs	r2, #0
 80042dc:	2105      	movs	r1, #5
 80042de:	2027      	movs	r0, #39	@ 0x27
 80042e0:	f000 fb6c 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042e4:	2027      	movs	r0, #39	@ 0x27
 80042e6:	f000 fb85 	bl	80049f4 <HAL_NVIC_EnableIRQ>
}
 80042ea:	e030      	b.n	800434e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART6)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <HAL_UART_MspInit+0x1d8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d12b      	bne.n	800434e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	4b18      	ldr	r3, [pc, #96]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	4a17      	ldr	r2, [pc, #92]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004300:	f043 0320 	orr.w	r3, r3, #32
 8004304:	6453      	str	r3, [r2, #68]	@ 0x44
 8004306:	4b15      	ldr	r3, [pc, #84]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b11      	ldr	r3, [pc, #68]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	4a10      	ldr	r2, [pc, #64]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 800431c:	f043 0304 	orr.w	r3, r3, #4
 8004320:	6313      	str	r3, [r2, #48]	@ 0x30
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <HAL_UART_MspInit+0x1c0>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800432e:	23c0      	movs	r3, #192	@ 0xc0
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004332:	2302      	movs	r3, #2
 8004334:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433a:	2303      	movs	r3, #3
 800433c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800433e:	2308      	movs	r3, #8
 8004340:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004346:	4619      	mov	r1, r3
 8004348:	480b      	ldr	r0, [pc, #44]	@ (8004378 <HAL_UART_MspInit+0x1dc>)
 800434a:	f002 f911 	bl	8006570 <HAL_GPIO_Init>
}
 800434e:	bf00      	nop
 8004350:	3738      	adds	r7, #56	@ 0x38
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40011000 	.word	0x40011000
 800435c:	40023800 	.word	0x40023800
 8004360:	40020000 	.word	0x40020000
 8004364:	40004800 	.word	0x40004800
 8004368:	40020400 	.word	0x40020400
 800436c:	20000848 	.word	0x20000848
 8004370:	40026028 	.word	0x40026028
 8004374:	40011400 	.word	0x40011400
 8004378:	40020800 	.word	0x40020800

0800437c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800437c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004380:	f7ff fe1e 	bl	8003fc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004384:	480c      	ldr	r0, [pc, #48]	@ (80043b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004386:	490d      	ldr	r1, [pc, #52]	@ (80043bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004388:	4a0d      	ldr	r2, [pc, #52]	@ (80043c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800438c:	e002      	b.n	8004394 <LoopCopyDataInit>

0800438e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800438e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004392:	3304      	adds	r3, #4

08004394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004398:	d3f9      	bcc.n	800438e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800439c:	4c0a      	ldr	r4, [pc, #40]	@ (80043c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800439e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a0:	e001      	b.n	80043a6 <LoopFillZerobss>

080043a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a4:	3204      	adds	r2, #4

080043a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a8:	d3fb      	bcc.n	80043a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043aa:	f019 fb4b 	bl	801da44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ae:	f7fd fbbd 	bl	8001b2c <main>
  bx  lr    
 80043b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043bc:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80043c0:	08023380 	.word	0x08023380
  ldr r2, =_sbss
 80043c4:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80043c8:	2000e84c 	.word	0x2000e84c

080043cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043cc:	e7fe      	b.n	80043cc <ADC_IRQHandler>

080043ce <eth_chip_regster_bus_io>:
  * @param       ioctx�������豸IO����
  * @retval      ETH_CHIP_STATUS_OK��OK
  *              ETH_CHIP_STATUS_ERROR��ȱ�ٹ���
  */
int32_t  eth_chip_regster_bus_io(eth_chip_object_t *pobj, eth_chip_ioc_tx_t *ioctx)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
    if (!pobj || !ioctx->readreg || !ioctx->writereg || !ioctx->gettick)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <eth_chip_regster_bus_io+0x28>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <eth_chip_regster_bus_io+0x28>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <eth_chip_regster_bus_io+0x28>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <eth_chip_regster_bus_io+0x2e>
    {
        return ETH_CHIP_STATUS_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e014      	b.n	8004426 <eth_chip_regster_bus_io+0x58>
    }

    pobj->io.init = ioctx->init;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]
    pobj->io.deinit = ioctx->deinit;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]
    pobj->io.readreg = ioctx->readreg;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	615a      	str	r2, [r3, #20]
    pobj->io.writereg = ioctx->writereg;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]
    pobj->io.gettick = ioctx->gettick;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	619a      	str	r2, [r3, #24]

    return ETH_CHIP_STATUS_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <eth_chip_init>:
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д��Ĵ���
                 ETH_CHIP_STATUS_RESET_TIMEOUT���޷�ִ��������λ
  */
int32_t eth_chip_init(eth_chip_object_t *pobj)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
    int32_t status = ETH_CHIP_STATUS_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	613b      	str	r3, [r7, #16]
        LAN8720A    Register 2    0x0007
                    Register 3    0xC0F0

        RTL8201BL   Register 2    0x0000
                    Register 3    0x8201 */
    pobj->io.readreg(addr, PHY_REGISTER2, &regvalue);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f107 0208 	add.w	r2, r7, #8
 8004454:	2102      	movs	r1, #2
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	4798      	blx	r3

    switch (regvalue)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b1c      	cmp	r3, #28
 800445e:	d02d      	beq.n	80044bc <eth_chip_init+0x88>
 8004460:	2b1c      	cmp	r3, #28
 8004462:	d847      	bhi.n	80044f4 <eth_chip_init+0xc0>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <eth_chip_init+0x3a>
 8004468:	2b07      	cmp	r3, #7
 800446a:	d036      	beq.n	80044da <eth_chip_init+0xa6>
 800446c:	e042      	b.n	80044f4 <eth_chip_init+0xc0>
    {
        case YT8512C_AND_RTL8201BL_PHYREGISTER2:
            pobj->io.readreg(addr, PHY_REGISTER3, &regvalue);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f107 0208 	add.w	r2, r7, #8
 8004476:	2103      	movs	r1, #3
 8004478:	6978      	ldr	r0, [r7, #20]
 800447a:	4798      	blx	r3

            if (regvalue == 0x128)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8004482:	d10e      	bne.n	80044a2 <eth_chip_init+0x6e>
            {
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x11);
 8004484:	4b6a      	ldr	r3, [pc, #424]	@ (8004630 <eth_chip_init+0x1fc>)
 8004486:	2211      	movs	r2, #17
 8004488:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x4010);
 800448a:	4b6a      	ldr	r3, [pc, #424]	@ (8004634 <eth_chip_init+0x200>)
 800448c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8004490:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x2000);
 8004492:	4b69      	ldr	r3, [pc, #420]	@ (8004638 <eth_chip_init+0x204>)
 8004494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004498:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = YT8512C;
 800449a:	4b68      	ldr	r3, [pc, #416]	@ (800463c <eth_chip_init+0x208>)
 800449c:	2202      	movs	r2, #2
 800449e:	601a      	str	r2, [r3, #0]
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
                PHY_TYPE = RTL8201;
            }
            break;
 80044a0:	e028      	b.n	80044f4 <eth_chip_init+0xc0>
                ETH_CHIP_PHYSCSR  = ((uint16_t)0x10);
 80044a2:	4b63      	ldr	r3, [pc, #396]	@ (8004630 <eth_chip_init+0x1fc>)
 80044a4:	2210      	movs	r2, #16
 80044a6:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0022);
 80044a8:	4b62      	ldr	r3, [pc, #392]	@ (8004634 <eth_chip_init+0x200>)
 80044aa:	2222      	movs	r2, #34	@ 0x22
 80044ac:	801a      	strh	r2, [r3, #0]
                ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0004);
 80044ae:	4b62      	ldr	r3, [pc, #392]	@ (8004638 <eth_chip_init+0x204>)
 80044b0:	2204      	movs	r2, #4
 80044b2:	801a      	strh	r2, [r3, #0]
                PHY_TYPE = RTL8201;
 80044b4:	4b61      	ldr	r3, [pc, #388]	@ (800463c <eth_chip_init+0x208>)
 80044b6:	2203      	movs	r2, #3
 80044b8:	601a      	str	r2, [r3, #0]
            break;
 80044ba:	e01b      	b.n	80044f4 <eth_chip_init+0xc0>
        case SR8201F_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x00);
 80044bc:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <eth_chip_init+0x1fc>)
 80044be:	2200      	movs	r2, #0
 80044c0:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x2020);
 80044c2:	4b5c      	ldr	r3, [pc, #368]	@ (8004634 <eth_chip_init+0x200>)
 80044c4:	f242 0220 	movw	r2, #8224	@ 0x2020
 80044c8:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0100);
 80044ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004638 <eth_chip_init+0x204>)
 80044cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044d0:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = SR8201F;
 80044d2:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <eth_chip_init+0x208>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
            break;
 80044d8:	e00c      	b.n	80044f4 <eth_chip_init+0xc0>
        case LAN8720A_PHYREGISTER2:
            ETH_CHIP_PHYSCSR  = ((uint16_t)0x1F);
 80044da:	4b55      	ldr	r3, [pc, #340]	@ (8004630 <eth_chip_init+0x1fc>)
 80044dc:	221f      	movs	r2, #31
 80044de:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_SPEED_STATUS = ((uint16_t)0x0004);
 80044e0:	4b54      	ldr	r3, [pc, #336]	@ (8004634 <eth_chip_init+0x200>)
 80044e2:	2204      	movs	r2, #4
 80044e4:	801a      	strh	r2, [r3, #0]
            ETH_CHIP_DUPLEX_STATUS = ((uint16_t)0x0010);
 80044e6:	4b54      	ldr	r3, [pc, #336]	@ (8004638 <eth_chip_init+0x204>)
 80044e8:	2210      	movs	r2, #16
 80044ea:	801a      	strh	r2, [r3, #0]
            PHY_TYPE = LAN8720;
 80044ec:	4b53      	ldr	r3, [pc, #332]	@ (800463c <eth_chip_init+0x208>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
            break;
 80044f2:	bf00      	nop
    }
#endif

    if (pobj->is_initialized == 0)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d17e      	bne.n	80045fa <eth_chip_init+0x1c6>
    {
        if (pobj->io.init != 0)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <eth_chip_init+0xd6>
        {
            /* MDCʱ�� */
            pobj->io.init();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4798      	blx	r3
        }

        /* ����PHY��ַΪ32 */
        pobj->devaddr = ETH_CHIP_MAX_DEV_ADDR + 1;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	601a      	str	r2, [r3, #0]

        /* ��ҪΪ�˲���PHY��ַ */
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	e01e      	b.n	8004554 <eth_chip_init+0x120>
        {
            if (pobj->io.readreg(addr, ETH_CHIP_PHYSCSR, &regvalue) < 0)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4a45      	ldr	r2, [pc, #276]	@ (8004630 <eth_chip_init+0x1fc>)
 800451c:	8812      	ldrh	r2, [r2, #0]
 800451e:	4611      	mov	r1, r2
 8004520:	f107 0208 	add.w	r2, r7, #8
 8004524:	6978      	ldr	r0, [r7, #20]
 8004526:	4798      	blx	r3
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	da03      	bge.n	8004536 <eth_chip_init+0x102>
            {
                status = ETH_CHIP_STATUS_READ_ERROR;
 800452e:	f06f 0304 	mvn.w	r3, #4
 8004532:	613b      	str	r3, [r7, #16]
                /* �޷���ȡ����豸��ַ������һ����ַ */
                continue;
 8004534:	e00b      	b.n	800454e <eth_chip_init+0x11a>
            }
            /* �Ѿ��ҵ�PHY��ַ�� */
            if ((regvalue & ETH_CHIP_PHY_COUNT) == addr)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d105      	bne.n	800454e <eth_chip_init+0x11a>
            {
                pobj->devaddr = addr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	601a      	str	r2, [r3, #0]
                status = ETH_CHIP_STATUS_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
                break;
 800454c:	e005      	b.n	800455a <eth_chip_init+0x126>
        for (addr = 0; addr <= ETH_CHIP_MAX_DEV_ADDR; addr ++)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	3301      	adds	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b1f      	cmp	r3, #31
 8004558:	d9dd      	bls.n	8004516 <eth_chip_init+0xe2>
            }
        }

        /* �ж����PHY��ַ�Ƿ����32��2^5��*/
        if (pobj->devaddr > ETH_CHIP_MAX_DEV_ADDR)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b1f      	cmp	r3, #31
 8004560:	d902      	bls.n	8004568 <eth_chip_init+0x134>
        {
            status = ETH_CHIP_STATUS_ADDRESS_ERROR;
 8004562:	f06f 0302 	mvn.w	r3, #2
 8004566:	613b      	str	r3, [r7, #16]
        }

        /* ���PHY��ַ��Ч */
        if (status == ETH_CHIP_STATUS_OK)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d145      	bne.n	80045fa <eth_chip_init+0x1c6>
        {
            /* ����������λ  */
            if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, ETH_CHIP_BCR_SOFT_RESET) >= 0)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6810      	ldr	r0, [r2, #0]
 8004576:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800457a:	2100      	movs	r1, #0
 800457c:	4798      	blx	r3
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	db37      	blt.n	80045f4 <eth_chip_init+0x1c0>
            {
                /* ��ȡ��������״̬ */
                if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) >= 0)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6810      	ldr	r0, [r2, #0]
 800458c:	f107 0208 	add.w	r2, r7, #8
 8004590:	2100      	movs	r1, #0
 8004592:	4798      	blx	r3
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	db28      	blt.n	80045ec <eth_chip_init+0x1b8>
                {
                    tickstart = pobj->io.gettick();
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	4798      	blx	r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	60fb      	str	r3, [r7, #12]

                    /* �ȴ�������λ��ɻ�ʱ  */
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80045a4:	e01c      	b.n	80045e0 <eth_chip_init+0x1ac>
                    {
                        if ((pobj->io.gettick() - tickstart) <= ETH_CHIP_SW_RESET_TO)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4798      	blx	r3
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80045b8:	d80e      	bhi.n	80045d8 <eth_chip_init+0x1a4>
                        {
                            if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &regvalue) < 0)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6810      	ldr	r0, [r2, #0]
 80045c2:	f107 0208 	add.w	r2, r7, #8
 80045c6:	2100      	movs	r1, #0
 80045c8:	4798      	blx	r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da07      	bge.n	80045e0 <eth_chip_init+0x1ac>
                            {
                                status = ETH_CHIP_STATUS_READ_ERROR;
 80045d0:	f06f 0304 	mvn.w	r3, #4
 80045d4:	613b      	str	r3, [r7, #16]
                                break;
 80045d6:	e010      	b.n	80045fa <eth_chip_init+0x1c6>
                            }
                        }
                        else
                        {
                            status = ETH_CHIP_STATUS_RESET_TIMEOUT;
 80045d8:	f06f 0301 	mvn.w	r3, #1
 80045dc:	613b      	str	r3, [r7, #16]
                            break;
 80045de:	e00c      	b.n	80045fa <eth_chip_init+0x1c6>
                    while (regvalue & ETH_CHIP_BCR_SOFT_RESET)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1dd      	bne.n	80045a6 <eth_chip_init+0x172>
 80045ea:	e006      	b.n	80045fa <eth_chip_init+0x1c6>
                        }
                    }
                }
                else
                {
                    status = ETH_CHIP_STATUS_READ_ERROR;
 80045ec:	f06f 0304 	mvn.w	r3, #4
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e002      	b.n	80045fa <eth_chip_init+0x1c6>
                }
            }
            else
            {
                status = ETH_CHIP_STATUS_WRITE_ERROR;
 80045f4:	f06f 0303 	mvn.w	r3, #3
 80045f8:	613b      	str	r3, [r7, #16]
            }
        }
    }

    /* ���������ʼ����ɣ����� */
    if (status == ETH_CHIP_STATUS_OK)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d112      	bne.n	8004626 <eth_chip_init+0x1f2>
    {
        tickstart =  pobj->io.gettick();
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	4798      	blx	r3
 8004606:	4603      	mov	r3, r0
 8004608:	60fb      	str	r3, [r7, #12]

        /* �ȴ�2s���г�ʼ�� */
        while ((pobj->io.gettick() - tickstart) <= ETH_CHIP_INIT_TO)
 800460a:	bf00      	nop
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	4798      	blx	r3
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800461e:	d9f5      	bls.n	800460c <eth_chip_init+0x1d8>
        {
        }
        pobj->is_initialized = 1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	605a      	str	r2, [r3, #4]
    }

    return status;
 8004626:	693b      	ldr	r3, [r7, #16]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	200008ac 	.word	0x200008ac
 8004634:	200008ae 	.word	0x200008ae
 8004638:	200008b0 	.word	0x200008b0
 800463c:	200008a8 	.word	0x200008a8

08004640 <eth_chip_disable_power_down_mode>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_disable_power_down_mode(eth_chip_object_t *pobj)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6810      	ldr	r0, [r2, #0]
 8004658:	f107 0208 	add.w	r2, r7, #8
 800465c:	2100      	movs	r1, #0
 800465e:	4798      	blx	r3
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	db11      	blt.n	800468a <eth_chip_disable_power_down_mode+0x4a>
    {
        readval &= ~ETH_CHIP_BCR_POWER_DOWN;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800466c:	60bb      	str	r3, [r7, #8]

        /* ����µ�ģʽ */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6810      	ldr	r0, [r2, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	2100      	movs	r1, #0
 800467a:	4798      	blx	r3
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	da06      	bge.n	8004690 <eth_chip_disable_power_down_mode+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 8004682:	f06f 0303 	mvn.w	r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e002      	b.n	8004690 <eth_chip_disable_power_down_mode+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 800468a:	f06f 0304 	mvn.w	r3, #4
 800468e:	60fb      	str	r3, [r7, #12]
    }

    return status;
 8004690:	68fb      	ldr	r3, [r7, #12]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <eth_chip_start_auto_nego>:
  * @retval      ETH_CHIP_STATUS_OK���رճɹ�
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
                 ETH_CHIP_STATUS_WRITE_ERROR������д�Ĵ���
  */
int32_t eth_chip_start_auto_nego(eth_chip_object_t *pobj)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
    int32_t status = ETH_CHIP_STATUS_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]

    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_BCR, &readval) >= 0)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6810      	ldr	r0, [r2, #0]
 80046b2:	f107 0208 	add.w	r2, r7, #8
 80046b6:	2100      	movs	r1, #0
 80046b8:	4798      	blx	r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db11      	blt.n	80046e4 <eth_chip_start_auto_nego+0x4a>
    {
        readval |= ETH_CHIP_BCR_AUTONEGO_EN;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046c6:	60bb      	str	r3, [r7, #8]

        /* �����Զ�Э�� */
        if (pobj->io.writereg(pobj->devaddr, ETH_CHIP_BCR, readval) < 0)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6810      	ldr	r0, [r2, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	2100      	movs	r1, #0
 80046d4:	4798      	blx	r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da06      	bge.n	80046ea <eth_chip_start_auto_nego+0x50>
        {
            status =  ETH_CHIP_STATUS_WRITE_ERROR;
 80046dc:	f06f 0303 	mvn.w	r3, #3
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e002      	b.n	80046ea <eth_chip_start_auto_nego+0x50>
        }
    }
    else
    {
        status = ETH_CHIP_STATUS_READ_ERROR;
 80046e4:	f06f 0304 	mvn.w	r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
    }

    return status;
 80046ea:	68fb      	ldr	r3, [r7, #12]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <eth_chip_get_link_state>:
                 ETH_CHIP_STATUS_10MBITS_FULLDUPLEX��10M��ȫ˫��
                 ETH_CHIP_STATUS_10MBITS_HALFDUPLEX ��10M����˫��
                 ETH_CHIP_STATUS_READ_ERROR�����ܶ�ȡ�Ĵ���
  */
int32_t eth_chip_get_link_state(eth_chip_object_t *pobj)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    uint32_t readval = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]

    /* ������⹦�ܼĴ�������ֵ */
    if (pobj->io.readreg(pobj->devaddr, ETH_CHIP_PHYSCSR, &readval) < 0)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6810      	ldr	r0, [r2, #0]
 8004708:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <eth_chip_get_link_state+0x80>)
 800470a:	8812      	ldrh	r2, [r2, #0]
 800470c:	4611      	mov	r1, r2
 800470e:	f107 020c 	add.w	r2, r7, #12
 8004712:	4798      	blx	r3
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	da02      	bge.n	8004720 <eth_chip_get_link_state+0x2c>
    {
        return ETH_CHIP_STATUS_READ_ERROR;
 800471a:	f06f 0304 	mvn.w	r3, #4
 800471e:	e024      	b.n	800476a <eth_chip_get_link_state+0x76>
    }

    if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS) && ((readval & ETH_CHIP_DUPLEX_STATUS) != 0))
 8004720:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <eth_chip_get_link_state+0x84>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4013      	ands	r3, r2
 800472a:	4a13      	ldr	r2, [pc, #76]	@ (8004778 <eth_chip_get_link_state+0x84>)
 800472c:	8812      	ldrh	r2, [r2, #0]
 800472e:	4293      	cmp	r3, r2
 8004730:	d008      	beq.n	8004744 <eth_chip_get_link_state+0x50>
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <eth_chip_get_link_state+0x88>)
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <eth_chip_get_link_state+0x50>
    {
        return ETH_CHIP_STATUS_100MBITS_FULLDUPLEX;
 8004740:	2302      	movs	r3, #2
 8004742:	e012      	b.n	800476a <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_SPEED_STATUS) != ETH_CHIP_SPEED_STATUS))
 8004744:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <eth_chip_get_link_state+0x84>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4013      	ands	r3, r2
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <eth_chip_get_link_state+0x84>)
 8004750:	8812      	ldrh	r2, [r2, #0]
 8004752:	4293      	cmp	r3, r2
 8004754:	d001      	beq.n	800475a <eth_chip_get_link_state+0x66>
    {
        return ETH_CHIP_STATUS_100MBITS_HALFDUPLEX;
 8004756:	2303      	movs	r3, #3
 8004758:	e007      	b.n	800476a <eth_chip_get_link_state+0x76>
    }
    else if (((readval & ETH_CHIP_BCR_DUPLEX_MODE) != ETH_CHIP_BCR_DUPLEX_MODE))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <eth_chip_get_link_state+0x74>
    {
        return ETH_CHIP_STATUS_10MBITS_FULLDUPLEX;
 8004764:	2304      	movs	r3, #4
 8004766:	e000      	b.n	800476a <eth_chip_get_link_state+0x76>
    }
    else
    {
        return ETH_CHIP_STATUS_10MBITS_HALFDUPLEX;
 8004768:	2305      	movs	r3, #5
    }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200008ac 	.word	0x200008ac
 8004778:	200008ae 	.word	0x200008ae
 800477c:	200008b0 	.word	0x200008b0

08004780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004784:	4b0e      	ldr	r3, [pc, #56]	@ (80047c0 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0d      	ldr	r2, [pc, #52]	@ (80047c0 <HAL_Init+0x40>)
 800478a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800478e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004790:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a0a      	ldr	r2, [pc, #40]	@ (80047c0 <HAL_Init+0x40>)
 8004796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800479a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <HAL_Init+0x40>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a07      	ldr	r2, [pc, #28]	@ (80047c0 <HAL_Init+0x40>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047a8:	2003      	movs	r0, #3
 80047aa:	f000 f8fc 	bl	80049a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ae:	200f      	movs	r0, #15
 80047b0:	f7fe ff40 	bl	8003634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047b4:	f7fe ff12 	bl	80035dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00

080047c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c8:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_IncTick+0x20>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b06      	ldr	r3, [pc, #24]	@ (80047e8 <HAL_IncTick+0x24>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_IncTick+0x24>)
 80047d6:	6013      	str	r3, [r2, #0]
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000008 	.word	0x20000008
 80047e8:	200008b4 	.word	0x200008b4

080047ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return uwTick;
 80047f0:	4b03      	ldr	r3, [pc, #12]	@ (8004800 <HAL_GetTick+0x14>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	200008b4 	.word	0x200008b4

08004804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7ff ffee 	bl	80047ec <HAL_GetTick>
 8004810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481c:	d005      	beq.n	800482a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_Delay+0x44>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	461a      	mov	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800482a:	bf00      	nop
 800482c:	f7ff ffde 	bl	80047ec <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	429a      	cmp	r2, r3
 800483a:	d8f7      	bhi.n	800482c <HAL_Delay+0x28>
  {
  }
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000008 	.word	0x20000008

0800484c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004868:	4013      	ands	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487e:	4a04      	ldr	r2, [pc, #16]	@ (8004890 <__NVIC_SetPriorityGrouping+0x44>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	60d3      	str	r3, [r2, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	e000ed00 	.word	0xe000ed00

08004894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004898:	4b04      	ldr	r3, [pc, #16]	@ (80048ac <__NVIC_GetPriorityGrouping+0x18>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	f003 0307 	and.w	r3, r3, #7
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db0b      	blt.n	80048da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	f003 021f 	and.w	r2, r3, #31
 80048c8:	4907      	ldr	r1, [pc, #28]	@ (80048e8 <__NVIC_EnableIRQ+0x38>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	2001      	movs	r0, #1
 80048d2:	fa00 f202 	lsl.w	r2, r0, r2
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	e000e100 	.word	0xe000e100

080048ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	6039      	str	r1, [r7, #0]
 80048f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	db0a      	blt.n	8004916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	490c      	ldr	r1, [pc, #48]	@ (8004938 <__NVIC_SetPriority+0x4c>)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	0112      	lsls	r2, r2, #4
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	440b      	add	r3, r1
 8004910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004914:	e00a      	b.n	800492c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4908      	ldr	r1, [pc, #32]	@ (800493c <__NVIC_SetPriority+0x50>)
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3b04      	subs	r3, #4
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	440b      	add	r3, r1
 800492a:	761a      	strb	r2, [r3, #24]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000e100 	.word	0xe000e100
 800493c:	e000ed00 	.word	0xe000ed00

08004940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	@ 0x24
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	f1c3 0307 	rsb	r3, r3, #7
 800495a:	2b04      	cmp	r3, #4
 800495c:	bf28      	it	cs
 800495e:	2304      	movcs	r3, #4
 8004960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3304      	adds	r3, #4
 8004966:	2b06      	cmp	r3, #6
 8004968:	d902      	bls.n	8004970 <NVIC_EncodePriority+0x30>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3b03      	subs	r3, #3
 800496e:	e000      	b.n	8004972 <NVIC_EncodePriority+0x32>
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004974:	f04f 32ff 	mov.w	r2, #4294967295
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43da      	mvns	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	401a      	ands	r2, r3
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004988:	f04f 31ff 	mov.w	r1, #4294967295
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43d9      	mvns	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004998:	4313      	orrs	r3, r2
         );
}
 800499a:	4618      	mov	r0, r3
 800499c:	3724      	adds	r7, #36	@ 0x24
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ff4c 	bl	800484c <__NVIC_SetPriorityGrouping>
}
 80049b4:	bf00      	nop
 80049b6:	3708      	adds	r7, #8
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049ce:	f7ff ff61 	bl	8004894 <__NVIC_GetPriorityGrouping>
 80049d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68b9      	ldr	r1, [r7, #8]
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f7ff ffb1 	bl	8004940 <NVIC_EncodePriority>
 80049de:	4602      	mov	r2, r0
 80049e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e4:	4611      	mov	r1, r2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ff80 	bl	80048ec <__NVIC_SetPriority>
}
 80049ec:	bf00      	nop
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ff54 	bl	80048b0 <__NVIC_EnableIRQ>
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff fee6 	bl	80047ec <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e099      	b.n	8004b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a4c:	e00f      	b.n	8004a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a4e:	f7ff fecd 	bl	80047ec <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d908      	bls.n	8004a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e078      	b.n	8004b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e8      	bne.n	8004a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4b38      	ldr	r3, [pc, #224]	@ (8004b68 <HAL_DMA_Init+0x158>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d107      	bne.n	8004ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d117      	bne.n	8004b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00e      	beq.n	8004b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fa7b 	bl	8005010 <DMA_CheckFifoParam>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2240      	movs	r2, #64	@ 0x40
 8004b24:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e016      	b.n	8004b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fa32 	bl	8004fa4 <DMA_CalcBaseAndBitshift>
 8004b40:	4603      	mov	r3, r0
 8004b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	223f      	movs	r2, #63	@ 0x3f
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	f010803f 	.word	0xf010803f

08004b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b7a:	f7ff fe37 	bl	80047ec <HAL_GetTick>
 8004b7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d008      	beq.n	8004b9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e052      	b.n	8004c44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0216 	bic.w	r2, r2, #22
 8004bac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d103      	bne.n	8004bce <HAL_DMA_Abort+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0208 	bic.w	r2, r2, #8
 8004bdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 0201 	bic.w	r2, r2, #1
 8004bec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bee:	e013      	b.n	8004c18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bf0:	f7ff fdfc 	bl	80047ec <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d90c      	bls.n	8004c18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2203      	movs	r2, #3
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e015      	b.n	8004c44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e4      	bne.n	8004bf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2a:	223f      	movs	r2, #63	@ 0x3f
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d004      	beq.n	8004c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2280      	movs	r2, #128	@ 0x80
 8004c64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e00c      	b.n	8004c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0201 	bic.w	r2, r2, #1
 8004c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed8 <HAL_DMA_IRQHandler+0x248>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a8e      	ldr	r2, [pc, #568]	@ (8004edc <HAL_DMA_IRQHandler+0x24c>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	0a9b      	lsrs	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cba:	2208      	movs	r2, #8
 8004cbc:	409a      	lsls	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01a      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d013      	beq.n	8004cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce8:	2208      	movs	r2, #8
 8004cea:	409a      	lsls	r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cf4:	f043 0201 	orr.w	r2, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4013      	ands	r3, r2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f043 0202 	orr.w	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d36:	2204      	movs	r2, #4
 8004d38:	409a      	lsls	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00b      	beq.n	8004d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d54:	2204      	movs	r2, #4
 8004d56:	409a      	lsls	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d6c:	2210      	movs	r2, #16
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d043      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	2210      	movs	r2, #16
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d018      	beq.n	8004dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d108      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d024      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
 8004dbe:	e01f      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
 8004dd0:	e016      	b.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d107      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0208 	bic.w	r2, r2, #8
 8004dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e04:	2220      	movs	r2, #32
 8004e06:	409a      	lsls	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 808f 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8087 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e26:	2220      	movs	r2, #32
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b05      	cmp	r3, #5
 8004e38:	d136      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0216 	bic.w	r2, r2, #22
 8004e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <HAL_DMA_IRQHandler+0x1da>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0208 	bic.w	r2, r2, #8
 8004e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7e:	223f      	movs	r2, #63	@ 0x3f
 8004e80:	409a      	lsls	r2, r3
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d07e      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
        }
        return;
 8004ea6:	e079      	b.n	8004f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d031      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	4798      	blx	r3
 8004ed4:	e02c      	b.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e01e      	b.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10f      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0210 	bic.w	r2, r2, #16
 8004f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d032      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d022      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2205      	movs	r2, #5
 8004f48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d307      	bcc.n	8004f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f2      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x2cc>
 8004f76:	e000      	b.n	8004f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
 8004f9a:	e000      	b.n	8004f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f9c:	bf00      	nop
    }
  }
}
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	3b10      	subs	r3, #16
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <DMA_CalcBaseAndBitshift+0x64>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fbe:	4a13      	ldr	r2, [pc, #76]	@ (800500c <DMA_CalcBaseAndBitshift+0x68>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d909      	bls.n	8004fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fe4:	e007      	b.n	8004ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	aaaaaaab 	.word	0xaaaaaaab
 800500c:	08023050 	.word	0x08023050

08005010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11f      	bne.n	800506a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d856      	bhi.n	80050de <DMA_CheckFifoParam+0xce>
 8005030:	a201      	add	r2, pc, #4	@ (adr r2, 8005038 <DMA_CheckFifoParam+0x28>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	08005049 	.word	0x08005049
 800503c:	0800505b 	.word	0x0800505b
 8005040:	08005049 	.word	0x08005049
 8005044:	080050df 	.word	0x080050df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d046      	beq.n	80050e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e043      	b.n	80050e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005062:	d140      	bne.n	80050e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005068:	e03d      	b.n	80050e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005072:	d121      	bne.n	80050b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d837      	bhi.n	80050ea <DMA_CheckFifoParam+0xda>
 800507a:	a201      	add	r2, pc, #4	@ (adr r2, 8005080 <DMA_CheckFifoParam+0x70>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005091 	.word	0x08005091
 8005084:	08005097 	.word	0x08005097
 8005088:	08005091 	.word	0x08005091
 800508c:	080050a9 	.word	0x080050a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      break;
 8005094:	e030      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d025      	beq.n	80050ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a6:	e022      	b.n	80050ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050b0:	d11f      	bne.n	80050f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050b6:	e01c      	b.n	80050f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d903      	bls.n	80050c6 <DMA_CheckFifoParam+0xb6>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d003      	beq.n	80050cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050c4:	e018      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ca:	e015      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e00b      	b.n	80050f6 <DMA_CheckFifoParam+0xe6>
      break;
 80050de:	bf00      	nop
 80050e0:	e00a      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050e2:	bf00      	nop
 80050e4:	e008      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
 80050e8:	e006      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
    }
  } 
  
  return status; 
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e08a      	b.n	8005230 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7fe f931 	bl	8003394 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	4b40      	ldr	r3, [pc, #256]	@ (8005238 <HAL_ETH_Init+0x130>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	4a3f      	ldr	r2, [pc, #252]	@ (8005238 <HAL_ETH_Init+0x130>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005140:	6453      	str	r3, [r2, #68]	@ 0x44
 8005142:	4b3d      	ldr	r3, [pc, #244]	@ (8005238 <HAL_ETH_Init+0x130>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800514e:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <HAL_ETH_Init+0x134>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4a3a      	ldr	r2, [pc, #232]	@ (800523c <HAL_ETH_Init+0x134>)
 8005154:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005158:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800515a:	4b38      	ldr	r3, [pc, #224]	@ (800523c <HAL_ETH_Init+0x134>)
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	4936      	ldr	r1, [pc, #216]	@ (800523c <HAL_ETH_Init+0x134>)
 8005164:	4313      	orrs	r3, r2
 8005166:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005168:	4b34      	ldr	r3, [pc, #208]	@ (800523c <HAL_ETH_Init+0x134>)
 800516a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005182:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005184:	f7ff fb32 	bl	80047ec <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800518a:	e011      	b.n	80051b0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800518c:	f7ff fb2e 	bl	80047ec <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800519a:	d909      	bls.n	80051b0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2204      	movs	r2, #4
 80051a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	22e0      	movs	r2, #224	@ 0xe0
 80051a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e03f      	b.n	8005230 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 ff16 	bl	8005ff4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 ffc1 	bl	8006150 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 f817 	bl	8006202 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	461a      	mov	r2, r3
 80051da:	2100      	movs	r1, #0
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 ff7f 	bl	80060e0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80051f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005202:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005206:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800521a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2210      	movs	r2, #16
 800522a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40023800 	.word	0x40023800
 800523c:	40013800 	.word	0x40013800

08005240 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800524e:	2b10      	cmp	r3, #16
 8005250:	d161      	bne.n	8005316 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2204      	movs	r2, #4
 8005264:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9f4 	bl	8005654 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005274:	2001      	movs	r0, #1
 8005276:	f7ff fac5 	bl	8004804 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005294:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005298:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052b0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fd3b 	bl	8005d2e <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0208 	orr.w	r2, r2, #8
 80052c6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f7ff fa97 	bl	8004804 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0204 	orr.w	r2, r2, #4
 80052ec:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8005300:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8005304:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005308:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2240      	movs	r2, #64	@ 0x40
 800530e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e000      	b.n	8005318 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532e:	2b40      	cmp	r3, #64	@ 0x40
 8005330:	d170      	bne.n	8005414 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2220      	movs	r2, #32
 8005336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 800534c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8005350:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005354:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005368:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800536c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	f023 0302 	bic.w	r3, r3, #2
 8005380:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005384:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0204 	bic.w	r2, r2, #4
 8005394:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800539e:	2001      	movs	r0, #1
 80053a0:	f7ff fa30 	bl	8004804 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fcbe 	bl	8005d2e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0208 	bic.w	r2, r2, #8
 80053c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80053ca:	2001      	movs	r0, #1
 80053cc:	f7ff fa1a 	bl	8004804 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e00e      	b.n	80053fc <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	3212      	adds	r2, #18
 80053e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d9ed      	bls.n	80053de <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2210      	movs	r2, #16
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e045      	b.n	80054ce <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005448:	2b40      	cmp	r3, #64	@ 0x40
 800544a:	d13f      	bne.n	80054cc <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8005454:	2201      	movs	r2, #1
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 ff41 	bl	80062e0 <ETH_Prepare_Tx_Descriptors>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e02a      	b.n	80054ce <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8005478:	f3bf 8f4f 	dsb	sy
}
 800547c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	629a      	str	r2, [r3, #40]	@ 0x28
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	2b03      	cmp	r3, #3
 800548e:	d904      	bls.n	800549a <HAL_ETH_Transmit_IT+0x7c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	1f1a      	subs	r2, r3, #4
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00d      	beq.n	80054c8 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b4:	461a      	mov	r2, r3
 80054b6:	2304      	movs	r3, #4
 80054b8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054c2:	461a      	mov	r2, r3
 80054c4:	2300      	movs	r3, #0
 80054c6:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e000      	b.n	80054ce <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
  }
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e0a4      	b.n	800564c <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d001      	beq.n	8005510 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e09d      	b.n	800564c <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005514:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	3212      	adds	r2, #18
 800551c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005520:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005526:	f1c3 0304 	rsb	r3, r3, #4
 800552a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800552c:	e066      	b.n	80055fc <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <HAL_ETH_ReadData+0x88>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d03c      	beq.n	80055d8 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	0c1b      	lsrs	r3, r3, #16
 800557c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005580:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f007 fb02 	bl	800cbc0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	441a      	add	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2200      	movs	r2, #0
 80055d6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d902      	bls.n	80055ea <HAL_ETH_ReadData+0x114>
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3b04      	subs	r3, #4
 80055e8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	3212      	adds	r2, #18
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005600:	2b00      	cmp	r3, #0
 8005602:	db06      	blt.n	8005612 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	429a      	cmp	r2, r3
 800560a:	d202      	bcs.n	8005612 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d08d      	beq.n	800552e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f814 	bl	8005654 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d108      	bne.n	800564a <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005660:	2301      	movs	r3, #1
 8005662:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005668:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	3212      	adds	r2, #18
 8005670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005674:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800567a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800567c:	e044      	b.n	8005708 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f007 fa68 	bl	800cb60 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d102      	bne.n	800569c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005696:	2300      	movs	r3, #0
 8005698:	74fb      	strb	r3, [r7, #19]
 800569a:	e007      	b.n	80056ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	461a      	mov	r2, r3
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	461a      	mov	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80056ac:	7cfb      	ldrb	r3, [r7, #19]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02a      	beq.n	8005708 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d108      	bne.n	80056cc <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	6053      	str	r3, [r2, #4]
 80056ca:	e005      	b.n	80056d8 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d902      	bls.n	80056f6 <ETH_UpdateDescriptor+0xa2>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	3b04      	subs	r3, #4
 80056f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	3212      	adds	r2, #18
 80056fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005700:	617b      	str	r3, [r7, #20]
      desccount--;
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	3b01      	subs	r3, #1
 8005706:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <ETH_UpdateDescriptor+0xc0>
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1b4      	bne.n	800567e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	429a      	cmp	r2, r3
 800571c:	d01a      	beq.n	8005754 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3303      	adds	r3, #3
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005728:	f3bf 8f5f 	dmb	sy
}
 800572c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6919      	ldr	r1, [r3, #16]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	18ca      	adds	r2, r1, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005746:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3318      	adds	r3, #24
 8005768:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800577a:	e047      	b.n	800580c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800577c:	2301      	movs	r3, #1
 800577e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	3b01      	subs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	3304      	adds	r3, #4
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	3301      	adds	r3, #1
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d902      	bls.n	80057a8 <HAL_ETH_ReleaseTxPacket+0x4c>
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3b04      	subs	r3, #4
 80057a6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80057ac:	7bbb      	ldrb	r3, [r7, #14]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02c      	beq.n	800580c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	db1f      	blt.n	8005808 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	3304      	adds	r3, #4
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f007 fa33 	bl	800cc40 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	3304      	adds	r3, #4
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	3301      	adds	r3, #1
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d902      	bls.n	80057fa <HAL_ETH_ReleaseTxPacket+0x9e>
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	3b04      	subs	r3, #4
 80057f8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005806:	e001      	b.n	800580c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_ETH_ReleaseTxPacket+0xbc>
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1b1      	bne.n	800577c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800584c:	4b4b      	ldr	r3, [pc, #300]	@ (800597c <HAL_ETH_IRQHandler+0x158>)
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <HAL_ETH_IRQHandler+0x56>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800586e:	461a      	mov	r2, r3
 8005870:	4b43      	ldr	r3, [pc, #268]	@ (8005980 <HAL_ETH_IRQHandler+0x15c>)
 8005872:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f006 fad9 	bl	800be2c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00f      	beq.n	80058a4 <HAL_ETH_IRQHandler+0x80>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005896:	461a      	mov	r2, r3
 8005898:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800589c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f006 fad4 	bl	800be4c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d042      	beq.n	8005934 <HAL_ETH_IRQHandler+0x110>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d03d      	beq.n	8005934 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	f043 0208 	orr.w	r2, r3, #8
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d01a      	beq.n	8005908 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <HAL_ETH_IRQHandler+0x160>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80058f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058fc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	22e0      	movs	r2, #224	@ 0xe0
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005906:	e012      	b.n	800592e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	f248 6380 	movw	r3, #34432	@ 0x8680
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005926:	461a      	mov	r2, r3
 8005928:	f248 6380 	movw	r3, #34432	@ 0x8680
 800592c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f006 fa9c 	bl	800be6c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00e      	beq.n	800595c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f81a 	bl	8005988 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005966:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_ETH_IRQHandler+0x158>)
 8005968:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800596c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f814 	bl	800599c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005974:	bf00      	nop
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40013c00 	.word	0x40013c00
 8005980:	00010040 	.word	0x00010040
 8005984:	007e2000 	.word	0x007e2000

08005988 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 031c 	and.w	r3, r3, #28
 80059cc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	02db      	lsls	r3, r3, #11
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0302 	bic.w	r3, r3, #2
 80059ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005a00:	f7fe fef4 	bl	80047ec <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a06:	e00d      	b.n	8005a24 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005a08:	f7fe fef0 	bl	80047ec <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a16:	d301      	bcc.n	8005a1c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e010      	b.n	8005a3e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ec      	bne.n	8005a08 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f003 031c 	and.w	r3, r3, #28
 8005a62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	02db      	lsls	r3, r3, #11
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	019b      	lsls	r3, r3, #6
 8005a74:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aa0:	f7fe fea4 	bl	80047ec <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005aa6:	e00d      	b.n	8005ac4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005aa8:	f7fe fea0 	bl	80047ec <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab6:	d301      	bcc.n	8005abc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e009      	b.n	8005ad0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1ec      	bne.n	8005aa8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0e6      	b.n	8005cba <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bf14      	ite	ne
 8005afa:	2301      	movne	r3, #1
 8005afc:	2300      	moveq	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bf0c      	ite	eq
 8005b24:	2301      	moveq	r3, #1
 8005b26:	2300      	movne	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf14      	ite	ne
 8005b74:	2301      	movne	r3, #1
 8005b76:	2300      	moveq	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	461a      	mov	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	0c1b      	lsrs	r3, r3, #16
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	bf14      	ite	ne
 8005c8e:	2301      	movne	r3, #1
 8005c90:	2300      	moveq	r3, #0
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e00b      	b.n	8005cf2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d105      	bne.n	8005cf0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f846 	bl	8005d78 <ETH_SetMACConfig>

    return HAL_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	e000      	b.n	8005cf2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d50:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d5e:	2001      	movs	r0, #1
 8005d60:	f7fe fd50 	bl	8004804 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d6e:	6193      	str	r3, [r2, #24]
}
 8005d70:	bf00      	nop
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4b53      	ldr	r3, [pc, #332]	@ (8005edc <ETH_SetMACConfig+0x164>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	7b9b      	ldrb	r3, [r3, #14]
 8005d96:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	7c12      	ldrb	r2, [r2, #16]
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d102      	bne.n	8005da6 <ETH_SetMACConfig+0x2e>
 8005da0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005da4:	e000      	b.n	8005da8 <ETH_SetMACConfig+0x30>
 8005da6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005da8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	7c52      	ldrb	r2, [r2, #17]
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d102      	bne.n	8005db8 <ETH_SetMACConfig+0x40>
 8005db2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005db6:	e000      	b.n	8005dba <ETH_SetMACConfig+0x42>
 8005db8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005dba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005dc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	7fdb      	ldrb	r3, [r3, #31]
 8005dc6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005dc8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005dce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	7f92      	ldrb	r2, [r2, #30]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d102      	bne.n	8005dde <ETH_SetMACConfig+0x66>
 8005dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ddc:	e000      	b.n	8005de0 <ETH_SetMACConfig+0x68>
 8005dde:	2200      	movs	r2, #0
                        macconf->Speed |
 8005de0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	7f1b      	ldrb	r3, [r3, #28]
 8005de6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005de8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005dee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	791b      	ldrb	r3, [r3, #4]
 8005df4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005df6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005dfe:	2a00      	cmp	r2, #0
 8005e00:	d102      	bne.n	8005e08 <ETH_SetMACConfig+0x90>
 8005e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e06:	e000      	b.n	8005e0a <ETH_SetMACConfig+0x92>
 8005e08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005e0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	7bdb      	ldrb	r3, [r3, #15]
 8005e10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005e12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005e22:	4313      	orrs	r3, r2
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	f7fe fce2 	bl	8004804 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005e56:	4013      	ands	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	d101      	bne.n	8005e6e <ETH_SetMACConfig+0xf6>
 8005e6a:	2280      	movs	r2, #128	@ 0x80
 8005e6c:	e000      	b.n	8005e70 <ETH_SetMACConfig+0xf8>
 8005e6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005e70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005e76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005e7e:	2a01      	cmp	r2, #1
 8005e80:	d101      	bne.n	8005e86 <ETH_SetMACConfig+0x10e>
 8005e82:	2208      	movs	r2, #8
 8005e84:	e000      	b.n	8005e88 <ETH_SetMACConfig+0x110>
 8005e86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005e88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005e90:	2a01      	cmp	r2, #1
 8005e92:	d101      	bne.n	8005e98 <ETH_SetMACConfig+0x120>
 8005e94:	2204      	movs	r2, #4
 8005e96:	e000      	b.n	8005e9a <ETH_SetMACConfig+0x122>
 8005e98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005e9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005ea2:	2a01      	cmp	r2, #1
 8005ea4:	d101      	bne.n	8005eaa <ETH_SetMACConfig+0x132>
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	e000      	b.n	8005eac <ETH_SetMACConfig+0x134>
 8005eaa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005eac:	4313      	orrs	r3, r2
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	f7fe fc9d 	bl	8004804 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	fd20810f 	.word	0xfd20810f

08005ee0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ff0 <ETH_SetDMAConfig+0x110>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	7b1b      	ldrb	r3, [r3, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <ETH_SetDMAConfig+0x2c>
 8005f06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005f0a:	e000      	b.n	8005f0e <ETH_SetDMAConfig+0x2e>
 8005f0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	7b5b      	ldrb	r3, [r3, #13]
 8005f12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	7f52      	ldrb	r2, [r2, #29]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d102      	bne.n	8005f24 <ETH_SetDMAConfig+0x44>
 8005f1e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f22:	e000      	b.n	8005f26 <ETH_SetDMAConfig+0x46>
 8005f24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	7b9b      	ldrb	r3, [r3, #14]
 8005f2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	7f1b      	ldrb	r3, [r3, #28]
 8005f3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005f3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	7f9b      	ldrb	r3, [r3, #30]
 8005f42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f54:	4313      	orrs	r3, r2
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005f76:	2001      	movs	r0, #1
 8005f78:	f7fe fc44 	bl	8004804 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f84:	461a      	mov	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005f94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005f9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005fa0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005fa8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005faa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005fb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005fb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6812      	ldr	r2, [r2, #0]
 8005fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005fc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fd4:	2001      	movs	r0, #1
 8005fd6:	f7fe fc15 	bl	8004804 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	f8de3f23 	.word	0xf8de3f23

08005ff4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b0a6      	sub	sp, #152	@ 0x98
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8006002:	2301      	movs	r3, #1
 8006004:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006008:	2300      	movs	r3, #0
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006024:	2301      	movs	r3, #1
 8006026:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006036:	2300      	movs	r3, #0
 8006038:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800603a:	2300      	movs	r3, #0
 800603c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006040:	2300      	movs	r3, #0
 8006042:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800605c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006060:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006062:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800606e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fe7f 	bl	8005d78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800607a:	2301      	movs	r3, #1
 800607c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800607e:	2301      	movs	r3, #1
 8006080:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006082:	2301      	movs	r3, #1
 8006084:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006088:	2301      	movs	r3, #1
 800608a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800608c:	2300      	movs	r3, #0
 800608e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800609c:	2300      	movs	r3, #0
 800609e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80060aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80060ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80060b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80060b4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80060b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060ba:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ff05 	bl	8005ee0 <ETH_SetDMAConfig>
}
 80060d6:	bf00      	nop
 80060d8:	3798      	adds	r7, #152	@ 0x98
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3305      	adds	r3, #5
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	3204      	adds	r2, #4
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4b11      	ldr	r3, [pc, #68]	@ (8006148 <ETH_MACAddressConfig+0x68>)
 8006102:	4413      	add	r3, r2
 8006104:	461a      	mov	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3303      	adds	r3, #3
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	061a      	lsls	r2, r3, #24
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3302      	adds	r3, #2
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	041b      	lsls	r3, r3, #16
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3301      	adds	r3, #1
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	4313      	orrs	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	7812      	ldrb	r2, [r2, #0]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	4b06      	ldr	r3, [pc, #24]	@ (800614c <ETH_MACAddressConfig+0x6c>)
 8006132:	4413      	add	r3, r2
 8006134:	461a      	mov	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6013      	str	r3, [r2, #0]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40028040 	.word	0x40028040
 800614c:	40028044 	.word	0x40028044

08006150 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e03e      	b.n	80061dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68d9      	ldr	r1, [r3, #12]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	440b      	add	r3, r1
 800616e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2200      	movs	r2, #0
 800617a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	2200      	movs	r2, #0
 8006186:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	3206      	adds	r2, #6
 8006190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d80c      	bhi.n	80061c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	440b      	add	r3, r1
 80061b8:	461a      	mov	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	60da      	str	r2, [r3, #12]
 80061be:	e004      	b.n	80061ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	461a      	mov	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d9bd      	bls.n	800615e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f4:	611a      	str	r2, [r3, #16]
}
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800620a:	2300      	movs	r3, #0
 800620c:	60fb      	str	r3, [r7, #12]
 800620e:	e048      	b.n	80062a2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6919      	ldr	r1, [r3, #16]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	440b      	add	r3, r1
 8006220:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2200      	movs	r2, #0
 8006238:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800624c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	3212      	adds	r2, #18
 800626e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d80c      	bhi.n	8006292 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6919      	ldr	r1, [r3, #16]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	440b      	add	r3, r1
 800628a:	461a      	mov	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	60da      	str	r2, [r3, #12]
 8006290:	e004      	b.n	800629c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	461a      	mov	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b03      	cmp	r3, #3
 80062a6:	d9b3      	bls.n	8006210 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d2:	60da      	str	r2, [r3, #12]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b091      	sub	sp, #68	@ 0x44
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3318      	adds	r3, #24
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006322:	d007      	beq.n	8006334 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006328:	3304      	adds	r3, #4
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006334:	2302      	movs	r3, #2
 8006336:	e115      	b.n	8006564 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800633a:	3301      	adds	r3, #1
 800633c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800633e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006350:	f023 031f 	bic.w	r3, r3, #31
 8006354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006356:	6852      	ldr	r2, [r2, #4]
 8006358:	431a      	orrs	r2, r3
 800635a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	431a      	orrs	r2, r3
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	431a      	orrs	r2, r3
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0304 	and.w	r3, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80063be:	e084      	b.n	80064ca <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d006      	beq.n	80063e0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e005      	b.n	80063ec <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80063e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80063ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ee:	3301      	adds	r3, #1
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d902      	bls.n	80063fe <ETH_Prepare_Tx_Descriptors+0x11e>
 80063f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fa:	3b04      	subs	r3, #4
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006406:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006414:	d007      	beq.n	8006426 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641a:	3304      	adds	r3, #4
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d029      	beq.n	800647a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800642e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006432:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006434:	2300      	movs	r3, #0
 8006436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006438:	e019      	b.n	800646e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800643a:	f3bf 8f5f 	dmb	sy
}
 800643e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800644c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644e:	3301      	adds	r3, #1
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006454:	2b03      	cmp	r3, #3
 8006456:	d902      	bls.n	800645e <ETH_Prepare_Tx_Descriptors+0x17e>
 8006458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645a:	3b04      	subs	r3, #4
 800645c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646a:	3301      	adds	r3, #1
 800646c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800646e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	429a      	cmp	r2, r3
 8006474:	d3e1      	bcc.n	800643a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8006476:	2302      	movs	r3, #2
 8006478:	e074      	b.n	8006564 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006488:	3301      	adds	r3, #1
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80064a4:	f023 031f 	bic.w	r3, r3, #31
 80064a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064aa:	6852      	ldr	r2, [r2, #4]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80064b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b4:	3301      	adds	r3, #1
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80064b8:	f3bf 8f5f 	dmb	sy
}
 80064bc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80064ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f47f af76 	bne.w	80063c0 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80064da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e005      	b.n	80064f4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80064e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80064f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006508:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800650a:	f3bf 8f5f 	dmb	sy
}
 800650e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800651c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006524:	3304      	adds	r3, #4
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006530:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006532:	f3ef 8310 	mrs	r3, PRIMASK
 8006536:	613b      	str	r3, [r7, #16]
  return(result);
 8006538:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f383 8810 	msr	PRIMASK, r3
}
 8006546:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	4413      	add	r3, r2
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	629a      	str	r2, [r3, #40]	@ 0x28
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	f383 8810 	msr	PRIMASK, r3
}
 8006560:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3744      	adds	r7, #68	@ 0x44
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006570:	b480      	push	{r7}
 8006572:	b089      	sub	sp, #36	@ 0x24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800657a:	2300      	movs	r3, #0
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800657e:	2300      	movs	r3, #0
 8006580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e16b      	b.n	8006864 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800658c:	2201      	movs	r2, #1
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	f040 815a 	bne.w	800685e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d005      	beq.n	80065c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d130      	bne.n	8006624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	2203      	movs	r2, #3
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065f8:	2201      	movs	r2, #1
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 0201 	and.w	r2, r3, #1
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	2b03      	cmp	r3, #3
 800662e:	d017      	beq.n	8006660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2203      	movs	r2, #3
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	4013      	ands	r3, r2
 8006646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4313      	orrs	r3, r2
 8006658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0303 	and.w	r3, r3, #3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d123      	bne.n	80066b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	08da      	lsrs	r2, r3, #3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3208      	adds	r2, #8
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	220f      	movs	r2, #15
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	43db      	mvns	r3, r3
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4013      	ands	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	fa02 f303 	lsl.w	r3, r2, r3
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	08da      	lsrs	r2, r3, #3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3208      	adds	r2, #8
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	2203      	movs	r2, #3
 80066c0:	fa02 f303 	lsl.w	r3, r2, r3
 80066c4:	43db      	mvns	r3, r3
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4013      	ands	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f003 0203 	and.w	r2, r3, #3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4313      	orrs	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80b4 	beq.w	800685e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
 80066fa:	4b60      	ldr	r3, [pc, #384]	@ (800687c <HAL_GPIO_Init+0x30c>)
 80066fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fe:	4a5f      	ldr	r2, [pc, #380]	@ (800687c <HAL_GPIO_Init+0x30c>)
 8006700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006704:	6453      	str	r3, [r2, #68]	@ 0x44
 8006706:	4b5d      	ldr	r3, [pc, #372]	@ (800687c <HAL_GPIO_Init+0x30c>)
 8006708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006712:	4a5b      	ldr	r2, [pc, #364]	@ (8006880 <HAL_GPIO_Init+0x310>)
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	089b      	lsrs	r3, r3, #2
 8006718:	3302      	adds	r3, #2
 800671a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800671e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	220f      	movs	r2, #15
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4013      	ands	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a52      	ldr	r2, [pc, #328]	@ (8006884 <HAL_GPIO_Init+0x314>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d02b      	beq.n	8006796 <HAL_GPIO_Init+0x226>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a51      	ldr	r2, [pc, #324]	@ (8006888 <HAL_GPIO_Init+0x318>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d025      	beq.n	8006792 <HAL_GPIO_Init+0x222>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a50      	ldr	r2, [pc, #320]	@ (800688c <HAL_GPIO_Init+0x31c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d01f      	beq.n	800678e <HAL_GPIO_Init+0x21e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a4f      	ldr	r2, [pc, #316]	@ (8006890 <HAL_GPIO_Init+0x320>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d019      	beq.n	800678a <HAL_GPIO_Init+0x21a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a4e      	ldr	r2, [pc, #312]	@ (8006894 <HAL_GPIO_Init+0x324>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_GPIO_Init+0x216>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a4d      	ldr	r2, [pc, #308]	@ (8006898 <HAL_GPIO_Init+0x328>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d00d      	beq.n	8006782 <HAL_GPIO_Init+0x212>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a4c      	ldr	r2, [pc, #304]	@ (800689c <HAL_GPIO_Init+0x32c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d007      	beq.n	800677e <HAL_GPIO_Init+0x20e>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a4b      	ldr	r2, [pc, #300]	@ (80068a0 <HAL_GPIO_Init+0x330>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d101      	bne.n	800677a <HAL_GPIO_Init+0x20a>
 8006776:	2307      	movs	r3, #7
 8006778:	e00e      	b.n	8006798 <HAL_GPIO_Init+0x228>
 800677a:	2308      	movs	r3, #8
 800677c:	e00c      	b.n	8006798 <HAL_GPIO_Init+0x228>
 800677e:	2306      	movs	r3, #6
 8006780:	e00a      	b.n	8006798 <HAL_GPIO_Init+0x228>
 8006782:	2305      	movs	r3, #5
 8006784:	e008      	b.n	8006798 <HAL_GPIO_Init+0x228>
 8006786:	2304      	movs	r3, #4
 8006788:	e006      	b.n	8006798 <HAL_GPIO_Init+0x228>
 800678a:	2303      	movs	r3, #3
 800678c:	e004      	b.n	8006798 <HAL_GPIO_Init+0x228>
 800678e:	2302      	movs	r3, #2
 8006790:	e002      	b.n	8006798 <HAL_GPIO_Init+0x228>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <HAL_GPIO_Init+0x228>
 8006796:	2300      	movs	r3, #0
 8006798:	69fa      	ldr	r2, [r7, #28]
 800679a:	f002 0203 	and.w	r2, r2, #3
 800679e:	0092      	lsls	r2, r2, #2
 80067a0:	4093      	lsls	r3, r2
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067a8:	4935      	ldr	r1, [pc, #212]	@ (8006880 <HAL_GPIO_Init+0x310>)
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	089b      	lsrs	r3, r3, #2
 80067ae:	3302      	adds	r3, #2
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067b6:	4b3b      	ldr	r3, [pc, #236]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	43db      	mvns	r3, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4013      	ands	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067da:	4a32      	ldr	r2, [pc, #200]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067e0:	4b30      	ldr	r3, [pc, #192]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006804:	4a27      	ldr	r2, [pc, #156]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800680a:	4b26      	ldr	r3, [pc, #152]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	43db      	mvns	r3, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	4013      	ands	r3, r2
 8006818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800682e:	4a1d      	ldr	r2, [pc, #116]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006834:	4b1b      	ldr	r3, [pc, #108]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	43db      	mvns	r3, r3
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	4013      	ands	r3, r2
 8006842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006858:	4a12      	ldr	r2, [pc, #72]	@ (80068a4 <HAL_GPIO_Init+0x334>)
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3301      	adds	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b0f      	cmp	r3, #15
 8006868:	f67f ae90 	bls.w	800658c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800686c:	bf00      	nop
 800686e:	bf00      	nop
 8006870:	3724      	adds	r7, #36	@ 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40023800 	.word	0x40023800
 8006880:	40013800 	.word	0x40013800
 8006884:	40020000 	.word	0x40020000
 8006888:	40020400 	.word	0x40020400
 800688c:	40020800 	.word	0x40020800
 8006890:	40020c00 	.word	0x40020c00
 8006894:	40021000 	.word	0x40021000
 8006898:	40021400 	.word	0x40021400
 800689c:	40021800 	.word	0x40021800
 80068a0:	40021c00 	.word	0x40021c00
 80068a4:	40013c00 	.word	0x40013c00

080068a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	807b      	strh	r3, [r7, #2]
 80068b4:	4613      	mov	r3, r2
 80068b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068b8:	787b      	ldrb	r3, [r7, #1]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068be:	887a      	ldrh	r2, [r7, #2]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068c4:	e003      	b.n	80068ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068c6:	887b      	ldrh	r3, [r7, #2]
 80068c8:	041a      	lsls	r2, r3, #16
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	619a      	str	r2, [r3, #24]
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b086      	sub	sp, #24
 80068de:	af02      	add	r7, sp, #8
 80068e0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e101      	b.n	8006af0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f016 fa7c 	bl	801ce04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2203      	movs	r2, #3
 8006910:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800691a:	d102      	bne.n	8006922 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f003 fc9f 	bl	800a26a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	7c1a      	ldrb	r2, [r3, #16]
 8006934:	f88d 2000 	strb.w	r2, [sp]
 8006938:	3304      	adds	r3, #4
 800693a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800693c:	f003 fb7e 	bl	800a03c <USB_CoreInit>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e0ce      	b.n	8006af0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f003 fc97 	bl	800a28c <USB_SetCurrentMode>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0bf      	b.n	8006af0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006970:	2300      	movs	r3, #0
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	e04a      	b.n	8006a0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3315      	adds	r3, #21
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800698a:	7bfa      	ldrb	r2, [r7, #15]
 800698c:	6879      	ldr	r1, [r7, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	440b      	add	r3, r1
 8006998:	3314      	adds	r3, #20
 800699a:	7bfa      	ldrb	r2, [r7, #15]
 800699c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	b298      	uxth	r0, r3
 80069a4:	6879      	ldr	r1, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	440b      	add	r3, r1
 80069b0:	332e      	adds	r3, #46	@ 0x2e
 80069b2:	4602      	mov	r2, r0
 80069b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069b6:	7bfa      	ldrb	r2, [r7, #15]
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	4613      	mov	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	3318      	adds	r3, #24
 80069c6:	2200      	movs	r2, #0
 80069c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069ca:	7bfa      	ldrb	r2, [r7, #15]
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	331c      	adds	r3, #28
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80069de:	7bfa      	ldrb	r2, [r7, #15]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	3320      	adds	r3, #32
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3324      	adds	r3, #36	@ 0x24
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	73fb      	strb	r3, [r7, #15]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	791b      	ldrb	r3, [r3, #4]
 8006a10:	7bfa      	ldrb	r2, [r7, #15]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d3af      	bcc.n	8006976 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
 8006a1a:	e044      	b.n	8006aa6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a1c:	7bfa      	ldrb	r2, [r7, #15]
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a32:	7bfa      	ldrb	r2, [r7, #15]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	00db      	lsls	r3, r3, #3
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a48:	7bfa      	ldrb	r2, [r7, #15]
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a5e:	7bfa      	ldrb	r2, [r7, #15]
 8006a60:	6879      	ldr	r1, [r7, #4]
 8006a62:	4613      	mov	r3, r2
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	440b      	add	r3, r1
 8006a6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a74:	7bfa      	ldrb	r2, [r7, #15]
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a8a:	7bfa      	ldrb	r2, [r7, #15]
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4413      	add	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	440b      	add	r3, r1
 8006a98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	791b      	ldrb	r3, [r3, #4]
 8006aaa:	7bfa      	ldrb	r2, [r7, #15]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d3b5      	bcc.n	8006a1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	7c1a      	ldrb	r2, [r3, #16]
 8006ab8:	f88d 2000 	strb.w	r2, [sp]
 8006abc:	3304      	adds	r3, #4
 8006abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ac0:	f003 fc30 	bl	800a324 <USB_DevInit>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2202      	movs	r2, #2
 8006ace:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e00c      	b.n	8006af0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f004 fc7a 	bl	800b3e2 <USB_DevDisconnect>

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_PCD_Start+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e022      	b.n	8006b5a <HAL_PCD_Start+0x62>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d009      	beq.n	8006b3c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d105      	bne.n	8006b3c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f003 fb81 	bl	800a248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f004 fc28 	bl	800b3a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006b62:	b590      	push	{r4, r7, lr}
 8006b64:	b08d      	sub	sp, #52	@ 0x34
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f004 fce6 	bl	800b54a <USB_GetMode>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f040 848c 	bne.w	800749e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f004 fc4a 	bl	800b424 <USB_ReadInterrupts>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8482 	beq.w	800749c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	0a1b      	lsrs	r3, r3, #8
 8006ba2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f004 fc37 	bl	800b424 <USB_ReadInterrupts>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d107      	bne.n	8006bd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f002 0202 	and.w	r2, r2, #2
 8006bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f004 fc25 	bl	800b424 <USB_ReadInterrupts>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b10      	cmp	r3, #16
 8006be2:	d161      	bne.n	8006ca8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0210 	bic.w	r2, r2, #16
 8006bf2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4413      	add	r3, r2
 8006c10:	3304      	adds	r3, #4
 8006c12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c1e:	d124      	bne.n	8006c6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006c26:	4013      	ands	r3, r2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d035      	beq.n	8006c98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	091b      	lsrs	r3, r3, #4
 8006c34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6a38      	ldr	r0, [r7, #32]
 8006c40:	f004 fa5c 	bl	800b0fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	091b      	lsrs	r3, r3, #4
 8006c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c50:	441a      	add	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c62:	441a      	add	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	615a      	str	r2, [r3, #20]
 8006c68:	e016      	b.n	8006c98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006c70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006c74:	d110      	bne.n	8006c98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6a38      	ldr	r0, [r7, #32]
 8006c82:	f004 fa3b 	bl	800b0fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	091b      	lsrs	r3, r3, #4
 8006c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c92:	441a      	add	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0210 	orr.w	r2, r2, #16
 8006ca6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f004 fbb9 	bl	800b424 <USB_ReadInterrupts>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006cbc:	f040 80a7 	bne.w	8006e0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f004 fbbe 	bl	800b44a <USB_ReadDevAllOutEpInterrupt>
 8006cce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006cd0:	e099      	b.n	8006e06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 808e 	beq.w	8006dfa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce4:	b2d2      	uxtb	r2, r2
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f004 fbe2 	bl	800b4b2 <USB_ReadDevOutEPInterrupt>
 8006cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00c      	beq.n	8006d14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d06:	461a      	mov	r2, r3
 8006d08:	2301      	movs	r3, #1
 8006d0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fea4 	bl	8007a5c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00c      	beq.n	8006d38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 ff7a 	bl	8007c2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2310      	movs	r3, #16
 8006d52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d030      	beq.n	8006dc0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d66:	2b80      	cmp	r3, #128	@ 0x80
 8006d68:	d109      	bne.n	8006d7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4413      	add	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	78db      	ldrb	r3, [r3, #3]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d108      	bne.n	8006dae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f016 f931 	bl	801d010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dba:	461a      	mov	r2, r3
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	2320      	movs	r3, #32
 8006dda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df2:	461a      	mov	r2, r3
 8006df4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006df8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f47f af62 	bne.w	8006cd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f004 fb06 	bl	800b424 <USB_ReadInterrupts>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e22:	f040 80db 	bne.w	8006fdc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f004 fb27 	bl	800b47e <USB_ReadDevAllInEpInterrupt>
 8006e30:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006e36:	e0cd      	b.n	8006fd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80c2 	beq.w	8006fc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f004 fb4d 	bl	800b4ee <USB_ReadDevInEPInterrupt>
 8006e54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d057      	beq.n	8006f10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	2201      	movs	r2, #1
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	69f9      	ldr	r1, [r7, #28]
 8006e7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e80:	4013      	ands	r3, r2
 8006e82:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e90:	461a      	mov	r2, r3
 8006e92:	2301      	movs	r3, #1
 8006e94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	799b      	ldrb	r3, [r3, #6]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d132      	bne.n	8006f04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3320      	adds	r3, #32
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4403      	add	r3, r0
 8006ebe:	331c      	adds	r3, #28
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4419      	add	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec8:	4613      	mov	r3, r2
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4403      	add	r3, r0
 8006ed2:	3320      	adds	r3, #32
 8006ed4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d113      	bne.n	8006f04 <HAL_PCD_IRQHandler+0x3a2>
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	3324      	adds	r3, #36	@ 0x24
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006efc:	461a      	mov	r2, r3
 8006efe:	2101      	movs	r1, #1
 8006f00:	f004 fb54 	bl	800b5ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f015 fffb 	bl	801cf06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f003 0308 	and.w	r3, r3, #8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f26:	461a      	mov	r2, r3
 8006f28:	2308      	movs	r3, #8
 8006f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f003 0310 	and.w	r3, r3, #16
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	461a      	mov	r2, r3
 8006f44:	2310      	movs	r3, #16
 8006f46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d008      	beq.n	8006f64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2340      	movs	r3, #64	@ 0x40
 8006f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d023      	beq.n	8006fb6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006f6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f70:	6a38      	ldr	r0, [r7, #32]
 8006f72:	f003 fb3b 	bl	800a5ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	3310      	adds	r3, #16
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	3304      	adds	r3, #4
 8006f88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d108      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f016 f848 	bl	801d034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006fc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fcbd 	bl	8007942 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	3301      	adds	r3, #1
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f47f af2e 	bne.w	8006e38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f004 fa1f 	bl	800b424 <USB_ReadInterrupts>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ff0:	d122      	bne.n	8007038 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800700c:	2b01      	cmp	r3, #1
 800700e:	d108      	bne.n	8007022 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007018:	2100      	movs	r1, #0
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fea4 	bl	8007d68 <HAL_PCDEx_LPM_Callback>
 8007020:	e002      	b.n	8007028 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f015 ffe6 	bl	801cff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4618      	mov	r0, r3
 800703e:	f004 f9f1 	bl	800b424 <USB_ReadInterrupts>
 8007042:	4603      	mov	r3, r0
 8007044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800704c:	d112      	bne.n	8007074 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b01      	cmp	r3, #1
 800705c:	d102      	bne.n	8007064 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f015 ffa2 	bl	801cfa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007072:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f004 f9d3 	bl	800b424 <USB_ReadInterrupts>
 800707e:	4603      	mov	r3, r0
 8007080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007088:	f040 80b7 	bne.w	80071fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	69fa      	ldr	r2, [r7, #28]
 8007096:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2110      	movs	r1, #16
 80070a6:	4618      	mov	r0, r3
 80070a8:	f003 faa0 	bl	800a5ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070b0:	e046      	b.n	8007140 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070be:	461a      	mov	r2, r3
 80070c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80070e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f2:	461a      	mov	r2, r3
 80070f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007114:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007118:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007134:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007138:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800713a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800713c:	3301      	adds	r3, #1
 800713e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	791b      	ldrb	r3, [r3, #4]
 8007144:	461a      	mov	r2, r3
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	4293      	cmp	r3, r2
 800714a:	d3b2      	bcc.n	80070b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800715a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800715e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7bdb      	ldrb	r3, [r3, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d016      	beq.n	8007196 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007178:	f043 030b 	orr.w	r3, r3, #11
 800717c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007188:	69fa      	ldr	r2, [r7, #28]
 800718a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800718e:	f043 030b 	orr.w	r3, r3, #11
 8007192:	6453      	str	r3, [r2, #68]	@ 0x44
 8007194:	e015      	b.n	80071c2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80071a8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80071ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071bc:	f043 030b 	orr.w	r3, r3, #11
 80071c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80071e4:	461a      	mov	r2, r3
 80071e6:	f004 f9e1 	bl	800b5ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80071f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f004 f910 	bl	800b424 <USB_ReadInterrupts>
 8007204:	4603      	mov	r3, r0
 8007206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800720e:	d123      	bne.n	8007258 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f004 f9a6 	bl	800b566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4618      	mov	r0, r3
 8007220:	f003 fa5d 	bl	800a6de <USB_GetDevSpeed>
 8007224:	4603      	mov	r3, r0
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681c      	ldr	r4, [r3, #0]
 8007230:	f001 f9ca 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 8007234:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800723a:	461a      	mov	r2, r3
 800723c:	4620      	mov	r0, r4
 800723e:	f002 ff61 	bl	800a104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f015 fe87 	bl	801cf56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695a      	ldr	r2, [r3, #20]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007256:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f004 f8e1 	bl	800b424 <USB_ReadInterrupts>
 8007262:	4603      	mov	r3, r0
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b08      	cmp	r3, #8
 800726a:	d10a      	bne.n	8007282 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f015 fe64 	bl	801cf3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f002 0208 	and.w	r2, r2, #8
 8007280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f004 f8cc 	bl	800b424 <USB_ReadInterrupts>
 800728c:	4603      	mov	r3, r0
 800728e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007292:	2b80      	cmp	r3, #128	@ 0x80
 8007294:	d123      	bne.n	80072de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072a2:	2301      	movs	r3, #1
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a6:	e014      	b.n	80072d2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ac:	4613      	mov	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	4413      	add	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d105      	bne.n	80072cc <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fb0a 	bl	80078e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ce:	3301      	adds	r3, #1
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	791b      	ldrb	r3, [r3, #4]
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	4293      	cmp	r3, r2
 80072dc:	d3e4      	bcc.n	80072a8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f004 f89e 	bl	800b424 <USB_ReadInterrupts>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072f2:	d13c      	bne.n	800736e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80072f4:	2301      	movs	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f8:	e02b      	b.n	8007352 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730e:	4613      	mov	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	3318      	adds	r3, #24
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d115      	bne.n	800734c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007320:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007322:	2b00      	cmp	r3, #0
 8007324:	da12      	bge.n	800734c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800732a:	4613      	mov	r3, r2
 800732c:	00db      	lsls	r3, r3, #3
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	3317      	adds	r3, #23
 8007336:	2201      	movs	r2, #1
 8007338:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	b2db      	uxtb	r3, r3
 800733e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007342:	b2db      	uxtb	r3, r3
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 faca 	bl	80078e0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	3301      	adds	r3, #1
 8007350:	627b      	str	r3, [r7, #36]	@ 0x24
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	461a      	mov	r2, r3
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	4293      	cmp	r3, r2
 800735c:	d3cd      	bcc.n	80072fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800736c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f004 f856 	bl	800b424 <USB_ReadInterrupts>
 8007378:	4603      	mov	r3, r0
 800737a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800737e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007382:	d156      	bne.n	8007432 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007384:	2301      	movs	r3, #1
 8007386:	627b      	str	r3, [r7, #36]	@ 0x24
 8007388:	e045      	b.n	8007416 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800738a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800739e:	4613      	mov	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	440b      	add	r3, r1
 80073a8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d12e      	bne.n	8007410 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80073b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	da2b      	bge.n	8007410 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	0c1a      	lsrs	r2, r3, #16
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80073c2:	4053      	eors	r3, r2
 80073c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d121      	bne.n	8007410 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80073de:	2201      	movs	r2, #1
 80073e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10a      	bne.n	8007410 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	69fa      	ldr	r2, [r7, #28]
 8007404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007408:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800740c:	6053      	str	r3, [r2, #4]
            break;
 800740e:	e008      	b.n	8007422 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	3301      	adds	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	791b      	ldrb	r3, [r3, #4]
 800741a:	461a      	mov	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	4293      	cmp	r3, r2
 8007420:	d3b3      	bcc.n	800738a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	695a      	ldr	r2, [r3, #20]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007430:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f003 fff4 	bl	800b424 <USB_ReadInterrupts>
 800743c:	4603      	mov	r3, r0
 800743e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007446:	d10a      	bne.n	800745e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f015 fe05 	bl	801d058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695a      	ldr	r2, [r3, #20]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800745c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4618      	mov	r0, r3
 8007464:	f003 ffde 	bl	800b424 <USB_ReadInterrupts>
 8007468:	4603      	mov	r3, r0
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b04      	cmp	r3, #4
 8007470:	d115      	bne.n	800749e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f015 fdf5 	bl	801d074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	e000      	b.n	800749e <HAL_PCD_IRQHandler+0x93c>
      return;
 800749c:	bf00      	nop
    }
  }
}
 800749e:	3734      	adds	r7, #52	@ 0x34
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd90      	pop	{r4, r7, pc}

080074a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_PCD_SetAddress+0x1a>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e012      	b.n	80074e4 <HAL_PCD_SetAddress+0x40>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f003 ff3d 	bl	800b354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	4608      	mov	r0, r1
 80074f6:	4611      	mov	r1, r2
 80074f8:	461a      	mov	r2, r3
 80074fa:	4603      	mov	r3, r0
 80074fc:	70fb      	strb	r3, [r7, #3]
 80074fe:	460b      	mov	r3, r1
 8007500:	803b      	strh	r3, [r7, #0]
 8007502:	4613      	mov	r3, r2
 8007504:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800750a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800750e:	2b00      	cmp	r3, #0
 8007510:	da0f      	bge.n	8007532 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	f003 020f 	and.w	r2, r3, #15
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	3310      	adds	r3, #16
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	705a      	strb	r2, [r3, #1]
 8007530:	e00f      	b.n	8007552 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	4413      	add	r3, r2
 8007548:	3304      	adds	r3, #4
 800754a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800755e:	883b      	ldrh	r3, [r7, #0]
 8007560:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	78ba      	ldrb	r2, [r7, #2]
 800756c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007580:	78bb      	ldrb	r3, [r7, #2]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d102      	bne.n	800758c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007592:	2b01      	cmp	r3, #1
 8007594:	d101      	bne.n	800759a <HAL_PCD_EP_Open+0xae>
 8007596:	2302      	movs	r3, #2
 8007598:	e00e      	b.n	80075b8 <HAL_PCD_EP_Open+0xcc>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f003 f8bd 	bl	800a728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80075b6:	7afb      	ldrb	r3, [r7, #11]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da0f      	bge.n	80075f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	4613      	mov	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	3310      	adds	r3, #16
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	4413      	add	r3, r2
 80075e8:	3304      	adds	r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	705a      	strb	r2, [r3, #1]
 80075f2:	e00f      	b.n	8007614 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 020f 	and.w	r2, r3, #15
 80075fa:	4613      	mov	r3, r2
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_PCD_EP_Close+0x6e>
 800762a:	2302      	movs	r3, #2
 800762c:	e00e      	b.n	800764c <HAL_PCD_EP_Close+0x8c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68f9      	ldr	r1, [r7, #12]
 800763c:	4618      	mov	r0, r3
 800763e:	f003 f8fb 	bl	800a838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	460b      	mov	r3, r1
 8007662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	f003 020f 	and.w	r2, r3, #15
 800766a:	4613      	mov	r3, r2
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4413      	add	r3, r2
 800767a:	3304      	adds	r3, #4
 800767c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2200      	movs	r2, #0
 800768e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2200      	movs	r2, #0
 8007694:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	b2da      	uxtb	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	799b      	ldrb	r3, [r3, #6]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d102      	bne.n	80076b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	799b      	ldrb	r3, [r3, #6]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6979      	ldr	r1, [r7, #20]
 80076bc:	f003 f998 	bl	800a9f0 <USB_EPStartXfer>

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80076ec:	681b      	ldr	r3, [r3, #0]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	607a      	str	r2, [r7, #4]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	460b      	mov	r3, r1
 8007708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	3310      	adds	r3, #16
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	3304      	adds	r3, #4
 8007720:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2201      	movs	r2, #1
 8007738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800773a:	7afb      	ldrb	r3, [r7, #11]
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	b2da      	uxtb	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	799b      	ldrb	r3, [r3, #6]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d102      	bne.n	8007754 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	799b      	ldrb	r3, [r3, #6]
 800775c:	461a      	mov	r2, r3
 800775e:	6979      	ldr	r1, [r7, #20]
 8007760:	f003 f946 	bl	800a9f0 <USB_EPStartXfer>

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 030f 	and.w	r3, r3, #15
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7912      	ldrb	r2, [r2, #4]
 8007784:	4293      	cmp	r3, r2
 8007786:	d901      	bls.n	800778c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e04f      	b.n	800782c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800778c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007790:	2b00      	cmp	r3, #0
 8007792:	da0f      	bge.n	80077b4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	f003 020f 	and.w	r2, r3, #15
 800779a:	4613      	mov	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	3310      	adds	r3, #16
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	3304      	adds	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	705a      	strb	r2, [r3, #1]
 80077b2:	e00d      	b.n	80077d0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077b4:	78fa      	ldrb	r2, [r7, #3]
 80077b6:	4613      	mov	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	4413      	add	r3, r2
 80077c6:	3304      	adds	r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_PCD_EP_SetStall+0x82>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e01d      	b.n	800782c <HAL_PCD_EP_SetStall+0xbe>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68f9      	ldr	r1, [r7, #12]
 80077fe:	4618      	mov	r0, r3
 8007800:	f003 fcd4 	bl	800b1ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	7999      	ldrb	r1, [r3, #6]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800781c:	461a      	mov	r2, r3
 800781e:	f003 fec5 	bl	800b5ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	7912      	ldrb	r2, [r2, #4]
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e042      	b.n	80078d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007856:	2b00      	cmp	r3, #0
 8007858:	da0f      	bge.n	800787a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	f003 020f 	and.w	r2, r3, #15
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	3310      	adds	r3, #16
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	4413      	add	r3, r2
 800786e:	3304      	adds	r3, #4
 8007870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	705a      	strb	r2, [r3, #1]
 8007878:	e00f      	b.n	800789a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	f003 020f 	and.w	r2, r3, #15
 8007880:	4613      	mov	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_PCD_EP_ClrStall+0x86>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e00e      	b.n	80078d8 <HAL_PCD_EP_ClrStall+0xa4>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f003 fcdd 	bl	800b288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80078ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	da0c      	bge.n	800790e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	f003 020f 	and.w	r2, r3, #15
 80078fa:	4613      	mov	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	4413      	add	r3, r2
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	3310      	adds	r3, #16
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4413      	add	r3, r2
 8007908:	3304      	adds	r3, #4
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	e00c      	b.n	8007928 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800790e:	78fb      	ldrb	r3, [r7, #3]
 8007910:	f003 020f 	and.w	r2, r3, #15
 8007914:	4613      	mov	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	4618      	mov	r0, r3
 8007930:	f003 fafc 	bl	800af2c <USB_EPStopXfer>
 8007934:	4603      	mov	r3, r0
 8007936:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007938:	7afb      	ldrb	r3, [r7, #11]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b08a      	sub	sp, #40	@ 0x28
 8007946:	af02      	add	r7, sp, #8
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	3310      	adds	r3, #16
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	4413      	add	r3, r2
 8007966:	3304      	adds	r3, #4
 8007968:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	d901      	bls.n	800797a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e06b      	b.n	8007a52 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691a      	ldr	r2, [r3, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	429a      	cmp	r2, r3
 800798e:	d902      	bls.n	8007996 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	3303      	adds	r3, #3
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800799e:	e02a      	b.n	80079f6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	691a      	ldr	r2, [r3, #16]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	69fa      	ldr	r2, [r7, #28]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d902      	bls.n	80079bc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3303      	adds	r3, #3
 80079c0:	089b      	lsrs	r3, r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68d9      	ldr	r1, [r3, #12]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	4603      	mov	r3, r0
 80079d8:	6978      	ldr	r0, [r7, #20]
 80079da:	f003 fb51 	bl	800b080 <USB_WritePacket>

    ep->xfer_buff  += len;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	441a      	add	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	695a      	ldr	r2, [r3, #20]
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	441a      	add	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d809      	bhi.n	8007a20 <PCD_WriteEmptyTxFifo+0xde>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d203      	bcs.n	8007a20 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1bf      	bne.n	80079a0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	691a      	ldr	r2, [r3, #16]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d811      	bhi.n	8007a50 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	2201      	movs	r2, #1
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	6939      	ldr	r1, [r7, #16]
 8007a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	333c      	adds	r3, #60	@ 0x3c
 8007a74:	3304      	adds	r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	799b      	ldrb	r3, [r3, #6]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d17b      	bne.n	8007b8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d015      	beq.n	8007ac8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4a61      	ldr	r2, [pc, #388]	@ (8007c24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	f240 80b9 	bls.w	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80b3 	beq.w	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac4:	6093      	str	r3, [r2, #8]
 8007ac6:	e0a7      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ade:	461a      	mov	r2, r3
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	6093      	str	r3, [r2, #8]
 8007ae4:	e098      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f040 8093 	bne.w	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4a4b      	ldr	r2, [pc, #300]	@ (8007c24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d90f      	bls.n	8007b1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b10:	461a      	mov	r2, r3
 8007b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b16:	6093      	str	r3, [r2, #8]
 8007b18:	e07e      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a1a      	ldr	r2, [r3, #32]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	0159      	lsls	r1, r3, #5
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b46:	1ad2      	subs	r2, r2, r3
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d114      	bne.n	8007b7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b64:	461a      	mov	r2, r3
 8007b66:	2101      	movs	r1, #1
 8007b68:	f003 fd20 	bl	800b5ac <USB_EP0_OutStart>
 8007b6c:	e006      	b.n	8007b7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	441a      	add	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f015 f9a4 	bl	801ced0 <HAL_PCD_DataOutStageCallback>
 8007b88:	e046      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	@ (8007c28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d124      	bne.n	8007bdc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00a      	beq.n	8007bb2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bae:	6093      	str	r3, [r2, #8]
 8007bb0:	e032      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc8:	461a      	mov	r2, r3
 8007bca:	2320      	movs	r3, #32
 8007bcc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f015 f97b 	bl	801ced0 <HAL_PCD_DataOutStageCallback>
 8007bda:	e01d      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d114      	bne.n	8007c0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007be2:	6879      	ldr	r1, [r7, #4]
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	4613      	mov	r3, r2
 8007be8:	00db      	lsls	r3, r3, #3
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d108      	bne.n	8007c0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c04:	461a      	mov	r2, r3
 8007c06:	2100      	movs	r1, #0
 8007c08:	f003 fcd0 	bl	800b5ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f015 f95c 	bl	801ced0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3720      	adds	r7, #32
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	4f54300a 	.word	0x4f54300a
 8007c28:	4f54310a 	.word	0x4f54310a

08007c2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	333c      	adds	r3, #60	@ 0x3c
 8007c44:	3304      	adds	r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	4a15      	ldr	r2, [pc, #84]	@ (8007cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d90e      	bls.n	8007c80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d009      	beq.n	8007c80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c78:	461a      	mov	r2, r3
 8007c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f015 f913 	bl	801ceac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d90c      	bls.n	8007ca8 <PCD_EP_OutSetupPacket_int+0x7c>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	799b      	ldrb	r3, [r3, #6]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d108      	bne.n	8007ca8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	f003 fc82 	bl	800b5ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	4f54300a 	.word	0x4f54300a

08007cb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d107      	bne.n	8007ce6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007cd6:	883b      	ldrh	r3, [r7, #0]
 8007cd8:	0419      	lsls	r1, r3, #16
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ce4:	e028      	b.n	8007d38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	0c1b      	lsrs	r3, r3, #16
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]
 8007cf8:	e00d      	b.n	8007d16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
 8007d00:	3340      	adds	r3, #64	@ 0x40
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4413      	add	r3, r2
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	3301      	adds	r3, #1
 8007d14:	73fb      	strb	r3, [r7, #15]
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d3ec      	bcc.n	8007cfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007d20:	883b      	ldrh	r3, [r7, #0]
 8007d22:	0418      	lsls	r0, r3, #16
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6819      	ldr	r1, [r3, #0]
 8007d28:	78fb      	ldrb	r3, [r7, #3]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	4302      	orrs	r2, r0
 8007d30:	3340      	adds	r3, #64	@ 0x40
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e267      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d075      	beq.n	8007e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007d9e:	4b88      	ldr	r3, [pc, #544]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	d00c      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007daa:	4b85      	ldr	r3, [pc, #532]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007db2:	2b08      	cmp	r3, #8
 8007db4:	d112      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007db6:	4b82      	ldr	r3, [pc, #520]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dc2:	d10b      	bne.n	8007ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc4:	4b7e      	ldr	r3, [pc, #504]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d05b      	beq.n	8007e88 <HAL_RCC_OscConfig+0x108>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d157      	bne.n	8007e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e242      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de4:	d106      	bne.n	8007df4 <HAL_RCC_OscConfig+0x74>
 8007de6:	4b76      	ldr	r3, [pc, #472]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a75      	ldr	r2, [pc, #468]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	e01d      	b.n	8007e30 <HAL_RCC_OscConfig+0xb0>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007dfc:	d10c      	bne.n	8007e18 <HAL_RCC_OscConfig+0x98>
 8007dfe:	4b70      	ldr	r3, [pc, #448]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a6f      	ldr	r2, [pc, #444]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a6c      	ldr	r2, [pc, #432]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e00b      	b.n	8007e30 <HAL_RCC_OscConfig+0xb0>
 8007e18:	4b69      	ldr	r3, [pc, #420]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a68      	ldr	r2, [pc, #416]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4b66      	ldr	r3, [pc, #408]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a65      	ldr	r2, [pc, #404]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d013      	beq.n	8007e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e38:	f7fc fcd8 	bl	80047ec <HAL_GetTick>
 8007e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3e:	e008      	b.n	8007e52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e40:	f7fc fcd4 	bl	80047ec <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	2b64      	cmp	r3, #100	@ 0x64
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e207      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e52:	4b5b      	ldr	r3, [pc, #364]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0f0      	beq.n	8007e40 <HAL_RCC_OscConfig+0xc0>
 8007e5e:	e014      	b.n	8007e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e60:	f7fc fcc4 	bl	80047ec <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e68:	f7fc fcc0 	bl	80047ec <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b64      	cmp	r3, #100	@ 0x64
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e1f3      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e7a:	4b51      	ldr	r3, [pc, #324]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <HAL_RCC_OscConfig+0xe8>
 8007e86:	e000      	b.n	8007e8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d063      	beq.n	8007f5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007e96:	4b4a      	ldr	r3, [pc, #296]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 030c 	and.w	r3, r3, #12
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ea2:	4b47      	ldr	r3, [pc, #284]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d11c      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007eae:	4b44      	ldr	r3, [pc, #272]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d116      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007eba:	4b41      	ldr	r3, [pc, #260]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x152>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d001      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e1c7      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4937      	ldr	r1, [pc, #220]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ee6:	e03a      	b.n	8007f5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d020      	beq.n	8007f32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ef0:	4b34      	ldr	r3, [pc, #208]	@ (8007fc4 <HAL_RCC_OscConfig+0x244>)
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ef6:	f7fc fc79 	bl	80047ec <HAL_GetTick>
 8007efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007efc:	e008      	b.n	8007f10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007efe:	f7fc fc75 	bl	80047ec <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e1a8      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f10:	4b2b      	ldr	r3, [pc, #172]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0f0      	beq.n	8007efe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1c:	4b28      	ldr	r3, [pc, #160]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	4925      	ldr	r1, [pc, #148]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	600b      	str	r3, [r1, #0]
 8007f30:	e015      	b.n	8007f5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f32:	4b24      	ldr	r3, [pc, #144]	@ (8007fc4 <HAL_RCC_OscConfig+0x244>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7fc fc58 	bl	80047ec <HAL_GetTick>
 8007f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f40:	f7fc fc54 	bl	80047ec <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e187      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f52:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d036      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f72:	4b15      	ldr	r3, [pc, #84]	@ (8007fc8 <HAL_RCC_OscConfig+0x248>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f78:	f7fc fc38 	bl	80047ec <HAL_GetTick>
 8007f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f80:	f7fc fc34 	bl	80047ec <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e167      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <HAL_RCC_OscConfig+0x240>)
 8007f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f96:	f003 0302 	and.w	r3, r3, #2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x200>
 8007f9e:	e01b      	b.n	8007fd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007fa0:	4b09      	ldr	r3, [pc, #36]	@ (8007fc8 <HAL_RCC_OscConfig+0x248>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fa6:	f7fc fc21 	bl	80047ec <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fac:	e00e      	b.n	8007fcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fae:	f7fc fc1d 	bl	80047ec <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d907      	bls.n	8007fcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e150      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
 8007fc0:	40023800 	.word	0x40023800
 8007fc4:	42470000 	.word	0x42470000
 8007fc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007fcc:	4b88      	ldr	r3, [pc, #544]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8007fce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1ea      	bne.n	8007fae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8097 	beq.w	8008114 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fea:	4b81      	ldr	r3, [pc, #516]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]
 8007ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffe:	4a7c      	ldr	r2, [pc, #496]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008004:	6413      	str	r3, [r2, #64]	@ 0x40
 8008006:	4b7a      	ldr	r3, [pc, #488]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800800a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800800e:	60bb      	str	r3, [r7, #8]
 8008010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008012:	2301      	movs	r3, #1
 8008014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008016:	4b77      	ldr	r3, [pc, #476]	@ (80081f4 <HAL_RCC_OscConfig+0x474>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801e:	2b00      	cmp	r3, #0
 8008020:	d118      	bne.n	8008054 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008022:	4b74      	ldr	r3, [pc, #464]	@ (80081f4 <HAL_RCC_OscConfig+0x474>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a73      	ldr	r2, [pc, #460]	@ (80081f4 <HAL_RCC_OscConfig+0x474>)
 8008028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800802c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800802e:	f7fc fbdd 	bl	80047ec <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008036:	f7fc fbd9 	bl	80047ec <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e10c      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008048:	4b6a      	ldr	r3, [pc, #424]	@ (80081f4 <HAL_RCC_OscConfig+0x474>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0f0      	beq.n	8008036 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d106      	bne.n	800806a <HAL_RCC_OscConfig+0x2ea>
 800805c:	4b64      	ldr	r3, [pc, #400]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800805e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008060:	4a63      	ldr	r2, [pc, #396]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008062:	f043 0301 	orr.w	r3, r3, #1
 8008066:	6713      	str	r3, [r2, #112]	@ 0x70
 8008068:	e01c      	b.n	80080a4 <HAL_RCC_OscConfig+0x324>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	2b05      	cmp	r3, #5
 8008070:	d10c      	bne.n	800808c <HAL_RCC_OscConfig+0x30c>
 8008072:	4b5f      	ldr	r3, [pc, #380]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008076:	4a5e      	ldr	r2, [pc, #376]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008078:	f043 0304 	orr.w	r3, r3, #4
 800807c:	6713      	str	r3, [r2, #112]	@ 0x70
 800807e:	4b5c      	ldr	r3, [pc, #368]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008082:	4a5b      	ldr	r2, [pc, #364]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008084:	f043 0301 	orr.w	r3, r3, #1
 8008088:	6713      	str	r3, [r2, #112]	@ 0x70
 800808a:	e00b      	b.n	80080a4 <HAL_RCC_OscConfig+0x324>
 800808c:	4b58      	ldr	r3, [pc, #352]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800808e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008090:	4a57      	ldr	r2, [pc, #348]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008092:	f023 0301 	bic.w	r3, r3, #1
 8008096:	6713      	str	r3, [r2, #112]	@ 0x70
 8008098:	4b55      	ldr	r3, [pc, #340]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800809a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809c:	4a54      	ldr	r2, [pc, #336]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800809e:	f023 0304 	bic.w	r3, r3, #4
 80080a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d015      	beq.n	80080d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ac:	f7fc fb9e 	bl	80047ec <HAL_GetTick>
 80080b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080b2:	e00a      	b.n	80080ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080b4:	f7fc fb9a 	bl	80047ec <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e0cb      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ca:	4b49      	ldr	r3, [pc, #292]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 80080cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0ee      	beq.n	80080b4 <HAL_RCC_OscConfig+0x334>
 80080d6:	e014      	b.n	8008102 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080d8:	f7fc fb88 	bl	80047ec <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080de:	e00a      	b.n	80080f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080e0:	f7fc fb84 	bl	80047ec <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e0b5      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080f6:	4b3e      	ldr	r3, [pc, #248]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 80080f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1ee      	bne.n	80080e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d105      	bne.n	8008114 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008108:	4b39      	ldr	r3, [pc, #228]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800810a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810c:	4a38      	ldr	r2, [pc, #224]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 800810e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008112:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 80a1 	beq.w	8008260 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800811e:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 030c 	and.w	r3, r3, #12
 8008126:	2b08      	cmp	r3, #8
 8008128:	d05c      	beq.n	80081e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d141      	bne.n	80081b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008132:	4b31      	ldr	r3, [pc, #196]	@ (80081f8 <HAL_RCC_OscConfig+0x478>)
 8008134:	2200      	movs	r2, #0
 8008136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008138:	f7fc fb58 	bl	80047ec <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008140:	f7fc fb54 	bl	80047ec <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e087      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008152:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f0      	bne.n	8008140 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69da      	ldr	r2, [r3, #28]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	431a      	orrs	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	3b01      	subs	r3, #1
 8008178:	041b      	lsls	r3, r3, #16
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008180:	061b      	lsls	r3, r3, #24
 8008182:	491b      	ldr	r1, [pc, #108]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 8008184:	4313      	orrs	r3, r2
 8008186:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008188:	4b1b      	ldr	r3, [pc, #108]	@ (80081f8 <HAL_RCC_OscConfig+0x478>)
 800818a:	2201      	movs	r2, #1
 800818c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800818e:	f7fc fb2d 	bl	80047ec <HAL_GetTick>
 8008192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008194:	e008      	b.n	80081a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008196:	f7fc fb29 	bl	80047ec <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e05c      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081a8:	4b11      	ldr	r3, [pc, #68]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0f0      	beq.n	8008196 <HAL_RCC_OscConfig+0x416>
 80081b4:	e054      	b.n	8008260 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081b6:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <HAL_RCC_OscConfig+0x478>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081bc:	f7fc fb16 	bl	80047ec <HAL_GetTick>
 80081c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c2:	e008      	b.n	80081d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c4:	f7fc fb12 	bl	80047ec <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d901      	bls.n	80081d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e045      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081d6:	4b06      	ldr	r3, [pc, #24]	@ (80081f0 <HAL_RCC_OscConfig+0x470>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1f0      	bne.n	80081c4 <HAL_RCC_OscConfig+0x444>
 80081e2:	e03d      	b.n	8008260 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d107      	bne.n	80081fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e038      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
 80081f0:	40023800 	.word	0x40023800
 80081f4:	40007000 	.word	0x40007000
 80081f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80081fc:	4b1b      	ldr	r3, [pc, #108]	@ (800826c <HAL_RCC_OscConfig+0x4ec>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d028      	beq.n	800825c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008214:	429a      	cmp	r2, r3
 8008216:	d121      	bne.n	800825c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008222:	429a      	cmp	r2, r3
 8008224:	d11a      	bne.n	800825c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800822c:	4013      	ands	r3, r2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008232:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008234:	4293      	cmp	r3, r2
 8008236:	d111      	bne.n	800825c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	085b      	lsrs	r3, r3, #1
 8008244:	3b01      	subs	r3, #1
 8008246:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008248:	429a      	cmp	r2, r3
 800824a:	d107      	bne.n	800825c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008256:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008258:	429a      	cmp	r2, r3
 800825a:	d001      	beq.n	8008260 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800

08008270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0cc      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008284:	4b68      	ldr	r3, [pc, #416]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d90c      	bls.n	80082ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	4b65      	ldr	r3, [pc, #404]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800829a:	4b63      	ldr	r3, [pc, #396]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d001      	beq.n	80082ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0b8      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c4:	4b59      	ldr	r3, [pc, #356]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4a58      	ldr	r2, [pc, #352]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80082ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082dc:	4b53      	ldr	r3, [pc, #332]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4a52      	ldr	r2, [pc, #328]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80082e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082e8:	4b50      	ldr	r3, [pc, #320]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	494d      	ldr	r1, [pc, #308]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d044      	beq.n	8008390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d107      	bne.n	800831e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800830e:	4b47      	ldr	r3, [pc, #284]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e07f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d003      	beq.n	800832e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832a:	2b03      	cmp	r3, #3
 800832c:	d107      	bne.n	800833e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800832e:	4b3f      	ldr	r3, [pc, #252]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e06f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	4b3b      	ldr	r3, [pc, #236]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e067      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800834e:	4b37      	ldr	r3, [pc, #220]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f023 0203 	bic.w	r2, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4934      	ldr	r1, [pc, #208]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008360:	f7fc fa44 	bl	80047ec <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008366:	e00a      	b.n	800837e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f7fc fa40 	bl	80047ec <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e04f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	4b2b      	ldr	r3, [pc, #172]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 020c 	and.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	429a      	cmp	r2, r3
 800838e:	d1eb      	bne.n	8008368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008390:	4b25      	ldr	r3, [pc, #148]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d20c      	bcs.n	80083b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839e:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a6:	4b20      	ldr	r3, [pc, #128]	@ (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d001      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e032      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c4:	4b19      	ldr	r3, [pc, #100]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	4916      	ldr	r1, [pc, #88]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e2:	4b12      	ldr	r3, [pc, #72]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	490e      	ldr	r1, [pc, #56]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083f6:	f000 f821 	bl	800843c <HAL_RCC_GetSysClockFreq>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b0b      	ldr	r3, [pc, #44]	@ (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	490a      	ldr	r1, [pc, #40]	@ (8008430 <HAL_RCC_ClockConfig+0x1c0>)
 8008408:	5ccb      	ldrb	r3, [r1, r3]
 800840a:	fa22 f303 	lsr.w	r3, r2, r3
 800840e:	4a09      	ldr	r2, [pc, #36]	@ (8008434 <HAL_RCC_ClockConfig+0x1c4>)
 8008410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008412:	4b09      	ldr	r3, [pc, #36]	@ (8008438 <HAL_RCC_ClockConfig+0x1c8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fb f90c 	bl	8003634 <HAL_InitTick>

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40023c00 	.word	0x40023c00
 800842c:	40023800 	.word	0x40023800
 8008430:	08023038 	.word	0x08023038
 8008434:	20000000 	.word	0x20000000
 8008438:	20000004 	.word	0x20000004

0800843c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800843c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008440:	b090      	sub	sp, #64	@ 0x40
 8008442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008454:	4b59      	ldr	r3, [pc, #356]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 030c 	and.w	r3, r3, #12
 800845c:	2b08      	cmp	r3, #8
 800845e:	d00d      	beq.n	800847c <HAL_RCC_GetSysClockFreq+0x40>
 8008460:	2b08      	cmp	r3, #8
 8008462:	f200 80a1 	bhi.w	80085a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_RCC_GetSysClockFreq+0x34>
 800846a:	2b04      	cmp	r3, #4
 800846c:	d003      	beq.n	8008476 <HAL_RCC_GetSysClockFreq+0x3a>
 800846e:	e09b      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008470:	4b53      	ldr	r3, [pc, #332]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008474:	e09b      	b.n	80085ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008476:	4b53      	ldr	r3, [pc, #332]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008478:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800847a:	e098      	b.n	80085ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800847c:	4b4f      	ldr	r3, [pc, #316]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008486:	4b4d      	ldr	r3, [pc, #308]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d028      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008492:	4b4a      	ldr	r3, [pc, #296]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	099b      	lsrs	r3, r3, #6
 8008498:	2200      	movs	r2, #0
 800849a:	623b      	str	r3, [r7, #32]
 800849c:	627a      	str	r2, [r7, #36]	@ 0x24
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80084a4:	2100      	movs	r1, #0
 80084a6:	4b47      	ldr	r3, [pc, #284]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80084a8:	fb03 f201 	mul.w	r2, r3, r1
 80084ac:	2300      	movs	r3, #0
 80084ae:	fb00 f303 	mul.w	r3, r0, r3
 80084b2:	4413      	add	r3, r2
 80084b4:	4a43      	ldr	r2, [pc, #268]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80084b6:	fba0 1202 	umull	r1, r2, r0, r2
 80084ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084bc:	460a      	mov	r2, r1
 80084be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80084c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084c2:	4413      	add	r3, r2
 80084c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c8:	2200      	movs	r2, #0
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	61fa      	str	r2, [r7, #28]
 80084ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80084d6:	f7f7 fed3 	bl	8000280 <__aeabi_uldivmod>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4613      	mov	r3, r2
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084e2:	e053      	b.n	800858c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084e4:	4b35      	ldr	r3, [pc, #212]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	099b      	lsrs	r3, r3, #6
 80084ea:	2200      	movs	r2, #0
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	617a      	str	r2, [r7, #20]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80084f6:	f04f 0b00 	mov.w	fp, #0
 80084fa:	4652      	mov	r2, sl
 80084fc:	465b      	mov	r3, fp
 80084fe:	f04f 0000 	mov.w	r0, #0
 8008502:	f04f 0100 	mov.w	r1, #0
 8008506:	0159      	lsls	r1, r3, #5
 8008508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800850c:	0150      	lsls	r0, r2, #5
 800850e:	4602      	mov	r2, r0
 8008510:	460b      	mov	r3, r1
 8008512:	ebb2 080a 	subs.w	r8, r2, sl
 8008516:	eb63 090b 	sbc.w	r9, r3, fp
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008526:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800852a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800852e:	ebb2 0408 	subs.w	r4, r2, r8
 8008532:	eb63 0509 	sbc.w	r5, r3, r9
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	00eb      	lsls	r3, r5, #3
 8008540:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008544:	00e2      	lsls	r2, r4, #3
 8008546:	4614      	mov	r4, r2
 8008548:	461d      	mov	r5, r3
 800854a:	eb14 030a 	adds.w	r3, r4, sl
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	eb45 030b 	adc.w	r3, r5, fp
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008562:	4629      	mov	r1, r5
 8008564:	028b      	lsls	r3, r1, #10
 8008566:	4621      	mov	r1, r4
 8008568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800856c:	4621      	mov	r1, r4
 800856e:	028a      	lsls	r2, r1, #10
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008576:	2200      	movs	r2, #0
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	60fa      	str	r2, [r7, #12]
 800857c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008580:	f7f7 fe7e 	bl	8000280 <__aeabi_uldivmod>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4613      	mov	r3, r2
 800858a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <HAL_RCC_GetSysClockFreq+0x180>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	0c1b      	lsrs	r3, r3, #16
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	3301      	adds	r3, #1
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800859c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085a6:	e002      	b.n	80085ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085a8:	4b05      	ldr	r3, [pc, #20]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80085aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3740      	adds	r7, #64	@ 0x40
 80085b4:	46bd      	mov	sp, r7
 80085b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	017d7840 	.word	0x017d7840

080085c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085cc:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <HAL_RCC_GetHCLKFreq+0x14>)
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000000 	.word	0x20000000

080085e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085e4:	f7ff fff0 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 80085e8:	4602      	mov	r2, r0
 80085ea:	4b05      	ldr	r3, [pc, #20]	@ (8008600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	0a9b      	lsrs	r3, r3, #10
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	4903      	ldr	r1, [pc, #12]	@ (8008604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085f6:	5ccb      	ldrb	r3, [r1, r3]
 80085f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40023800 	.word	0x40023800
 8008604:	08023048 	.word	0x08023048

08008608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800860c:	f7ff ffdc 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 8008610:	4602      	mov	r2, r0
 8008612:	4b05      	ldr	r3, [pc, #20]	@ (8008628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	0b5b      	lsrs	r3, r3, #13
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	4903      	ldr	r1, [pc, #12]	@ (800862c <HAL_RCC_GetPCLK2Freq+0x24>)
 800861e:	5ccb      	ldrb	r3, [r1, r3]
 8008620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40023800 	.word	0x40023800
 800862c:	08023048 	.word	0x08023048

08008630 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	220f      	movs	r2, #15
 800863e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008640:	4b12      	ldr	r3, [pc, #72]	@ (800868c <HAL_RCC_GetClockConfig+0x5c>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f003 0203 	and.w	r2, r3, #3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800864c:	4b0f      	ldr	r3, [pc, #60]	@ (800868c <HAL_RCC_GetClockConfig+0x5c>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008658:	4b0c      	ldr	r3, [pc, #48]	@ (800868c <HAL_RCC_GetClockConfig+0x5c>)
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008664:	4b09      	ldr	r3, [pc, #36]	@ (800868c <HAL_RCC_GetClockConfig+0x5c>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008672:	4b07      	ldr	r3, [pc, #28]	@ (8008690 <HAL_RCC_GetClockConfig+0x60>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0207 	and.w	r2, r3, #7
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	601a      	str	r2, [r3, #0]
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	40023800 	.word	0x40023800
 8008690:	40023c00 	.word	0x40023c00

08008694 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e038      	b.n	800871c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7f9 f9ae 	bl	8001a20 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3308      	adds	r3, #8
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f001 fbe4 	bl	8009e9c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6818      	ldr	r0, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	461a      	mov	r2, r3
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	f001 fc46 	bl	8009f70 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6858      	ldr	r0, [r3, #4]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	f001 fc6b 	bl	8009fcc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	6892      	ldr	r2, [r2, #8]
 80086fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	6892      	ldr	r2, [r2, #8]
 800870a:	f041 0101 	orr.w	r1, r1, #1
 800870e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e041      	b.n	80087ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fb fc80 	bl	8004050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f000 f9b6 	bl	8008ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d001      	beq.n	80087dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e04e      	b.n	800887a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2202      	movs	r2, #2
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68da      	ldr	r2, [r3, #12]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a23      	ldr	r2, [pc, #140]	@ (8008888 <HAL_TIM_Base_Start_IT+0xc4>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d022      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008806:	d01d      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1f      	ldr	r2, [pc, #124]	@ (800888c <HAL_TIM_Base_Start_IT+0xc8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d018      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1e      	ldr	r2, [pc, #120]	@ (8008890 <HAL_TIM_Base_Start_IT+0xcc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1c      	ldr	r2, [pc, #112]	@ (8008894 <HAL_TIM_Base_Start_IT+0xd0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00e      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1b      	ldr	r2, [pc, #108]	@ (8008898 <HAL_TIM_Base_Start_IT+0xd4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d009      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a19      	ldr	r2, [pc, #100]	@ (800889c <HAL_TIM_Base_Start_IT+0xd8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d004      	beq.n	8008844 <HAL_TIM_Base_Start_IT+0x80>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a18      	ldr	r2, [pc, #96]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d111      	bne.n	8008868 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b06      	cmp	r3, #6
 8008854:	d010      	beq.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f042 0201 	orr.w	r2, r2, #1
 8008864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008866:	e007      	b.n	8008878 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f042 0201 	orr.w	r2, r2, #1
 8008876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40010400 	.word	0x40010400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40001800 	.word	0x40001800

080088a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f003 0302 	and.w	r3, r3, #2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d020      	beq.n	8008908 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01b      	beq.n	8008908 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0202 	mvn.w	r2, #2
 80088d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f8d2 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f8c4 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8d5 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d020      	beq.n	8008954 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d01b      	beq.n	8008954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f06f 0204 	mvn.w	r2, #4
 8008924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f8ac 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 8008940:	e005      	b.n	800894e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f89e 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f8af 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f003 0308 	and.w	r3, r3, #8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d020      	beq.n	80089a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f003 0308 	and.w	r3, r3, #8
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01b      	beq.n	80089a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0208 	mvn.w	r2, #8
 8008970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2204      	movs	r2, #4
 8008976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	f003 0303 	and.w	r3, r3, #3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f886 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 800898c:	e005      	b.n	800899a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f878 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f889 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d020      	beq.n	80089ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f003 0310 	and.w	r3, r3, #16
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d01b      	beq.n	80089ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f06f 0210 	mvn.w	r2, #16
 80089bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2208      	movs	r2, #8
 80089c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d003      	beq.n	80089da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f860 	bl	8008a98 <HAL_TIM_IC_CaptureCallback>
 80089d8:	e005      	b.n	80089e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f852 	bl	8008a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f863 	bl	8008aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00c      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d007      	beq.n	8008a10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f06f 0201 	mvn.w	r2, #1
 8008a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f9 f914 	bl	8001c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d007      	beq.n	8008a34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f97c 	bl	8008d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d007      	beq.n	8008a58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f834 	bl	8008ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 0320 	and.w	r3, r3, #32
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00c      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d007      	beq.n	8008a7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f06f 0220 	mvn.w	r2, #32
 8008a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f94e 	bl	8008d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a43      	ldr	r2, [pc, #268]	@ (8008bf4 <TIM_Base_SetConfig+0x120>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d013      	beq.n	8008b14 <TIM_Base_SetConfig+0x40>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008af2:	d00f      	beq.n	8008b14 <TIM_Base_SetConfig+0x40>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a40      	ldr	r2, [pc, #256]	@ (8008bf8 <TIM_Base_SetConfig+0x124>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <TIM_Base_SetConfig+0x40>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a3f      	ldr	r2, [pc, #252]	@ (8008bfc <TIM_Base_SetConfig+0x128>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d007      	beq.n	8008b14 <TIM_Base_SetConfig+0x40>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a3e      	ldr	r2, [pc, #248]	@ (8008c00 <TIM_Base_SetConfig+0x12c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d003      	beq.n	8008b14 <TIM_Base_SetConfig+0x40>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a3d      	ldr	r2, [pc, #244]	@ (8008c04 <TIM_Base_SetConfig+0x130>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d108      	bne.n	8008b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a32      	ldr	r2, [pc, #200]	@ (8008bf4 <TIM_Base_SetConfig+0x120>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d02b      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b34:	d027      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a2f      	ldr	r2, [pc, #188]	@ (8008bf8 <TIM_Base_SetConfig+0x124>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d023      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a2e      	ldr	r2, [pc, #184]	@ (8008bfc <TIM_Base_SetConfig+0x128>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01f      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a2d      	ldr	r2, [pc, #180]	@ (8008c00 <TIM_Base_SetConfig+0x12c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d01b      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a2c      	ldr	r2, [pc, #176]	@ (8008c04 <TIM_Base_SetConfig+0x130>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d017      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a2b      	ldr	r2, [pc, #172]	@ (8008c08 <TIM_Base_SetConfig+0x134>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a2a      	ldr	r2, [pc, #168]	@ (8008c0c <TIM_Base_SetConfig+0x138>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a29      	ldr	r2, [pc, #164]	@ (8008c10 <TIM_Base_SetConfig+0x13c>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00b      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a28      	ldr	r2, [pc, #160]	@ (8008c14 <TIM_Base_SetConfig+0x140>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d007      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a27      	ldr	r2, [pc, #156]	@ (8008c18 <TIM_Base_SetConfig+0x144>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_Base_SetConfig+0xb2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a26      	ldr	r2, [pc, #152]	@ (8008c1c <TIM_Base_SetConfig+0x148>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d108      	bne.n	8008b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008bf4 <TIM_Base_SetConfig+0x120>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_Base_SetConfig+0xf2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a10      	ldr	r2, [pc, #64]	@ (8008c04 <TIM_Base_SetConfig+0x130>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d103      	bne.n	8008bce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	691a      	ldr	r2, [r3, #16]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f043 0204 	orr.w	r2, r3, #4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]
}
 8008be6:	bf00      	nop
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800
 8008c14:	40001800 	.word	0x40001800
 8008c18:	40001c00 	.word	0x40001c00
 8008c1c:	40002000 	.word	0x40002000

08008c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d101      	bne.n	8008c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e05a      	b.n	8008cee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a21      	ldr	r2, [pc, #132]	@ (8008cfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d022      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c84:	d01d      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d018      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1b      	ldr	r2, [pc, #108]	@ (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d013      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00e      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a18      	ldr	r2, [pc, #96]	@ (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d009      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a17      	ldr	r2, [pc, #92]	@ (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d004      	beq.n	8008cc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a15      	ldr	r2, [pc, #84]	@ (8008d14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d10c      	bne.n	8008cdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	40010000 	.word	0x40010000
 8008d00:	40000400 	.word	0x40000400
 8008d04:	40000800 	.word	0x40000800
 8008d08:	40000c00 	.word	0x40000c00
 8008d0c:	40010400 	.word	0x40010400
 8008d10:	40014000 	.word	0x40014000
 8008d14:	40001800 	.word	0x40001800

08008d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e042      	b.n	8008dd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7fb fa18 	bl	800419c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2224      	movs	r2, #36	@ 0x24
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008d82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fe15 	bl	80099b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	691a      	ldr	r2, [r3, #16]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	695a      	ldr	r2, [r3, #20]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008da8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008db8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08a      	sub	sp, #40	@ 0x28
 8008de4:	af02      	add	r7, sp, #8
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	603b      	str	r3, [r7, #0]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b20      	cmp	r3, #32
 8008dfe:	d175      	bne.n	8008eec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d002      	beq.n	8008e0c <HAL_UART_Transmit+0x2c>
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e06e      	b.n	8008eee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2221      	movs	r2, #33	@ 0x21
 8008e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e1e:	f7fb fce5 	bl	80047ec <HAL_GetTick>
 8008e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	88fa      	ldrh	r2, [r7, #6]
 8008e28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	88fa      	ldrh	r2, [r7, #6]
 8008e2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e38:	d108      	bne.n	8008e4c <HAL_UART_Transmit+0x6c>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d104      	bne.n	8008e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	e003      	b.n	8008e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e54:	e02e      	b.n	8008eb4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2180      	movs	r1, #128	@ 0x80
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 fbb3 	bl	80095cc <UART_WaitOnFlagUntilTimeout>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e03a      	b.n	8008eee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	461a      	mov	r2, r3
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	3302      	adds	r3, #2
 8008e92:	61bb      	str	r3, [r7, #24]
 8008e94:	e007      	b.n	8008ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	781a      	ldrb	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1cb      	bne.n	8008e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2140      	movs	r1, #64	@ 0x40
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f000 fb7f 	bl	80095cc <UART_WaitOnFlagUntilTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d005      	beq.n	8008ee0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e006      	b.n	8008eee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e000      	b.n	8008eee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008eec:	2302      	movs	r3, #2
  }
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b08a      	sub	sp, #40	@ 0x28
 8008efa:	af02      	add	r7, sp, #8
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	f040 8081 	bne.w	800901a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <HAL_UART_Receive+0x2e>
 8008f1e:	88fb      	ldrh	r3, [r7, #6]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	e079      	b.n	800901c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2222      	movs	r2, #34	@ 0x22
 8008f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f3c:	f7fb fc56 	bl	80047ec <HAL_GetTick>
 8008f40:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	88fa      	ldrh	r2, [r7, #6]
 8008f4c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f56:	d108      	bne.n	8008f6a <HAL_UART_Receive+0x74>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	61bb      	str	r3, [r7, #24]
 8008f68:	e003      	b.n	8008f72 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008f72:	e047      	b.n	8009004 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	2120      	movs	r1, #32
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 fb24 	bl	80095cc <UART_WaitOnFlagUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e042      	b.n	800901c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10c      	bne.n	8008fb6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	3302      	adds	r3, #2
 8008fb2:	61bb      	str	r3, [r7, #24]
 8008fb4:	e01f      	b.n	8008ff6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fbe:	d007      	beq.n	8008fd0 <HAL_UART_Receive+0xda>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <HAL_UART_Receive+0xe8>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e008      	b.n	8008ff0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009008:	b29b      	uxth	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1b2      	bne.n	8008f74 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2220      	movs	r2, #32
 8009012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800901a:	2302      	movs	r3, #2
  }
}
 800901c:	4618      	mov	r0, r3
 800901e:	3720      	adds	r7, #32
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b0ba      	sub	sp, #232	@ 0xe8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800904a:	2300      	movs	r3, #0
 800904c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009050:	2300      	movs	r3, #0
 8009052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10f      	bne.n	800908a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800906a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <HAL_UART_IRQHandler+0x66>
 8009076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800907a:	f003 0320 	and.w	r3, r3, #32
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fbd7 	bl	8009836 <UART_Receive_IT>
      return;
 8009088:	e273      	b.n	8009572 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800908a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80de 	beq.w	8009250 <HAL_UART_IRQHandler+0x22c>
 8009094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d106      	bne.n	80090ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80d1 	beq.w	8009250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <HAL_UART_IRQHandler+0xae>
 80090ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ca:	f043 0201 	orr.w	r2, r3, #1
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090d6:	f003 0304 	and.w	r3, r3, #4
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00b      	beq.n	80090f6 <HAL_UART_IRQHandler+0xd2>
 80090de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ee:	f043 0202 	orr.w	r2, r3, #2
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <HAL_UART_IRQHandler+0xf6>
 8009102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009112:	f043 0204 	orr.w	r2, r3, #4
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d011      	beq.n	800914a <HAL_UART_IRQHandler+0x126>
 8009126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009142:	f043 0208 	orr.w	r2, r3, #8
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 820a 	beq.w	8009568 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009158:	f003 0320 	and.w	r3, r3, #32
 800915c:	2b00      	cmp	r3, #0
 800915e:	d008      	beq.n	8009172 <HAL_UART_IRQHandler+0x14e>
 8009160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009164:	f003 0320 	and.w	r3, r3, #32
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb62 	bl	8009836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b40      	cmp	r3, #64	@ 0x40
 800917e:	bf0c      	ite	eq
 8009180:	2301      	moveq	r3, #1
 8009182:	2300      	movne	r3, #0
 8009184:	b2db      	uxtb	r3, r3
 8009186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	f003 0308 	and.w	r3, r3, #8
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <HAL_UART_IRQHandler+0x17a>
 8009196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d04f      	beq.n	800923e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa6d 	bl	800967e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ae:	2b40      	cmp	r3, #64	@ 0x40
 80091b0:	d141      	bne.n	8009236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3314      	adds	r3, #20
 80091b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3314      	adds	r3, #20
 80091da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1d9      	bne.n	80091b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d013      	beq.n	800922e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800920a:	4a8a      	ldr	r2, [pc, #552]	@ (8009434 <HAL_UART_IRQHandler+0x410>)
 800920c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009212:	4618      	mov	r0, r3
 8009214:	f7fb fd1a 	bl	8004c4c <HAL_DMA_Abort_IT>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d016      	beq.n	800924c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922c:	e00e      	b.n	800924c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9b6 	bl	80095a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009234:	e00a      	b.n	800924c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 f9b2 	bl	80095a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800923c:	e006      	b.n	800924c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9ae 	bl	80095a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800924a:	e18d      	b.n	8009568 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924c:	bf00      	nop
    return;
 800924e:	e18b      	b.n	8009568 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009254:	2b01      	cmp	r3, #1
 8009256:	f040 8167 	bne.w	8009528 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800925a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925e:	f003 0310 	and.w	r3, r3, #16
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 8160 	beq.w	8009528 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8159 	beq.w	8009528 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009276:	2300      	movs	r3, #0
 8009278:	60bb      	str	r3, [r7, #8]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	60bb      	str	r3, [r7, #8]
 800928a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	695b      	ldr	r3, [r3, #20]
 8009292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009296:	2b40      	cmp	r3, #64	@ 0x40
 8009298:	f040 80ce 	bne.w	8009438 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80a9 	beq.w	8009404 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092ba:	429a      	cmp	r2, r3
 80092bc:	f080 80a2 	bcs.w	8009404 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092d2:	f000 8088 	beq.w	80093e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	330c      	adds	r3, #12
 80092dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800930e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800931a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1d9      	bne.n	80092d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3314      	adds	r3, #20
 8009328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3314      	adds	r3, #20
 8009342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800934a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800934e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e1      	bne.n	8009322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3314      	adds	r3, #20
 8009364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800936e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3314      	adds	r3, #20
 800937e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800938a:	e841 2300 	strex	r3, r2, [r1]
 800938e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e3      	bne.n	800935e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	330c      	adds	r3, #12
 80093aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093ae:	e853 3f00 	ldrex	r3, [r3]
 80093b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b6:	f023 0310 	bic.w	r3, r3, #16
 80093ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80093c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093d0:	e841 2300 	strex	r3, r2, [r1]
 80093d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e3      	bne.n	80093a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fb fbc3 	bl	8004b6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2202      	movs	r2, #2
 80093ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f8d9 	bl	80095b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009402:	e0b3      	b.n	800956c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009408:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800940c:	429a      	cmp	r2, r3
 800940e:	f040 80ad 	bne.w	800956c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800941c:	f040 80a6 	bne.w	800956c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f8c1 	bl	80095b4 <HAL_UARTEx_RxEventCallback>
      return;
 8009432:	e09b      	b.n	800956c <HAL_UART_IRQHandler+0x548>
 8009434:	08009745 	.word	0x08009745
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009440:	b29b      	uxth	r3, r3
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 808e 	beq.w	8009570 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8089 	beq.w	8009570 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	330c      	adds	r3, #12
 8009464:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800946e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009470:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009474:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009482:	647a      	str	r2, [r7, #68]	@ 0x44
 8009484:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009488:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e3      	bne.n	800945e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3314      	adds	r3, #20
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	e853 3f00 	ldrex	r3, [r3]
 80094a4:	623b      	str	r3, [r7, #32]
   return(result);
 80094a6:	6a3b      	ldr	r3, [r7, #32]
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3314      	adds	r3, #20
 80094b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80094bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c2:	e841 2300 	strex	r3, r2, [r1]
 80094c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1e3      	bne.n	8009496 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	330c      	adds	r3, #12
 80094e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f023 0310 	bic.w	r3, r3, #16
 80094f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	330c      	adds	r3, #12
 80094fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009500:	61fa      	str	r2, [r7, #28]
 8009502:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009504:	69b9      	ldr	r1, [r7, #24]
 8009506:	69fa      	ldr	r2, [r7, #28]
 8009508:	e841 2300 	strex	r3, r2, [r1]
 800950c:	617b      	str	r3, [r7, #20]
   return(result);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1e3      	bne.n	80094dc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800951a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f847 	bl	80095b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009526:	e023      	b.n	8009570 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800952c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009530:	2b00      	cmp	r3, #0
 8009532:	d009      	beq.n	8009548 <HAL_UART_IRQHandler+0x524>
 8009534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f910 	bl	8009766 <UART_Transmit_IT>
    return;
 8009546:	e014      	b.n	8009572 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <HAL_UART_IRQHandler+0x54e>
 8009554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d008      	beq.n	8009572 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f950 	bl	8009806 <UART_EndTransmit_IT>
    return;
 8009566:	e004      	b.n	8009572 <HAL_UART_IRQHandler+0x54e>
    return;
 8009568:	bf00      	nop
 800956a:	e002      	b.n	8009572 <HAL_UART_IRQHandler+0x54e>
      return;
 800956c:	bf00      	nop
 800956e:	e000      	b.n	8009572 <HAL_UART_IRQHandler+0x54e>
      return;
 8009570:	bf00      	nop
  }
}
 8009572:	37e8      	adds	r7, #232	@ 0xe8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	4613      	mov	r3, r2
 80095da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095dc:	e03b      	b.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e4:	d037      	beq.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e6:	f7fb f901 	bl	80047ec <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	6a3a      	ldr	r2, [r7, #32]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d302      	bcc.n	80095fc <UART_WaitOnFlagUntilTimeout+0x30>
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e03a      	b.n	8009676 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f003 0304 	and.w	r3, r3, #4
 800960a:	2b00      	cmp	r3, #0
 800960c:	d023      	beq.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b80      	cmp	r3, #128	@ 0x80
 8009612:	d020      	beq.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b40      	cmp	r3, #64	@ 0x40
 8009618:	d01d      	beq.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0308 	and.w	r3, r3, #8
 8009624:	2b08      	cmp	r3, #8
 8009626:	d116      	bne.n	8009656 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f81d 	bl	800967e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2208      	movs	r2, #8
 8009648:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e00f      	b.n	8009676 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	4013      	ands	r3, r2
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	429a      	cmp	r2, r3
 8009664:	bf0c      	ite	eq
 8009666:	2301      	moveq	r3, #1
 8009668:	2300      	movne	r3, #0
 800966a:	b2db      	uxtb	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	429a      	cmp	r2, r3
 8009672:	d0b4      	beq.n	80095de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800967e:	b480      	push	{r7}
 8009680:	b095      	sub	sp, #84	@ 0x54
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	330c      	adds	r3, #12
 800968c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800969c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	330c      	adds	r3, #12
 80096a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	3314      	adds	r3, #20
 80096c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	f023 0301 	bic.w	r3, r3, #1
 80096d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3314      	adds	r3, #20
 80096d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1e5      	bne.n	80096ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d119      	bne.n	800972a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	330c      	adds	r3, #12
 80096fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	60bb      	str	r3, [r7, #8]
   return(result);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f023 0310 	bic.w	r3, r3, #16
 800970c:	647b      	str	r3, [r7, #68]	@ 0x44
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	330c      	adds	r3, #12
 8009714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009716:	61ba      	str	r2, [r7, #24]
 8009718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971a:	6979      	ldr	r1, [r7, #20]
 800971c:	69ba      	ldr	r2, [r7, #24]
 800971e:	e841 2300 	strex	r3, r2, [r1]
 8009722:	613b      	str	r3, [r7, #16]
   return(result);
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1e5      	bne.n	80096f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009738:	bf00      	nop
 800973a:	3754      	adds	r7, #84	@ 0x54
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff ff21 	bl	80095a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009766:	b480      	push	{r7}
 8009768:	b085      	sub	sp, #20
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b21      	cmp	r3, #33	@ 0x21
 8009778:	d13e      	bne.n	80097f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009782:	d114      	bne.n	80097ae <UART_Transmit_IT+0x48>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d110      	bne.n	80097ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	1c9a      	adds	r2, r3, #2
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	621a      	str	r2, [r3, #32]
 80097ac:	e008      	b.n	80097c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	1c59      	adds	r1, r3, #1
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6211      	str	r1, [r2, #32]
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	4619      	mov	r1, r3
 80097ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10f      	bne.n	80097f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68da      	ldr	r2, [r3, #12]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80097e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68da      	ldr	r2, [r3, #12]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80097f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	e000      	b.n	80097fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097f8:	2302      	movs	r3, #2
  }
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68da      	ldr	r2, [r3, #12]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800981c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fea6 	bl	8009578 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b08c      	sub	sp, #48	@ 0x30
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b22      	cmp	r3, #34	@ 0x22
 8009850:	f040 80aa 	bne.w	80099a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985c:	d115      	bne.n	800988a <UART_Receive_IT+0x54>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d111      	bne.n	800988a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800986a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	b29b      	uxth	r3, r3
 8009874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009878:	b29a      	uxth	r2, r3
 800987a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800987c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009882:	1c9a      	adds	r2, r3, #2
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	629a      	str	r2, [r3, #40]	@ 0x28
 8009888:	e024      	b.n	80098d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009898:	d007      	beq.n	80098aa <UART_Receive_IT+0x74>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10a      	bne.n	80098b8 <UART_Receive_IT+0x82>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d106      	bne.n	80098b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e008      	b.n	80098ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098c4:	b2da      	uxtb	r2, r3
 80098c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	3b01      	subs	r3, #1
 80098dc:	b29b      	uxth	r3, r3
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	4619      	mov	r1, r3
 80098e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d15d      	bne.n	80099a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68da      	ldr	r2, [r3, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0220 	bic.w	r2, r2, #32
 80098f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695a      	ldr	r2, [r3, #20]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f022 0201 	bic.w	r2, r2, #1
 8009916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992a:	2b01      	cmp	r3, #1
 800992c:	d135      	bne.n	800999a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	330c      	adds	r3, #12
 800993a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	613b      	str	r3, [r7, #16]
   return(result);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	627b      	str	r3, [r7, #36]	@ 0x24
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	330c      	adds	r3, #12
 8009952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009954:	623a      	str	r2, [r7, #32]
 8009956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	69f9      	ldr	r1, [r7, #28]
 800995a:	6a3a      	ldr	r2, [r7, #32]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	61bb      	str	r3, [r7, #24]
   return(result);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e5      	bne.n	8009934 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0310 	and.w	r3, r3, #16
 8009972:	2b10      	cmp	r3, #16
 8009974:	d10a      	bne.n	800998c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009990:	4619      	mov	r1, r3
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7ff fe0e 	bl	80095b4 <HAL_UARTEx_RxEventCallback>
 8009998:	e002      	b.n	80099a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fdf6 	bl	800958c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e002      	b.n	80099aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e000      	b.n	80099aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099a8:	2302      	movs	r3, #2
  }
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3730      	adds	r7, #48	@ 0x30
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099b8:	b0c0      	sub	sp, #256	@ 0x100
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d0:	68d9      	ldr	r1, [r3, #12]
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	ea40 0301 	orr.w	r3, r0, r1
 80099dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	431a      	orrs	r2, r3
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	4313      	orrs	r3, r2
 80099fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a0c:	f021 010c 	bic.w	r1, r1, #12
 8009a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a1a:	430b      	orrs	r3, r1
 8009a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2e:	6999      	ldr	r1, [r3, #24]
 8009a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	ea40 0301 	orr.w	r3, r0, r1
 8009a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4b8f      	ldr	r3, [pc, #572]	@ (8009c80 <UART_SetConfig+0x2cc>)
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d005      	beq.n	8009a54 <UART_SetConfig+0xa0>
 8009a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8009c84 <UART_SetConfig+0x2d0>)
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d104      	bne.n	8009a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a54:	f7fe fdd8 	bl	8008608 <HAL_RCC_GetPCLK2Freq>
 8009a58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a5c:	e003      	b.n	8009a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a5e:	f7fe fdbf 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 8009a62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a70:	f040 810c 	bne.w	8009c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a86:	4622      	mov	r2, r4
 8009a88:	462b      	mov	r3, r5
 8009a8a:	1891      	adds	r1, r2, r2
 8009a8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a8e:	415b      	adcs	r3, r3
 8009a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a96:	4621      	mov	r1, r4
 8009a98:	eb12 0801 	adds.w	r8, r2, r1
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	eb43 0901 	adc.w	r9, r3, r1
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009ab6:	4690      	mov	r8, r2
 8009ab8:	4699      	mov	r9, r3
 8009aba:	4623      	mov	r3, r4
 8009abc:	eb18 0303 	adds.w	r3, r8, r3
 8009ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	eb49 0303 	adc.w	r3, r9, r3
 8009aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ada:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	18db      	adds	r3, r3, r3
 8009ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae8:	4613      	mov	r3, r2
 8009aea:	eb42 0303 	adc.w	r3, r2, r3
 8009aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8009af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009af8:	f7f6 fbc2 	bl	8000280 <__aeabi_uldivmod>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4b61      	ldr	r3, [pc, #388]	@ (8009c88 <UART_SetConfig+0x2d4>)
 8009b02:	fba3 2302 	umull	r2, r3, r3, r2
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	011c      	lsls	r4, r3, #4
 8009b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b1c:	4642      	mov	r2, r8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	1891      	adds	r1, r2, r2
 8009b22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b24:	415b      	adcs	r3, r3
 8009b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b2c:	4641      	mov	r1, r8
 8009b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8009b32:	4649      	mov	r1, r9
 8009b34:	eb43 0b01 	adc.w	fp, r3, r1
 8009b38:	f04f 0200 	mov.w	r2, #0
 8009b3c:	f04f 0300 	mov.w	r3, #0
 8009b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b4c:	4692      	mov	sl, r2
 8009b4e:	469b      	mov	fp, r3
 8009b50:	4643      	mov	r3, r8
 8009b52:	eb1a 0303 	adds.w	r3, sl, r3
 8009b56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8009b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	18db      	adds	r3, r3, r3
 8009b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b7e:	4613      	mov	r3, r2
 8009b80:	eb42 0303 	adc.w	r3, r2, r3
 8009b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b8e:	f7f6 fb77 	bl	8000280 <__aeabi_uldivmod>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	4b3b      	ldr	r3, [pc, #236]	@ (8009c88 <UART_SetConfig+0x2d4>)
 8009b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	2264      	movs	r2, #100	@ 0x64
 8009ba2:	fb02 f303 	mul.w	r3, r2, r3
 8009ba6:	1acb      	subs	r3, r1, r3
 8009ba8:	00db      	lsls	r3, r3, #3
 8009baa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009bae:	4b36      	ldr	r3, [pc, #216]	@ (8009c88 <UART_SetConfig+0x2d4>)
 8009bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8009bb4:	095b      	lsrs	r3, r3, #5
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009bbc:	441c      	add	r4, r3
 8009bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	1891      	adds	r1, r2, r2
 8009bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bd8:	415b      	adcs	r3, r3
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009be0:	4641      	mov	r1, r8
 8009be2:	1851      	adds	r1, r2, r1
 8009be4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009be6:	4649      	mov	r1, r9
 8009be8:	414b      	adcs	r3, r1
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	00cb      	lsls	r3, r1, #3
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c02:	4651      	mov	r1, sl
 8009c04:	00ca      	lsls	r2, r1, #3
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c14:	464b      	mov	r3, r9
 8009c16:	460a      	mov	r2, r1
 8009c18:	eb42 0303 	adc.w	r3, r2, r3
 8009c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c34:	460b      	mov	r3, r1
 8009c36:	18db      	adds	r3, r3, r3
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	eb42 0303 	adc.w	r3, r2, r3
 8009c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c4a:	f7f6 fb19 	bl	8000280 <__aeabi_uldivmod>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4b0d      	ldr	r3, [pc, #52]	@ (8009c88 <UART_SetConfig+0x2d4>)
 8009c54:	fba3 1302 	umull	r1, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	2164      	movs	r1, #100	@ 0x64
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	3332      	adds	r3, #50	@ 0x32
 8009c66:	4a08      	ldr	r2, [pc, #32]	@ (8009c88 <UART_SetConfig+0x2d4>)
 8009c68:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6c:	095b      	lsrs	r3, r3, #5
 8009c6e:	f003 0207 	and.w	r2, r3, #7
 8009c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4422      	add	r2, r4
 8009c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c7c:	e106      	b.n	8009e8c <UART_SetConfig+0x4d8>
 8009c7e:	bf00      	nop
 8009c80:	40011000 	.word	0x40011000
 8009c84:	40011400 	.word	0x40011400
 8009c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c90:	2200      	movs	r2, #0
 8009c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	1891      	adds	r1, r2, r2
 8009ca4:	6239      	str	r1, [r7, #32]
 8009ca6:	415b      	adcs	r3, r3
 8009ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009cae:	4641      	mov	r1, r8
 8009cb0:	1854      	adds	r4, r2, r1
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	eb43 0501 	adc.w	r5, r3, r1
 8009cb8:	f04f 0200 	mov.w	r2, #0
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	00eb      	lsls	r3, r5, #3
 8009cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cc6:	00e2      	lsls	r2, r4, #3
 8009cc8:	4614      	mov	r4, r2
 8009cca:	461d      	mov	r5, r3
 8009ccc:	4643      	mov	r3, r8
 8009cce:	18e3      	adds	r3, r4, r3
 8009cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cd4:	464b      	mov	r3, r9
 8009cd6:	eb45 0303 	adc.w	r3, r5, r3
 8009cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	008b      	lsls	r3, r1, #2
 8009cfe:	4621      	mov	r1, r4
 8009d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d04:	4621      	mov	r1, r4
 8009d06:	008a      	lsls	r2, r1, #2
 8009d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d0c:	f7f6 fab8 	bl	8000280 <__aeabi_uldivmod>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	4b60      	ldr	r3, [pc, #384]	@ (8009e98 <UART_SetConfig+0x4e4>)
 8009d16:	fba3 2302 	umull	r2, r3, r3, r2
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	011c      	lsls	r4, r3, #4
 8009d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d22:	2200      	movs	r2, #0
 8009d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d30:	4642      	mov	r2, r8
 8009d32:	464b      	mov	r3, r9
 8009d34:	1891      	adds	r1, r2, r2
 8009d36:	61b9      	str	r1, [r7, #24]
 8009d38:	415b      	adcs	r3, r3
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d40:	4641      	mov	r1, r8
 8009d42:	1851      	adds	r1, r2, r1
 8009d44:	6139      	str	r1, [r7, #16]
 8009d46:	4649      	mov	r1, r9
 8009d48:	414b      	adcs	r3, r1
 8009d4a:	617b      	str	r3, [r7, #20]
 8009d4c:	f04f 0200 	mov.w	r2, #0
 8009d50:	f04f 0300 	mov.w	r3, #0
 8009d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d58:	4659      	mov	r1, fp
 8009d5a:	00cb      	lsls	r3, r1, #3
 8009d5c:	4651      	mov	r1, sl
 8009d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d62:	4651      	mov	r1, sl
 8009d64:	00ca      	lsls	r2, r1, #3
 8009d66:	4610      	mov	r0, r2
 8009d68:	4619      	mov	r1, r3
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	189b      	adds	r3, r3, r2
 8009d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d74:	464b      	mov	r3, r9
 8009d76:	460a      	mov	r2, r1
 8009d78:	eb42 0303 	adc.w	r3, r2, r3
 8009d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	f04f 0300 	mov.w	r3, #0
 8009d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d98:	4649      	mov	r1, r9
 8009d9a:	008b      	lsls	r3, r1, #2
 8009d9c:	4641      	mov	r1, r8
 8009d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009da2:	4641      	mov	r1, r8
 8009da4:	008a      	lsls	r2, r1, #2
 8009da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009daa:	f7f6 fa69 	bl	8000280 <__aeabi_uldivmod>
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	4b38      	ldr	r3, [pc, #224]	@ (8009e98 <UART_SetConfig+0x4e4>)
 8009db6:	fba3 2301 	umull	r2, r3, r3, r1
 8009dba:	095b      	lsrs	r3, r3, #5
 8009dbc:	2264      	movs	r2, #100	@ 0x64
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	1acb      	subs	r3, r1, r3
 8009dc4:	011b      	lsls	r3, r3, #4
 8009dc6:	3332      	adds	r3, #50	@ 0x32
 8009dc8:	4a33      	ldr	r2, [pc, #204]	@ (8009e98 <UART_SetConfig+0x4e4>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dd4:	441c      	add	r4, r3
 8009dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dda:	2200      	movs	r2, #0
 8009ddc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dde:	677a      	str	r2, [r7, #116]	@ 0x74
 8009de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009de4:	4642      	mov	r2, r8
 8009de6:	464b      	mov	r3, r9
 8009de8:	1891      	adds	r1, r2, r2
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	415b      	adcs	r3, r3
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009df4:	4641      	mov	r1, r8
 8009df6:	1851      	adds	r1, r2, r1
 8009df8:	6039      	str	r1, [r7, #0]
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	414b      	adcs	r3, r1
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e0c:	4659      	mov	r1, fp
 8009e0e:	00cb      	lsls	r3, r1, #3
 8009e10:	4651      	mov	r1, sl
 8009e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e16:	4651      	mov	r1, sl
 8009e18:	00ca      	lsls	r2, r1, #3
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4603      	mov	r3, r0
 8009e20:	4642      	mov	r2, r8
 8009e22:	189b      	adds	r3, r3, r2
 8009e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e26:	464b      	mov	r3, r9
 8009e28:	460a      	mov	r2, r1
 8009e2a:	eb42 0303 	adc.w	r3, r2, r3
 8009e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e48:	4649      	mov	r1, r9
 8009e4a:	008b      	lsls	r3, r1, #2
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e52:	4641      	mov	r1, r8
 8009e54:	008a      	lsls	r2, r1, #2
 8009e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e5a:	f7f6 fa11 	bl	8000280 <__aeabi_uldivmod>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4b0d      	ldr	r3, [pc, #52]	@ (8009e98 <UART_SetConfig+0x4e4>)
 8009e64:	fba3 1302 	umull	r1, r3, r3, r2
 8009e68:	095b      	lsrs	r3, r3, #5
 8009e6a:	2164      	movs	r1, #100	@ 0x64
 8009e6c:	fb01 f303 	mul.w	r3, r1, r3
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	3332      	adds	r3, #50	@ 0x32
 8009e76:	4a08      	ldr	r2, [pc, #32]	@ (8009e98 <UART_SetConfig+0x4e4>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	095b      	lsrs	r3, r3, #5
 8009e7e:	f003 020f 	and.w	r2, r3, #15
 8009e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4422      	add	r2, r4
 8009e8a:	609a      	str	r2, [r3, #8]
}
 8009e8c:	bf00      	nop
 8009e8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e92:	46bd      	mov	sp, r7
 8009e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e98:	51eb851f 	.word	0x51eb851f

08009e9c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	6812      	ldr	r2, [r2, #0]
 8009eb4:	f023 0101 	bic.w	r1, r3, #1
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2b08      	cmp	r3, #8
 8009ec4:	d102      	bne.n	8009ecc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009ec6:	2340      	movs	r3, #64	@ 0x40
 8009ec8:	617b      	str	r3, [r7, #20]
 8009eca:	e001      	b.n	8009ed0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009edc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009ee2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009ee8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009eee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009ef4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009efa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8009f00:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8009f06:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8009f0c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8009f12:	4313      	orrs	r3, r2
 8009f14:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8009f2a:	4b10      	ldr	r3, [pc, #64]	@ (8009f6c <FSMC_NORSRAM_Init+0xd0>)
 8009f2c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009f34:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8009f3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	681a      	ldr	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	43db      	mvns	r3, r3
 8009f4c:	ea02 0103 	and.w	r1, r2, r3
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4319      	orrs	r1, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	0008fb7f 	.word	0x0008fb7f

08009f70 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8009f86:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8009f8e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8009f96:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8009fa0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	695b      	ldr	r3, [r3, #20]
 8009fa6:	3b02      	subs	r3, #2
 8009fa8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8009faa:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 8009fb6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fe0:	d11d      	bne.n	800a01e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fea:	4b13      	ldr	r3, [pc, #76]	@ (800a038 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	6811      	ldr	r1, [r2, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	6852      	ldr	r2, [r2, #4]
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	4311      	orrs	r1, r2
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	6892      	ldr	r2, [r2, #8]
 8009ffe:	0212      	lsls	r2, r2, #8
 800a000:	4311      	orrs	r1, r2
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	6992      	ldr	r2, [r2, #24]
 800a006:	4311      	orrs	r1, r2
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	68d2      	ldr	r2, [r2, #12]
 800a00c:	0412      	lsls	r2, r2, #16
 800a00e:	430a      	orrs	r2, r1
 800a010:	ea43 0102 	orr.w	r1, r3, r2
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a01c:	e005      	b.n	800a02a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	cff00000 	.word	0xcff00000

0800a03c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a03c:	b084      	sub	sp, #16
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	f107 001c 	add.w	r0, r7, #28
 800a04a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a04e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a052:	2b01      	cmp	r3, #1
 800a054:	d123      	bne.n	800a09e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a06a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a07e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a082:	2b01      	cmp	r3, #1
 800a084:	d105      	bne.n	800a092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 fae8 	bl	800b668 <USB_CoreReset>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e01b      	b.n	800a0d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f001 fadc 	bl	800b668 <USB_CoreReset>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a0c8:	e005      	b.n	800a0d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0d6:	7fbb      	ldrb	r3, [r7, #30]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10b      	bne.n	800a0f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f043 0206 	orr.w	r2, r3, #6
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f043 0220 	orr.w	r2, r3, #32
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a100:	b004      	add	sp, #16
 800a102:	4770      	bx	lr

0800a104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a112:	79fb      	ldrb	r3, [r7, #7]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d165      	bne.n	800a1e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	4a41      	ldr	r2, [pc, #260]	@ (800a220 <USB_SetTurnaroundTime+0x11c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d906      	bls.n	800a12e <USB_SetTurnaroundTime+0x2a>
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4a40      	ldr	r2, [pc, #256]	@ (800a224 <USB_SetTurnaroundTime+0x120>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d202      	bcs.n	800a12e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a128:	230f      	movs	r3, #15
 800a12a:	617b      	str	r3, [r7, #20]
 800a12c:	e062      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	4a3c      	ldr	r2, [pc, #240]	@ (800a224 <USB_SetTurnaroundTime+0x120>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d306      	bcc.n	800a144 <USB_SetTurnaroundTime+0x40>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4a3b      	ldr	r2, [pc, #236]	@ (800a228 <USB_SetTurnaroundTime+0x124>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d202      	bcs.n	800a144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a13e:	230e      	movs	r3, #14
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	e057      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4a38      	ldr	r2, [pc, #224]	@ (800a228 <USB_SetTurnaroundTime+0x124>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d306      	bcc.n	800a15a <USB_SetTurnaroundTime+0x56>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4a37      	ldr	r2, [pc, #220]	@ (800a22c <USB_SetTurnaroundTime+0x128>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d202      	bcs.n	800a15a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a154:	230d      	movs	r3, #13
 800a156:	617b      	str	r3, [r7, #20]
 800a158:	e04c      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	4a33      	ldr	r2, [pc, #204]	@ (800a22c <USB_SetTurnaroundTime+0x128>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d306      	bcc.n	800a170 <USB_SetTurnaroundTime+0x6c>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	4a32      	ldr	r2, [pc, #200]	@ (800a230 <USB_SetTurnaroundTime+0x12c>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d802      	bhi.n	800a170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a16a:	230c      	movs	r3, #12
 800a16c:	617b      	str	r3, [r7, #20]
 800a16e:	e041      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	4a2f      	ldr	r2, [pc, #188]	@ (800a230 <USB_SetTurnaroundTime+0x12c>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d906      	bls.n	800a186 <USB_SetTurnaroundTime+0x82>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	4a2e      	ldr	r2, [pc, #184]	@ (800a234 <USB_SetTurnaroundTime+0x130>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d802      	bhi.n	800a186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a180:	230b      	movs	r3, #11
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e036      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a2a      	ldr	r2, [pc, #168]	@ (800a234 <USB_SetTurnaroundTime+0x130>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d906      	bls.n	800a19c <USB_SetTurnaroundTime+0x98>
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	4a29      	ldr	r2, [pc, #164]	@ (800a238 <USB_SetTurnaroundTime+0x134>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d802      	bhi.n	800a19c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a196:	230a      	movs	r3, #10
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e02b      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	4a26      	ldr	r2, [pc, #152]	@ (800a238 <USB_SetTurnaroundTime+0x134>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d906      	bls.n	800a1b2 <USB_SetTurnaroundTime+0xae>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a25      	ldr	r2, [pc, #148]	@ (800a23c <USB_SetTurnaroundTime+0x138>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d202      	bcs.n	800a1b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1ac:	2309      	movs	r3, #9
 800a1ae:	617b      	str	r3, [r7, #20]
 800a1b0:	e020      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a21      	ldr	r2, [pc, #132]	@ (800a23c <USB_SetTurnaroundTime+0x138>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d306      	bcc.n	800a1c8 <USB_SetTurnaroundTime+0xc4>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	4a20      	ldr	r2, [pc, #128]	@ (800a240 <USB_SetTurnaroundTime+0x13c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d802      	bhi.n	800a1c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	e015      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800a240 <USB_SetTurnaroundTime+0x13c>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d906      	bls.n	800a1de <USB_SetTurnaroundTime+0xda>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a244 <USB_SetTurnaroundTime+0x140>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d202      	bcs.n	800a1de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1d8:	2307      	movs	r3, #7
 800a1da:	617b      	str	r3, [r7, #20]
 800a1dc:	e00a      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1de:	2306      	movs	r3, #6
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e007      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1ea:	2309      	movs	r3, #9
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e001      	b.n	800a1f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a1f0:	2309      	movs	r3, #9
 800a1f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	029b      	lsls	r3, r3, #10
 800a208:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a212:	2300      	movs	r3, #0
}
 800a214:	4618      	mov	r0, r3
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	00d8acbf 	.word	0x00d8acbf
 800a224:	00e4e1c0 	.word	0x00e4e1c0
 800a228:	00f42400 	.word	0x00f42400
 800a22c:	01067380 	.word	0x01067380
 800a230:	011a499f 	.word	0x011a499f
 800a234:	01312cff 	.word	0x01312cff
 800a238:	014ca43f 	.word	0x014ca43f
 800a23c:	016e3600 	.word	0x016e3600
 800a240:	01a6ab1f 	.word	0x01a6ab1f
 800a244:	01e84800 	.word	0x01e84800

0800a248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	f043 0201 	orr.w	r2, r3, #1
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	370c      	adds	r7, #12
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f023 0201 	bic.w	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a298:	2300      	movs	r3, #0
 800a29a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d115      	bne.n	800a2da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2ba:	200a      	movs	r0, #10
 800a2bc:	f7fa faa2 	bl	8004804 <HAL_Delay>
      ms += 10U;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	330a      	adds	r3, #10
 800a2c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f001 f93f 	bl	800b54a <USB_GetMode>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d01e      	beq.n	800a310 <USB_SetCurrentMode+0x84>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2bc7      	cmp	r3, #199	@ 0xc7
 800a2d6:	d9f0      	bls.n	800a2ba <USB_SetCurrentMode+0x2e>
 800a2d8:	e01a      	b.n	800a310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d115      	bne.n	800a30c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a2ec:	200a      	movs	r0, #10
 800a2ee:	f7fa fa89 	bl	8004804 <HAL_Delay>
      ms += 10U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	330a      	adds	r3, #10
 800a2f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f001 f926 	bl	800b54a <USB_GetMode>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <USB_SetCurrentMode+0x84>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2bc7      	cmp	r3, #199	@ 0xc7
 800a308:	d9f0      	bls.n	800a2ec <USB_SetCurrentMode+0x60>
 800a30a:	e001      	b.n	800a310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e005      	b.n	800a31c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2bc8      	cmp	r3, #200	@ 0xc8
 800a314:	d101      	bne.n	800a31a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a324:	b084      	sub	sp, #16
 800a326:	b580      	push	{r7, lr}
 800a328:	b086      	sub	sp, #24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	e009      	b.n	800a358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3340      	adds	r3, #64	@ 0x40
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3301      	adds	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2b0e      	cmp	r3, #14
 800a35c:	d9f2      	bls.n	800a344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a35e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a362:	2b00      	cmp	r3, #0
 800a364:	d11c      	bne.n	800a3a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a374:	f043 0302 	orr.w	r3, r3, #2
 800a378:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a396:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a39e:	e00b      	b.n	800a3b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d10d      	bne.n	800a3e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d104      	bne.n	800a3de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f968 	bl	800a6ac <USB_SetDevSpeed>
 800a3dc:	e008      	b.n	800a3f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3de:	2101      	movs	r1, #1
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f963 	bl	800a6ac <USB_SetDevSpeed>
 800a3e6:	e003      	b.n	800a3f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3e8:	2103      	movs	r1, #3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f95e 	bl	800a6ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3f0:	2110      	movs	r1, #16
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f8fa 	bl	800a5ec <USB_FlushTxFifo>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f924 	bl	800a650 <USB_FlushRxFifo>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a418:	461a      	mov	r2, r3
 800a41a:	2300      	movs	r3, #0
 800a41c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a424:	461a      	mov	r2, r3
 800a426:	2300      	movs	r3, #0
 800a428:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a430:	461a      	mov	r2, r3
 800a432:	2300      	movs	r3, #0
 800a434:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e043      	b.n	800a4c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	015a      	lsls	r2, r3, #5
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	4413      	add	r3, r2
 800a444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a44e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a452:	d118      	bne.n	800a486 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10a      	bne.n	800a470 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4413      	add	r3, r2
 800a462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a466:	461a      	mov	r2, r3
 800a468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	e013      	b.n	800a498 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	015a      	lsls	r2, r3, #5
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47c:	461a      	mov	r2, r3
 800a47e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	e008      	b.n	800a498 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a492:	461a      	mov	r2, r3
 800a494:	2300      	movs	r3, #0
 800a496:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	015a      	lsls	r2, r3, #5
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4413      	add	r3, r2
 800a4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	613b      	str	r3, [r7, #16]
 800a4c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d3b5      	bcc.n	800a43c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	613b      	str	r3, [r7, #16]
 800a4d4:	e043      	b.n	800a55e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4ec:	d118      	bne.n	800a520 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d10a      	bne.n	800a50a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a500:	461a      	mov	r2, r3
 800a502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	e013      	b.n	800a532 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	015a      	lsls	r2, r3, #5
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4413      	add	r3, r2
 800a512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a516:	461a      	mov	r2, r3
 800a518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	e008      	b.n	800a532 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52c:	461a      	mov	r2, r3
 800a52e:	2300      	movs	r3, #0
 800a530:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a53e:	461a      	mov	r2, r3
 800a540:	2300      	movs	r3, #0
 800a542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a550:	461a      	mov	r2, r3
 800a552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3301      	adds	r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a562:	461a      	mov	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	4293      	cmp	r3, r2
 800a568:	d3b5      	bcc.n	800a4d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a57c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a58a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a58c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a590:	2b00      	cmp	r3, #0
 800a592:	d105      	bne.n	800a5a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f043 0210 	orr.w	r2, r3, #16
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	699a      	ldr	r2, [r3, #24]
 800a5a4:	4b10      	ldr	r3, [pc, #64]	@ (800a5e8 <USB_DevInit+0x2c4>)
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a5ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	f043 0208 	orr.w	r2, r3, #8
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a5c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d107      	bne.n	800a5d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a5d0:	f043 0304 	orr.w	r3, r3, #4
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5e4:	b004      	add	sp, #16
 800a5e6:	4770      	bx	lr
 800a5e8:	803c3800 	.word	0x803c3800

0800a5ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a606:	d901      	bls.n	800a60c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e01b      	b.n	800a644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	daf2      	bge.n	800a5fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	019b      	lsls	r3, r3, #6
 800a61c:	f043 0220 	orr.w	r2, r3, #32
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	3301      	adds	r3, #1
 800a628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a630:	d901      	bls.n	800a636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a632:	2303      	movs	r3, #3
 800a634:	e006      	b.n	800a644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b20      	cmp	r3, #32
 800a640:	d0f0      	beq.n	800a624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a668:	d901      	bls.n	800a66e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e018      	b.n	800a6a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	2b00      	cmp	r3, #0
 800a674:	daf2      	bge.n	800a65c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2210      	movs	r2, #16
 800a67e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	3301      	adds	r3, #1
 800a684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a68c:	d901      	bls.n	800a692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e006      	b.n	800a6a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0310 	and.w	r3, r3, #16
 800a69a:	2b10      	cmp	r3, #16
 800a69c:	d0f0      	beq.n	800a680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	78fb      	ldrb	r3, [r7, #3]
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a6d0:	2300      	movs	r3, #0
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b087      	sub	sp, #28
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 0306 	and.w	r3, r3, #6
 800a6f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d102      	bne.n	800a704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]
 800a702:	e00a      	b.n	800a71a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d002      	beq.n	800a710 <USB_GetDevSpeed+0x32>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b06      	cmp	r3, #6
 800a70e:	d102      	bne.n	800a716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a710:	2302      	movs	r3, #2
 800a712:	75fb      	strb	r3, [r7, #23]
 800a714:	e001      	b.n	800a71a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a716:	230f      	movs	r3, #15
 800a718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	371c      	adds	r7, #28
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	785b      	ldrb	r3, [r3, #1]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d13a      	bne.n	800a7ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a74a:	69da      	ldr	r2, [r3, #28]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	2101      	movs	r1, #1
 800a756:	fa01 f303 	lsl.w	r3, r1, r3
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	68f9      	ldr	r1, [r7, #12]
 800a75e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a762:	4313      	orrs	r3, r2
 800a764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d155      	bne.n	800a828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	059b      	lsls	r3, r3, #22
 800a79e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	0151      	lsls	r1, r2, #5
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	440a      	add	r2, r1
 800a7aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e036      	b.n	800a828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7c0:	69da      	ldr	r2, [r3, #28]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 030f 	and.w	r3, r3, #15
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d0:	041b      	lsls	r3, r3, #16
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d11a      	bne.n	800a828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	791b      	ldrb	r3, [r3, #4]
 800a80c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a80e:	430b      	orrs	r3, r1
 800a810:	4313      	orrs	r3, r2
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	0151      	lsls	r1, r2, #5
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	440a      	add	r2, r1
 800a81a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a81e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
	...

0800a838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d161      	bne.n	800a918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a86a:	d11f      	bne.n	800a8ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	440a      	add	r2, r1
 800a882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a886:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a88a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	0151      	lsls	r1, r2, #5
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	440a      	add	r2, r1
 800a8a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	2101      	movs	r1, #1
 800a8be:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	43db      	mvns	r3, r3
 800a8c6:	68f9      	ldr	r1, [r7, #12]
 800a8c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d6:	69da      	ldr	r2, [r3, #28]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	f003 030f 	and.w	r3, r3, #15
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	43db      	mvns	r3, r3
 800a8ea:	68f9      	ldr	r1, [r7, #12]
 800a8ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	0159      	lsls	r1, r3, #5
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	440b      	add	r3, r1
 800a90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a90e:	4619      	mov	r1, r3
 800a910:	4b35      	ldr	r3, [pc, #212]	@ (800a9e8 <USB_DeactivateEndpoint+0x1b0>)
 800a912:	4013      	ands	r3, r2
 800a914:	600b      	str	r3, [r1, #0]
 800a916:	e060      	b.n	800a9da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	015a      	lsls	r2, r3, #5
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	4413      	add	r3, r2
 800a920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a92a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a92e:	d11f      	bne.n	800a970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	015a      	lsls	r2, r3, #5
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	0151      	lsls	r1, r2, #5
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	440a      	add	r2, r1
 800a946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a94a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a94e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	0151      	lsls	r1, r2, #5
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	440a      	add	r2, r1
 800a966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a96a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a96e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	2101      	movs	r1, #1
 800a982:	fa01 f303 	lsl.w	r3, r1, r3
 800a986:	041b      	lsls	r3, r3, #16
 800a988:	43db      	mvns	r3, r3
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a990:	4013      	ands	r3, r2
 800a992:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a99a:	69da      	ldr	r2, [r3, #28]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a9aa:	041b      	lsls	r3, r3, #16
 800a9ac:	43db      	mvns	r3, r3
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	0159      	lsls	r1, r3, #5
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	440b      	add	r3, r1
 800a9ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4b05      	ldr	r3, [pc, #20]	@ (800a9ec <USB_DeactivateEndpoint+0x1b4>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	ec337800 	.word	0xec337800
 800a9ec:	eff37800 	.word	0xeff37800

0800a9f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	@ 0x28
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	785b      	ldrb	r3, [r3, #1]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	f040 817f 	bne.w	800ad10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d132      	bne.n	800aa80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	69ba      	ldr	r2, [r7, #24]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	69ba      	ldr	r2, [r7, #24]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	69fa      	ldr	r2, [r7, #28]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	69ba      	ldr	r2, [r7, #24]
 800aa6e:	0151      	lsls	r1, r2, #5
 800aa70:	69fa      	ldr	r2, [r7, #28]
 800aa72:	440a      	add	r2, r1
 800aa74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa78:	0cdb      	lsrs	r3, r3, #19
 800aa7a:	04db      	lsls	r3, r3, #19
 800aa7c:	6113      	str	r3, [r2, #16]
 800aa7e:	e097      	b.n	800abb0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	69ba      	ldr	r2, [r7, #24]
 800aa90:	0151      	lsls	r1, r2, #5
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	440a      	add	r2, r1
 800aa96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa9a:	0cdb      	lsrs	r3, r3, #19
 800aa9c:	04db      	lsls	r3, r3, #19
 800aa9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	0151      	lsls	r1, r2, #5
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	440a      	add	r2, r1
 800aab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aabe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aac2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d11a      	bne.n	800ab00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d903      	bls.n	800aade <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	689a      	ldr	r2, [r3, #8]
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aafc:	6113      	str	r3, [r2, #16]
 800aafe:	e044      	b.n	800ab8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	691a      	ldr	r2, [r3, #16]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	4413      	add	r3, r2
 800ab0a:	1e5a      	subs	r2, r3, #1
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab22:	691a      	ldr	r2, [r3, #16]
 800ab24:	8afb      	ldrh	r3, [r7, #22]
 800ab26:	04d9      	lsls	r1, r3, #19
 800ab28:	4ba4      	ldr	r3, [pc, #656]	@ (800adbc <USB_EPStartXfer+0x3cc>)
 800ab2a:	400b      	ands	r3, r1
 800ab2c:	69b9      	ldr	r1, [r7, #24]
 800ab2e:	0148      	lsls	r0, r1, #5
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	4401      	add	r1, r0
 800ab34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d122      	bne.n	800ab8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	0151      	lsls	r1, r2, #5
 800ab56:	69fa      	ldr	r2, [r7, #28]
 800ab58:	440a      	add	r2, r1
 800ab5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ab62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab70:	691a      	ldr	r2, [r3, #16]
 800ab72:	8afb      	ldrh	r3, [r7, #22]
 800ab74:	075b      	lsls	r3, r3, #29
 800ab76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ab7a:	69b9      	ldr	r1, [r7, #24]
 800ab7c:	0148      	lsls	r0, r1, #5
 800ab7e:	69f9      	ldr	r1, [r7, #28]
 800ab80:	4401      	add	r1, r0
 800ab82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab86:	4313      	orrs	r3, r2
 800ab88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab96:	691a      	ldr	r2, [r3, #16]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aba0:	69b9      	ldr	r1, [r7, #24]
 800aba2:	0148      	lsls	r0, r1, #5
 800aba4:	69f9      	ldr	r1, [r7, #28]
 800aba6:	4401      	add	r1, r0
 800aba8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800abac:	4313      	orrs	r3, r2
 800abae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d14b      	bne.n	800ac4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	015a      	lsls	r2, r3, #5
 800abc2:	69fb      	ldr	r3, [r7, #28]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abca:	461a      	mov	r2, r3
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	791b      	ldrb	r3, [r3, #4]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d128      	bne.n	800ac2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d110      	bne.n	800ac0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69ba      	ldr	r2, [r7, #24]
 800abfa:	0151      	lsls	r1, r2, #5
 800abfc:	69fa      	ldr	r2, [r7, #28]
 800abfe:	440a      	add	r2, r1
 800ac00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	e00f      	b.n	800ac2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	015a      	lsls	r2, r3, #5
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	4413      	add	r3, r2
 800ac14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	0151      	lsls	r1, r2, #5
 800ac1e:	69fa      	ldr	r2, [r7, #28]
 800ac20:	440a      	add	r2, r1
 800ac22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	0151      	lsls	r1, r2, #5
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	440a      	add	r2, r1
 800ac42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac4a:	6013      	str	r3, [r2, #0]
 800ac4c:	e166      	b.n	800af1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	015a      	lsls	r2, r3, #5
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	4413      	add	r3, r2
 800ac56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	0151      	lsls	r1, r2, #5
 800ac60:	69fa      	ldr	r2, [r7, #28]
 800ac62:	440a      	add	r2, r1
 800ac64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ac6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	791b      	ldrb	r3, [r3, #4]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d015      	beq.n	800aca2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 814e 	beq.w	800af1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	2101      	movs	r1, #1
 800ac92:	fa01 f303 	lsl.w	r3, r1, r3
 800ac96:	69f9      	ldr	r1, [r7, #28]
 800ac98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	634b      	str	r3, [r1, #52]	@ 0x34
 800aca0:	e13c      	b.n	800af1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d110      	bne.n	800acd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	015a      	lsls	r2, r3, #5
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	4413      	add	r3, r2
 800acba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	0151      	lsls	r1, r2, #5
 800acc4:	69fa      	ldr	r2, [r7, #28]
 800acc6:	440a      	add	r2, r1
 800acc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800accc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	e00f      	b.n	800acf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	0151      	lsls	r1, r2, #5
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	440a      	add	r2, r1
 800acea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	68d9      	ldr	r1, [r3, #12]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	b298      	uxth	r0, r3
 800ad02:	79fb      	ldrb	r3, [r7, #7]
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	4603      	mov	r3, r0
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f9b9 	bl	800b080 <USB_WritePacket>
 800ad0e:	e105      	b.n	800af1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad2a:	0cdb      	lsrs	r3, r3, #19
 800ad2c:	04db      	lsls	r3, r3, #19
 800ad2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	0151      	lsls	r1, r2, #5
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	440a      	add	r2, r1
 800ad46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d132      	bne.n	800adc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d003      	beq.n	800ad6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	689a      	ldr	r2, [r3, #8]
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad88:	69b9      	ldr	r1, [r7, #24]
 800ad8a:	0148      	lsls	r0, r1, #5
 800ad8c:	69f9      	ldr	r1, [r7, #28]
 800ad8e:	4401      	add	r1, r0
 800ad90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad94:	4313      	orrs	r3, r2
 800ad96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	0151      	lsls	r1, r2, #5
 800adaa:	69fa      	ldr	r2, [r7, #28]
 800adac:	440a      	add	r2, r1
 800adae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adb6:	6113      	str	r3, [r2, #16]
 800adb8:	e062      	b.n	800ae80 <USB_EPStartXfer+0x490>
 800adba:	bf00      	nop
 800adbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d123      	bne.n	800ae10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add4:	691a      	ldr	r2, [r3, #16]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adde:	69b9      	ldr	r1, [r7, #24]
 800ade0:	0148      	lsls	r0, r1, #5
 800ade2:	69f9      	ldr	r1, [r7, #28]
 800ade4:	4401      	add	r1, r0
 800ade6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800adea:	4313      	orrs	r3, r2
 800adec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae0c:	6113      	str	r3, [r2, #16]
 800ae0e:	e037      	b.n	800ae80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	4413      	add	r3, r2
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	8afa      	ldrh	r2, [r7, #22]
 800ae2c:	fb03 f202 	mul.w	r2, r3, r2
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae40:	691a      	ldr	r2, [r3, #16]
 800ae42:	8afb      	ldrh	r3, [r7, #22]
 800ae44:	04d9      	lsls	r1, r3, #19
 800ae46:	4b38      	ldr	r3, [pc, #224]	@ (800af28 <USB_EPStartXfer+0x538>)
 800ae48:	400b      	ands	r3, r1
 800ae4a:	69b9      	ldr	r1, [r7, #24]
 800ae4c:	0148      	lsls	r0, r1, #5
 800ae4e:	69f9      	ldr	r1, [r7, #28]
 800ae50:	4401      	add	r1, r0
 800ae52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae56:	4313      	orrs	r3, r2
 800ae58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	015a      	lsls	r2, r3, #5
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	4413      	add	r3, r2
 800ae62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae66:	691a      	ldr	r2, [r3, #16]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae70:	69b9      	ldr	r1, [r7, #24]
 800ae72:	0148      	lsls	r0, r1, #5
 800ae74:	69f9      	ldr	r1, [r7, #28]
 800ae76:	4401      	add	r1, r0
 800ae78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae80:	79fb      	ldrb	r3, [r7, #7]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d10d      	bne.n	800aea2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d009      	beq.n	800aea2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	68d9      	ldr	r1, [r3, #12]
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae9e:	460a      	mov	r2, r1
 800aea0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	791b      	ldrb	r3, [r3, #4]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d128      	bne.n	800aefc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d110      	bne.n	800aedc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	015a      	lsls	r2, r3, #5
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	4413      	add	r3, r2
 800aec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	0151      	lsls	r1, r2, #5
 800aecc:	69fa      	ldr	r2, [r7, #28]
 800aece:	440a      	add	r2, r1
 800aed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	e00f      	b.n	800aefc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	69ba      	ldr	r2, [r7, #24]
 800aeec:	0151      	lsls	r1, r2, #5
 800aeee:	69fa      	ldr	r2, [r7, #28]
 800aef0:	440a      	add	r2, r1
 800aef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aefa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	015a      	lsls	r2, r3, #5
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	4413      	add	r3, r2
 800af04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69ba      	ldr	r2, [r7, #24]
 800af0c:	0151      	lsls	r1, r2, #5
 800af0e:	69fa      	ldr	r2, [r7, #28]
 800af10:	440a      	add	r2, r1
 800af12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3720      	adds	r7, #32
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	1ff80000 	.word	0x1ff80000

0800af2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	785b      	ldrb	r3, [r3, #1]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d14a      	bne.n	800afe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af62:	f040 8086 	bne.w	800b072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	7812      	ldrb	r2, [r2, #0]
 800af7a:	0151      	lsls	r1, r2, #5
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	440a      	add	r2, r1
 800af80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	7812      	ldrb	r2, [r2, #0]
 800af9e:	0151      	lsls	r1, r2, #5
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	440a      	add	r2, r1
 800afa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	3301      	adds	r3, #1
 800afb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afba:	4293      	cmp	r3, r2
 800afbc:	d902      	bls.n	800afc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
          break;
 800afc2:	e056      	b.n	800b072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	015a      	lsls	r2, r3, #5
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	4413      	add	r3, r2
 800afce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afdc:	d0e7      	beq.n	800afae <USB_EPStopXfer+0x82>
 800afde:	e048      	b.n	800b072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aff8:	d13b      	bne.n	800b072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	015a      	lsls	r2, r3, #5
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	4413      	add	r3, r2
 800b004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	7812      	ldrb	r2, [r2, #0]
 800b00e:	0151      	lsls	r1, r2, #5
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	440a      	add	r2, r1
 800b014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b018:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b01c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	015a      	lsls	r2, r3, #5
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	4413      	add	r3, r2
 800b028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	7812      	ldrb	r2, [r2, #0]
 800b032:	0151      	lsls	r1, r2, #5
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	440a      	add	r2, r1
 800b038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b03c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3301      	adds	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b04e:	4293      	cmp	r3, r2
 800b050:	d902      	bls.n	800b058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]
          break;
 800b056:	e00c      	b.n	800b072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b06c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b070:	d0e7      	beq.n	800b042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
}
 800b074:	4618      	mov	r0, r3
 800b076:	371c      	adds	r7, #28
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b080:	b480      	push	{r7}
 800b082:	b089      	sub	sp, #36	@ 0x24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4611      	mov	r1, r2
 800b08c:	461a      	mov	r2, r3
 800b08e:	460b      	mov	r3, r1
 800b090:	71fb      	strb	r3, [r7, #7]
 800b092:	4613      	mov	r3, r2
 800b094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b09e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d123      	bne.n	800b0ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b0a6:	88bb      	ldrh	r3, [r7, #4]
 800b0a8:	3303      	adds	r3, #3
 800b0aa:	089b      	lsrs	r3, r3, #2
 800b0ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	e018      	b.n	800b0e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	031a      	lsls	r2, r3, #12
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	61bb      	str	r3, [r7, #24]
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d3e2      	bcc.n	800b0b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3724      	adds	r7, #36	@ 0x24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b08b      	sub	sp, #44	@ 0x2c
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	4613      	mov	r3, r2
 800b108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b112:	88fb      	ldrh	r3, [r7, #6]
 800b114:	089b      	lsrs	r3, r3, #2
 800b116:	b29b      	uxth	r3, r3
 800b118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	f003 0303 	and.w	r3, r3, #3
 800b120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b122:	2300      	movs	r3, #0
 800b124:	623b      	str	r3, [r7, #32]
 800b126:	e014      	b.n	800b152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b132:	601a      	str	r2, [r3, #0]
    pDest++;
 800b134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b136:	3301      	adds	r3, #1
 800b138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b13c:	3301      	adds	r3, #1
 800b13e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b142:	3301      	adds	r3, #1
 800b144:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b148:	3301      	adds	r3, #1
 800b14a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	3301      	adds	r3, #1
 800b150:	623b      	str	r3, [r7, #32]
 800b152:	6a3a      	ldr	r2, [r7, #32]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	429a      	cmp	r2, r3
 800b158:	d3e6      	bcc.n	800b128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b15a:	8bfb      	ldrh	r3, [r7, #30]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01e      	beq.n	800b19e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b16a:	461a      	mov	r2, r3
 800b16c:	f107 0310 	add.w	r3, r7, #16
 800b170:	6812      	ldr	r2, [r2, #0]
 800b172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
 800b180:	b2da      	uxtb	r2, r3
 800b182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b184:	701a      	strb	r2, [r3, #0]
      i++;
 800b186:	6a3b      	ldr	r3, [r7, #32]
 800b188:	3301      	adds	r3, #1
 800b18a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	3301      	adds	r3, #1
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b192:	8bfb      	ldrh	r3, [r7, #30]
 800b194:	3b01      	subs	r3, #1
 800b196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b198:	8bfb      	ldrh	r3, [r7, #30]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1ea      	bne.n	800b174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	372c      	adds	r7, #44	@ 0x2c
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d12c      	bne.n	800b222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	db12      	blt.n	800b200 <USB_EPSetStall+0x54>
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00f      	beq.n	800b200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b21a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b21e:	6013      	str	r3, [r2, #0]
 800b220:	e02b      	b.n	800b27a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	db12      	blt.n	800b25a <USB_EPSetStall+0xae>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00f      	beq.n	800b25a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	015a      	lsls	r2, r3, #5
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	4413      	add	r3, r2
 800b242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	0151      	lsls	r1, r2, #5
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	440a      	add	r2, r1
 800b250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	781b      	ldrb	r3, [r3, #0]
 800b29a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	785b      	ldrb	r3, [r3, #1]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d128      	bne.n	800b2f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	0151      	lsls	r1, r2, #5
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	440a      	add	r2, r1
 800b2ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b2c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	791b      	ldrb	r3, [r3, #4]
 800b2c8:	2b03      	cmp	r3, #3
 800b2ca:	d003      	beq.n	800b2d4 <USB_EPClearStall+0x4c>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	791b      	ldrb	r3, [r3, #4]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d138      	bne.n	800b346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	0151      	lsls	r1, r2, #5
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	440a      	add	r2, r1
 800b2ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2f2:	6013      	str	r3, [r2, #0]
 800b2f4:	e027      	b.n	800b346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	0151      	lsls	r1, r2, #5
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	440a      	add	r2, r1
 800b30c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	791b      	ldrb	r3, [r3, #4]
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d003      	beq.n	800b326 <USB_EPClearStall+0x9e>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	791b      	ldrb	r3, [r3, #4]
 800b322:	2b02      	cmp	r3, #2
 800b324:	d10f      	bne.n	800b346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	0151      	lsls	r1, r2, #5
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	440a      	add	r2, r1
 800b33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	460b      	mov	r3, r1
 800b35e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b372:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	011b      	lsls	r3, r3, #4
 800b384:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b388:	68f9      	ldr	r1, [r7, #12]
 800b38a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b38e:	4313      	orrs	r3, r2
 800b390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68fa      	ldr	r2, [r7, #12]
 800b3b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b3ce:	f023 0302 	bic.w	r3, r3, #2
 800b3d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b085      	sub	sp, #20
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b3fc:	f023 0303 	bic.w	r3, r3, #3
 800b400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b410:	f043 0302 	orr.w	r3, r3, #2
 800b414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	4013      	ands	r3, r2
 800b43a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b43c:	68fb      	ldr	r3, [r7, #12]
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3714      	adds	r7, #20
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr

0800b44a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b45c:	699b      	ldr	r3, [r3, #24]
 800b45e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	4013      	ands	r3, r2
 800b46c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	0c1b      	lsrs	r3, r3, #16
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b47e:	b480      	push	{r7}
 800b480:	b085      	sub	sp, #20
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	4013      	ands	r3, r2
 800b4a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	b29b      	uxth	r3, r3
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b085      	sub	sp, #20
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b4c2:	78fb      	ldrb	r3, [r7, #3]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	4013      	ands	r3, r2
 800b4de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4e0:	68bb      	ldr	r3, [r7, #8]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b087      	sub	sp, #28
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b50e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b512:	78fb      	ldrb	r3, [r7, #3]
 800b514:	f003 030f 	and.w	r3, r3, #15
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	fa22 f303 	lsr.w	r3, r2, r3
 800b51e:	01db      	lsls	r3, r3, #7
 800b520:	b2db      	uxtb	r3, r3
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	4313      	orrs	r3, r2
 800b526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b528:	78fb      	ldrb	r3, [r7, #3]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	4013      	ands	r3, r2
 800b53a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b53c:	68bb      	ldr	r3, [r7, #8]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	371c      	adds	r7, #28
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	f003 0301 	and.w	r3, r3, #1
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b584:	f023 0307 	bic.w	r3, r3, #7
 800b588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b59c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	333c      	adds	r3, #60	@ 0x3c
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	4a26      	ldr	r2, [pc, #152]	@ (800b664 <USB_EP0_OutStart+0xb8>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d90a      	bls.n	800b5e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5e0:	d101      	bne.n	800b5e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e037      	b.n	800b656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b614:	f043 0318 	orr.w	r3, r3, #24
 800b618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b628:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b62c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b62e:	7afb      	ldrb	r3, [r7, #11]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d10f      	bne.n	800b654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	4f54300a 	.word	0x4f54300a

0800b668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b680:	d901      	bls.n	800b686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e022      	b.n	800b6cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	daf2      	bge.n	800b674 <USB_CoreReset+0xc>

  count = 10U;
 800b68e:	230a      	movs	r3, #10
 800b690:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b692:	e002      	b.n	800b69a <USB_CoreReset+0x32>
  {
    count--;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	3b01      	subs	r3, #1
 800b698:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d1f9      	bne.n	800b694 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	691b      	ldr	r3, [r3, #16]
 800b6a4:	f043 0201 	orr.w	r2, r3, #1
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b6b8:	d901      	bls.n	800b6be <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e006      	b.n	800b6cc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d0f0      	beq.n	800b6ac <USB_CoreReset+0x44>

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <lwip_cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_printf(const char *msg)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7f4 fd75 	bl	80001d0 <strlen>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <lwip_cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void lwip_cdc_debug_log(const char *prefix, const char *msg)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b0a6      	sub	sp, #152	@ 0x98
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800b6fe:	f7f9 f875 	bl	80047ec <HAL_GetTick>
 800b702:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800b706:	f107 000c 	add.w	r0, r7, #12
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b716:	4a06      	ldr	r2, [pc, #24]	@ (800b730 <lwip_cdc_debug_log+0x3c>)
 800b718:	2180      	movs	r1, #128	@ 0x80
 800b71a:	f012 f821 	bl	801d760 <sniprintf>
  lwip_cdc_debug_printf(debug_buf);
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ffd8 	bl	800b6d8 <lwip_cdc_debug_printf>
}
 800b728:	bf00      	nop
 800b72a:	3790      	adds	r7, #144	@ 0x90
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	0801f760 	.word	0x0801f760

0800b734 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b734:	b5b0      	push	{r4, r5, r7, lr}
 800b736:	b0ac      	sub	sp, #176	@ 0xb0
 800b738:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b73a:	4bac      	ldr	r3, [pc, #688]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b73c:	22c0      	movs	r2, #192	@ 0xc0
 800b73e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b740:	4baa      	ldr	r3, [pc, #680]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b742:	22a8      	movs	r2, #168	@ 0xa8
 800b744:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800b746:	4ba9      	ldr	r3, [pc, #676]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b748:	220a      	movs	r2, #10
 800b74a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 800b74c:	4ba7      	ldr	r3, [pc, #668]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b74e:	2258      	movs	r2, #88	@ 0x58
 800b750:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b752:	4ba7      	ldr	r3, [pc, #668]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b754:	22ff      	movs	r2, #255	@ 0xff
 800b756:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b758:	4ba5      	ldr	r3, [pc, #660]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b75a:	22ff      	movs	r2, #255	@ 0xff
 800b75c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b75e:	4ba4      	ldr	r3, [pc, #656]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b760:	22ff      	movs	r2, #255	@ 0xff
 800b762:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b764:	4ba2      	ldr	r3, [pc, #648]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b766:	2200      	movs	r2, #0
 800b768:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800b76a:	4ba2      	ldr	r3, [pc, #648]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b770:	4ba0      	ldr	r3, [pc, #640]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b772:	2200      	movs	r2, #0
 800b774:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b776:	4b9f      	ldr	r3, [pc, #636]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b778:	2200      	movs	r2, #0
 800b77a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b77c:	4b9d      	ldr	r3, [pc, #628]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b77e:	2200      	movs	r2, #0
 800b780:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  char ip_msg[128];
  snprintf(ip_msg, sizeof(ip_msg), "IP: %d.%d.%d.%d", IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b782:	4b9a      	ldr	r3, [pc, #616]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461c      	mov	r4, r3
 800b788:	4b98      	ldr	r3, [pc, #608]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	461a      	mov	r2, r3
 800b78e:	4b97      	ldr	r3, [pc, #604]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b790:	789b      	ldrb	r3, [r3, #2]
 800b792:	4619      	mov	r1, r3
 800b794:	4b95      	ldr	r3, [pc, #596]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b796:	78db      	ldrb	r3, [r3, #3]
 800b798:	f107 0020 	add.w	r0, r7, #32
 800b79c:	9302      	str	r3, [sp, #8]
 800b79e:	9101      	str	r1, [sp, #4]
 800b7a0:	9200      	str	r2, [sp, #0]
 800b7a2:	4623      	mov	r3, r4
 800b7a4:	4a94      	ldr	r2, [pc, #592]	@ (800b9f8 <MX_LWIP_Init+0x2c4>)
 800b7a6:	2180      	movs	r1, #128	@ 0x80
 800b7a8:	f011 ffda 	bl	801d760 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b7ac:	f107 0320 	add.w	r3, r7, #32
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4892      	ldr	r0, [pc, #584]	@ (800b9fc <MX_LWIP_Init+0x2c8>)
 800b7b4:	f7ff ff9e 	bl	800b6f4 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Netmask: %d.%d.%d.%d", NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b7b8:	4b8d      	ldr	r3, [pc, #564]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	461c      	mov	r4, r3
 800b7be:	4b8c      	ldr	r3, [pc, #560]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	4b8a      	ldr	r3, [pc, #552]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b7c6:	789b      	ldrb	r3, [r3, #2]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4b89      	ldr	r3, [pc, #548]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b7cc:	78db      	ldrb	r3, [r3, #3]
 800b7ce:	f107 0020 	add.w	r0, r7, #32
 800b7d2:	9302      	str	r3, [sp, #8]
 800b7d4:	9101      	str	r1, [sp, #4]
 800b7d6:	9200      	str	r2, [sp, #0]
 800b7d8:	4623      	mov	r3, r4
 800b7da:	4a89      	ldr	r2, [pc, #548]	@ (800ba00 <MX_LWIP_Init+0x2cc>)
 800b7dc:	2180      	movs	r1, #128	@ 0x80
 800b7de:	f011 ffbf 	bl	801d760 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b7e2:	f107 0320 	add.w	r3, r7, #32
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4884      	ldr	r0, [pc, #528]	@ (800b9fc <MX_LWIP_Init+0x2c8>)
 800b7ea:	f7ff ff83 	bl	800b6f4 <lwip_cdc_debug_log>
  
  snprintf(ip_msg, sizeof(ip_msg), "Gateway: %d.%d.%d.%d", GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b7ee:	4b81      	ldr	r3, [pc, #516]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	4b7f      	ldr	r3, [pc, #508]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b7f6:	785b      	ldrb	r3, [r3, #1]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4b7e      	ldr	r3, [pc, #504]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b7fc:	789b      	ldrb	r3, [r3, #2]
 800b7fe:	4619      	mov	r1, r3
 800b800:	4b7c      	ldr	r3, [pc, #496]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b802:	78db      	ldrb	r3, [r3, #3]
 800b804:	f107 0020 	add.w	r0, r7, #32
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	9101      	str	r1, [sp, #4]
 800b80c:	9200      	str	r2, [sp, #0]
 800b80e:	4623      	mov	r3, r4
 800b810:	4a7c      	ldr	r2, [pc, #496]	@ (800ba04 <MX_LWIP_Init+0x2d0>)
 800b812:	2180      	movs	r1, #128	@ 0x80
 800b814:	f011 ffa4 	bl	801d760 <sniprintf>
  lwip_cdc_debug_log("LWIP_INIT", ip_msg);
 800b818:	f107 0320 	add.w	r3, r7, #32
 800b81c:	4619      	mov	r1, r3
 800b81e:	4877      	ldr	r0, [pc, #476]	@ (800b9fc <MX_LWIP_Init+0x2c8>)
 800b820:	f7ff ff68 	bl	800b6f4 <lwip_cdc_debug_log>
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b824:	2100      	movs	r1, #0
 800b826:	2000      	movs	r0, #0
 800b828:	f006 fac6 	bl	8011db8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b82c:	4b6f      	ldr	r3, [pc, #444]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	061a      	lsls	r2, r3, #24
 800b832:	4b6e      	ldr	r3, [pc, #440]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	041b      	lsls	r3, r3, #16
 800b838:	431a      	orrs	r2, r3
 800b83a:	4b6c      	ldr	r3, [pc, #432]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b83c:	789b      	ldrb	r3, [r3, #2]
 800b83e:	021b      	lsls	r3, r3, #8
 800b840:	4313      	orrs	r3, r2
 800b842:	4a6a      	ldr	r2, [pc, #424]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b844:	78d2      	ldrb	r2, [r2, #3]
 800b846:	4313      	orrs	r3, r2
 800b848:	061a      	lsls	r2, r3, #24
 800b84a:	4b68      	ldr	r3, [pc, #416]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	0619      	lsls	r1, r3, #24
 800b850:	4b66      	ldr	r3, [pc, #408]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4319      	orrs	r1, r3
 800b858:	4b64      	ldr	r3, [pc, #400]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b85a:	789b      	ldrb	r3, [r3, #2]
 800b85c:	021b      	lsls	r3, r3, #8
 800b85e:	430b      	orrs	r3, r1
 800b860:	4962      	ldr	r1, [pc, #392]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b862:	78c9      	ldrb	r1, [r1, #3]
 800b864:	430b      	orrs	r3, r1
 800b866:	021b      	lsls	r3, r3, #8
 800b868:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b86c:	431a      	orrs	r2, r3
 800b86e:	4b5f      	ldr	r3, [pc, #380]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	0619      	lsls	r1, r3, #24
 800b874:	4b5d      	ldr	r3, [pc, #372]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	041b      	lsls	r3, r3, #16
 800b87a:	4319      	orrs	r1, r3
 800b87c:	4b5b      	ldr	r3, [pc, #364]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b87e:	789b      	ldrb	r3, [r3, #2]
 800b880:	021b      	lsls	r3, r3, #8
 800b882:	430b      	orrs	r3, r1
 800b884:	4959      	ldr	r1, [pc, #356]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b886:	78c9      	ldrb	r1, [r1, #3]
 800b888:	430b      	orrs	r3, r1
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b890:	431a      	orrs	r2, r3
 800b892:	4b56      	ldr	r3, [pc, #344]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	0619      	lsls	r1, r3, #24
 800b898:	4b54      	ldr	r3, [pc, #336]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b89a:	785b      	ldrb	r3, [r3, #1]
 800b89c:	041b      	lsls	r3, r3, #16
 800b89e:	4319      	orrs	r1, r3
 800b8a0:	4b52      	ldr	r3, [pc, #328]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b8a2:	789b      	ldrb	r3, [r3, #2]
 800b8a4:	021b      	lsls	r3, r3, #8
 800b8a6:	430b      	orrs	r3, r1
 800b8a8:	4950      	ldr	r1, [pc, #320]	@ (800b9ec <MX_LWIP_Init+0x2b8>)
 800b8aa:	78c9      	ldrb	r1, [r1, #3]
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	0e1b      	lsrs	r3, r3, #24
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	4a55      	ldr	r2, [pc, #340]	@ (800ba08 <MX_LWIP_Init+0x2d4>)
 800b8b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b8b6:	4b4e      	ldr	r3, [pc, #312]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	061a      	lsls	r2, r3, #24
 800b8bc:	4b4c      	ldr	r3, [pc, #304]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8be:	785b      	ldrb	r3, [r3, #1]
 800b8c0:	041b      	lsls	r3, r3, #16
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	4b4a      	ldr	r3, [pc, #296]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8c6:	789b      	ldrb	r3, [r3, #2]
 800b8c8:	021b      	lsls	r3, r3, #8
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	4a48      	ldr	r2, [pc, #288]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8ce:	78d2      	ldrb	r2, [r2, #3]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	061a      	lsls	r2, r3, #24
 800b8d4:	4b46      	ldr	r3, [pc, #280]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	0619      	lsls	r1, r3, #24
 800b8da:	4b45      	ldr	r3, [pc, #276]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8dc:	785b      	ldrb	r3, [r3, #1]
 800b8de:	041b      	lsls	r3, r3, #16
 800b8e0:	4319      	orrs	r1, r3
 800b8e2:	4b43      	ldr	r3, [pc, #268]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8e4:	789b      	ldrb	r3, [r3, #2]
 800b8e6:	021b      	lsls	r3, r3, #8
 800b8e8:	430b      	orrs	r3, r1
 800b8ea:	4941      	ldr	r1, [pc, #260]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8ec:	78c9      	ldrb	r1, [r1, #3]
 800b8ee:	430b      	orrs	r3, r1
 800b8f0:	021b      	lsls	r3, r3, #8
 800b8f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	4b3d      	ldr	r3, [pc, #244]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	0619      	lsls	r1, r3, #24
 800b8fe:	4b3c      	ldr	r3, [pc, #240]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	041b      	lsls	r3, r3, #16
 800b904:	4319      	orrs	r1, r3
 800b906:	4b3a      	ldr	r3, [pc, #232]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b908:	789b      	ldrb	r3, [r3, #2]
 800b90a:	021b      	lsls	r3, r3, #8
 800b90c:	430b      	orrs	r3, r1
 800b90e:	4938      	ldr	r1, [pc, #224]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b910:	78c9      	ldrb	r1, [r1, #3]
 800b912:	430b      	orrs	r3, r1
 800b914:	0a1b      	lsrs	r3, r3, #8
 800b916:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b91a:	431a      	orrs	r2, r3
 800b91c:	4b34      	ldr	r3, [pc, #208]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	0619      	lsls	r1, r3, #24
 800b922:	4b33      	ldr	r3, [pc, #204]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b924:	785b      	ldrb	r3, [r3, #1]
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	4319      	orrs	r1, r3
 800b92a:	4b31      	ldr	r3, [pc, #196]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b92c:	789b      	ldrb	r3, [r3, #2]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	430b      	orrs	r3, r1
 800b932:	492f      	ldr	r1, [pc, #188]	@ (800b9f0 <MX_LWIP_Init+0x2bc>)
 800b934:	78c9      	ldrb	r1, [r1, #3]
 800b936:	430b      	orrs	r3, r1
 800b938:	0e1b      	lsrs	r3, r3, #24
 800b93a:	4313      	orrs	r3, r2
 800b93c:	4a33      	ldr	r2, [pc, #204]	@ (800ba0c <MX_LWIP_Init+0x2d8>)
 800b93e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b940:	4b2c      	ldr	r3, [pc, #176]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	061a      	lsls	r2, r3, #24
 800b946:	4b2b      	ldr	r3, [pc, #172]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b948:	785b      	ldrb	r3, [r3, #1]
 800b94a:	041b      	lsls	r3, r3, #16
 800b94c:	431a      	orrs	r2, r3
 800b94e:	4b29      	ldr	r3, [pc, #164]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b950:	789b      	ldrb	r3, [r3, #2]
 800b952:	021b      	lsls	r3, r3, #8
 800b954:	4313      	orrs	r3, r2
 800b956:	4a27      	ldr	r2, [pc, #156]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b958:	78d2      	ldrb	r2, [r2, #3]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	061a      	lsls	r2, r3, #24
 800b95e:	4b25      	ldr	r3, [pc, #148]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	0619      	lsls	r1, r3, #24
 800b964:	4b23      	ldr	r3, [pc, #140]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	041b      	lsls	r3, r3, #16
 800b96a:	4319      	orrs	r1, r3
 800b96c:	4b21      	ldr	r3, [pc, #132]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b96e:	789b      	ldrb	r3, [r3, #2]
 800b970:	021b      	lsls	r3, r3, #8
 800b972:	430b      	orrs	r3, r1
 800b974:	491f      	ldr	r1, [pc, #124]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b976:	78c9      	ldrb	r1, [r1, #3]
 800b978:	430b      	orrs	r3, r1
 800b97a:	021b      	lsls	r3, r3, #8
 800b97c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b980:	431a      	orrs	r2, r3
 800b982:	4b1c      	ldr	r3, [pc, #112]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	0619      	lsls	r1, r3, #24
 800b988:	4b1a      	ldr	r3, [pc, #104]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	4319      	orrs	r1, r3
 800b990:	4b18      	ldr	r3, [pc, #96]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b992:	789b      	ldrb	r3, [r3, #2]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	430b      	orrs	r3, r1
 800b998:	4916      	ldr	r1, [pc, #88]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b99a:	78c9      	ldrb	r1, [r1, #3]
 800b99c:	430b      	orrs	r3, r1
 800b99e:	0a1b      	lsrs	r3, r3, #8
 800b9a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b9a4:	431a      	orrs	r2, r3
 800b9a6:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	0619      	lsls	r1, r3, #24
 800b9ac:	4b11      	ldr	r3, [pc, #68]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b9ae:	785b      	ldrb	r3, [r3, #1]
 800b9b0:	041b      	lsls	r3, r3, #16
 800b9b2:	4319      	orrs	r1, r3
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b9b6:	789b      	ldrb	r3, [r3, #2]
 800b9b8:	021b      	lsls	r3, r3, #8
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	490d      	ldr	r1, [pc, #52]	@ (800b9f4 <MX_LWIP_Init+0x2c0>)
 800b9be:	78c9      	ldrb	r1, [r1, #3]
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	0e1b      	lsrs	r3, r3, #24
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	4a12      	ldr	r2, [pc, #72]	@ (800ba10 <MX_LWIP_Init+0x2dc>)
 800b9c8:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b9ca:	4b12      	ldr	r3, [pc, #72]	@ (800ba14 <MX_LWIP_Init+0x2e0>)
 800b9cc:	9302      	str	r3, [sp, #8]
 800b9ce:	4b12      	ldr	r3, [pc, #72]	@ (800ba18 <MX_LWIP_Init+0x2e4>)
 800b9d0:	9301      	str	r3, [sp, #4]
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba10 <MX_LWIP_Init+0x2dc>)
 800b9d8:	4a0c      	ldr	r2, [pc, #48]	@ (800ba0c <MX_LWIP_Init+0x2d8>)
 800b9da:	490b      	ldr	r1, [pc, #44]	@ (800ba08 <MX_LWIP_Init+0x2d4>)
 800b9dc:	480f      	ldr	r0, [pc, #60]	@ (800ba1c <MX_LWIP_Init+0x2e8>)
 800b9de:	f006 ffb5 	bl	801294c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b9e2:	480e      	ldr	r0, [pc, #56]	@ (800ba1c <MX_LWIP_Init+0x2e8>)
 800b9e4:	f007 f964 	bl	8012cb0 <netif_set_default>
 800b9e8:	e01a      	b.n	800ba20 <MX_LWIP_Init+0x2ec>
 800b9ea:	bf00      	nop
 800b9ec:	200008f8 	.word	0x200008f8
 800b9f0:	200008fc 	.word	0x200008fc
 800b9f4:	20000900 	.word	0x20000900
 800b9f8:	0801f988 	.word	0x0801f988
 800b9fc:	0801f998 	.word	0x0801f998
 800ba00:	0801f9a4 	.word	0x0801f9a4
 800ba04:	0801f9bc 	.word	0x0801f9bc
 800ba08:	200008ec 	.word	0x200008ec
 800ba0c:	200008f0 	.word	0x200008f0
 800ba10:	200008f4 	.word	0x200008f4
 800ba14:	08011cf5 	.word	0x08011cf5
 800ba18:	0800c549 	.word	0x0800c549
 800ba1c:	200008b8 	.word	0x200008b8

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800ba20:	4812      	ldr	r0, [pc, #72]	@ (800ba6c <MX_LWIP_Init+0x338>)
 800ba22:	f007 f955 	bl	8012cd0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ba26:	4912      	ldr	r1, [pc, #72]	@ (800ba70 <MX_LWIP_Init+0x33c>)
 800ba28:	4810      	ldr	r0, [pc, #64]	@ (800ba6c <MX_LWIP_Init+0x338>)
 800ba2a:	f007 fa21 	bl	8012e70 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  lwip_cdc_debug_log("LWIP_INIT", "Creating Ethernet link handler thread");
 800ba2e:	4911      	ldr	r1, [pc, #68]	@ (800ba74 <MX_LWIP_Init+0x340>)
 800ba30:	4811      	ldr	r0, [pc, #68]	@ (800ba78 <MX_LWIP_Init+0x344>)
 800ba32:	f7ff fe5f 	bl	800b6f4 <lwip_cdc_debug_log>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800ba36:	4b11      	ldr	r3, [pc, #68]	@ (800ba7c <MX_LWIP_Init+0x348>)
 800ba38:	1d3c      	adds	r4, r7, #4
 800ba3a:	461d      	mov	r5, r3
 800ba3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ba44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800ba48:	1d3b      	adds	r3, r7, #4
 800ba4a:	4908      	ldr	r1, [pc, #32]	@ (800ba6c <MX_LWIP_Init+0x338>)
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f003 f933 	bl	800ecb8 <osThreadCreate>
  lwip_cdc_debug_log("LWIP_INIT", "Ethernet link handler thread created");
 800ba52:	490b      	ldr	r1, [pc, #44]	@ (800ba80 <MX_LWIP_Init+0x34c>)
 800ba54:	4808      	ldr	r0, [pc, #32]	@ (800ba78 <MX_LWIP_Init+0x344>)
 800ba56:	f7ff fe4d 	bl	800b6f4 <lwip_cdc_debug_log>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */
  lwip_cdc_debug_log("LWIP_INIT", "LwIP initialization completed successfully");
 800ba5a:	490a      	ldr	r1, [pc, #40]	@ (800ba84 <MX_LWIP_Init+0x350>)
 800ba5c:	4806      	ldr	r0, [pc, #24]	@ (800ba78 <MX_LWIP_Init+0x344>)
 800ba5e:	f7ff fe49 	bl	800b6f4 <lwip_cdc_debug_log>
/* USER CODE END 3 */
}
 800ba62:	bf00      	nop
 800ba64:	37a0      	adds	r7, #160	@ 0xa0
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bdb0      	pop	{r4, r5, r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	200008b8 	.word	0x200008b8
 800ba70:	0800ba89 	.word	0x0800ba89
 800ba74:	0801f9d4 	.word	0x0801f9d4
 800ba78:	0801f998 	.word	0x0801f998
 800ba7c:	0801fa58 	.word	0x0801fa58
 800ba80:	0801f9fc 	.word	0x0801f9fc
 800ba84:	0801fa24 	.word	0x0801fa24

0800ba88 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b0a2      	sub	sp, #136	@ 0x88
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d016      	beq.n	800bace <ethernet_link_status_updated+0x46>
  {
/* USER CODE BEGIN 5 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is UP");
 800baa0:	490f      	ldr	r1, [pc, #60]	@ (800bae0 <ethernet_link_status_updated+0x58>)
 800baa2:	4810      	ldr	r0, [pc, #64]	@ (800bae4 <ethernet_link_status_updated+0x5c>)
 800baa4:	f7ff fe26 	bl	800b6f4 <lwip_cdc_debug_log>
    
    char status_msg[128];
    snprintf(status_msg, sizeof(status_msg), "Interface UP - IP: %s", ip4addr_ntoa(netif_ip4_addr(netif)));
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	3304      	adds	r3, #4
 800baac:	4618      	mov	r0, r3
 800baae:	f00f fee9 	bl	801b884 <ip4addr_ntoa>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f107 0008 	add.w	r0, r7, #8
 800bab8:	4a0b      	ldr	r2, [pc, #44]	@ (800bae8 <ethernet_link_status_updated+0x60>)
 800baba:	2180      	movs	r1, #128	@ 0x80
 800babc:	f011 fe50 	bl	801d760 <sniprintf>
    lwip_cdc_debug_log("LINK_STATUS", status_msg);
 800bac0:	f107 0308 	add.w	r3, r7, #8
 800bac4:	4619      	mov	r1, r3
 800bac6:	4807      	ldr	r0, [pc, #28]	@ (800bae4 <ethernet_link_status_updated+0x5c>)
 800bac8:	f7ff fe14 	bl	800b6f4 <lwip_cdc_debug_log>
  {
/* USER CODE BEGIN 6 */
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
/* USER CODE END 6 */
  }
}
 800bacc:	e003      	b.n	800bad6 <ethernet_link_status_updated+0x4e>
    lwip_cdc_debug_log("LINK_STATUS", "Network interface is DOWN");
 800bace:	4907      	ldr	r1, [pc, #28]	@ (800baec <ethernet_link_status_updated+0x64>)
 800bad0:	4804      	ldr	r0, [pc, #16]	@ (800bae4 <ethernet_link_status_updated+0x5c>)
 800bad2:	f7ff fe0f 	bl	800b6f4 <lwip_cdc_debug_log>
}
 800bad6:	bf00      	nop
 800bad8:	3788      	adds	r7, #136	@ 0x88
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	0801fa74 	.word	0x0801fa74
 800bae4:	0801fa8c 	.word	0x0801fa8c
 800bae8:	0801fa98 	.word	0x0801fa98
 800baec:	0801fab0 	.word	0x0801fab0

0800baf0 <cdc_debug_printf>:
  * @brief  Send debug message via CDC
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_printf(const char *msg)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint8_t len = strlen(msg);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7f4 fb69 	bl	80001d0 <strlen>
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]
  /*if (len > 0)
  {
    CDC_Transmit_FS((uint8_t*)msg, len);
    HAL_Delay(1); // Small delay to ensure transmission
  }*/
}
 800bb02:	bf00      	nop
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <cdc_debug_log>:
  * @param  prefix: message prefix
  * @param  msg: debug message string
  * @retval None
  */
static void cdc_debug_log(const char *prefix, const char *msg)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b0a6      	sub	sp, #152	@ 0x98
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  char debug_buf[128];
  uint32_t tick = HAL_GetTick();
 800bb16:	f7f8 fe69 	bl	80047ec <HAL_GetTick>
 800bb1a:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
  snprintf(debug_buf, sizeof(debug_buf), "[%lu] %s: %s\r\n", tick, prefix, msg);
 800bb1e:	f107 000c 	add.w	r0, r7, #12
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	9301      	str	r3, [sp, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bb2e:	4a06      	ldr	r2, [pc, #24]	@ (800bb48 <cdc_debug_log+0x3c>)
 800bb30:	2180      	movs	r1, #128	@ 0x80
 800bb32:	f011 fe15 	bl	801d760 <sniprintf>
  cdc_debug_printf(debug_buf);
 800bb36:	f107 030c 	add.w	r3, r7, #12
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff ffd8 	bl	800baf0 <cdc_debug_printf>
}
 800bb40:	bf00      	nop
 800bb42:	3790      	adds	r7, #144	@ 0x90
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	0801facc 	.word	0x0801facc

0800bb4c <debug_eth_dma_descriptors>:
/**
  * @brief  Debug ETH DMA descriptors
  * @retval None
  */
static void debug_eth_dma_descriptors(void)
{
 800bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4e:	b0cf      	sub	sp, #316	@ 0x13c
 800bb50:	af06      	add	r7, sp, #24
  char debug_msg[256];
  
  cdc_debug_log("DMA_DESC", "=== RX Descriptors Status ===");
 800bb52:	495d      	ldr	r1, [pc, #372]	@ (800bcc8 <debug_eth_dma_descriptors+0x17c>)
 800bb54:	485d      	ldr	r0, [pc, #372]	@ (800bccc <debug_eth_dma_descriptors+0x180>)
 800bb56:	f7ff ffd9 	bl	800bb0c <cdc_debug_log>
  // 检查RX描述符状态
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800bb60:	e048      	b.n	800bbf4 <debug_eth_dma_descriptors+0xa8>
    uint32_t desc0 = DMARxDscrTab[i].DESC0;
 800bb62:	495b      	ldr	r1, [pc, #364]	@ (800bcd0 <debug_eth_dma_descriptors+0x184>)
 800bb64:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	00db      	lsls	r3, r3, #3
 800bb70:	440b      	add	r3, r1
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    uint32_t desc2 = DMARxDscrTab[i].DESC2;
 800bb78:	4955      	ldr	r1, [pc, #340]	@ (800bcd0 <debug_eth_dma_descriptors+0x184>)
 800bb7a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800bb7e:	4613      	mov	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	00db      	lsls	r3, r3, #3
 800bb86:	440b      	add	r3, r1
 800bb88:	3308      	adds	r3, #8
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    
    snprintf(debug_msg, sizeof(debug_msg),
             "RX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu FL=%lu Buf1=0x%08lX",
             i, 
             (desc0 & ETH_DMARXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800bb90:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800bb94:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMARXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800bb96:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800bb9a:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800bb9c:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMARXDESC_FS) ? 1UL : 0UL,       // First Segment
 800bba0:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800bba4:	0a49      	lsrs	r1, r1, #9
    snprintf(debug_msg, sizeof(debug_msg),
 800bba6:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMARXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800bbaa:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800bbae:	0a00      	lsrs	r0, r0, #8
    snprintf(debug_msg, sizeof(debug_msg),
 800bbb0:	f000 0001 	and.w	r0, r0, #1
             (desc0 & ETH_DMARXDESC_FL) >> 16,             // Frame Length
 800bbb4:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800bbb8:	0c24      	lsrs	r4, r4, #16
    snprintf(debug_msg, sizeof(debug_msg),
 800bbba:	f3c4 040d 	ubfx	r4, r4, #0, #14
 800bbbe:	1d3e      	adds	r6, r7, #4
 800bbc0:	f8d7 5104 	ldr.w	r5, [r7, #260]	@ 0x104
 800bbc4:	9505      	str	r5, [sp, #20]
 800bbc6:	9404      	str	r4, [sp, #16]
 800bbc8:	9003      	str	r0, [sp, #12]
 800bbca:	9102      	str	r1, [sp, #8]
 800bbcc:	9201      	str	r2, [sp, #4]
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bbd4:	4a3f      	ldr	r2, [pc, #252]	@ (800bcd4 <debug_eth_dma_descriptors+0x188>)
 800bbd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bbda:	4630      	mov	r0, r6
 800bbdc:	f011 fdc0 	bl	801d760 <sniprintf>
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800bbe0:	1d3b      	adds	r3, r7, #4
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4839      	ldr	r0, [pc, #228]	@ (800bccc <debug_eth_dma_descriptors+0x180>)
 800bbe6:	f7ff ff91 	bl	800bb0c <cdc_debug_log>
  for(int i = 0; i < ETH_RX_DESC_CNT; i++) {
 800bbea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bbee:	3301      	adds	r3, #1
 800bbf0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800bbf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d9b2      	bls.n	800bb62 <debug_eth_dma_descriptors+0x16>
  }
  
  cdc_debug_log("DMA_DESC", "=== TX Descriptors Status ===");
 800bbfc:	4936      	ldr	r1, [pc, #216]	@ (800bcd8 <debug_eth_dma_descriptors+0x18c>)
 800bbfe:	4833      	ldr	r0, [pc, #204]	@ (800bccc <debug_eth_dma_descriptors+0x180>)
 800bc00:	f7ff ff84 	bl	800bb0c <cdc_debug_log>
  // 检查TX描述符状态
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800bc04:	2300      	movs	r3, #0
 800bc06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800bc0a:	e053      	b.n	800bcb4 <debug_eth_dma_descriptors+0x168>
    uint32_t desc0 = DMATxDscrTab[i].DESC0;
 800bc0c:	4933      	ldr	r1, [pc, #204]	@ (800bcdc <debug_eth_dma_descriptors+0x190>)
 800bc0e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	00db      	lsls	r3, r3, #3
 800bc1a:	440b      	add	r3, r1
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t desc1 = DMATxDscrTab[i].DESC1;
 800bc22:	492e      	ldr	r1, [pc, #184]	@ (800bcdc <debug_eth_dma_descriptors+0x190>)
 800bc24:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	00db      	lsls	r3, r3, #3
 800bc30:	440b      	add	r3, r1
 800bc32:	3304      	adds	r3, #4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    uint32_t desc2 = DMATxDscrTab[i].DESC2;
 800bc3a:	4928      	ldr	r1, [pc, #160]	@ (800bcdc <debug_eth_dma_descriptors+0x190>)
 800bc3c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	440b      	add	r3, r1
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    
    snprintf(debug_msg, sizeof(debug_msg),
             "TX[%d]: OWN=%lu ES=%lu FS=%lu LS=%lu TBS1=%lu Buf1=0x%08lX",
             i,
             (desc0 & ETH_DMATXDESC_OWN) ? 1UL : 0UL,      // Owner bit
 800bc52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bc56:	0fdb      	lsrs	r3, r3, #31
             (desc0 & ETH_DMATXDESC_ES) ? 1UL : 0UL,       // Error Summary
 800bc58:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800bc5c:	0bd2      	lsrs	r2, r2, #15
    snprintf(debug_msg, sizeof(debug_msg),
 800bc5e:	f002 0201 	and.w	r2, r2, #1
             (desc0 & ETH_DMATXDESC_FS) ? 1UL : 0UL,       // First Segment
 800bc62:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800bc66:	0f09      	lsrs	r1, r1, #28
    snprintf(debug_msg, sizeof(debug_msg),
 800bc68:	f001 0101 	and.w	r1, r1, #1
             (desc0 & ETH_DMATXDESC_LS) ? 1UL : 0UL,       // Last Segment
 800bc6c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 800bc70:	0f40      	lsrs	r0, r0, #29
    snprintf(debug_msg, sizeof(debug_msg),
 800bc72:	f000 0001 	and.w	r0, r0, #1
 800bc76:	f8d7 4110 	ldr.w	r4, [r7, #272]	@ 0x110
 800bc7a:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800bc7e:	1d3e      	adds	r6, r7, #4
 800bc80:	f8d7 510c 	ldr.w	r5, [r7, #268]	@ 0x10c
 800bc84:	9505      	str	r5, [sp, #20]
 800bc86:	9404      	str	r4, [sp, #16]
 800bc88:	9003      	str	r0, [sp, #12]
 800bc8a:	9102      	str	r1, [sp, #8]
 800bc8c:	9201      	str	r2, [sp, #4]
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bc94:	4a12      	ldr	r2, [pc, #72]	@ (800bce0 <debug_eth_dma_descriptors+0x194>)
 800bc96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f011 fd60 	bl	801d760 <sniprintf>
             desc1 & ETH_DMATXDESC_TBS1,                   // Transmit Buffer1 Size
             desc2);                                        // Buffer1 Address
    cdc_debug_log("DMA_DESC", debug_msg);
 800bca0:	1d3b      	adds	r3, r7, #4
 800bca2:	4619      	mov	r1, r3
 800bca4:	4809      	ldr	r0, [pc, #36]	@ (800bccc <debug_eth_dma_descriptors+0x180>)
 800bca6:	f7ff ff31 	bl	800bb0c <cdc_debug_log>
  for(int i = 0; i < ETH_TX_DESC_CNT; i++) {
 800bcaa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bcae:	3301      	adds	r3, #1
 800bcb0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800bcb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800bcb8:	2b03      	cmp	r3, #3
 800bcba:	d9a7      	bls.n	800bc0c <debug_eth_dma_descriptors+0xc0>
  }
}
 800bcbc:	bf00      	nop
 800bcbe:	bf00      	nop
 800bcc0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc8:	0801fbac 	.word	0x0801fbac
 800bccc:	0801fbcc 	.word	0x0801fbcc
 800bcd0:	20005290 	.word	0x20005290
 800bcd4:	0801fbd8 	.word	0x0801fbd8
 800bcd8:	0801fc14 	.word	0x0801fc14
 800bcdc:	20005330 	.word	0x20005330
 800bce0:	0801fc34 	.word	0x0801fc34

0800bce4 <debug_eth_dma_registers>:
/**
  * @brief  Debug ETH DMA registers
  * @retval None
  */
static void debug_eth_dma_registers(void)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b0a0      	sub	sp, #128	@ 0x80
 800bce8:	af00      	add	r7, sp, #0
  char debug_msg[128];
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_BMR=0x%08lX", ETH->DMABMR);
 800bcea:	4b25      	ldr	r3, [pc, #148]	@ (800bd80 <debug_eth_dma_registers+0x9c>)
 800bcec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	4a23      	ldr	r2, [pc, #140]	@ (800bd84 <debug_eth_dma_registers+0xa0>)
 800bcf6:	2180      	movs	r1, #128	@ 0x80
 800bcf8:	f011 fd32 	bl	801d760 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	4619      	mov	r1, r3
 800bd00:	4821      	ldr	r0, [pc, #132]	@ (800bd88 <debug_eth_dma_registers+0xa4>)
 800bd02:	f7ff ff03 	bl	800bb0c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_SR=0x%08lX", ETH->DMASR);
 800bd06:	4b1e      	ldr	r3, [pc, #120]	@ (800bd80 <debug_eth_dma_registers+0x9c>)
 800bd08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	4638      	mov	r0, r7
 800bd10:	4a1e      	ldr	r2, [pc, #120]	@ (800bd8c <debug_eth_dma_registers+0xa8>)
 800bd12:	2180      	movs	r1, #128	@ 0x80
 800bd14:	f011 fd24 	bl	801d760 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bd18:	463b      	mov	r3, r7
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	481a      	ldr	r0, [pc, #104]	@ (800bd88 <debug_eth_dma_registers+0xa4>)
 800bd1e:	f7ff fef5 	bl	800bb0c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_IER=0x%08lX", ETH->DMAIER);
 800bd22:	4b17      	ldr	r3, [pc, #92]	@ (800bd80 <debug_eth_dma_registers+0x9c>)
 800bd24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	4a18      	ldr	r2, [pc, #96]	@ (800bd90 <debug_eth_dma_registers+0xac>)
 800bd2e:	2180      	movs	r1, #128	@ 0x80
 800bd30:	f011 fd16 	bl	801d760 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bd34:	463b      	mov	r3, r7
 800bd36:	4619      	mov	r1, r3
 800bd38:	4813      	ldr	r0, [pc, #76]	@ (800bd88 <debug_eth_dma_registers+0xa4>)
 800bd3a:	f7ff fee7 	bl	800bb0c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_RDLAR=0x%08lX", ETH->DMARDLAR);
 800bd3e:	4b10      	ldr	r3, [pc, #64]	@ (800bd80 <debug_eth_dma_registers+0x9c>)
 800bd40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	4638      	mov	r0, r7
 800bd48:	4a12      	ldr	r2, [pc, #72]	@ (800bd94 <debug_eth_dma_registers+0xb0>)
 800bd4a:	2180      	movs	r1, #128	@ 0x80
 800bd4c:	f011 fd08 	bl	801d760 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bd50:	463b      	mov	r3, r7
 800bd52:	4619      	mov	r1, r3
 800bd54:	480c      	ldr	r0, [pc, #48]	@ (800bd88 <debug_eth_dma_registers+0xa4>)
 800bd56:	f7ff fed9 	bl	800bb0c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_TDLAR=0x%08lX", ETH->DMATDLAR);
 800bd5a:	4b09      	ldr	r3, [pc, #36]	@ (800bd80 <debug_eth_dma_registers+0x9c>)
 800bd5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	4638      	mov	r0, r7
 800bd64:	4a0c      	ldr	r2, [pc, #48]	@ (800bd98 <debug_eth_dma_registers+0xb4>)
 800bd66:	2180      	movs	r1, #128	@ 0x80
 800bd68:	f011 fcfa 	bl	801d760 <sniprintf>
  cdc_debug_log("DMA_REG", debug_msg);
 800bd6c:	463b      	mov	r3, r7
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4805      	ldr	r0, [pc, #20]	@ (800bd88 <debug_eth_dma_registers+0xa4>)
 800bd72:	f7ff fecb 	bl	800bb0c <cdc_debug_log>
}
 800bd76:	bf00      	nop
 800bd78:	3780      	adds	r7, #128	@ 0x80
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	40028000 	.word	0x40028000
 800bd84:	0801fc70 	.word	0x0801fc70
 800bd88:	0801fc80 	.word	0x0801fc80
 800bd8c:	0801fc88 	.word	0x0801fc88
 800bd90:	0801fc98 	.word	0x0801fc98
 800bd94:	0801fca8 	.word	0x0801fca8
 800bd98:	0801fcbc 	.word	0x0801fcbc

0800bd9c <debug_eth_config>:
/**
  * @brief  Debug ETH configuration and status
  * @retval None
  */
static void debug_eth_config(void)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b0a2      	sub	sp, #136	@ 0x88
 800bda0:	af02      	add	r7, sp, #8
  char debug_msg[128];
  
  // MAC configuration
  snprintf(debug_msg, sizeof(debug_msg), "MAC_CR=0x%08lX", ETH->MACCR);
 800bda2:	4b1c      	ldr	r3, [pc, #112]	@ (800be14 <debug_eth_config+0x78>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4638      	mov	r0, r7
 800bda8:	4a1b      	ldr	r2, [pc, #108]	@ (800be18 <debug_eth_config+0x7c>)
 800bdaa:	2180      	movs	r1, #128	@ 0x80
 800bdac:	f011 fcd8 	bl	801d760 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4819      	ldr	r0, [pc, #100]	@ (800be1c <debug_eth_config+0x80>)
 800bdb6:	f7ff fea9 	bl	800bb0c <cdc_debug_log>
  
  snprintf(debug_msg, sizeof(debug_msg), "MAC_FCR=0x%08lX", ETH->MACFCR);
 800bdba:	4b16      	ldr	r3, [pc, #88]	@ (800be14 <debug_eth_config+0x78>)
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	4a17      	ldr	r2, [pc, #92]	@ (800be20 <debug_eth_config+0x84>)
 800bdc2:	2180      	movs	r1, #128	@ 0x80
 800bdc4:	f011 fccc 	bl	801d760 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bdc8:	463b      	mov	r3, r7
 800bdca:	4619      	mov	r1, r3
 800bdcc:	4813      	ldr	r0, [pc, #76]	@ (800be1c <debug_eth_config+0x80>)
 800bdce:	f7ff fe9d 	bl	800bb0c <cdc_debug_log>
  
  // DMA configuration  
  snprintf(debug_msg, sizeof(debug_msg), "DMA_OMR=0x%08lX", ETH->DMAOMR);
 800bdd2:	4b10      	ldr	r3, [pc, #64]	@ (800be14 <debug_eth_config+0x78>)
 800bdd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	4638      	mov	r0, r7
 800bddc:	4a11      	ldr	r2, [pc, #68]	@ (800be24 <debug_eth_config+0x88>)
 800bdde:	2180      	movs	r1, #128	@ 0x80
 800bde0:	f011 fcbe 	bl	801d760 <sniprintf>
  cdc_debug_log("ETH_CFG", debug_msg);
 800bde4:	463b      	mov	r3, r7
 800bde6:	4619      	mov	r1, r3
 800bde8:	480c      	ldr	r0, [pc, #48]	@ (800be1c <debug_eth_config+0x80>)
 800bdea:	f7ff fe8f 	bl	800bb0c <cdc_debug_log>
  
  // Debug descriptor counts
  snprintf(debug_msg, sizeof(debug_msg), "RX_DESC_CNT=%d, TX_DESC_CNT=%d, RX_BUF_CNT=%d", 
 800bdee:	4638      	mov	r0, r7
 800bdf0:	230c      	movs	r3, #12
 800bdf2:	9301      	str	r3, [sp, #4]
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	4a0b      	ldr	r2, [pc, #44]	@ (800be28 <debug_eth_config+0x8c>)
 800bdfc:	2180      	movs	r1, #128	@ 0x80
 800bdfe:	f011 fcaf 	bl	801d760 <sniprintf>
           ETH_RX_DESC_CNT, ETH_TX_DESC_CNT, ETH_RX_BUFFER_CNT);
  cdc_debug_log("ETH_CFG", debug_msg);
 800be02:	463b      	mov	r3, r7
 800be04:	4619      	mov	r1, r3
 800be06:	4805      	ldr	r0, [pc, #20]	@ (800be1c <debug_eth_config+0x80>)
 800be08:	f7ff fe80 	bl	800bb0c <cdc_debug_log>
}
 800be0c:	bf00      	nop
 800be0e:	3780      	adds	r7, #128	@ 0x80
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	40028000 	.word	0x40028000
 800be18:	0801fcd0 	.word	0x0801fcd0
 800be1c:	0801fce0 	.word	0x0801fce0
 800be20:	0801fce8 	.word	0x0801fce8
 800be24:	0801fcf8 	.word	0x0801fcf8
 800be28:	0801fd08 	.word	0x0801fd08

0800be2c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800be34:	4b04      	ldr	r3, [pc, #16]	@ (800be48 <HAL_ETH_RxCpltCallback+0x1c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f003 f8b9 	bl	800efb0 <osSemaphoreRelease>
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	20005404 	.word	0x20005404

0800be4c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800be54:	4b04      	ldr	r3, [pc, #16]	@ (800be68 <HAL_ETH_TxCpltCallback+0x1c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4618      	mov	r0, r3
 800be5a:	f003 f8a9 	bl	800efb0 <osSemaphoreRelease>
}
 800be5e:	bf00      	nop
 800be60:	3708      	adds	r7, #8
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	20005408 	.word	0x20005408

0800be6c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7f9 ff4d 	bl	8005d14 <HAL_ETH_GetDMAError>
 800be7a:	4603      	mov	r3, r0
 800be7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be80:	2b80      	cmp	r3, #128	@ 0x80
 800be82:	d104      	bne.n	800be8e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800be84:	4b04      	ldr	r3, [pc, #16]	@ (800be98 <HAL_ETH_ErrorCallback+0x2c>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4618      	mov	r0, r3
 800be8a:	f003 f891 	bl	800efb0 <osSemaphoreRelease>
  }
}
 800be8e:	bf00      	nop
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	20005404 	.word	0x20005404

0800be9c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800be9c:	b5b0      	push	{r4, r5, r7, lr}
 800be9e:	b0ce      	sub	sp, #312	@ 0x138
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bea6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800beaa:	6018      	str	r0, [r3, #0]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800beac:	2300      	movs	r3, #0
 800beae:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b
  ETH_MACConfigTypeDef macConfig;
/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800beb2:	4bba      	ldr	r3, [pc, #744]	@ (800c19c <low_level_init+0x300>)
 800beb4:	4aba      	ldr	r2, [pc, #744]	@ (800c1a0 <low_level_init+0x304>)
 800beb6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800beb8:	2300      	movs	r3, #0
 800beba:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
  MACAddr[1] = 0x80;
 800bebe:	2380      	movs	r3, #128	@ 0x80
 800bec0:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
  MACAddr[2] = 0xE1;
 800bec4:	23e1      	movs	r3, #225	@ 0xe1
 800bec6:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
  MACAddr[3] = 0x00;
 800beca:	2300      	movs	r3, #0
 800becc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
  MACAddr[4] = 0x00;
 800bed0:	2300      	movs	r3, #0
 800bed2:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
  MACAddr[5] = 0x00;
 800bed6:	2300      	movs	r3, #0
 800bed8:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
  heth.Init.MACAddr = &MACAddr[0];
 800bedc:	4aaf      	ldr	r2, [pc, #700]	@ (800c19c <low_level_init+0x300>)
 800bede:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800bee2:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bee4:	4bad      	ldr	r3, [pc, #692]	@ (800c19c <low_level_init+0x300>)
 800bee6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800beea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800beec:	4bab      	ldr	r3, [pc, #684]	@ (800c19c <low_level_init+0x300>)
 800beee:	4aad      	ldr	r2, [pc, #692]	@ (800c1a4 <low_level_init+0x308>)
 800bef0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bef2:	4baa      	ldr	r3, [pc, #680]	@ (800c19c <low_level_init+0x300>)
 800bef4:	4aac      	ldr	r2, [pc, #688]	@ (800c1a8 <low_level_init+0x30c>)
 800bef6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800bef8:	4ba8      	ldr	r3, [pc, #672]	@ (800c19c <low_level_init+0x300>)
 800befa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800befe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bf00:	48a6      	ldr	r0, [pc, #664]	@ (800c19c <low_level_init+0x300>)
 800bf02:	f7f9 f901 	bl	8005108 <HAL_ETH_Init>
 800bf06:	4603      	mov	r3, r0
 800bf08:	f887 312b 	strb.w	r3, [r7, #299]	@ 0x12b

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bf0c:	2238      	movs	r2, #56	@ 0x38
 800bf0e:	2100      	movs	r1, #0
 800bf10:	48a6      	ldr	r0, [pc, #664]	@ (800c1ac <low_level_init+0x310>)
 800bf12:	f011 fcc8 	bl	801d8a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bf16:	4ba5      	ldr	r3, [pc, #660]	@ (800c1ac <low_level_init+0x310>)
 800bf18:	2221      	movs	r2, #33	@ 0x21
 800bf1a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bf1c:	4ba3      	ldr	r3, [pc, #652]	@ (800c1ac <low_level_init+0x310>)
 800bf1e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bf22:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bf24:	4ba1      	ldr	r3, [pc, #644]	@ (800c1ac <low_level_init+0x310>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bf2a:	48a1      	ldr	r0, [pc, #644]	@ (800c1b0 <low_level_init+0x314>)
 800bf2c:	f006 fbc8 	bl	80126c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bf30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	2206      	movs	r2, #6
 800bf3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bf40:	4b96      	ldr	r3, [pc, #600]	@ (800c19c <low_level_init+0x300>)
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	781a      	ldrb	r2, [r3, #0]
 800bf46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bf54:	4b91      	ldr	r3, [pc, #580]	@ (800c19c <low_level_init+0x300>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	785a      	ldrb	r2, [r3, #1]
 800bf5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bf68:	4b8c      	ldr	r3, [pc, #560]	@ (800c19c <low_level_init+0x300>)
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	789a      	ldrb	r2, [r3, #2]
 800bf6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bf7c:	4b87      	ldr	r3, [pc, #540]	@ (800c19c <low_level_init+0x300>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	78da      	ldrb	r2, [r3, #3]
 800bf82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf90:	4b82      	ldr	r3, [pc, #520]	@ (800c19c <low_level_init+0x300>)
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	791a      	ldrb	r2, [r3, #4]
 800bf96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bf9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bfa4:	4b7d      	ldr	r3, [pc, #500]	@ (800c19c <low_level_init+0x300>)
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	795a      	ldrb	r2, [r3, #5]
 800bfaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bfb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bfc6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bfc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bfd6:	f043 030a 	orr.w	r3, r3, #10
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800bfe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800bfea:	2300      	movs	r3, #0
 800bfec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bff0:	2300      	movs	r3, #0
 800bff2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800bff6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800bffa:	2101      	movs	r1, #1
 800bffc:	4618      	mov	r0, r3
 800bffe:	f002 ff57 	bl	800eeb0 <osSemaphoreCreate>
 800c002:	4603      	mov	r3, r0
 800c004:	4a6b      	ldr	r2, [pc, #428]	@ (800c1b4 <low_level_init+0x318>)
 800c006:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800c008:	2300      	movs	r3, #0
 800c00a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c00e:	2300      	movs	r3, #0
 800c010:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800c014:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800c018:	2101      	movs	r1, #1
 800c01a:	4618      	mov	r0, r3
 800c01c:	f002 ff48 	bl	800eeb0 <osSemaphoreCreate>
 800c020:	4603      	mov	r3, r0
 800c022:	4a65      	ldr	r2, [pc, #404]	@ (800c1b8 <low_level_init+0x31c>)
 800c024:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800c026:	4b63      	ldr	r3, [pc, #396]	@ (800c1b4 <low_level_init+0x318>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2100      	movs	r1, #0
 800c02c:	4618      	mov	r0, r3
 800c02e:	f002 ff71 	bl	800ef14 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800c032:	4b61      	ldr	r3, [pc, #388]	@ (800c1b8 <low_level_init+0x31c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f002 ff6b 	bl	800ef14 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800c03e:	4b5f      	ldr	r3, [pc, #380]	@ (800c1bc <low_level_init+0x320>)
 800c040:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800c044:	461d      	mov	r5, r3
 800c046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c04a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c04e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800c052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c056:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c05a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800c05e:	6819      	ldr	r1, [r3, #0]
 800c060:	4610      	mov	r0, r2
 800c062:	f002 fe29 	bl	800ecb8 <osThreadCreate>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800c066:	f897 312b 	ldrb.w	r3, [r7, #299]	@ 0x12b
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f040 8158 	bne.w	800c320 <low_level_init+0x484>
  {
/* USER CODE BEGIN low_level_init Code 2 for User BSP */
    cdc_debug_log("PHY_INIT", "Starting PHY chip initialization");
 800c070:	4953      	ldr	r1, [pc, #332]	@ (800c1c0 <low_level_init+0x324>)
 800c072:	4854      	ldr	r0, [pc, #336]	@ (800c1c4 <low_level_init+0x328>)
 800c074:	f7ff fd4a 	bl	800bb0c <cdc_debug_log>
    
    /* Set up PHY chip IO context */
    PHYchip_io_ctx.init = PHY_IO_Init;
 800c078:	4b53      	ldr	r3, [pc, #332]	@ (800c1c8 <low_level_init+0x32c>)
 800c07a:	4a54      	ldr	r2, [pc, #336]	@ (800c1cc <low_level_init+0x330>)
 800c07c:	601a      	str	r2, [r3, #0]
    PHYchip_io_ctx.deinit = PHY_IO_DeInit;
 800c07e:	4b52      	ldr	r3, [pc, #328]	@ (800c1c8 <low_level_init+0x32c>)
 800c080:	4a53      	ldr	r2, [pc, #332]	@ (800c1d0 <low_level_init+0x334>)
 800c082:	605a      	str	r2, [r3, #4]
    PHYchip_io_ctx.readreg = PHY_IO_ReadReg;
 800c084:	4b50      	ldr	r3, [pc, #320]	@ (800c1c8 <low_level_init+0x32c>)
 800c086:	4a53      	ldr	r2, [pc, #332]	@ (800c1d4 <low_level_init+0x338>)
 800c088:	60da      	str	r2, [r3, #12]
    PHYchip_io_ctx.writereg = PHY_IO_WriteReg;
 800c08a:	4b4f      	ldr	r3, [pc, #316]	@ (800c1c8 <low_level_init+0x32c>)
 800c08c:	4a52      	ldr	r2, [pc, #328]	@ (800c1d8 <low_level_init+0x33c>)
 800c08e:	609a      	str	r2, [r3, #8]
    PHYchip_io_ctx.gettick = PHY_IO_GetTick;
 800c090:	4b4d      	ldr	r3, [pc, #308]	@ (800c1c8 <low_level_init+0x32c>)
 800c092:	4a52      	ldr	r2, [pc, #328]	@ (800c1dc <low_level_init+0x340>)
 800c094:	611a      	str	r2, [r3, #16]

    /* Register PHY chip IO functions */
    if (eth_chip_regster_bus_io(&PHYchip, &PHYchip_io_ctx) != ETH_CHIP_STATUS_OK)
 800c096:	494c      	ldr	r1, [pc, #304]	@ (800c1c8 <low_level_init+0x32c>)
 800c098:	4851      	ldr	r0, [pc, #324]	@ (800c1e0 <low_level_init+0x344>)
 800c09a:	f7f8 f998 	bl	80043ce <eth_chip_regster_bus_io>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d005      	beq.n	800c0b0 <low_level_init+0x214>
    {
      cdc_debug_log("PHY_INIT", "Failed to register PHY IO functions");
 800c0a4:	494f      	ldr	r1, [pc, #316]	@ (800c1e4 <low_level_init+0x348>)
 800c0a6:	4847      	ldr	r0, [pc, #284]	@ (800c1c4 <low_level_init+0x328>)
 800c0a8:	f7ff fd30 	bl	800bb0c <cdc_debug_log>
      Error_Handler();
 800c0ac:	f7f5 fdd6 	bl	8001c5c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY IO functions registered successfully");
 800c0b0:	494d      	ldr	r1, [pc, #308]	@ (800c1e8 <low_level_init+0x34c>)
 800c0b2:	4844      	ldr	r0, [pc, #272]	@ (800c1c4 <low_level_init+0x328>)
 800c0b4:	f7ff fd2a 	bl	800bb0c <cdc_debug_log>

    /* Initialize PHY chip */
    if (eth_chip_init(&PHYchip) != ETH_CHIP_STATUS_OK)
 800c0b8:	4849      	ldr	r0, [pc, #292]	@ (800c1e0 <low_level_init+0x344>)
 800c0ba:	f7f8 f9bb 	bl	8004434 <eth_chip_init>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d005      	beq.n	800c0d0 <low_level_init+0x234>
    {
      cdc_debug_log("PHY_INIT", "PHY chip initialization failed");
 800c0c4:	4949      	ldr	r1, [pc, #292]	@ (800c1ec <low_level_init+0x350>)
 800c0c6:	483f      	ldr	r0, [pc, #252]	@ (800c1c4 <low_level_init+0x328>)
 800c0c8:	f7ff fd20 	bl	800bb0c <cdc_debug_log>
      Error_Handler();
 800c0cc:	f7f5 fdc6 	bl	8001c5c <Error_Handler>
    }
    
    char phy_addr_msg[64];
    snprintf(phy_addr_msg, sizeof(phy_addr_msg), "PHY chip initialized, address: %lu", PHYchip.devaddr);
 800c0d0:	4b43      	ldr	r3, [pc, #268]	@ (800c1e0 <low_level_init+0x344>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f107 0008 	add.w	r0, r7, #8
 800c0d8:	4a45      	ldr	r2, [pc, #276]	@ (800c1f0 <low_level_init+0x354>)
 800c0da:	2140      	movs	r1, #64	@ 0x40
 800c0dc:	f011 fb40 	bl	801d760 <sniprintf>
    cdc_debug_log("PHY_INIT", phy_addr_msg);
 800c0e0:	f107 0308 	add.w	r3, r7, #8
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4837      	ldr	r0, [pc, #220]	@ (800c1c4 <low_level_init+0x328>)
 800c0e8:	f7ff fd10 	bl	800bb0c <cdc_debug_log>

    /* Disable PHY power down mode */
    if (eth_chip_disable_power_down_mode(&PHYchip) != ETH_CHIP_STATUS_OK)
 800c0ec:	483c      	ldr	r0, [pc, #240]	@ (800c1e0 <low_level_init+0x344>)
 800c0ee:	f7f8 faa7 	bl	8004640 <eth_chip_disable_power_down_mode>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <low_level_init+0x268>
    {
      cdc_debug_log("PHY_INIT", "Failed to disable PHY power down mode");
 800c0f8:	493e      	ldr	r1, [pc, #248]	@ (800c1f4 <low_level_init+0x358>)
 800c0fa:	4832      	ldr	r0, [pc, #200]	@ (800c1c4 <low_level_init+0x328>)
 800c0fc:	f7ff fd06 	bl	800bb0c <cdc_debug_log>
      Error_Handler();
 800c100:	f7f5 fdac 	bl	8001c5c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "PHY power down mode disabled");
 800c104:	493c      	ldr	r1, [pc, #240]	@ (800c1f8 <low_level_init+0x35c>)
 800c106:	482f      	ldr	r0, [pc, #188]	@ (800c1c4 <low_level_init+0x328>)
 800c108:	f7ff fd00 	bl	800bb0c <cdc_debug_log>

    /* 启动自动协商 */
    if (eth_chip_start_auto_nego(&PHYchip) != ETH_CHIP_STATUS_OK)
 800c10c:	4834      	ldr	r0, [pc, #208]	@ (800c1e0 <low_level_init+0x344>)
 800c10e:	f7f8 fac4 	bl	800469a <eth_chip_start_auto_nego>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d005      	beq.n	800c124 <low_level_init+0x288>
    {
      cdc_debug_log("PHY_INIT", "Failed to start auto-negotiation");
 800c118:	4938      	ldr	r1, [pc, #224]	@ (800c1fc <low_level_init+0x360>)
 800c11a:	482a      	ldr	r0, [pc, #168]	@ (800c1c4 <low_level_init+0x328>)
 800c11c:	f7ff fcf6 	bl	800bb0c <cdc_debug_log>
      Error_Handler();
 800c120:	f7f5 fd9c 	bl	8001c5c <Error_Handler>
    }
    cdc_debug_log("PHY_INIT", "Auto-negotiation started successfully");
 800c124:	4936      	ldr	r1, [pc, #216]	@ (800c200 <low_level_init+0x364>)
 800c126:	4827      	ldr	r0, [pc, #156]	@ (800c1c4 <low_level_init+0x328>)
 800c128:	f7ff fcf0 	bl	800bb0c <cdc_debug_log>

    /* 等待自动协商完成 */
    uint32_t autoneg_timeout = 0;
 800c12c:	2300      	movs	r3, #0
 800c12e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    int32_t nego_state;
    do {
      HAL_Delay(100);
 800c132:	2064      	movs	r0, #100	@ 0x64
 800c134:	f7f8 fb66 	bl	8004804 <HAL_Delay>
      nego_state = eth_chip_get_link_state(&PHYchip);
 800c138:	4829      	ldr	r0, [pc, #164]	@ (800c1e0 <low_level_init+0x344>)
 800c13a:	f7f8 fadb 	bl	80046f4 <eth_chip_get_link_state>
 800c13e:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
      autoneg_timeout++;
 800c142:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c146:	3301      	adds	r3, #1
 800c148:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
      
      if (autoneg_timeout % 10 == 0) {
 800c14c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800c150:	4b2c      	ldr	r3, [pc, #176]	@ (800c204 <low_level_init+0x368>)
 800c152:	fba3 2301 	umull	r2, r3, r3, r1
 800c156:	08da      	lsrs	r2, r3, #3
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	005b      	lsls	r3, r3, #1
 800c160:	1aca      	subs	r2, r1, r3
 800c162:	2a00      	cmp	r2, #0
 800c164:	d110      	bne.n	800c188 <low_level_init+0x2ec>
        char timeout_msg[64];
        snprintf(timeout_msg, sizeof(timeout_msg), "Auto-nego timeout: %lu, state: %ld", autoneg_timeout, nego_state);
 800c166:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800c16a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c174:	4a24      	ldr	r2, [pc, #144]	@ (800c208 <low_level_init+0x36c>)
 800c176:	2140      	movs	r1, #64	@ 0x40
 800c178:	f011 faf2 	bl	801d760 <sniprintf>
        cdc_debug_log("PHY_INIT", timeout_msg);
 800c17c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c180:	4619      	mov	r1, r3
 800c182:	4810      	ldr	r0, [pc, #64]	@ (800c1c4 <low_level_init+0x328>)
 800c184:	f7ff fcc2 	bl	800bb0c <cdc_debug_log>
      }
      
      /* 超时保护 */
      if (autoneg_timeout > 50) { // 5秒超时
 800c188:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c18c:	2b32      	cmp	r3, #50	@ 0x32
 800c18e:	d93f      	bls.n	800c210 <low_level_init+0x374>
        cdc_debug_log("PHY_INIT", "Auto-negotiation timeout, using current state");
 800c190:	491e      	ldr	r1, [pc, #120]	@ (800c20c <low_level_init+0x370>)
 800c192:	480c      	ldr	r0, [pc, #48]	@ (800c1c4 <low_level_init+0x328>)
 800c194:	f7ff fcba 	bl	800bb0c <cdc_debug_log>
        break;
 800c198:	e043      	b.n	800c222 <low_level_init+0x386>
 800c19a:	bf00      	nop
 800c19c:	2000540c 	.word	0x2000540c
 800c1a0:	40028000 	.word	0x40028000
 800c1a4:	20005330 	.word	0x20005330
 800c1a8:	20005290 	.word	0x20005290
 800c1ac:	200054bc 	.word	0x200054bc
 800c1b0:	08023058 	.word	0x08023058
 800c1b4:	20005404 	.word	0x20005404
 800c1b8:	20005408 	.word	0x20005408
 800c1bc:	08020038 	.word	0x08020038
 800c1c0:	0801fd38 	.word	0x0801fd38
 800c1c4:	0801fd5c 	.word	0x0801fd5c
 800c1c8:	200053f0 	.word	0x200053f0
 800c1cc:	0800c5f5 	.word	0x0800c5f5
 800c1d0:	0800c621 	.word	0x0800c621
 800c1d4:	0800c649 	.word	0x0800c649
 800c1d8:	0800c6a1 	.word	0x0800c6a1
 800c1dc:	0800c6fd 	.word	0x0800c6fd
 800c1e0:	200053d0 	.word	0x200053d0
 800c1e4:	0801fd68 	.word	0x0801fd68
 800c1e8:	0801fd8c 	.word	0x0801fd8c
 800c1ec:	0801fdb8 	.word	0x0801fdb8
 800c1f0:	0801fdd8 	.word	0x0801fdd8
 800c1f4:	0801fdfc 	.word	0x0801fdfc
 800c1f8:	0801fe24 	.word	0x0801fe24
 800c1fc:	0801fe44 	.word	0x0801fe44
 800c200:	0801fe68 	.word	0x0801fe68
 800c204:	cccccccd 	.word	0xcccccccd
 800c208:	0801fe90 	.word	0x0801fe90
 800c20c:	0801feb4 	.word	0x0801feb4
      }
    } while (nego_state == ETH_CHIP_STATUS_AUTONEGO_NOTDONE || nego_state == ETH_CHIP_STATUS_READ_ERROR);
 800c210:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c214:	2b06      	cmp	r3, #6
 800c216:	d08c      	beq.n	800c132 <low_level_init+0x296>
 800c218:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c21c:	f113 0f05 	cmn.w	r3, #5
 800c220:	d087      	beq.n	800c132 <low_level_init+0x296>

    /* Get PHY link state and configure ETH accordingly */
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800c222:	4843      	ldr	r0, [pc, #268]	@ (800c330 <low_level_init+0x494>)
 800c224:	f7f8 fa66 	bl	80046f4 <eth_chip_get_link_state>
 800c228:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    
    char link_msg[64];
    snprintf(link_msg, sizeof(link_msg), "Initial PHY link state: %ld", phy_link_state);
 800c22c:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800c230:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c234:	4a3f      	ldr	r2, [pc, #252]	@ (800c334 <low_level_init+0x498>)
 800c236:	2140      	movs	r1, #64	@ 0x40
 800c238:	f011 fa92 	bl	801d760 <sniprintf>
    cdc_debug_log("PHY_INIT", link_msg);
 800c23c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c240:	4619      	mov	r1, r3
 800c242:	483d      	ldr	r0, [pc, #244]	@ (800c338 <low_level_init+0x49c>)
 800c244:	f7ff fc62 	bl	800bb0c <cdc_debug_log>
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR)
 800c248:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c24c:	f113 0f05 	cmn.w	r3, #5
 800c250:	d053      	beq.n	800c2fa <low_level_init+0x45e>
    {
      /* Get current MAC configuration */
      HAL_ETH_GetMACConfig(&heth, &macConfig);
 800c252:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800c256:	4619      	mov	r1, r3
 800c258:	4838      	ldr	r0, [pc, #224]	@ (800c33c <low_level_init+0x4a0>)
 800c25a:	f7f9 fc3d 	bl	8005ad8 <HAL_ETH_GetMACConfig>
      
      switch (phy_link_state)
 800c25e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c262:	3b02      	subs	r3, #2
 800c264:	2b03      	cmp	r3, #3
 800c266:	d83b      	bhi.n	800c2e0 <low_level_init+0x444>
 800c268:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <low_level_init+0x3d4>)
 800c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c26e:	bf00      	nop
 800c270:	0800c281 	.word	0x0800c281
 800c274:	0800c29b 	.word	0x0800c29b
 800c278:	0800c2b3 	.word	0x0800c2b3
 800c27c:	0800c2cb 	.word	0x0800c2cb
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c288:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c28c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Full Duplex");
 800c290:	492b      	ldr	r1, [pc, #172]	@ (800c340 <low_level_init+0x4a4>)
 800c292:	4829      	ldr	r0, [pc, #164]	@ (800c338 <low_level_init+0x49c>)
 800c294:	f7ff fc3a 	bl	800bb0c <cdc_debug_log>
          break;
 800c298:	e02f      	b.n	800c2fa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c29a:	2300      	movs	r3, #0
 800c29c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c2a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 100M Half Duplex");
 800c2a8:	4926      	ldr	r1, [pc, #152]	@ (800c344 <low_level_init+0x4a8>)
 800c2aa:	4823      	ldr	r0, [pc, #140]	@ (800c338 <low_level_init+0x49c>)
 800c2ac:	f7ff fc2e 	bl	800bb0c <cdc_debug_log>
          break;
 800c2b0:	e023      	b.n	800c2fa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c2b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Full Duplex");
 800c2c0:	4921      	ldr	r1, [pc, #132]	@ (800c348 <low_level_init+0x4ac>)
 800c2c2:	481d      	ldr	r0, [pc, #116]	@ (800c338 <low_level_init+0x49c>)
 800c2c4:	f7ff fc22 	bl	800bb0c <cdc_debug_log>
          break;
 800c2c8:	e017      	b.n	800c2fa <low_level_init+0x45e>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_10M;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Configured: 10M Half Duplex");
 800c2d6:	491d      	ldr	r1, [pc, #116]	@ (800c34c <low_level_init+0x4b0>)
 800c2d8:	4817      	ldr	r0, [pc, #92]	@ (800c338 <low_level_init+0x49c>)
 800c2da:	f7ff fc17 	bl	800bb0c <cdc_debug_log>
          break;
 800c2de:	e00c      	b.n	800c2fa <low_level_init+0x45e>
        default:
          macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c2e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c2e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
          macConfig.Speed = ETH_SPEED_100M;
 800c2e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          cdc_debug_log("PHY_INIT", "Default: 100M Full Duplex");
 800c2f0:	4917      	ldr	r1, [pc, #92]	@ (800c350 <low_level_init+0x4b4>)
 800c2f2:	4811      	ldr	r0, [pc, #68]	@ (800c338 <low_level_init+0x49c>)
 800c2f4:	f7ff fc0a 	bl	800bb0c <cdc_debug_log>
          break;
 800c2f8:	bf00      	nop

    }

    /* 重要：在启动ETH中断之前，不要调用HAL_ETH_Start_IT！
     * 信号量必须先创建，否则会在中断回调中造成HardFault */
    cdc_debug_log("PHY_INIT", "PHY configuration completed, deferring ETH start until after semaphore creation");
 800c2fa:	4916      	ldr	r1, [pc, #88]	@ (800c354 <low_level_init+0x4b8>)
 800c2fc:	480e      	ldr	r0, [pc, #56]	@ (800c338 <low_level_init+0x49c>)
 800c2fe:	f7ff fc05 	bl	800bb0c <cdc_debug_log>
    
    /* Debug ETH configuration after initialization */
    cdc_debug_log("ETH_INIT", "=== ETH Initialization Debug ===");
 800c302:	4915      	ldr	r1, [pc, #84]	@ (800c358 <low_level_init+0x4bc>)
 800c304:	4815      	ldr	r0, [pc, #84]	@ (800c35c <low_level_init+0x4c0>)
 800c306:	f7ff fc01 	bl	800bb0c <cdc_debug_log>
    debug_eth_config();
 800c30a:	f7ff fd47 	bl	800bd9c <debug_eth_config>
    debug_eth_dma_registers();
 800c30e:	f7ff fce9 	bl	800bce4 <debug_eth_dma_registers>
    debug_eth_dma_descriptors();
 800c312:	f7ff fc1b 	bl	800bb4c <debug_eth_dma_descriptors>
    cdc_debug_log("ETH_INIT", "=== ETH Debug Complete ===");
 800c316:	4912      	ldr	r1, [pc, #72]	@ (800c360 <low_level_init+0x4c4>)
 800c318:	4810      	ldr	r0, [pc, #64]	@ (800c35c <low_level_init+0x4c0>)
 800c31a:	f7ff fbf7 	bl	800bb0c <cdc_debug_log>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c31e:	e001      	b.n	800c324 <low_level_init+0x488>
    Error_Handler();
 800c320:	f7f5 fc9c 	bl	8001c5c <Error_Handler>
}
 800c324:	bf00      	nop
 800c326:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bdb0      	pop	{r4, r5, r7, pc}
 800c32e:	bf00      	nop
 800c330:	200053d0 	.word	0x200053d0
 800c334:	0801fee4 	.word	0x0801fee4
 800c338:	0801fd5c 	.word	0x0801fd5c
 800c33c:	2000540c 	.word	0x2000540c
 800c340:	0801ff00 	.word	0x0801ff00
 800c344:	0801ff20 	.word	0x0801ff20
 800c348:	0801ff40 	.word	0x0801ff40
 800c34c:	0801ff5c 	.word	0x0801ff5c
 800c350:	0801ff78 	.word	0x0801ff78
 800c354:	0801ff94 	.word	0x0801ff94
 800c358:	0801ffe4 	.word	0x0801ffe4
 800c35c:	08020008 	.word	0x08020008
 800c360:	08020014 	.word	0x08020014

0800c364 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b092      	sub	sp, #72	@ 0x48
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c36e:	2300      	movs	r3, #0
 800c370:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c372:	2300      	movs	r3, #0
 800c374:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c37c:	f107 030c 	add.w	r3, r7, #12
 800c380:	2230      	movs	r2, #48	@ 0x30
 800c382:	2100      	movs	r1, #0
 800c384:	4618      	mov	r0, r3
 800c386:	f011 fa8e 	bl	801d8a6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c38a:	f107 030c 	add.w	r3, r7, #12
 800c38e:	2230      	movs	r2, #48	@ 0x30
 800c390:	2100      	movs	r1, #0
 800c392:	4618      	mov	r0, r3
 800c394:	f011 fa87 	bl	801d8a6 <memset>

  for(q = p; q != NULL; q = q->next)
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c39c:	e045      	b.n	800c42a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3a0:	2b03      	cmp	r3, #3
 800c3a2:	d902      	bls.n	800c3aa <low_level_output+0x46>
      return ERR_IF;
 800c3a4:	f06f 030b 	mvn.w	r3, #11
 800c3a8:	e07f      	b.n	800c4aa <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c3aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3ac:	6859      	ldr	r1, [r3, #4]
 800c3ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	3348      	adds	r3, #72	@ 0x48
 800c3ba:	443b      	add	r3, r7
 800c3bc:	3b3c      	subs	r3, #60	@ 0x3c
 800c3be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c3c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c2:	895b      	ldrh	r3, [r3, #10]
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3c8:	4613      	mov	r3, r2
 800c3ca:	005b      	lsls	r3, r3, #1
 800c3cc:	4413      	add	r3, r2
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	3348      	adds	r3, #72	@ 0x48
 800c3d2:	443b      	add	r3, r7
 800c3d4:	3b38      	subs	r3, #56	@ 0x38
 800c3d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d011      	beq.n	800c402 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3e0:	1e5a      	subs	r2, r3, #1
 800c3e2:	f107 000c 	add.w	r0, r7, #12
 800c3e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	440b      	add	r3, r1
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	18c1      	adds	r1, r0, r3
 800c3f2:	4613      	mov	r3, r2
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	4413      	add	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	3348      	adds	r3, #72	@ 0x48
 800c3fc:	443b      	add	r3, r7
 800c3fe:	3b34      	subs	r3, #52	@ 0x34
 800c400:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d109      	bne.n	800c41e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c40a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c40c:	4613      	mov	r3, r2
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	3348      	adds	r3, #72	@ 0x48
 800c416:	443b      	add	r3, r7
 800c418:	3b34      	subs	r3, #52	@ 0x34
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c41e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c420:	3301      	adds	r3, #1
 800c422:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	643b      	str	r3, [r7, #64]	@ 0x40
 800c42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1b6      	bne.n	800c39e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	891b      	ldrh	r3, [r3, #8]
 800c434:	461a      	mov	r2, r3
 800c436:	4b1f      	ldr	r3, [pc, #124]	@ (800c4b4 <low_level_output+0x150>)
 800c438:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c43a:	4a1e      	ldr	r2, [pc, #120]	@ (800c4b4 <low_level_output+0x150>)
 800c43c:	f107 030c 	add.w	r3, r7, #12
 800c440:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c442:	4a1c      	ldr	r2, [pc, #112]	@ (800c4b4 <low_level_output+0x150>)
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c448:	6838      	ldr	r0, [r7, #0]
 800c44a:	f007 f965 	bl	8013718 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c44e:	4919      	ldr	r1, [pc, #100]	@ (800c4b4 <low_level_output+0x150>)
 800c450:	4819      	ldr	r0, [pc, #100]	@ (800c4b8 <low_level_output+0x154>)
 800c452:	f7f8 ffe4 	bl	800541e <HAL_ETH_Transmit_IT>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d103      	bne.n	800c464 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c462:	e01b      	b.n	800c49c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c464:	4814      	ldr	r0, [pc, #80]	@ (800c4b8 <low_level_output+0x154>)
 800c466:	f7f9 fc48 	bl	8005cfa <HAL_ETH_GetError>
 800c46a:	4603      	mov	r3, r0
 800c46c:	f003 0302 	and.w	r3, r3, #2
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00d      	beq.n	800c490 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c474:	4b11      	ldr	r3, [pc, #68]	@ (800c4bc <low_level_output+0x158>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f002 fd49 	bl	800ef14 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c482:	480d      	ldr	r0, [pc, #52]	@ (800c4b8 <low_level_output+0x154>)
 800c484:	f7f9 f96a 	bl	800575c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c488:	23fe      	movs	r3, #254	@ 0xfe
 800c48a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c48e:	e005      	b.n	800c49c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c490:	6838      	ldr	r0, [r7, #0]
 800c492:	f007 f89b 	bl	80135cc <pbuf_free>
        errval =  ERR_IF;
 800c496:	23f4      	movs	r3, #244	@ 0xf4
 800c498:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c49c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c4a0:	f113 0f02 	cmn.w	r3, #2
 800c4a4:	d0d3      	beq.n	800c44e <low_level_output+0xea>

  return errval;
 800c4a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3748      	adds	r7, #72	@ 0x48
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	200054bc 	.word	0x200054bc
 800c4b8:	2000540c 	.word	0x2000540c
 800c4bc:	20005408 	.word	0x20005408

0800c4c0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c4cc:	4b07      	ldr	r3, [pc, #28]	@ (800c4ec <low_level_input+0x2c>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c4d4:	f107 030c 	add.w	r3, r7, #12
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4805      	ldr	r0, [pc, #20]	@ (800c4f0 <low_level_input+0x30>)
 800c4dc:	f7f8 fffb 	bl	80054d6 <HAL_ETH_ReadData>
  }

  return p;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	2000528c 	.word	0x2000528c
 800c4f0:	2000540c 	.word	0x2000540c

0800c4f4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c504:	4b0f      	ldr	r3, [pc, #60]	@ (800c544 <ethernetif_input+0x50>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f04f 31ff 	mov.w	r1, #4294967295
 800c50c:	4618      	mov	r0, r3
 800c50e:	f002 fd01 	bl	800ef14 <osSemaphoreWait>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d1f5      	bne.n	800c504 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c518:	68b8      	ldr	r0, [r7, #8]
 800c51a:	f7ff ffd1 	bl	800c4c0 <low_level_input>
 800c51e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00a      	beq.n	800c53c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	68b9      	ldr	r1, [r7, #8]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	4798      	blx	r3
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d002      	beq.n	800c53c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f007 f848 	bl	80135cc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1ea      	bne.n	800c518 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c542:	e7df      	b.n	800c504 <ethernetif_input+0x10>
 800c544:	20005404 	.word	0x20005404

0800c548 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d106      	bne.n	800c564 <ethernetif_init+0x1c>
 800c556:	4b0e      	ldr	r3, [pc, #56]	@ (800c590 <ethernetif_init+0x48>)
 800c558:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800c55c:	490d      	ldr	r1, [pc, #52]	@ (800c594 <ethernetif_init+0x4c>)
 800c55e:	480e      	ldr	r0, [pc, #56]	@ (800c598 <ethernetif_init+0x50>)
 800c560:	f011 f8ec 	bl	801d73c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2273      	movs	r2, #115	@ 0x73
 800c568:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2274      	movs	r2, #116	@ 0x74
 800c570:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a09      	ldr	r2, [pc, #36]	@ (800c59c <ethernetif_init+0x54>)
 800c578:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a08      	ldr	r2, [pc, #32]	@ (800c5a0 <ethernetif_init+0x58>)
 800c57e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fc8b 	bl	800be9c <low_level_init>

  return ERR_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	08020054 	.word	0x08020054
 800c594:	08020070 	.word	0x08020070
 800c598:	08020080 	.word	0x08020080
 800c59c:	0801a9bd 	.word	0x0801a9bd
 800c5a0:	0800c365 	.word	0x0800c365

0800c5a4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c5b0:	68f9      	ldr	r1, [r7, #12]
 800c5b2:	4809      	ldr	r0, [pc, #36]	@ (800c5d8 <pbuf_free_custom+0x34>)
 800c5b4:	f006 f974 	bl	80128a0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c5b8:	4b08      	ldr	r3, [pc, #32]	@ (800c5dc <pbuf_free_custom+0x38>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d107      	bne.n	800c5d0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c5c0:	4b06      	ldr	r3, [pc, #24]	@ (800c5dc <pbuf_free_custom+0x38>)
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c5c6:	4b06      	ldr	r3, [pc, #24]	@ (800c5e0 <pbuf_free_custom+0x3c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f002 fcf0 	bl	800efb0 <osSemaphoreRelease>
  }
}
 800c5d0:	bf00      	nop
 800c5d2:	3710      	adds	r7, #16
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	08023058 	.word	0x08023058
 800c5dc:	2000528c 	.word	0x2000528c
 800c5e0:	20005404 	.word	0x20005404

0800c5e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c5e8:	f7f8 f900 	bl	80047ec <HAL_GetTick>
 800c5ec:	4603      	mov	r3, r0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <PHY_IO_Init>:
/**
  * @brief  Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_Init(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  /* 基本的PHY硬件初始化已经由HAL_ETH_Init处理 */
  /* 这里进行PHY芯片特定的初始化 */
  cdc_debug_log("PHY_IO", "PHY_IO_Init called - performing PHY-specific initialization");
 800c5f8:	4906      	ldr	r1, [pc, #24]	@ (800c614 <PHY_IO_Init+0x20>)
 800c5fa:	4807      	ldr	r0, [pc, #28]	@ (800c618 <PHY_IO_Init+0x24>)
 800c5fc:	f7ff fa86 	bl	800bb0c <cdc_debug_log>
  
  /* 等待PHY准备就绪 */
  HAL_Delay(10);
 800c600:	200a      	movs	r0, #10
 800c602:	f7f8 f8ff 	bl	8004804 <HAL_Delay>
  
  cdc_debug_log("PHY_IO", "PHY_IO_Init completed successfully");
 800c606:	4905      	ldr	r1, [pc, #20]	@ (800c61c <PHY_IO_Init+0x28>)
 800c608:	4803      	ldr	r0, [pc, #12]	@ (800c618 <PHY_IO_Init+0x24>)
 800c60a:	f7ff fa7f 	bl	800bb0c <cdc_debug_log>
  return 0;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}
 800c614:	080200a8 	.word	0x080200a8
 800c618:	080200e4 	.word	0x080200e4
 800c61c:	080200ec 	.word	0x080200ec

0800c620 <PHY_IO_DeInit>:
/**
  * @brief  De-Initialize the PHY interface
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_DeInit(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	af00      	add	r7, sp, #0
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit called - performing PHY-specific cleanup");
 800c624:	4905      	ldr	r1, [pc, #20]	@ (800c63c <PHY_IO_DeInit+0x1c>)
 800c626:	4806      	ldr	r0, [pc, #24]	@ (800c640 <PHY_IO_DeInit+0x20>)
 800c628:	f7ff fa70 	bl	800bb0c <cdc_debug_log>
  
  /* 可以在这里添加特定的PHY去初始化操作 */
  /* 例如：使能省电模式 */
  
  cdc_debug_log("PHY_IO", "PHY_IO_DeInit completed");
 800c62c:	4905      	ldr	r1, [pc, #20]	@ (800c644 <PHY_IO_DeInit+0x24>)
 800c62e:	4804      	ldr	r0, [pc, #16]	@ (800c640 <PHY_IO_DeInit+0x20>)
 800c630:	f7ff fa6c 	bl	800bb0c <cdc_debug_log>
  return 0;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	08020110 	.word	0x08020110
 800c640:	080200e4 	.word	0x080200e4
 800c644:	08020148 	.word	0x08020148

0800c648 <PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: Pointer to register value
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b096      	sub	sp, #88	@ 0x58
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	68f9      	ldr	r1, [r7, #12]
 800c65a:	480e      	ldr	r0, [pc, #56]	@ (800c694 <PHY_IO_ReadReg+0x4c>)
 800c65c:	f7f9 f9a8 	bl	80059b0 <HAL_ETH_ReadPHYRegister>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d011      	beq.n	800c68a <PHY_IO_ReadReg+0x42>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Read failed - Addr:0x%02lX Reg:0x%02lX", DevAddr, RegAddr);
 800c666:	f107 0010 	add.w	r0, r7, #16
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4a09      	ldr	r2, [pc, #36]	@ (800c698 <PHY_IO_ReadReg+0x50>)
 800c672:	2140      	movs	r1, #64	@ 0x40
 800c674:	f011 f874 	bl	801d760 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800c678:	f107 0310 	add.w	r3, r7, #16
 800c67c:	4619      	mov	r1, r3
 800c67e:	4807      	ldr	r0, [pc, #28]	@ (800c69c <PHY_IO_ReadReg+0x54>)
 800c680:	f7ff fa44 	bl	800bb0c <cdc_debug_log>
    return -1;
 800c684:	f04f 33ff 	mov.w	r3, #4294967295
 800c688:	e000      	b.n	800c68c <PHY_IO_ReadReg+0x44>
  }
  return 0;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3750      	adds	r7, #80	@ 0x50
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	2000540c 	.word	0x2000540c
 800c698:	08020160 	.word	0x08020160
 800c69c:	080200e4 	.word	0x080200e4

0800c6a0 <PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Register value to write
  * @retval 0 if OK, -1 if ERROR
  */
static int32_t PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b096      	sub	sp, #88	@ 0x58
 800c6a4:	af02      	add	r7, sp, #8
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
  if (HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	68f9      	ldr	r1, [r7, #12]
 800c6b2:	480f      	ldr	r0, [pc, #60]	@ (800c6f0 <PHY_IO_WriteReg+0x50>)
 800c6b4:	f7f9 f9c7 	bl	8005a46 <HAL_ETH_WritePHYRegister>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d013      	beq.n	800c6e6 <PHY_IO_WriteReg+0x46>
  {
    char error_msg[64];
    snprintf(error_msg, sizeof(error_msg), "Write failed - Addr:0x%02lX Reg:0x%02lX Val:0x%04lX", DevAddr, RegAddr, RegVal);
 800c6be:	f107 0010 	add.w	r0, r7, #16
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	4a09      	ldr	r2, [pc, #36]	@ (800c6f4 <PHY_IO_WriteReg+0x54>)
 800c6ce:	2140      	movs	r1, #64	@ 0x40
 800c6d0:	f011 f846 	bl	801d760 <sniprintf>
    cdc_debug_log("PHY_IO", error_msg);
 800c6d4:	f107 0310 	add.w	r3, r7, #16
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4807      	ldr	r0, [pc, #28]	@ (800c6f8 <PHY_IO_WriteReg+0x58>)
 800c6dc:	f7ff fa16 	bl	800bb0c <cdc_debug_log>
    return -1;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e4:	e000      	b.n	800c6e8 <PHY_IO_WriteReg+0x48>
  }
  return 0;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3750      	adds	r7, #80	@ 0x50
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	2000540c 	.word	0x2000540c
 800c6f4:	08020188 	.word	0x08020188
 800c6f8:	080200e4 	.word	0x080200e4

0800c6fc <PHY_IO_GetTick>:
/**
  * @brief  Get system tick for timing
  * @retval Current tick value
  */
static int32_t PHY_IO_GetTick(void)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c700:	f7f8 f874 	bl	80047ec <HAL_GetTick>
 800c704:	4603      	mov	r3, r0
}
 800c706:	4618      	mov	r0, r3
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b0b0      	sub	sp, #192	@ 0xc0
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link init */
  struct netif *netif = (struct netif *) argument;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int32_t phy_link_state;
  ETH_MACConfigTypeDef macConfig;
  uint32_t linkchanged = 0, linkup = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c720:	2300      	movs	r3, #0
 800c722:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t link_check_counter = 0;
 800c726:	2300      	movs	r3, #0
 800c728:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  
  cdc_debug_log("LINK_THREAD", "Ethernet link monitoring started");
 800c72c:	49be      	ldr	r1, [pc, #760]	@ (800ca28 <ethernet_link_thread+0x31c>)
 800c72e:	48bf      	ldr	r0, [pc, #764]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c730:	f7ff f9ec 	bl	800bb0c <cdc_debug_log>

  for(;;)
  {

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    link_check_counter++;
 800c734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c738:	3301      	adds	r3, #1
 800c73a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    
    /* Only log every 50th check to avoid flooding (approximately every 5 seconds) */
    if (link_check_counter % 50 == 0)
 800c73e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c742:	4bbb      	ldr	r3, [pc, #748]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c744:	fba3 1302 	umull	r1, r3, r3, r2
 800c748:	091b      	lsrs	r3, r3, #4
 800c74a:	2132      	movs	r1, #50	@ 0x32
 800c74c:	fb01 f303 	mul.w	r3, r1, r3
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	d10d      	bne.n	800c772 <ethernet_link_thread+0x66>
    {
      char counter_msg[32];
      snprintf(counter_msg, sizeof(counter_msg), "Link check #%lu", link_check_counter);
 800c756:	f107 0008 	add.w	r0, r7, #8
 800c75a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c75e:	4ab5      	ldr	r2, [pc, #724]	@ (800ca34 <ethernet_link_thread+0x328>)
 800c760:	2120      	movs	r1, #32
 800c762:	f010 fffd 	bl	801d760 <sniprintf>
      cdc_debug_log("LINK_THREAD", counter_msg);
 800c766:	f107 0308 	add.w	r3, r7, #8
 800c76a:	4619      	mov	r1, r3
 800c76c:	48af      	ldr	r0, [pc, #700]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c76e:	f7ff f9cd 	bl	800bb0c <cdc_debug_log>
    }
    
    phy_link_state = eth_chip_get_link_state(&PHYchip);
 800c772:	48b1      	ldr	r0, [pc, #708]	@ (800ca38 <ethernet_link_thread+0x32c>)
 800c774:	f7f7 ffbe 	bl	80046f4 <eth_chip_get_link_state>
 800c778:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    
    if (phy_link_state != ETH_CHIP_STATUS_READ_ERROR && phy_link_state != ETH_CHIP_STATUS_LINK_DOWN)
 800c77c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c780:	f113 0f05 	cmn.w	r3, #5
 800c784:	f000 8111 	beq.w	800c9aa <ethernet_link_thread+0x29e>
 800c788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	f000 810c 	beq.w	800c9aa <ethernet_link_thread+0x29e>
    {
      /* PHY link is up */
      switch (phy_link_state)
 800c792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c796:	3b02      	subs	r3, #2
 800c798:	2b04      	cmp	r3, #4
 800c79a:	d874      	bhi.n	800c886 <ethernet_link_thread+0x17a>
 800c79c:	a201      	add	r2, pc, #4	@ (adr r2, 800c7a4 <ethernet_link_thread+0x98>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7b9 	.word	0x0800c7b9
 800c7a8:	0800c7e1 	.word	0x0800c7e1
 800c7ac:	0800c809 	.word	0x0800c809
 800c7b0:	0800c831 	.word	0x0800c831
 800c7b4:	0800c859 	.word	0x0800c859
      {
        case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Full Duplex");
 800c7b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7bc:	4b9c      	ldr	r3, [pc, #624]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c7be:	fba3 1302 	umull	r1, r3, r3, r2
 800c7c2:	091b      	lsrs	r3, r3, #4
 800c7c4:	2132      	movs	r1, #50	@ 0x32
 800c7c6:	fb01 f303 	mul.w	r3, r1, r3
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <ethernet_link_thread+0xcc>
 800c7d0:	499a      	ldr	r1, [pc, #616]	@ (800ca3c <ethernet_link_thread+0x330>)
 800c7d2:	4896      	ldr	r0, [pc, #600]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c7d4:	f7ff f99a 	bl	800bb0c <cdc_debug_log>
          linkup = 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c7de:	e066      	b.n	800c8ae <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 100M Half Duplex");
 800c7e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7e4:	4b92      	ldr	r3, [pc, #584]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c7e6:	fba3 1302 	umull	r1, r3, r3, r2
 800c7ea:	091b      	lsrs	r3, r3, #4
 800c7ec:	2132      	movs	r1, #50	@ 0x32
 800c7ee:	fb01 f303 	mul.w	r3, r1, r3
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <ethernet_link_thread+0xf4>
 800c7f8:	4991      	ldr	r1, [pc, #580]	@ (800ca40 <ethernet_link_thread+0x334>)
 800c7fa:	488c      	ldr	r0, [pc, #560]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c7fc:	f7ff f986 	bl	800bb0c <cdc_debug_log>
          linkup = 1;
 800c800:	2301      	movs	r3, #1
 800c802:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c806:	e052      	b.n	800c8ae <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Full Duplex");
 800c808:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c80c:	4b88      	ldr	r3, [pc, #544]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c80e:	fba3 1302 	umull	r1, r3, r3, r2
 800c812:	091b      	lsrs	r3, r3, #4
 800c814:	2132      	movs	r1, #50	@ 0x32
 800c816:	fb01 f303 	mul.w	r3, r1, r3
 800c81a:	1ad3      	subs	r3, r2, r3
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d103      	bne.n	800c828 <ethernet_link_thread+0x11c>
 800c820:	4988      	ldr	r1, [pc, #544]	@ (800ca44 <ethernet_link_thread+0x338>)
 800c822:	4882      	ldr	r0, [pc, #520]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c824:	f7ff f972 	bl	800bb0c <cdc_debug_log>
          linkup = 1;
 800c828:	2301      	movs	r3, #1
 800c82a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c82e:	e03e      	b.n	800c8ae <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: 10M Half Duplex");
 800c830:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c834:	4b7e      	ldr	r3, [pc, #504]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c836:	fba3 1302 	umull	r1, r3, r3, r2
 800c83a:	091b      	lsrs	r3, r3, #4
 800c83c:	2132      	movs	r1, #50	@ 0x32
 800c83e:	fb01 f303 	mul.w	r3, r1, r3
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d103      	bne.n	800c850 <ethernet_link_thread+0x144>
 800c848:	497f      	ldr	r1, [pc, #508]	@ (800ca48 <ethernet_link_thread+0x33c>)
 800c84a:	4878      	ldr	r0, [pc, #480]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c84c:	f7ff f95e 	bl	800bb0c <cdc_debug_log>
          linkup = 1;
 800c850:	2301      	movs	r3, #1
 800c852:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c856:	e02a      	b.n	800c8ae <ethernet_link_thread+0x1a2>
        case ETH_CHIP_STATUS_AUTONEGO_NOTDONE:
          if (link_check_counter % 50 == 0) {
 800c858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c85c:	4b74      	ldr	r3, [pc, #464]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c85e:	fba3 1302 	umull	r1, r3, r3, r2
 800c862:	091b      	lsrs	r3, r3, #4
 800c864:	2132      	movs	r1, #50	@ 0x32
 800c866:	fb01 f303 	mul.w	r3, r1, r3
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d106      	bne.n	800c87e <ethernet_link_thread+0x172>
            cdc_debug_log("LINK_THREAD", "Auto-negotiation in progress, restarting...");
 800c870:	4976      	ldr	r1, [pc, #472]	@ (800ca4c <ethernet_link_thread+0x340>)
 800c872:	486e      	ldr	r0, [pc, #440]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c874:	f7ff f94a 	bl	800bb0c <cdc_debug_log>
            eth_chip_start_auto_nego(&PHYchip);
 800c878:	486f      	ldr	r0, [pc, #444]	@ (800ca38 <ethernet_link_thread+0x32c>)
 800c87a:	f7f7 ff0e 	bl	800469a <eth_chip_start_auto_nego>
          }
          linkup = 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c884:	e013      	b.n	800c8ae <ethernet_link_thread+0x1a2>
        default:
          if (link_check_counter % 50 == 0) cdc_debug_log("LINK_THREAD", "Link: Unknown state");
 800c886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c88a:	4b69      	ldr	r3, [pc, #420]	@ (800ca30 <ethernet_link_thread+0x324>)
 800c88c:	fba3 1302 	umull	r1, r3, r3, r2
 800c890:	091b      	lsrs	r3, r3, #4
 800c892:	2132      	movs	r1, #50	@ 0x32
 800c894:	fb01 f303 	mul.w	r3, r1, r3
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <ethernet_link_thread+0x19a>
 800c89e:	496c      	ldr	r1, [pc, #432]	@ (800ca50 <ethernet_link_thread+0x344>)
 800c8a0:	4862      	ldr	r0, [pc, #392]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c8a2:	f7ff f933 	bl	800bb0c <cdc_debug_log>
          linkup = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          break;
 800c8ac:	bf00      	nop
      }
      
      if (linkup && !netif_is_link_up(netif))
 800c8ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 8113 	beq.w	800cade <ethernet_link_thread+0x3d2>
 800c8b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c8bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f040 810a 	bne.w	800cade <ethernet_link_thread+0x3d2>
      {
        cdc_debug_log("LINK_THREAD", "Link UP detected - configuring interface");
 800c8ca:	4962      	ldr	r1, [pc, #392]	@ (800ca54 <ethernet_link_thread+0x348>)
 800c8cc:	4857      	ldr	r0, [pc, #348]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c8ce:	f7ff f91d 	bl	800bb0c <cdc_debug_log>
        
        /* Get current MAC configuration */
        HAL_ETH_GetMACConfig(&heth, &macConfig);
 800c8d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	485f      	ldr	r0, [pc, #380]	@ (800ca58 <ethernet_link_thread+0x34c>)
 800c8da:	f7f9 f8fd 	bl	8005ad8 <HAL_ETH_GetMACConfig>
        
        /* Configure ETH DupLex and Speed based on PHY state */
        switch (phy_link_state)
 800c8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8e2:	3b02      	subs	r3, #2
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d833      	bhi.n	800c950 <ethernet_link_thread+0x244>
 800c8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f0 <ethernet_link_thread+0x1e4>)
 800c8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ee:	bf00      	nop
 800c8f0:	0800c901 	.word	0x0800c901
 800c8f4:	0800c917 	.word	0x0800c917
 800c8f8:	0800c92b 	.word	0x0800c92b
 800c8fc:	0800c93f 	.word	0x0800c93f
        {
          case ETH_CHIP_STATUS_100MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c900:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c904:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800c906:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c90a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Full Duplex");
 800c90c:	4953      	ldr	r1, [pc, #332]	@ (800ca5c <ethernet_link_thread+0x350>)
 800c90e:	4847      	ldr	r0, [pc, #284]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c910:	f7ff f8fc 	bl	800bb0c <cdc_debug_log>
            break;
 800c914:	e01c      	b.n	800c950 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_100MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c916:	2300      	movs	r3, #0
 800c918:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_100M;
 800c91a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c91e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 100M Half Duplex");
 800c920:	494f      	ldr	r1, [pc, #316]	@ (800ca60 <ethernet_link_thread+0x354>)
 800c922:	4842      	ldr	r0, [pc, #264]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c924:	f7ff f8f2 	bl	800bb0c <cdc_debug_log>
            break;
 800c928:	e012      	b.n	800c950 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_FULLDUPLEX:
            macConfig.DuplexMode = ETH_FULLDUPLEX_MODE;
 800c92a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c92e:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800c930:	2300      	movs	r3, #0
 800c932:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Full Duplex");
 800c934:	494b      	ldr	r1, [pc, #300]	@ (800ca64 <ethernet_link_thread+0x358>)
 800c936:	483d      	ldr	r0, [pc, #244]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c938:	f7ff f8e8 	bl	800bb0c <cdc_debug_log>
            break;
 800c93c:	e008      	b.n	800c950 <ethernet_link_thread+0x244>
          case ETH_CHIP_STATUS_10MBITS_HALFDUPLEX:
            macConfig.DuplexMode = ETH_HALFDUPLEX_MODE;
 800c93e:	2300      	movs	r3, #0
 800c940:	663b      	str	r3, [r7, #96]	@ 0x60
            macConfig.Speed = ETH_SPEED_10M;
 800c942:	2300      	movs	r3, #0
 800c944:	65fb      	str	r3, [r7, #92]	@ 0x5c
            cdc_debug_log("LINK_THREAD", "Configuring: 10M Half Duplex");
 800c946:	4948      	ldr	r1, [pc, #288]	@ (800ca68 <ethernet_link_thread+0x35c>)
 800c948:	4838      	ldr	r0, [pc, #224]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c94a:	f7ff f8df 	bl	800bb0c <cdc_debug_log>
            break;
 800c94e:	bf00      	nop
        }
        
        /* Apply the new MAC configuration */
        if (HAL_ETH_SetMACConfig(&heth, &macConfig) != HAL_OK)
 800c950:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800c954:	4619      	mov	r1, r3
 800c956:	4840      	ldr	r0, [pc, #256]	@ (800ca58 <ethernet_link_thread+0x34c>)
 800c958:	f7f9 f9b5 	bl	8005cc6 <HAL_ETH_SetMACConfig>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d004      	beq.n	800c96c <ethernet_link_thread+0x260>
        {
          cdc_debug_log("LINK_THREAD", "Failed to set MAC configuration");
 800c962:	4942      	ldr	r1, [pc, #264]	@ (800ca6c <ethernet_link_thread+0x360>)
 800c964:	4831      	ldr	r0, [pc, #196]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c966:	f7ff f8d1 	bl	800bb0c <cdc_debug_log>
 800c96a:	e003      	b.n	800c974 <ethernet_link_thread+0x268>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "MAC configuration updated successfully");
 800c96c:	4940      	ldr	r1, [pc, #256]	@ (800ca70 <ethernet_link_thread+0x364>)
 800c96e:	482f      	ldr	r0, [pc, #188]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c970:	f7ff f8cc 	bl	800bb0c <cdc_debug_log>
        }
        
        /* Start ETH if not already started */
        if (HAL_ETH_Start_IT(&heth) != HAL_OK)
 800c974:	4838      	ldr	r0, [pc, #224]	@ (800ca58 <ethernet_link_thread+0x34c>)
 800c976:	f7f8 fc63 	bl	8005240 <HAL_ETH_Start_IT>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d004      	beq.n	800c98a <ethernet_link_thread+0x27e>
        {
          cdc_debug_log("LINK_THREAD", "Failed to start ETH");
 800c980:	493c      	ldr	r1, [pc, #240]	@ (800ca74 <ethernet_link_thread+0x368>)
 800c982:	482a      	ldr	r0, [pc, #168]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c984:	f7ff f8c2 	bl	800bb0c <cdc_debug_log>
 800c988:	e003      	b.n	800c992 <ethernet_link_thread+0x286>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH started successfully");
 800c98a:	493b      	ldr	r1, [pc, #236]	@ (800ca78 <ethernet_link_thread+0x36c>)
 800c98c:	4827      	ldr	r0, [pc, #156]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c98e:	f7ff f8bd 	bl	800bb0c <cdc_debug_log>
        }
        
        /* Notify link up */
        netif_set_link_up(netif);
 800c992:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800c996:	f006 fa07 	bl	8012da8 <netif_set_link_up>
        cdc_debug_log("LINK_THREAD", "Network interface link set to UP");
 800c99a:	4938      	ldr	r1, [pc, #224]	@ (800ca7c <ethernet_link_thread+0x370>)
 800c99c:	4823      	ldr	r0, [pc, #140]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c99e:	f7ff f8b5 	bl	800bb0c <cdc_debug_log>
        linkchanged = 1;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      if (linkup && !netif_is_link_up(netif))
 800c9a8:	e099      	b.n	800cade <ethernet_link_thread+0x3d2>
      }
    }
    else
    {
      /* PHY link is down */
      if (netif_is_link_up(netif))
 800c9aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c9ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9b2:	089b      	lsrs	r3, r3, #2
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d01e      	beq.n	800c9fc <ethernet_link_thread+0x2f0>
      {
        cdc_debug_log("LINK_THREAD", "Link DOWN detected - stopping interface");
 800c9be:	4930      	ldr	r1, [pc, #192]	@ (800ca80 <ethernet_link_thread+0x374>)
 800c9c0:	481a      	ldr	r0, [pc, #104]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c9c2:	f7ff f8a3 	bl	800bb0c <cdc_debug_log>
        
        /* Stop ETH */
        if (HAL_ETH_Stop_IT(&heth) != HAL_OK)
 800c9c6:	4824      	ldr	r0, [pc, #144]	@ (800ca58 <ethernet_link_thread+0x34c>)
 800c9c8:	f7f8 fcaa 	bl	8005320 <HAL_ETH_Stop_IT>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <ethernet_link_thread+0x2d0>
        {
          cdc_debug_log("LINK_THREAD", "Failed to stop ETH");
 800c9d2:	492c      	ldr	r1, [pc, #176]	@ (800ca84 <ethernet_link_thread+0x378>)
 800c9d4:	4815      	ldr	r0, [pc, #84]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c9d6:	f7ff f899 	bl	800bb0c <cdc_debug_log>
 800c9da:	e003      	b.n	800c9e4 <ethernet_link_thread+0x2d8>
        }
        else
        {
          cdc_debug_log("LINK_THREAD", "ETH stopped successfully");
 800c9dc:	492a      	ldr	r1, [pc, #168]	@ (800ca88 <ethernet_link_thread+0x37c>)
 800c9de:	4813      	ldr	r0, [pc, #76]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c9e0:	f7ff f894 	bl	800bb0c <cdc_debug_log>
        }
        
        /* Notify link down */
        netif_set_link_down(netif);
 800c9e4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800c9e8:	f006 fa12 	bl	8012e10 <netif_set_link_down>
        cdc_debug_log("LINK_THREAD", "Network interface link set to DOWN");
 800c9ec:	4927      	ldr	r1, [pc, #156]	@ (800ca8c <ethernet_link_thread+0x380>)
 800c9ee:	480f      	ldr	r0, [pc, #60]	@ (800ca2c <ethernet_link_thread+0x320>)
 800c9f0:	f7ff f88c 	bl	800bb0c <cdc_debug_log>
        linkchanged = 1;
 800c9f4:	2301      	movs	r3, #1
 800c9f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c9fa:	e06c      	b.n	800cad6 <ethernet_link_thread+0x3ca>
      }
      else if (link_check_counter % 50 == 0)
 800c9fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca00:	4b0b      	ldr	r3, [pc, #44]	@ (800ca30 <ethernet_link_thread+0x324>)
 800ca02:	fba3 1302 	umull	r1, r3, r3, r2
 800ca06:	091b      	lsrs	r3, r3, #4
 800ca08:	2132      	movs	r1, #50	@ 0x32
 800ca0a:	fb01 f303 	mul.w	r3, r1, r3
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d160      	bne.n	800cad6 <ethernet_link_thread+0x3ca>
      {
        if (phy_link_state == ETH_CHIP_STATUS_READ_ERROR)
 800ca14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca18:	f113 0f05 	cmn.w	r3, #5
 800ca1c:	d13a      	bne.n	800ca94 <ethernet_link_thread+0x388>
        {
          cdc_debug_log("LINK_THREAD", "PHY read error detected");
 800ca1e:	491c      	ldr	r1, [pc, #112]	@ (800ca90 <ethernet_link_thread+0x384>)
 800ca20:	4802      	ldr	r0, [pc, #8]	@ (800ca2c <ethernet_link_thread+0x320>)
 800ca22:	f7ff f873 	bl	800bb0c <cdc_debug_log>
 800ca26:	e056      	b.n	800cad6 <ethernet_link_thread+0x3ca>
 800ca28:	080201bc 	.word	0x080201bc
 800ca2c:	080201e0 	.word	0x080201e0
 800ca30:	51eb851f 	.word	0x51eb851f
 800ca34:	080201ec 	.word	0x080201ec
 800ca38:	200053d0 	.word	0x200053d0
 800ca3c:	080201fc 	.word	0x080201fc
 800ca40:	08020214 	.word	0x08020214
 800ca44:	0802022c 	.word	0x0802022c
 800ca48:	08020244 	.word	0x08020244
 800ca4c:	0802025c 	.word	0x0802025c
 800ca50:	08020288 	.word	0x08020288
 800ca54:	0802029c 	.word	0x0802029c
 800ca58:	2000540c 	.word	0x2000540c
 800ca5c:	080202c8 	.word	0x080202c8
 800ca60:	080202e8 	.word	0x080202e8
 800ca64:	08020308 	.word	0x08020308
 800ca68:	08020328 	.word	0x08020328
 800ca6c:	08020348 	.word	0x08020348
 800ca70:	08020368 	.word	0x08020368
 800ca74:	08020390 	.word	0x08020390
 800ca78:	080203a4 	.word	0x080203a4
 800ca7c:	080203c0 	.word	0x080203c0
 800ca80:	080203e4 	.word	0x080203e4
 800ca84:	0802040c 	.word	0x0802040c
 800ca88:	08020420 	.word	0x08020420
 800ca8c:	0802043c 	.word	0x0802043c
 800ca90:	08020460 	.word	0x08020460
        }
        else if (phy_link_state == ETH_CHIP_STATUS_LINK_DOWN)
 800ca94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d10e      	bne.n	800caba <ethernet_link_thread+0x3ae>
        {
          cdc_debug_log("LINK_THREAD", "Link is down, restarting auto-negotiation");
 800ca9c:	4926      	ldr	r1, [pc, #152]	@ (800cb38 <ethernet_link_thread+0x42c>)
 800ca9e:	4827      	ldr	r0, [pc, #156]	@ (800cb3c <ethernet_link_thread+0x430>)
 800caa0:	f7ff f834 	bl	800bb0c <cdc_debug_log>
          /* 尝试重新启动自动协商 */
          if (eth_chip_start_auto_nego(&PHYchip) == ETH_CHIP_STATUS_OK)
 800caa4:	4826      	ldr	r0, [pc, #152]	@ (800cb40 <ethernet_link_thread+0x434>)
 800caa6:	f7f7 fdf8 	bl	800469a <eth_chip_start_auto_nego>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d112      	bne.n	800cad6 <ethernet_link_thread+0x3ca>
          {
            cdc_debug_log("LINK_THREAD", "Auto-negotiation restarted");
 800cab0:	4924      	ldr	r1, [pc, #144]	@ (800cb44 <ethernet_link_thread+0x438>)
 800cab2:	4822      	ldr	r0, [pc, #136]	@ (800cb3c <ethernet_link_thread+0x430>)
 800cab4:	f7ff f82a 	bl	800bb0c <cdc_debug_log>
 800cab8:	e00d      	b.n	800cad6 <ethernet_link_thread+0x3ca>
          }
        }
        else
        {
          char state_msg[64];
          snprintf(state_msg, sizeof(state_msg), "Unknown PHY state: %ld", phy_link_state);
 800caba:	f107 0008 	add.w	r0, r7, #8
 800cabe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac2:	4a21      	ldr	r2, [pc, #132]	@ (800cb48 <ethernet_link_thread+0x43c>)
 800cac4:	2140      	movs	r1, #64	@ 0x40
 800cac6:	f010 fe4b 	bl	801d760 <sniprintf>
          cdc_debug_log("LINK_THREAD", state_msg);
 800caca:	f107 0308 	add.w	r3, r7, #8
 800cace:	4619      	mov	r1, r3
 800cad0:	481a      	ldr	r0, [pc, #104]	@ (800cb3c <ethernet_link_thread+0x430>)
 800cad2:	f7ff f81b 	bl	800bb0c <cdc_debug_log>
        }
      }
      linkup = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cadc:	e000      	b.n	800cae0 <ethernet_link_thread+0x3d4>
      if (linkup && !netif_is_link_up(netif))
 800cade:	bf00      	nop
    }
    
    /* Reset link change flag */
    if (linkchanged)
 800cae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <ethernet_link_thread+0x3f6>
    {
      linkchanged = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
      /* Debug DMA status after link change */
      cdc_debug_log("LINK_THREAD", "=== DMA Status After Link Change ===");
 800caee:	4917      	ldr	r1, [pc, #92]	@ (800cb4c <ethernet_link_thread+0x440>)
 800caf0:	4812      	ldr	r0, [pc, #72]	@ (800cb3c <ethernet_link_thread+0x430>)
 800caf2:	f7ff f80b 	bl	800bb0c <cdc_debug_log>
      debug_eth_dma_registers();
 800caf6:	f7ff f8f5 	bl	800bce4 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== DMA Debug Complete ===");
 800cafa:	4915      	ldr	r1, [pc, #84]	@ (800cb50 <ethernet_link_thread+0x444>)
 800cafc:	480f      	ldr	r0, [pc, #60]	@ (800cb3c <ethernet_link_thread+0x430>)
 800cafe:	f7ff f805 	bl	800bb0c <cdc_debug_log>
    }
    
    /* Periodic DMA debug every 100 cycles (approximately 10 seconds) */
    if (link_check_counter % 100 == 0)
 800cb02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cb06:	4b13      	ldr	r3, [pc, #76]	@ (800cb54 <ethernet_link_thread+0x448>)
 800cb08:	fba3 1302 	umull	r1, r3, r3, r2
 800cb0c:	095b      	lsrs	r3, r3, #5
 800cb0e:	2164      	movs	r1, #100	@ 0x64
 800cb10:	fb01 f303 	mul.w	r3, r1, r3
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d109      	bne.n	800cb2e <ethernet_link_thread+0x422>
    {
      cdc_debug_log("LINK_THREAD", "=== Periodic DMA Status Check ===");
 800cb1a:	490f      	ldr	r1, [pc, #60]	@ (800cb58 <ethernet_link_thread+0x44c>)
 800cb1c:	4807      	ldr	r0, [pc, #28]	@ (800cb3c <ethernet_link_thread+0x430>)
 800cb1e:	f7fe fff5 	bl	800bb0c <cdc_debug_log>
      debug_eth_dma_registers();
 800cb22:	f7ff f8df 	bl	800bce4 <debug_eth_dma_registers>
      cdc_debug_log("LINK_THREAD", "=== Periodic Debug Complete ===");
 800cb26:	490d      	ldr	r1, [pc, #52]	@ (800cb5c <ethernet_link_thread+0x450>)
 800cb28:	4804      	ldr	r0, [pc, #16]	@ (800cb3c <ethernet_link_thread+0x430>)
 800cb2a:	f7fe ffef 	bl	800bb0c <cdc_debug_log>
    }
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800cb2e:	2064      	movs	r0, #100	@ 0x64
 800cb30:	f002 f90e 	bl	800ed50 <osDelay>
    link_check_counter++;
 800cb34:	e5fe      	b.n	800c734 <ethernet_link_thread+0x28>
 800cb36:	bf00      	nop
 800cb38:	08020478 	.word	0x08020478
 800cb3c:	080201e0 	.word	0x080201e0
 800cb40:	200053d0 	.word	0x200053d0
 800cb44:	080204a4 	.word	0x080204a4
 800cb48:	080204c0 	.word	0x080204c0
 800cb4c:	080204d8 	.word	0x080204d8
 800cb50:	08020500 	.word	0x08020500
 800cb54:	51eb851f 	.word	0x51eb851f
 800cb58:	0802051c 	.word	0x0802051c
 800cb5c:	08020540 	.word	0x08020540

0800cb60 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af02      	add	r7, sp, #8
 800cb66:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800cb68:	4812      	ldr	r0, [pc, #72]	@ (800cbb4 <HAL_ETH_RxAllocateCallback+0x54>)
 800cb6a:	f005 fe25 	bl	80127b8 <memp_malloc_pool>
 800cb6e:	60f8      	str	r0, [r7, #12]
  if (p)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d014      	beq.n	800cba0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f103 0220 	add.w	r2, r3, #32
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4a0d      	ldr	r2, [pc, #52]	@ (800cbb8 <HAL_ETH_RxAllocateCallback+0x58>)
 800cb84:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800cb8e:	9201      	str	r2, [sp, #4]
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2241      	movs	r2, #65	@ 0x41
 800cb96:	2100      	movs	r1, #0
 800cb98:	2000      	movs	r0, #0
 800cb9a:	f006 fb5d 	bl	8013258 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800cb9e:	e005      	b.n	800cbac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800cba0:	4b06      	ldr	r3, [pc, #24]	@ (800cbbc <HAL_ETH_RxAllocateCallback+0x5c>)
 800cba2:	2201      	movs	r2, #1
 800cba4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	601a      	str	r2, [r3, #0]
}
 800cbac:	bf00      	nop
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	08023058 	.word	0x08023058
 800cbb8:	0800c5a5 	.word	0x0800c5a5
 800cbbc:	2000528c 	.word	0x2000528c

0800cbc0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b089      	sub	sp, #36	@ 0x24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
 800cbcc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3b20      	subs	r3, #32
 800cbde:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	887a      	ldrh	r2, [r7, #2]
 800cbf0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d103      	bne.n	800cc02 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	69fa      	ldr	r2, [r7, #28]
 800cbfe:	601a      	str	r2, [r3, #0]
 800cc00:	e003      	b.n	800cc0a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800cc10:	69bb      	ldr	r3, [r7, #24]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	61fb      	str	r3, [r7, #28]
 800cc16:	e009      	b.n	800cc2c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	891a      	ldrh	r2, [r3, #8]
 800cc1c:	887b      	ldrh	r3, [r7, #2]
 800cc1e:	4413      	add	r3, r2
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	61fb      	str	r3, [r7, #28]
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1f2      	bne.n	800cc18 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800cc32:	bf00      	nop
 800cc34:	bf00      	nop
 800cc36:	3724      	adds	r7, #36	@ 0x24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f006 fcbf 	bl	80135cc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800cc4e:	bf00      	nop
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
	...

0800cc58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cc68:	f010 fb9c 	bl	801d3a4 <USBD_static_malloc>
 800cc6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d109      	bne.n	800cc88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	32b0      	adds	r2, #176	@ 0xb0
 800cc7e:	2100      	movs	r1, #0
 800cc80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cc84:	2302      	movs	r3, #2
 800cc86:	e0d4      	b.n	800ce32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cc88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f010 fe09 	bl	801d8a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	32b0      	adds	r2, #176	@ 0xb0
 800cc9e:	68f9      	ldr	r1, [r7, #12]
 800cca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	32b0      	adds	r2, #176	@ 0xb0
 800ccae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	7c1b      	ldrb	r3, [r3, #16]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d138      	bne.n	800cd32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ccc0:	4b5e      	ldr	r3, [pc, #376]	@ (800ce3c <USBD_CDC_Init+0x1e4>)
 800ccc2:	7819      	ldrb	r1, [r3, #0]
 800ccc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccc8:	2202      	movs	r2, #2
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f010 fa47 	bl	801d15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ccd0:	4b5a      	ldr	r3, [pc, #360]	@ (800ce3c <USBD_CDC_Init+0x1e4>)
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	f003 020f 	and.w	r2, r3, #15
 800ccd8:	6879      	ldr	r1, [r7, #4]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4413      	add	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	440b      	add	r3, r1
 800cce4:	3323      	adds	r3, #35	@ 0x23
 800cce6:	2201      	movs	r2, #1
 800cce8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ccea:	4b55      	ldr	r3, [pc, #340]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800ccec:	7819      	ldrb	r1, [r3, #0]
 800ccee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f010 fa32 	bl	801d15e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ccfa:	4b51      	ldr	r3, [pc, #324]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 020f 	and.w	r2, r3, #15
 800cd02:	6879      	ldr	r1, [r7, #4]
 800cd04:	4613      	mov	r3, r2
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	440b      	add	r3, r1
 800cd0e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cd12:	2201      	movs	r2, #1
 800cd14:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd16:	4b4b      	ldr	r3, [pc, #300]	@ (800ce44 <USBD_CDC_Init+0x1ec>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	f003 020f 	and.w	r2, r3, #15
 800cd1e:	6879      	ldr	r1, [r7, #4]
 800cd20:	4613      	mov	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	440b      	add	r3, r1
 800cd2a:	331c      	adds	r3, #28
 800cd2c:	2210      	movs	r2, #16
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	e035      	b.n	800cd9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd32:	4b42      	ldr	r3, [pc, #264]	@ (800ce3c <USBD_CDC_Init+0x1e4>)
 800cd34:	7819      	ldrb	r1, [r3, #0]
 800cd36:	2340      	movs	r3, #64	@ 0x40
 800cd38:	2202      	movs	r2, #2
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f010 fa0f 	bl	801d15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd40:	4b3e      	ldr	r3, [pc, #248]	@ (800ce3c <USBD_CDC_Init+0x1e4>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	f003 020f 	and.w	r2, r3, #15
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4413      	add	r3, r2
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	440b      	add	r3, r1
 800cd54:	3323      	adds	r3, #35	@ 0x23
 800cd56:	2201      	movs	r2, #1
 800cd58:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd5a:	4b39      	ldr	r3, [pc, #228]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800cd5c:	7819      	ldrb	r1, [r3, #0]
 800cd5e:	2340      	movs	r3, #64	@ 0x40
 800cd60:	2202      	movs	r2, #2
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f010 f9fb 	bl	801d15e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd68:	4b35      	ldr	r3, [pc, #212]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	f003 020f 	and.w	r2, r3, #15
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	440b      	add	r3, r1
 800cd7c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cd80:	2201      	movs	r2, #1
 800cd82:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cd84:	4b2f      	ldr	r3, [pc, #188]	@ (800ce44 <USBD_CDC_Init+0x1ec>)
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	f003 020f 	and.w	r2, r3, #15
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	440b      	add	r3, r1
 800cd98:	331c      	adds	r3, #28
 800cd9a:	2210      	movs	r2, #16
 800cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cd9e:	4b29      	ldr	r3, [pc, #164]	@ (800ce44 <USBD_CDC_Init+0x1ec>)
 800cda0:	7819      	ldrb	r1, [r3, #0]
 800cda2:	2308      	movs	r3, #8
 800cda4:	2203      	movs	r2, #3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f010 f9d9 	bl	801d15e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cdac:	4b25      	ldr	r3, [pc, #148]	@ (800ce44 <USBD_CDC_Init+0x1ec>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	f003 020f 	and.w	r2, r3, #15
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	4413      	add	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	440b      	add	r3, r1
 800cdc0:	3323      	adds	r3, #35	@ 0x23
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	33b0      	adds	r3, #176	@ 0xb0
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d101      	bne.n	800ce00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	e018      	b.n	800ce32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	7c1b      	ldrb	r3, [r3, #16]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10a      	bne.n	800ce1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce08:	4b0d      	ldr	r3, [pc, #52]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800ce0a:	7819      	ldrb	r1, [r3, #0]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f010 fa90 	bl	801d33c <USBD_LL_PrepareReceive>
 800ce1c:	e008      	b.n	800ce30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce1e:	4b08      	ldr	r3, [pc, #32]	@ (800ce40 <USBD_CDC_Init+0x1e8>)
 800ce20:	7819      	ldrb	r1, [r3, #0]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ce28:	2340      	movs	r3, #64	@ 0x40
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f010 fa86 	bl	801d33c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20000093 	.word	0x20000093
 800ce40:	20000094 	.word	0x20000094
 800ce44:	20000095 	.word	0x20000095

0800ce48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ce54:	4b3a      	ldr	r3, [pc, #232]	@ (800cf40 <USBD_CDC_DeInit+0xf8>)
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f010 f9a5 	bl	801d1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ce60:	4b37      	ldr	r3, [pc, #220]	@ (800cf40 <USBD_CDC_DeInit+0xf8>)
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	f003 020f 	and.w	r2, r3, #15
 800ce68:	6879      	ldr	r1, [r7, #4]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4413      	add	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	440b      	add	r3, r1
 800ce74:	3323      	adds	r3, #35	@ 0x23
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ce7a:	4b32      	ldr	r3, [pc, #200]	@ (800cf44 <USBD_CDC_DeInit+0xfc>)
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	4619      	mov	r1, r3
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f010 f992 	bl	801d1aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ce86:	4b2f      	ldr	r3, [pc, #188]	@ (800cf44 <USBD_CDC_DeInit+0xfc>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 020f 	and.w	r2, r3, #15
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	440b      	add	r3, r1
 800ce9a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ce9e:	2200      	movs	r2, #0
 800cea0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cea2:	4b29      	ldr	r3, [pc, #164]	@ (800cf48 <USBD_CDC_DeInit+0x100>)
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f010 f97e 	bl	801d1aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ceae:	4b26      	ldr	r3, [pc, #152]	@ (800cf48 <USBD_CDC_DeInit+0x100>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	f003 020f 	and.w	r2, r3, #15
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	440b      	add	r3, r1
 800cec2:	3323      	adds	r3, #35	@ 0x23
 800cec4:	2200      	movs	r2, #0
 800cec6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cec8:	4b1f      	ldr	r3, [pc, #124]	@ (800cf48 <USBD_CDC_DeInit+0x100>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	f003 020f 	and.w	r2, r3, #15
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	331c      	adds	r3, #28
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	32b0      	adds	r2, #176	@ 0xb0
 800ceec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d01f      	beq.n	800cf34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	33b0      	adds	r3, #176	@ 0xb0
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	32b0      	adds	r2, #176	@ 0xb0
 800cf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f010 fa52 	bl	801d3c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	32b0      	adds	r2, #176	@ 0xb0
 800cf26:	2100      	movs	r1, #0
 800cf28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf34:	2300      	movs	r3, #0
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	3708      	adds	r7, #8
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd80      	pop	{r7, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000093 	.word	0x20000093
 800cf44:	20000094 	.word	0x20000094
 800cf48:	20000095 	.word	0x20000095

0800cf4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	32b0      	adds	r2, #176	@ 0xb0
 800cf60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cf66:	2300      	movs	r3, #0
 800cf68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d101      	bne.n	800cf7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cf78:	2303      	movs	r3, #3
 800cf7a:	e0bf      	b.n	800d0fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d050      	beq.n	800d02a <USBD_CDC_Setup+0xde>
 800cf88:	2b20      	cmp	r3, #32
 800cf8a:	f040 80af 	bne.w	800d0ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	88db      	ldrh	r3, [r3, #6]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d03a      	beq.n	800d00c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	b25b      	sxtb	r3, r3
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	da1b      	bge.n	800cfd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	33b0      	adds	r3, #176	@ 0xb0
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	683a      	ldr	r2, [r7, #0]
 800cfb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cfb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	88d2      	ldrh	r2, [r2, #6]
 800cfbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	88db      	ldrh	r3, [r3, #6]
 800cfc2:	2b07      	cmp	r3, #7
 800cfc4:	bf28      	it	cs
 800cfc6:	2307      	movcs	r3, #7
 800cfc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	89fa      	ldrh	r2, [r7, #14]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f001 fda9 	bl	800eb28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cfd6:	e090      	b.n	800d0fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	785a      	ldrb	r2, [r3, #1]
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	88db      	ldrh	r3, [r3, #6]
 800cfe6:	2b3f      	cmp	r3, #63	@ 0x3f
 800cfe8:	d803      	bhi.n	800cff2 <USBD_CDC_Setup+0xa6>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88db      	ldrh	r3, [r3, #6]
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	e000      	b.n	800cff4 <USBD_CDC_Setup+0xa8>
 800cff2:	2240      	movs	r2, #64	@ 0x40
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cffa:	6939      	ldr	r1, [r7, #16]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d002:	461a      	mov	r2, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 fdbe 	bl	800eb86 <USBD_CtlPrepareRx>
      break;
 800d00a:	e076      	b.n	800d0fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	33b0      	adds	r3, #176	@ 0xb0
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	4413      	add	r3, r2
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	7850      	ldrb	r0, [r2, #1]
 800d022:	2200      	movs	r2, #0
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	4798      	blx	r3
      break;
 800d028:	e067      	b.n	800d0fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	2b0b      	cmp	r3, #11
 800d030:	d851      	bhi.n	800d0d6 <USBD_CDC_Setup+0x18a>
 800d032:	a201      	add	r2, pc, #4	@ (adr r2, 800d038 <USBD_CDC_Setup+0xec>)
 800d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d038:	0800d069 	.word	0x0800d069
 800d03c:	0800d0e5 	.word	0x0800d0e5
 800d040:	0800d0d7 	.word	0x0800d0d7
 800d044:	0800d0d7 	.word	0x0800d0d7
 800d048:	0800d0d7 	.word	0x0800d0d7
 800d04c:	0800d0d7 	.word	0x0800d0d7
 800d050:	0800d0d7 	.word	0x0800d0d7
 800d054:	0800d0d7 	.word	0x0800d0d7
 800d058:	0800d0d7 	.word	0x0800d0d7
 800d05c:	0800d0d7 	.word	0x0800d0d7
 800d060:	0800d093 	.word	0x0800d093
 800d064:	0800d0bd 	.word	0x0800d0bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b03      	cmp	r3, #3
 800d072:	d107      	bne.n	800d084 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d074:	f107 030a 	add.w	r3, r7, #10
 800d078:	2202      	movs	r2, #2
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f001 fd53 	bl	800eb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d082:	e032      	b.n	800d0ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f001 fcd1 	bl	800ea2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d08c:	2303      	movs	r3, #3
 800d08e:	75fb      	strb	r3, [r7, #23]
          break;
 800d090:	e02b      	b.n	800d0ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d107      	bne.n	800d0ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d09e:	f107 030d 	add.w	r3, r7, #13
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f001 fd3e 	bl	800eb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0ac:	e01d      	b.n	800d0ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0ae:	6839      	ldr	r1, [r7, #0]
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 fcbc 	bl	800ea2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	75fb      	strb	r3, [r7, #23]
          break;
 800d0ba:	e016      	b.n	800d0ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b03      	cmp	r3, #3
 800d0c6:	d00f      	beq.n	800d0e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f001 fcaf 	bl	800ea2e <USBD_CtlError>
            ret = USBD_FAIL;
 800d0d0:	2303      	movs	r3, #3
 800d0d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d0d4:	e008      	b.n	800d0e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f001 fca8 	bl	800ea2e <USBD_CtlError>
          ret = USBD_FAIL;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800d0e2:	e002      	b.n	800d0ea <USBD_CDC_Setup+0x19e>
          break;
 800d0e4:	bf00      	nop
 800d0e6:	e008      	b.n	800d0fa <USBD_CDC_Setup+0x1ae>
          break;
 800d0e8:	bf00      	nop
      }
      break;
 800d0ea:	e006      	b.n	800d0fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f001 fc9d 	bl	800ea2e <USBD_CtlError>
      ret = USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800d0f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800d0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b084      	sub	sp, #16
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	460b      	mov	r3, r1
 800d10e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d116:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	32b0      	adds	r2, #176	@ 0xb0
 800d122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d12a:	2303      	movs	r3, #3
 800d12c:	e065      	b.n	800d1fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	32b0      	adds	r2, #176	@ 0xb0
 800d138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d13e:	78fb      	ldrb	r3, [r7, #3]
 800d140:	f003 020f 	and.w	r2, r3, #15
 800d144:	6879      	ldr	r1, [r7, #4]
 800d146:	4613      	mov	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	440b      	add	r3, r1
 800d150:	3314      	adds	r3, #20
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d02f      	beq.n	800d1b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d158:	78fb      	ldrb	r3, [r7, #3]
 800d15a:	f003 020f 	and.w	r2, r3, #15
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	440b      	add	r3, r1
 800d16a:	3314      	adds	r3, #20
 800d16c:	681a      	ldr	r2, [r3, #0]
 800d16e:	78fb      	ldrb	r3, [r7, #3]
 800d170:	f003 010f 	and.w	r1, r3, #15
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	460b      	mov	r3, r1
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	440b      	add	r3, r1
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4403      	add	r3, r0
 800d180:	331c      	adds	r3, #28
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	fbb2 f1f3 	udiv	r1, r2, r3
 800d188:	fb01 f303 	mul.w	r3, r1, r3
 800d18c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d112      	bne.n	800d1b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d192:	78fb      	ldrb	r3, [r7, #3]
 800d194:	f003 020f 	and.w	r2, r3, #15
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4613      	mov	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3314      	adds	r3, #20
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1aa:	78f9      	ldrb	r1, [r7, #3]
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f010 f8a2 	bl	801d2fa <USBD_LL_Transmit>
 800d1b6:	e01f      	b.n	800d1f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	33b0      	adds	r3, #176	@ 0xb0
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	691b      	ldr	r3, [r3, #16]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d010      	beq.n	800d1f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	33b0      	adds	r3, #176	@ 0xb0
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d1ee:	68ba      	ldr	r2, [r7, #8]
 800d1f0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d1f4:	78fa      	ldrb	r2, [r7, #3]
 800d1f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	460b      	mov	r3, r1
 800d20c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	32b0      	adds	r2, #176	@ 0xb0
 800d218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	32b0      	adds	r2, #176	@ 0xb0
 800d228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d101      	bne.n	800d234 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d230:	2303      	movs	r3, #3
 800d232:	e01a      	b.n	800d26a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f010 f8a0 	bl	801d37e <USBD_LL_GetRxDataSize>
 800d23e:	4602      	mov	r2, r0
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	33b0      	adds	r3, #176	@ 0xb0
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d264:	4611      	mov	r1, r2
 800d266:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d268:	2300      	movs	r3, #0
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}

0800d272 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d272:	b580      	push	{r7, lr}
 800d274:	b084      	sub	sp, #16
 800d276:	af00      	add	r7, sp, #0
 800d278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	32b0      	adds	r2, #176	@ 0xb0
 800d284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d101      	bne.n	800d294 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d290:	2303      	movs	r3, #3
 800d292:	e024      	b.n	800d2de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	33b0      	adds	r3, #176	@ 0xb0
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d019      	beq.n	800d2dc <USBD_CDC_EP0_RxReady+0x6a>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d2ae:	2bff      	cmp	r3, #255	@ 0xff
 800d2b0:	d014      	beq.n	800d2dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	33b0      	adds	r3, #176	@ 0xb0
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4413      	add	r3, r2
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d2ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d2cc:	68fa      	ldr	r2, [r7, #12]
 800d2ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	22ff      	movs	r2, #255	@ 0xff
 800d2d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2f0:	2182      	movs	r1, #130	@ 0x82
 800d2f2:	4818      	ldr	r0, [pc, #96]	@ (800d354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d2f4:	f000 fd62 	bl	800ddbc <USBD_GetEpDesc>
 800d2f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	4815      	ldr	r0, [pc, #84]	@ (800d354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d2fe:	f000 fd5d 	bl	800ddbc <USBD_GetEpDesc>
 800d302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d304:	2181      	movs	r1, #129	@ 0x81
 800d306:	4813      	ldr	r0, [pc, #76]	@ (800d354 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d308:	f000 fd58 	bl	800ddbc <USBD_GetEpDesc>
 800d30c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	2210      	movs	r2, #16
 800d318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d006      	beq.n	800d32e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	2200      	movs	r2, #0
 800d324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d328:	711a      	strb	r2, [r3, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d006      	beq.n	800d342 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d33c:	711a      	strb	r2, [r3, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2243      	movs	r2, #67	@ 0x43
 800d346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d348:	4b02      	ldr	r3, [pc, #8]	@ (800d354 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3718      	adds	r7, #24
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	20000050 	.word	0x20000050

0800d358 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d360:	2182      	movs	r1, #130	@ 0x82
 800d362:	4818      	ldr	r0, [pc, #96]	@ (800d3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d364:	f000 fd2a 	bl	800ddbc <USBD_GetEpDesc>
 800d368:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d36a:	2101      	movs	r1, #1
 800d36c:	4815      	ldr	r0, [pc, #84]	@ (800d3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d36e:	f000 fd25 	bl	800ddbc <USBD_GetEpDesc>
 800d372:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d374:	2181      	movs	r1, #129	@ 0x81
 800d376:	4813      	ldr	r0, [pc, #76]	@ (800d3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d378:	f000 fd20 	bl	800ddbc <USBD_GetEpDesc>
 800d37c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2210      	movs	r2, #16
 800d388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d006      	beq.n	800d39e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	2200      	movs	r2, #0
 800d394:	711a      	strb	r2, [r3, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	f042 0202 	orr.w	r2, r2, #2
 800d39c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d006      	beq.n	800d3b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	711a      	strb	r2, [r3, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f042 0202 	orr.w	r2, r2, #2
 800d3b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2243      	movs	r2, #67	@ 0x43
 800d3b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3b8:	4b02      	ldr	r3, [pc, #8]	@ (800d3c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20000050 	.word	0x20000050

0800d3c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3d0:	2182      	movs	r1, #130	@ 0x82
 800d3d2:	4818      	ldr	r0, [pc, #96]	@ (800d434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3d4:	f000 fcf2 	bl	800ddbc <USBD_GetEpDesc>
 800d3d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3da:	2101      	movs	r1, #1
 800d3dc:	4815      	ldr	r0, [pc, #84]	@ (800d434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3de:	f000 fced 	bl	800ddbc <USBD_GetEpDesc>
 800d3e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3e4:	2181      	movs	r1, #129	@ 0x81
 800d3e6:	4813      	ldr	r0, [pc, #76]	@ (800d434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3e8:	f000 fce8 	bl	800ddbc <USBD_GetEpDesc>
 800d3ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	2210      	movs	r2, #16
 800d3f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d006      	beq.n	800d40e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2200      	movs	r2, #0
 800d404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d408:	711a      	strb	r2, [r3, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d006      	beq.n	800d422 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2200      	movs	r2, #0
 800d418:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d41c:	711a      	strb	r2, [r3, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2243      	movs	r2, #67	@ 0x43
 800d426:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20000050 	.word	0x20000050

0800d438 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	220a      	movs	r2, #10
 800d444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d446:	4b03      	ldr	r3, [pc, #12]	@ (800d454 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	2000000c 	.word	0x2000000c

0800d458 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d468:	2303      	movs	r3, #3
 800d46a:	e009      	b.n	800d480 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	33b0      	adds	r3, #176	@ 0xb0
 800d476:	009b      	lsls	r3, r3, #2
 800d478:	4413      	add	r3, r2
 800d47a:	683a      	ldr	r2, [r7, #0]
 800d47c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b087      	sub	sp, #28
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	32b0      	adds	r2, #176	@ 0xb0
 800d4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e008      	b.n	800d4c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	687a      	ldr	r2, [r7, #4]
 800d4be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	32b0      	adds	r2, #176	@ 0xb0
 800d4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e004      	b.n	800d4fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
	...

0800d50c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	32b0      	adds	r2, #176	@ 0xb0
 800d51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d522:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d524:	2301      	movs	r3, #1
 800d526:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d52e:	2303      	movs	r3, #3
 800d530:	e025      	b.n	800d57e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d11f      	bne.n	800d57c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2201      	movs	r2, #1
 800d540:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d544:	4b10      	ldr	r3, [pc, #64]	@ (800d588 <USBD_CDC_TransmitPacket+0x7c>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	f003 020f 	and.w	r2, r3, #15
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	4613      	mov	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	009b      	lsls	r3, r3, #2
 800d55c:	4403      	add	r3, r0
 800d55e:	3314      	adds	r3, #20
 800d560:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d562:	4b09      	ldr	r3, [pc, #36]	@ (800d588 <USBD_CDC_TransmitPacket+0x7c>)
 800d564:	7819      	ldrb	r1, [r3, #0]
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f00f fec1 	bl	801d2fa <USBD_LL_Transmit>

    ret = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	20000093 	.word	0x20000093

0800d58c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	32b0      	adds	r2, #176	@ 0xb0
 800d59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	32b0      	adds	r2, #176	@ 0xb0
 800d5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d101      	bne.n	800d5ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e018      	b.n	800d5ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	7c1b      	ldrb	r3, [r3, #16]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d10a      	bne.n	800d5d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d5f4 <USBD_CDC_ReceivePacket+0x68>)
 800d5c4:	7819      	ldrb	r1, [r3, #0]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f00f feb3 	bl	801d33c <USBD_LL_PrepareReceive>
 800d5d6:	e008      	b.n	800d5ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d5d8:	4b06      	ldr	r3, [pc, #24]	@ (800d5f4 <USBD_CDC_ReceivePacket+0x68>)
 800d5da:	7819      	ldrb	r1, [r3, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d5e2:	2340      	movs	r3, #64	@ 0x40
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f00f fea9 	bl	801d33c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5ea:	2300      	movs	r3, #0
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	20000094 	.word	0x20000094

0800d5f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	4613      	mov	r3, r2
 800d604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d101      	bne.n	800d610 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d60c:	2303      	movs	r3, #3
 800d60e:	e01f      	b.n	800d650 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2200      	movs	r2, #0
 800d614:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	79fa      	ldrb	r2, [r7, #7]
 800d642:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f00f fd23 	bl	801d090 <USBD_LL_Init>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3718      	adds	r7, #24
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b084      	sub	sp, #16
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d662:	2300      	movs	r3, #0
 800d664:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e025      	b.n	800d6bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	32ae      	adds	r2, #174	@ 0xae
 800d682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00f      	beq.n	800d6ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	32ae      	adds	r2, #174	@ 0xae
 800d696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d69c:	f107 020e 	add.w	r2, r7, #14
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	4798      	blx	r3
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d6ba:	2300      	movs	r3, #0
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}

0800d6c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f00f fd2b 	bl	801d128 <USBD_LL_Start>
 800d6d2:	4603      	mov	r3, r0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	370c      	adds	r7, #12
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f0:	4770      	bx	lr

0800d6f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b084      	sub	sp, #16
 800d6f6:	af00      	add	r7, sp, #0
 800d6f8:	6078      	str	r0, [r7, #4]
 800d6fa:	460b      	mov	r3, r1
 800d6fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d009      	beq.n	800d720 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	4611      	mov	r1, r2
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	4798      	blx	r3
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	460b      	mov	r3, r1
 800d734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	78fa      	ldrb	r2, [r7, #3]
 800d744:	4611      	mov	r1, r2
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	4798      	blx	r3
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d750:	2303      	movs	r3, #3
 800d752:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d754:	7bfb      	ldrb	r3, [r7, #15]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b084      	sub	sp, #16
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d76e:	6839      	ldr	r1, [r7, #0]
 800d770:	4618      	mov	r0, r3
 800d772:	f001 f922 	bl	800e9ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d784:	461a      	mov	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d792:	f003 031f 	and.w	r3, r3, #31
 800d796:	2b02      	cmp	r3, #2
 800d798:	d01a      	beq.n	800d7d0 <USBD_LL_SetupStage+0x72>
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d822      	bhi.n	800d7e4 <USBD_LL_SetupStage+0x86>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d002      	beq.n	800d7a8 <USBD_LL_SetupStage+0x4a>
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d00a      	beq.n	800d7bc <USBD_LL_SetupStage+0x5e>
 800d7a6:	e01d      	b.n	800d7e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fb77 	bl	800dea4 <USBD_StdDevReq>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ba:	e020      	b.n	800d7fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 fbdf 	bl	800df88 <USBD_StdItfReq>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ce:	e016      	b.n	800d7fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fc41 	bl	800e060 <USBD_StdEPReq>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d7e2:	e00c      	b.n	800d7fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d7ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f00f fcf8 	bl	801d1e8 <USBD_LL_StallEP>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d7fc:	bf00      	nop
  }

  return ret;
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b086      	sub	sp, #24
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	460b      	mov	r3, r1
 800d812:	607a      	str	r2, [r7, #4]
 800d814:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d81a:	7afb      	ldrb	r3, [r7, #11]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d177      	bne.n	800d910 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d82e:	2b03      	cmp	r3, #3
 800d830:	f040 80a1 	bne.w	800d976 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	8992      	ldrh	r2, [r2, #12]
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d91c      	bls.n	800d87a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	693a      	ldr	r2, [r7, #16]
 800d846:	8992      	ldrh	r2, [r2, #12]
 800d848:	1a9a      	subs	r2, r3, r2
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	8992      	ldrh	r2, [r2, #12]
 800d856:	441a      	add	r2, r3
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6919      	ldr	r1, [r3, #16]
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	899b      	ldrh	r3, [r3, #12]
 800d864:	461a      	mov	r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	4293      	cmp	r3, r2
 800d86c:	bf38      	it	cc
 800d86e:	4613      	movcc	r3, r2
 800d870:	461a      	mov	r2, r3
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f001 f9a8 	bl	800ebc8 <USBD_CtlContinueRx>
 800d878:	e07d      	b.n	800d976 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d880:	f003 031f 	and.w	r3, r3, #31
 800d884:	2b02      	cmp	r3, #2
 800d886:	d014      	beq.n	800d8b2 <USBD_LL_DataOutStage+0xaa>
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d81d      	bhi.n	800d8c8 <USBD_LL_DataOutStage+0xc0>
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <USBD_LL_DataOutStage+0x8e>
 800d890:	2b01      	cmp	r3, #1
 800d892:	d003      	beq.n	800d89c <USBD_LL_DataOutStage+0x94>
 800d894:	e018      	b.n	800d8c8 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	75bb      	strb	r3, [r7, #22]
            break;
 800d89a:	e018      	b.n	800d8ce <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fa6e 	bl	800dd88 <USBD_CoreFindIF>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75bb      	strb	r3, [r7, #22]
            break;
 800d8b0:	e00d      	b.n	800d8ce <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f000 fa70 	bl	800dda2 <USBD_CoreFindEP>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	75bb      	strb	r3, [r7, #22]
            break;
 800d8c6:	e002      	b.n	800d8ce <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d8cc:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d8ce:	7dbb      	ldrb	r3, [r7, #22]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d119      	bne.n	800d908 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d113      	bne.n	800d908 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d8e0:	7dba      	ldrb	r2, [r7, #22]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	32ae      	adds	r2, #174	@ 0xae
 800d8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00b      	beq.n	800d908 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800d8f0:	7dba      	ldrb	r2, [r7, #22]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d8f8:	7dba      	ldrb	r2, [r7, #22]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	32ae      	adds	r2, #174	@ 0xae
 800d8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	68f8      	ldr	r0, [r7, #12]
 800d906:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f001 f96e 	bl	800ebea <USBD_CtlSendStatus>
 800d90e:	e032      	b.n	800d976 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d910:	7afb      	ldrb	r3, [r7, #11]
 800d912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d916:	b2db      	uxtb	r3, r3
 800d918:	4619      	mov	r1, r3
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 fa41 	bl	800dda2 <USBD_CoreFindEP>
 800d920:	4603      	mov	r3, r0
 800d922:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d924:	7dbb      	ldrb	r3, [r7, #22]
 800d926:	2bff      	cmp	r3, #255	@ 0xff
 800d928:	d025      	beq.n	800d976 <USBD_LL_DataOutStage+0x16e>
 800d92a:	7dbb      	ldrb	r3, [r7, #22]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d122      	bne.n	800d976 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d117      	bne.n	800d96c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d93c:	7dba      	ldrb	r2, [r7, #22]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	32ae      	adds	r2, #174	@ 0xae
 800d942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00f      	beq.n	800d96c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800d94c:	7dba      	ldrb	r2, [r7, #22]
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d954:	7dba      	ldrb	r2, [r7, #22]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	32ae      	adds	r2, #174	@ 0xae
 800d95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d95e:	699b      	ldr	r3, [r3, #24]
 800d960:	7afa      	ldrb	r2, [r7, #11]
 800d962:	4611      	mov	r1, r2
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	4798      	blx	r3
 800d968:	4603      	mov	r3, r0
 800d96a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d96c:	7dfb      	ldrb	r3, [r7, #23]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d001      	beq.n	800d976 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	e000      	b.n	800d978 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	460b      	mov	r3, r1
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800d98e:	7afb      	ldrb	r3, [r7, #11]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d178      	bne.n	800da86 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	3314      	adds	r3, #20
 800d998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d163      	bne.n	800da6c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	8992      	ldrh	r2, [r2, #12]
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d91c      	bls.n	800d9ea <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	8992      	ldrh	r2, [r2, #12]
 800d9b8:	1a9a      	subs	r2, r3, r2
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	8992      	ldrh	r2, [r2, #12]
 800d9c6:	441a      	add	r2, r3
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	6919      	ldr	r1, [r3, #16]
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	68f8      	ldr	r0, [r7, #12]
 800d9d8:	f001 f8c4 	bl	800eb64 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9dc:	2300      	movs	r3, #0
 800d9de:	2200      	movs	r2, #0
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f00f fcaa 	bl	801d33c <USBD_LL_PrepareReceive>
 800d9e8:	e040      	b.n	800da6c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	899b      	ldrh	r3, [r3, #12]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d11c      	bne.n	800da32 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800da00:	4293      	cmp	r3, r2
 800da02:	d316      	bcc.n	800da32 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da0e:	429a      	cmp	r2, r3
 800da10:	d20f      	bcs.n	800da32 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da12:	2200      	movs	r2, #0
 800da14:	2100      	movs	r1, #0
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f001 f8a4 	bl	800eb64 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da24:	2300      	movs	r3, #0
 800da26:	2200      	movs	r2, #0
 800da28:	2100      	movs	r1, #0
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f00f fc86 	bl	801d33c <USBD_LL_PrepareReceive>
 800da30:	e01c      	b.n	800da6c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b03      	cmp	r3, #3
 800da3c:	d10f      	bne.n	800da5e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d009      	beq.n	800da5e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800da5e:	2180      	movs	r1, #128	@ 0x80
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f00f fbc1 	bl	801d1e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f001 f8d2 	bl	800ec10 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d03a      	beq.n	800daec <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f7ff fe30 	bl	800d6dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2200      	movs	r2, #0
 800da80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800da84:	e032      	b.n	800daec <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800da86:	7afb      	ldrb	r3, [r7, #11]
 800da88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	4619      	mov	r1, r3
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f986 	bl	800dda2 <USBD_CoreFindEP>
 800da96:	4603      	mov	r3, r0
 800da98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da9a:	7dfb      	ldrb	r3, [r7, #23]
 800da9c:	2bff      	cmp	r3, #255	@ 0xff
 800da9e:	d025      	beq.n	800daec <USBD_LL_DataInStage+0x16c>
 800daa0:	7dfb      	ldrb	r3, [r7, #23]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d122      	bne.n	800daec <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daac:	b2db      	uxtb	r3, r3
 800daae:	2b03      	cmp	r3, #3
 800dab0:	d11c      	bne.n	800daec <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dab2:	7dfa      	ldrb	r2, [r7, #23]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	32ae      	adds	r2, #174	@ 0xae
 800dab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d014      	beq.n	800daec <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800dac2:	7dfa      	ldrb	r2, [r7, #23]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800daca:	7dfa      	ldrb	r2, [r7, #23]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	32ae      	adds	r2, #174	@ 0xae
 800dad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	7afa      	ldrb	r2, [r7, #11]
 800dad8:	4611      	mov	r1, r2
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	4798      	blx	r3
 800dade:	4603      	mov	r3, r0
 800dae0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dae2:	7dbb      	ldrb	r3, [r7, #22]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800dae8:	7dbb      	ldrb	r3, [r7, #22]
 800daea:	e000      	b.n	800daee <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3718      	adds	r7, #24
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b084      	sub	sp, #16
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2200      	movs	r2, #0
 800db0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d014      	beq.n	800db5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00e      	beq.n	800db5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	6852      	ldr	r2, [r2, #4]
 800db4a:	b2d2      	uxtb	r2, r2
 800db4c:	4611      	mov	r1, r2
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	4798      	blx	r3
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800db58:	2303      	movs	r3, #3
 800db5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db5c:	2340      	movs	r3, #64	@ 0x40
 800db5e:	2200      	movs	r2, #0
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f00f fafb 	bl	801d15e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2240      	movs	r2, #64	@ 0x40
 800db74:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db78:	2340      	movs	r3, #64	@ 0x40
 800db7a:	2200      	movs	r2, #0
 800db7c:	2180      	movs	r1, #128	@ 0x80
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f00f faed 	bl	801d15e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2240      	movs	r2, #64	@ 0x40
 800db90:	841a      	strh	r2, [r3, #32]

  return ret;
 800db92:	7bfb      	ldrb	r3, [r7, #15]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	78fa      	ldrb	r2, [r7, #3]
 800dbac:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dbae:	2300      	movs	r3, #0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b04      	cmp	r3, #4
 800dbce:	d006      	beq.n	800dbde <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2204      	movs	r2, #4
 800dbe2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b04      	cmp	r3, #4
 800dc06:	d106      	bne.n	800dc16 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800dc16:	2300      	movs	r3, #0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d110      	bne.n	800dc5a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00b      	beq.n	800dc5a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc48:	69db      	ldr	r3, [r3, #28]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d005      	beq.n	800dc5a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	32ae      	adds	r2, #174	@ 0xae
 800dc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d101      	bne.n	800dc86 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc82:	2303      	movs	r3, #3
 800dc84:	e01c      	b.n	800dcc0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b03      	cmp	r3, #3
 800dc90:	d115      	bne.n	800dcbe <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	32ae      	adds	r2, #174	@ 0xae
 800dc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00b      	beq.n	800dcbe <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	32ae      	adds	r2, #174	@ 0xae
 800dcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	78fa      	ldrb	r2, [r7, #3]
 800dcb8:	4611      	mov	r1, r2
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	32ae      	adds	r2, #174	@ 0xae
 800dcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e01c      	b.n	800dd24 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d115      	bne.n	800dd22 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	32ae      	adds	r2, #174	@ 0xae
 800dd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00b      	beq.n	800dd22 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	32ae      	adds	r2, #174	@ 0xae
 800dd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1a:	78fa      	ldrb	r2, [r7, #3]
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	370c      	adds	r7, #12
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b084      	sub	sp, #16
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00e      	beq.n	800dd7e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6852      	ldr	r2, [r2, #4]
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	4611      	mov	r1, r2
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	4798      	blx	r3
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d001      	beq.n	800dd7e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dd7a:	2303      	movs	r3, #3
 800dd7c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	460b      	mov	r3, r1
 800dd92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dda2:	b480      	push	{r7}
 800dda4:	b083      	sub	sp, #12
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	460b      	mov	r3, r1
 800ddac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ddae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	885b      	ldrh	r3, [r3, #2]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	7812      	ldrb	r2, [r2, #0]
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d91f      	bls.n	800de22 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dde8:	e013      	b.n	800de12 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ddea:	f107 030a 	add.w	r3, r7, #10
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6978      	ldr	r0, [r7, #20]
 800ddf2:	f000 f81b 	bl	800de2c <USBD_GetNextDesc>
 800ddf6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	785b      	ldrb	r3, [r3, #1]
 800ddfc:	2b05      	cmp	r3, #5
 800ddfe:	d108      	bne.n	800de12 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	789b      	ldrb	r3, [r3, #2]
 800de08:	78fa      	ldrb	r2, [r7, #3]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d008      	beq.n	800de20 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800de0e:	2300      	movs	r3, #0
 800de10:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	b29a      	uxth	r2, r3
 800de18:	897b      	ldrh	r3, [r7, #10]
 800de1a:	429a      	cmp	r2, r3
 800de1c:	d8e5      	bhi.n	800ddea <USBD_GetEpDesc+0x2e>
 800de1e:	e000      	b.n	800de22 <USBD_GetEpDesc+0x66>
          break;
 800de20:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800de22:	693b      	ldr	r3, [r7, #16]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3718      	adds	r7, #24
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	4413      	add	r3, r2
 800de44:	b29a      	uxth	r2, r3
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4413      	add	r3, r2
 800de54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800de56:	68fb      	ldr	r3, [r7, #12]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800de64:	b480      	push	{r7}
 800de66:	b087      	sub	sp, #28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	3301      	adds	r3, #1
 800de7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800de82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800de86:	021b      	lsls	r3, r3, #8
 800de88:	b21a      	sxth	r2, r3
 800de8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800de8e:	4313      	orrs	r3, r2
 800de90:	b21b      	sxth	r3, r3
 800de92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800de94:	89fb      	ldrh	r3, [r7, #14]
}
 800de96:	4618      	mov	r0, r3
 800de98:	371c      	adds	r7, #28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
	...

0800dea4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800deae:	2300      	movs	r3, #0
 800deb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800deba:	2b40      	cmp	r3, #64	@ 0x40
 800debc:	d005      	beq.n	800deca <USBD_StdDevReq+0x26>
 800debe:	2b40      	cmp	r3, #64	@ 0x40
 800dec0:	d857      	bhi.n	800df72 <USBD_StdDevReq+0xce>
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00f      	beq.n	800dee6 <USBD_StdDevReq+0x42>
 800dec6:	2b20      	cmp	r3, #32
 800dec8:	d153      	bne.n	800df72 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	32ae      	adds	r2, #174	@ 0xae
 800ded4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	4798      	blx	r3
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]
      break;
 800dee4:	e04a      	b.n	800df7c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	785b      	ldrb	r3, [r3, #1]
 800deea:	2b09      	cmp	r3, #9
 800deec:	d83b      	bhi.n	800df66 <USBD_StdDevReq+0xc2>
 800deee:	a201      	add	r2, pc, #4	@ (adr r2, 800def4 <USBD_StdDevReq+0x50>)
 800def0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800def4:	0800df49 	.word	0x0800df49
 800def8:	0800df5d 	.word	0x0800df5d
 800defc:	0800df67 	.word	0x0800df67
 800df00:	0800df53 	.word	0x0800df53
 800df04:	0800df67 	.word	0x0800df67
 800df08:	0800df27 	.word	0x0800df27
 800df0c:	0800df1d 	.word	0x0800df1d
 800df10:	0800df67 	.word	0x0800df67
 800df14:	0800df3f 	.word	0x0800df3f
 800df18:	0800df31 	.word	0x0800df31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800df1c:	6839      	ldr	r1, [r7, #0]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 fa3e 	bl	800e3a0 <USBD_GetDescriptor>
          break;
 800df24:	e024      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fba3 	bl	800e674 <USBD_SetAddress>
          break;
 800df2e:	e01f      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 fbe2 	bl	800e6fc <USBD_SetConfig>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
          break;
 800df3c:	e018      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fc85 	bl	800e850 <USBD_GetConfig>
          break;
 800df46:	e013      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fcb6 	bl	800e8bc <USBD_GetStatus>
          break;
 800df50:	e00e      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800df52:	6839      	ldr	r1, [r7, #0]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 fce5 	bl	800e924 <USBD_SetFeature>
          break;
 800df5a:	e009      	b.n	800df70 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 fd09 	bl	800e976 <USBD_ClrFeature>
          break;
 800df64:	e004      	b.n	800df70 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800df66:	6839      	ldr	r1, [r7, #0]
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f000 fd60 	bl	800ea2e <USBD_CtlError>
          break;
 800df6e:	bf00      	nop
      }
      break;
 800df70:	e004      	b.n	800df7c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fd5a 	bl	800ea2e <USBD_CtlError>
      break;
 800df7a:	bf00      	nop
  }

  return ret;
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop

0800df88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800df9e:	2b40      	cmp	r3, #64	@ 0x40
 800dfa0:	d005      	beq.n	800dfae <USBD_StdItfReq+0x26>
 800dfa2:	2b40      	cmp	r3, #64	@ 0x40
 800dfa4:	d852      	bhi.n	800e04c <USBD_StdItfReq+0xc4>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d001      	beq.n	800dfae <USBD_StdItfReq+0x26>
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d14e      	bne.n	800e04c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	2b02      	cmp	r3, #2
 800dfba:	d840      	bhi.n	800e03e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	889b      	ldrh	r3, [r3, #4]
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d836      	bhi.n	800e034 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	889b      	ldrh	r3, [r3, #4]
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff feda 	bl	800dd88 <USBD_CoreFindIF>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	2bff      	cmp	r3, #255	@ 0xff
 800dfdc:	d01d      	beq.n	800e01a <USBD_StdItfReq+0x92>
 800dfde:	7bbb      	ldrb	r3, [r7, #14]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11a      	bne.n	800e01a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dfe4:	7bba      	ldrb	r2, [r7, #14]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	32ae      	adds	r2, #174	@ 0xae
 800dfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00f      	beq.n	800e014 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dff4:	7bba      	ldrb	r2, [r7, #14]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dffc:	7bba      	ldrb	r2, [r7, #14]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	32ae      	adds	r2, #174	@ 0xae
 800e002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e006:	689b      	ldr	r3, [r3, #8]
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	4798      	blx	r3
 800e00e:	4603      	mov	r3, r0
 800e010:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e012:	e004      	b.n	800e01e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e014:	2303      	movs	r3, #3
 800e016:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e018:	e001      	b.n	800e01e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e01a:	2303      	movs	r3, #3
 800e01c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	88db      	ldrh	r3, [r3, #6]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d110      	bne.n	800e048 <USBD_StdItfReq+0xc0>
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10d      	bne.n	800e048 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fddc 	bl	800ebea <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e032:	e009      	b.n	800e048 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fcf9 	bl	800ea2e <USBD_CtlError>
          break;
 800e03c:	e004      	b.n	800e048 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fcf4 	bl	800ea2e <USBD_CtlError>
          break;
 800e046:	e000      	b.n	800e04a <USBD_StdItfReq+0xc2>
          break;
 800e048:	bf00      	nop
      }
      break;
 800e04a:	e004      	b.n	800e056 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e04c:	6839      	ldr	r1, [r7, #0]
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fced 	bl	800ea2e <USBD_CtlError>
      break;
 800e054:	bf00      	nop
  }

  return ret;
 800e056:	7bfb      	ldrb	r3, [r7, #15]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	889b      	ldrh	r3, [r3, #4]
 800e072:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e07c:	2b40      	cmp	r3, #64	@ 0x40
 800e07e:	d007      	beq.n	800e090 <USBD_StdEPReq+0x30>
 800e080:	2b40      	cmp	r3, #64	@ 0x40
 800e082:	f200 8181 	bhi.w	800e388 <USBD_StdEPReq+0x328>
 800e086:	2b00      	cmp	r3, #0
 800e088:	d02a      	beq.n	800e0e0 <USBD_StdEPReq+0x80>
 800e08a:	2b20      	cmp	r3, #32
 800e08c:	f040 817c 	bne.w	800e388 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f7ff fe84 	bl	800dda2 <USBD_CoreFindEP>
 800e09a:	4603      	mov	r3, r0
 800e09c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e09e:	7b7b      	ldrb	r3, [r7, #13]
 800e0a0:	2bff      	cmp	r3, #255	@ 0xff
 800e0a2:	f000 8176 	beq.w	800e392 <USBD_StdEPReq+0x332>
 800e0a6:	7b7b      	ldrb	r3, [r7, #13]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f040 8172 	bne.w	800e392 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800e0ae:	7b7a      	ldrb	r2, [r7, #13]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e0b6:	7b7a      	ldrb	r2, [r7, #13]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	32ae      	adds	r2, #174	@ 0xae
 800e0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f000 8165 	beq.w	800e392 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e0c8:	7b7a      	ldrb	r2, [r7, #13]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	32ae      	adds	r2, #174	@ 0xae
 800e0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0d2:	689b      	ldr	r3, [r3, #8]
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	4798      	blx	r3
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e0de:	e158      	b.n	800e392 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	785b      	ldrb	r3, [r3, #1]
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d008      	beq.n	800e0fa <USBD_StdEPReq+0x9a>
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	f300 8147 	bgt.w	800e37c <USBD_StdEPReq+0x31c>
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f000 809b 	beq.w	800e22a <USBD_StdEPReq+0x1ca>
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d03c      	beq.n	800e172 <USBD_StdEPReq+0x112>
 800e0f8:	e140      	b.n	800e37c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b02      	cmp	r3, #2
 800e104:	d002      	beq.n	800e10c <USBD_StdEPReq+0xac>
 800e106:	2b03      	cmp	r3, #3
 800e108:	d016      	beq.n	800e138 <USBD_StdEPReq+0xd8>
 800e10a:	e02c      	b.n	800e166 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00d      	beq.n	800e12e <USBD_StdEPReq+0xce>
 800e112:	7bbb      	ldrb	r3, [r7, #14]
 800e114:	2b80      	cmp	r3, #128	@ 0x80
 800e116:	d00a      	beq.n	800e12e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e118:	7bbb      	ldrb	r3, [r7, #14]
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f00f f863 	bl	801d1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e122:	2180      	movs	r1, #128	@ 0x80
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f00f f85f 	bl	801d1e8 <USBD_LL_StallEP>
 800e12a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e12c:	e020      	b.n	800e170 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f000 fc7c 	bl	800ea2e <USBD_CtlError>
              break;
 800e136:	e01b      	b.n	800e170 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	885b      	ldrh	r3, [r3, #2]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d10e      	bne.n	800e15e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e140:	7bbb      	ldrb	r3, [r7, #14]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d00b      	beq.n	800e15e <USBD_StdEPReq+0xfe>
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b80      	cmp	r3, #128	@ 0x80
 800e14a:	d008      	beq.n	800e15e <USBD_StdEPReq+0xfe>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	88db      	ldrh	r3, [r3, #6]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d104      	bne.n	800e15e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e154:	7bbb      	ldrb	r3, [r7, #14]
 800e156:	4619      	mov	r1, r3
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f00f f845 	bl	801d1e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fd43 	bl	800ebea <USBD_CtlSendStatus>

              break;
 800e164:	e004      	b.n	800e170 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e166:	6839      	ldr	r1, [r7, #0]
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 fc60 	bl	800ea2e <USBD_CtlError>
              break;
 800e16e:	bf00      	nop
          }
          break;
 800e170:	e109      	b.n	800e386 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e178:	b2db      	uxtb	r3, r3
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d002      	beq.n	800e184 <USBD_StdEPReq+0x124>
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d016      	beq.n	800e1b0 <USBD_StdEPReq+0x150>
 800e182:	e04b      	b.n	800e21c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e184:	7bbb      	ldrb	r3, [r7, #14]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00d      	beq.n	800e1a6 <USBD_StdEPReq+0x146>
 800e18a:	7bbb      	ldrb	r3, [r7, #14]
 800e18c:	2b80      	cmp	r3, #128	@ 0x80
 800e18e:	d00a      	beq.n	800e1a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e190:	7bbb      	ldrb	r3, [r7, #14]
 800e192:	4619      	mov	r1, r3
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f00f f827 	bl	801d1e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e19a:	2180      	movs	r1, #128	@ 0x80
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f00f f823 	bl	801d1e8 <USBD_LL_StallEP>
 800e1a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1a4:	e040      	b.n	800e228 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fc40 	bl	800ea2e <USBD_CtlError>
              break;
 800e1ae:	e03b      	b.n	800e228 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	885b      	ldrh	r3, [r3, #2]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d136      	bne.n	800e226 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e1b8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d004      	beq.n	800e1cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e1c2:	7bbb      	ldrb	r3, [r7, #14]
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f00f f82d 	bl	801d226 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fd0c 	bl	800ebea <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1d2:	7bbb      	ldrb	r3, [r7, #14]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7ff fde3 	bl	800dda2 <USBD_CoreFindEP>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1e0:	7b7b      	ldrb	r3, [r7, #13]
 800e1e2:	2bff      	cmp	r3, #255	@ 0xff
 800e1e4:	d01f      	beq.n	800e226 <USBD_StdEPReq+0x1c6>
 800e1e6:	7b7b      	ldrb	r3, [r7, #13]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d11c      	bne.n	800e226 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e1ec:	7b7a      	ldrb	r2, [r7, #13]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e1f4:	7b7a      	ldrb	r2, [r7, #13]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	32ae      	adds	r2, #174	@ 0xae
 800e1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d010      	beq.n	800e226 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e204:	7b7a      	ldrb	r2, [r7, #13]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	32ae      	adds	r2, #174	@ 0xae
 800e20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e21a:	e004      	b.n	800e226 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fc05 	bl	800ea2e <USBD_CtlError>
              break;
 800e224:	e000      	b.n	800e228 <USBD_StdEPReq+0x1c8>
              break;
 800e226:	bf00      	nop
          }
          break;
 800e228:	e0ad      	b.n	800e386 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b02      	cmp	r3, #2
 800e234:	d002      	beq.n	800e23c <USBD_StdEPReq+0x1dc>
 800e236:	2b03      	cmp	r3, #3
 800e238:	d033      	beq.n	800e2a2 <USBD_StdEPReq+0x242>
 800e23a:	e099      	b.n	800e370 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e23c:	7bbb      	ldrb	r3, [r7, #14]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d007      	beq.n	800e252 <USBD_StdEPReq+0x1f2>
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b80      	cmp	r3, #128	@ 0x80
 800e246:	d004      	beq.n	800e252 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 fbef 	bl	800ea2e <USBD_CtlError>
                break;
 800e250:	e093      	b.n	800e37a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e256:	2b00      	cmp	r3, #0
 800e258:	da0b      	bge.n	800e272 <USBD_StdEPReq+0x212>
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e260:	4613      	mov	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	4413      	add	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	3310      	adds	r3, #16
 800e26a:	687a      	ldr	r2, [r7, #4]
 800e26c:	4413      	add	r3, r2
 800e26e:	3304      	adds	r3, #4
 800e270:	e00b      	b.n	800e28a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	4413      	add	r3, r2
 800e288:	3304      	adds	r3, #4
 800e28a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2200      	movs	r2, #0
 800e290:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	330e      	adds	r3, #14
 800e296:	2202      	movs	r2, #2
 800e298:	4619      	mov	r1, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fc44 	bl	800eb28 <USBD_CtlSendData>
              break;
 800e2a0:	e06b      	b.n	800e37a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e2a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	da11      	bge.n	800e2ce <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e2aa:	7bbb      	ldrb	r3, [r7, #14]
 800e2ac:	f003 020f 	and.w	r2, r3, #15
 800e2b0:	6879      	ldr	r1, [r7, #4]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	440b      	add	r3, r1
 800e2bc:	3323      	adds	r3, #35	@ 0x23
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d117      	bne.n	800e2f4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fbb1 	bl	800ea2e <USBD_CtlError>
                  break;
 800e2cc:	e055      	b.n	800e37a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e2ce:	7bbb      	ldrb	r3, [r7, #14]
 800e2d0:	f003 020f 	and.w	r2, r3, #15
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4413      	add	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	440b      	add	r3, r1
 800e2e0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d104      	bne.n	800e2f4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fb9e 	bl	800ea2e <USBD_CtlError>
                  break;
 800e2f2:	e042      	b.n	800e37a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	da0b      	bge.n	800e314 <USBD_StdEPReq+0x2b4>
 800e2fc:	7bbb      	ldrb	r3, [r7, #14]
 800e2fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	3310      	adds	r3, #16
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	4413      	add	r3, r2
 800e310:	3304      	adds	r3, #4
 800e312:	e00b      	b.n	800e32c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e314:	7bbb      	ldrb	r3, [r7, #14]
 800e316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	4413      	add	r3, r2
 800e32a:	3304      	adds	r3, #4
 800e32c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <USBD_StdEPReq+0x2da>
 800e334:	7bbb      	ldrb	r3, [r7, #14]
 800e336:	2b80      	cmp	r3, #128	@ 0x80
 800e338:	d103      	bne.n	800e342 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2200      	movs	r2, #0
 800e33e:	739a      	strb	r2, [r3, #14]
 800e340:	e00e      	b.n	800e360 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f00e ff8c 	bl	801d264 <USBD_LL_IsStallEP>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d003      	beq.n	800e35a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	2201      	movs	r2, #1
 800e356:	739a      	strb	r2, [r3, #14]
 800e358:	e002      	b.n	800e360 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2200      	movs	r2, #0
 800e35e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	330e      	adds	r3, #14
 800e364:	2202      	movs	r2, #2
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 fbdd 	bl	800eb28 <USBD_CtlSendData>
              break;
 800e36e:	e004      	b.n	800e37a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800e370:	6839      	ldr	r1, [r7, #0]
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fb5b 	bl	800ea2e <USBD_CtlError>
              break;
 800e378:	bf00      	nop
          }
          break;
 800e37a:	e004      	b.n	800e386 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800e37c:	6839      	ldr	r1, [r7, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fb55 	bl	800ea2e <USBD_CtlError>
          break;
 800e384:	bf00      	nop
      }
      break;
 800e386:	e005      	b.n	800e394 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb4f 	bl	800ea2e <USBD_CtlError>
      break;
 800e390:	e000      	b.n	800e394 <USBD_StdEPReq+0x334>
      break;
 800e392:	bf00      	nop
  }

  return ret;
 800e394:	7bfb      	ldrb	r3, [r7, #15]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
	...

0800e3a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	885b      	ldrh	r3, [r3, #2]
 800e3ba:	0a1b      	lsrs	r3, r3, #8
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	2b06      	cmp	r3, #6
 800e3c2:	f200 8128 	bhi.w	800e616 <USBD_GetDescriptor+0x276>
 800e3c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e3cc <USBD_GetDescriptor+0x2c>)
 800e3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3cc:	0800e3e9 	.word	0x0800e3e9
 800e3d0:	0800e401 	.word	0x0800e401
 800e3d4:	0800e441 	.word	0x0800e441
 800e3d8:	0800e617 	.word	0x0800e617
 800e3dc:	0800e617 	.word	0x0800e617
 800e3e0:	0800e5b7 	.word	0x0800e5b7
 800e3e4:	0800e5e3 	.word	0x0800e5e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	7c12      	ldrb	r2, [r2, #16]
 800e3f4:	f107 0108 	add.w	r1, r7, #8
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	4798      	blx	r3
 800e3fc:	60f8      	str	r0, [r7, #12]
      break;
 800e3fe:	e112      	b.n	800e626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	7c1b      	ldrb	r3, [r3, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10d      	bne.n	800e424 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e410:	f107 0208 	add.w	r2, r7, #8
 800e414:	4610      	mov	r0, r2
 800e416:	4798      	blx	r3
 800e418:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3301      	adds	r3, #1
 800e41e:	2202      	movs	r2, #2
 800e420:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e422:	e100      	b.n	800e626 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42c:	f107 0208 	add.w	r2, r7, #8
 800e430:	4610      	mov	r0, r2
 800e432:	4798      	blx	r3
 800e434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	3301      	adds	r3, #1
 800e43a:	2202      	movs	r2, #2
 800e43c:	701a      	strb	r2, [r3, #0]
      break;
 800e43e:	e0f2      	b.n	800e626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	885b      	ldrh	r3, [r3, #2]
 800e444:	b2db      	uxtb	r3, r3
 800e446:	2b05      	cmp	r3, #5
 800e448:	f200 80ac 	bhi.w	800e5a4 <USBD_GetDescriptor+0x204>
 800e44c:	a201      	add	r2, pc, #4	@ (adr r2, 800e454 <USBD_GetDescriptor+0xb4>)
 800e44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e452:	bf00      	nop
 800e454:	0800e46d 	.word	0x0800e46d
 800e458:	0800e4a1 	.word	0x0800e4a1
 800e45c:	0800e4d5 	.word	0x0800e4d5
 800e460:	0800e509 	.word	0x0800e509
 800e464:	0800e53d 	.word	0x0800e53d
 800e468:	0800e571 	.word	0x0800e571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00b      	beq.n	800e490 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e47e:	685b      	ldr	r3, [r3, #4]
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	7c12      	ldrb	r2, [r2, #16]
 800e484:	f107 0108 	add.w	r1, r7, #8
 800e488:	4610      	mov	r0, r2
 800e48a:	4798      	blx	r3
 800e48c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e48e:	e091      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e490:	6839      	ldr	r1, [r7, #0]
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 facb 	bl	800ea2e <USBD_CtlError>
            err++;
 800e498:	7afb      	ldrb	r3, [r7, #11]
 800e49a:	3301      	adds	r3, #1
 800e49c:	72fb      	strb	r3, [r7, #11]
          break;
 800e49e:	e089      	b.n	800e5b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4a6:	689b      	ldr	r3, [r3, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d00b      	beq.n	800e4c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	7c12      	ldrb	r2, [r2, #16]
 800e4b8:	f107 0108 	add.w	r1, r7, #8
 800e4bc:	4610      	mov	r0, r2
 800e4be:	4798      	blx	r3
 800e4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4c2:	e077      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fab1 	bl	800ea2e <USBD_CtlError>
            err++;
 800e4cc:	7afb      	ldrb	r3, [r7, #11]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4d2:	e06f      	b.n	800e5b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00b      	beq.n	800e4f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	7c12      	ldrb	r2, [r2, #16]
 800e4ec:	f107 0108 	add.w	r1, r7, #8
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4798      	blx	r3
 800e4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4f6:	e05d      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fa97 	bl	800ea2e <USBD_CtlError>
            err++;
 800e500:	7afb      	ldrb	r3, [r7, #11]
 800e502:	3301      	adds	r3, #1
 800e504:	72fb      	strb	r3, [r7, #11]
          break;
 800e506:	e055      	b.n	800e5b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e50e:	691b      	ldr	r3, [r3, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00b      	beq.n	800e52c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e51a:	691b      	ldr	r3, [r3, #16]
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	7c12      	ldrb	r2, [r2, #16]
 800e520:	f107 0108 	add.w	r1, r7, #8
 800e524:	4610      	mov	r0, r2
 800e526:	4798      	blx	r3
 800e528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e52a:	e043      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fa7d 	bl	800ea2e <USBD_CtlError>
            err++;
 800e534:	7afb      	ldrb	r3, [r7, #11]
 800e536:	3301      	adds	r3, #1
 800e538:	72fb      	strb	r3, [r7, #11]
          break;
 800e53a:	e03b      	b.n	800e5b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00b      	beq.n	800e560 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	7c12      	ldrb	r2, [r2, #16]
 800e554:	f107 0108 	add.w	r1, r7, #8
 800e558:	4610      	mov	r0, r2
 800e55a:	4798      	blx	r3
 800e55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e55e:	e029      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e560:	6839      	ldr	r1, [r7, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 fa63 	bl	800ea2e <USBD_CtlError>
            err++;
 800e568:	7afb      	ldrb	r3, [r7, #11]
 800e56a:	3301      	adds	r3, #1
 800e56c:	72fb      	strb	r3, [r7, #11]
          break;
 800e56e:	e021      	b.n	800e5b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e576:	699b      	ldr	r3, [r3, #24]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d00b      	beq.n	800e594 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e582:	699b      	ldr	r3, [r3, #24]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	7c12      	ldrb	r2, [r2, #16]
 800e588:	f107 0108 	add.w	r1, r7, #8
 800e58c:	4610      	mov	r0, r2
 800e58e:	4798      	blx	r3
 800e590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e592:	e00f      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e594:	6839      	ldr	r1, [r7, #0]
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fa49 	bl	800ea2e <USBD_CtlError>
            err++;
 800e59c:	7afb      	ldrb	r3, [r7, #11]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e5a2:	e007      	b.n	800e5b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fa41 	bl	800ea2e <USBD_CtlError>
          err++;
 800e5ac:	7afb      	ldrb	r3, [r7, #11]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e5b2:	bf00      	nop
      }
      break;
 800e5b4:	e037      	b.n	800e626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	7c1b      	ldrb	r3, [r3, #16]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d109      	bne.n	800e5d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5c6:	f107 0208 	add.w	r2, r7, #8
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	4798      	blx	r3
 800e5ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5d0:	e029      	b.n	800e626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e5d2:	6839      	ldr	r1, [r7, #0]
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 fa2a 	bl	800ea2e <USBD_CtlError>
        err++;
 800e5da:	7afb      	ldrb	r3, [r7, #11]
 800e5dc:	3301      	adds	r3, #1
 800e5de:	72fb      	strb	r3, [r7, #11]
      break;
 800e5e0:	e021      	b.n	800e626 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	7c1b      	ldrb	r3, [r3, #16]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10d      	bne.n	800e606 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f2:	f107 0208 	add.w	r2, r7, #8
 800e5f6:	4610      	mov	r0, r2
 800e5f8:	4798      	blx	r3
 800e5fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	3301      	adds	r3, #1
 800e600:	2207      	movs	r2, #7
 800e602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e604:	e00f      	b.n	800e626 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e606:	6839      	ldr	r1, [r7, #0]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fa10 	bl	800ea2e <USBD_CtlError>
        err++;
 800e60e:	7afb      	ldrb	r3, [r7, #11]
 800e610:	3301      	adds	r3, #1
 800e612:	72fb      	strb	r3, [r7, #11]
      break;
 800e614:	e007      	b.n	800e626 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e616:	6839      	ldr	r1, [r7, #0]
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fa08 	bl	800ea2e <USBD_CtlError>
      err++;
 800e61e:	7afb      	ldrb	r3, [r7, #11]
 800e620:	3301      	adds	r3, #1
 800e622:	72fb      	strb	r3, [r7, #11]
      break;
 800e624:	bf00      	nop
  }

  if (err != 0U)
 800e626:	7afb      	ldrb	r3, [r7, #11]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d11e      	bne.n	800e66a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	88db      	ldrh	r3, [r3, #6]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d016      	beq.n	800e662 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e634:	893b      	ldrh	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d00e      	beq.n	800e658 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	88da      	ldrh	r2, [r3, #6]
 800e63e:	893b      	ldrh	r3, [r7, #8]
 800e640:	4293      	cmp	r3, r2
 800e642:	bf28      	it	cs
 800e644:	4613      	movcs	r3, r2
 800e646:	b29b      	uxth	r3, r3
 800e648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e64a:	893b      	ldrh	r3, [r7, #8]
 800e64c:	461a      	mov	r2, r3
 800e64e:	68f9      	ldr	r1, [r7, #12]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 fa69 	bl	800eb28 <USBD_CtlSendData>
 800e656:	e009      	b.n	800e66c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f000 f9e7 	bl	800ea2e <USBD_CtlError>
 800e660:	e004      	b.n	800e66c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f000 fac1 	bl	800ebea <USBD_CtlSendStatus>
 800e668:	e000      	b.n	800e66c <USBD_GetDescriptor+0x2cc>
    return;
 800e66a:	bf00      	nop
  }
}
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop

0800e674 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	889b      	ldrh	r3, [r3, #4]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d131      	bne.n	800e6ea <USBD_SetAddress+0x76>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	88db      	ldrh	r3, [r3, #6]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d12d      	bne.n	800e6ea <USBD_SetAddress+0x76>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	885b      	ldrh	r3, [r3, #2]
 800e692:	2b7f      	cmp	r3, #127	@ 0x7f
 800e694:	d829      	bhi.n	800e6ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	885b      	ldrh	r3, [r3, #2]
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d104      	bne.n	800e6b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e6ae:	6839      	ldr	r1, [r7, #0]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f9bc 	bl	800ea2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6b6:	e01d      	b.n	800e6f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7bfa      	ldrb	r2, [r7, #15]
 800e6bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f00e fdf9 	bl	801d2bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fa8d 	bl	800ebea <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e6d0:	7bfb      	ldrb	r3, [r7, #15]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d004      	beq.n	800e6e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2202      	movs	r2, #2
 800e6da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6de:	e009      	b.n	800e6f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e8:	e004      	b.n	800e6f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f99e 	bl	800ea2e <USBD_CtlError>
  }
}
 800e6f2:	bf00      	nop
 800e6f4:	bf00      	nop
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e706:	2300      	movs	r3, #0
 800e708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	885b      	ldrh	r3, [r3, #2]
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	4b4e      	ldr	r3, [pc, #312]	@ (800e84c <USBD_SetConfig+0x150>)
 800e712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e714:	4b4d      	ldr	r3, [pc, #308]	@ (800e84c <USBD_SetConfig+0x150>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d905      	bls.n	800e728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f985 	bl	800ea2e <USBD_CtlError>
    return USBD_FAIL;
 800e724:	2303      	movs	r3, #3
 800e726:	e08c      	b.n	800e842 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b02      	cmp	r3, #2
 800e732:	d002      	beq.n	800e73a <USBD_SetConfig+0x3e>
 800e734:	2b03      	cmp	r3, #3
 800e736:	d029      	beq.n	800e78c <USBD_SetConfig+0x90>
 800e738:	e075      	b.n	800e826 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e73a:	4b44      	ldr	r3, [pc, #272]	@ (800e84c <USBD_SetConfig+0x150>)
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d020      	beq.n	800e784 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e742:	4b42      	ldr	r3, [pc, #264]	@ (800e84c <USBD_SetConfig+0x150>)
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	461a      	mov	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e74c:	4b3f      	ldr	r3, [pc, #252]	@ (800e84c <USBD_SetConfig+0x150>)
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	4619      	mov	r1, r3
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7fe ffcd 	bl	800d6f2 <USBD_SetClassConfig>
 800e758:	4603      	mov	r3, r0
 800e75a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d008      	beq.n	800e774 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e762:	6839      	ldr	r1, [r7, #0]
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f962 	bl	800ea2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2202      	movs	r2, #2
 800e76e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e772:	e065      	b.n	800e840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 fa38 	bl	800ebea <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2203      	movs	r2, #3
 800e77e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e782:	e05d      	b.n	800e840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f000 fa30 	bl	800ebea <USBD_CtlSendStatus>
      break;
 800e78a:	e059      	b.n	800e840 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e78c:	4b2f      	ldr	r3, [pc, #188]	@ (800e84c <USBD_SetConfig+0x150>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d112      	bne.n	800e7ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2202      	movs	r2, #2
 800e798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e79c:	4b2b      	ldr	r3, [pc, #172]	@ (800e84c <USBD_SetConfig+0x150>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7a6:	4b29      	ldr	r3, [pc, #164]	@ (800e84c <USBD_SetConfig+0x150>)
 800e7a8:	781b      	ldrb	r3, [r3, #0]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7fe ffbc 	bl	800d72a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fa19 	bl	800ebea <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e7b8:	e042      	b.n	800e840 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e7ba:	4b24      	ldr	r3, [pc, #144]	@ (800e84c <USBD_SetConfig+0x150>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d02a      	beq.n	800e81e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7fe ffaa 	bl	800d72a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800e84c <USBD_SetConfig+0x150>)
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800e84c <USBD_SetConfig+0x150>)
 800e7e2:	781b      	ldrb	r3, [r3, #0]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f7fe ff83 	bl	800d6f2 <USBD_SetClassConfig>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7f0:	7bfb      	ldrb	r3, [r7, #15]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00f      	beq.n	800e816 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f918 	bl	800ea2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	b2db      	uxtb	r3, r3
 800e804:	4619      	mov	r1, r3
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f7fe ff8f 	bl	800d72a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2202      	movs	r2, #2
 800e810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e814:	e014      	b.n	800e840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f000 f9e7 	bl	800ebea <USBD_CtlSendStatus>
      break;
 800e81c:	e010      	b.n	800e840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f9e3 	bl	800ebea <USBD_CtlSendStatus>
      break;
 800e824:	e00c      	b.n	800e840 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e826:	6839      	ldr	r1, [r7, #0]
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 f900 	bl	800ea2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e82e:	4b07      	ldr	r3, [pc, #28]	@ (800e84c <USBD_SetConfig+0x150>)
 800e830:	781b      	ldrb	r3, [r3, #0]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f7fe ff78 	bl	800d72a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e83a:	2303      	movs	r3, #3
 800e83c:	73fb      	strb	r3, [r7, #15]
      break;
 800e83e:	bf00      	nop
  }

  return ret;
 800e840:	7bfb      	ldrb	r3, [r7, #15]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	200054f4 	.word	0x200054f4

0800e850 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b082      	sub	sp, #8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
 800e858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	88db      	ldrh	r3, [r3, #6]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d004      	beq.n	800e86c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f8e2 	bl	800ea2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e86a:	e023      	b.n	800e8b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b02      	cmp	r3, #2
 800e876:	dc02      	bgt.n	800e87e <USBD_GetConfig+0x2e>
 800e878:	2b00      	cmp	r3, #0
 800e87a:	dc03      	bgt.n	800e884 <USBD_GetConfig+0x34>
 800e87c:	e015      	b.n	800e8aa <USBD_GetConfig+0x5a>
 800e87e:	2b03      	cmp	r3, #3
 800e880:	d00b      	beq.n	800e89a <USBD_GetConfig+0x4a>
 800e882:	e012      	b.n	800e8aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3308      	adds	r3, #8
 800e88e:	2201      	movs	r2, #1
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f948 	bl	800eb28 <USBD_CtlSendData>
        break;
 800e898:	e00c      	b.n	800e8b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	3304      	adds	r3, #4
 800e89e:	2201      	movs	r2, #1
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 f940 	bl	800eb28 <USBD_CtlSendData>
        break;
 800e8a8:	e004      	b.n	800e8b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f8be 	bl	800ea2e <USBD_CtlError>
        break;
 800e8b2:	bf00      	nop
}
 800e8b4:	bf00      	nop
 800e8b6:	3708      	adds	r7, #8
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	2b02      	cmp	r3, #2
 800e8d2:	d81e      	bhi.n	800e912 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	88db      	ldrh	r3, [r3, #6]
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d004      	beq.n	800e8e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f000 f8a5 	bl	800ea2e <USBD_CtlError>
        break;
 800e8e4:	e01a      	b.n	800e91c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d005      	beq.n	800e902 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f043 0202 	orr.w	r2, r3, #2
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	330c      	adds	r3, #12
 800e906:	2202      	movs	r2, #2
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f000 f90c 	bl	800eb28 <USBD_CtlSendData>
      break;
 800e910:	e004      	b.n	800e91c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f88a 	bl	800ea2e <USBD_CtlError>
      break;
 800e91a:	bf00      	nop
  }
}
 800e91c:	bf00      	nop
 800e91e:	3708      	adds	r7, #8
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	885b      	ldrh	r3, [r3, #2]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d107      	bne.n	800e946 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f953 	bl	800ebea <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e944:	e013      	b.n	800e96e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	885b      	ldrh	r3, [r3, #2]
 800e94a:	2b02      	cmp	r3, #2
 800e94c:	d10b      	bne.n	800e966 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	889b      	ldrh	r3, [r3, #4]
 800e952:	0a1b      	lsrs	r3, r3, #8
 800e954:	b29b      	uxth	r3, r3
 800e956:	b2da      	uxtb	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 f943 	bl	800ebea <USBD_CtlSendStatus>
}
 800e964:	e003      	b.n	800e96e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 f860 	bl	800ea2e <USBD_CtlError>
}
 800e96e:	bf00      	nop
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b082      	sub	sp, #8
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e986:	b2db      	uxtb	r3, r3
 800e988:	3b01      	subs	r3, #1
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d80b      	bhi.n	800e9a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	885b      	ldrh	r3, [r3, #2]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d10c      	bne.n	800e9b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2200      	movs	r2, #0
 800e99a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f923 	bl	800ebea <USBD_CtlSendStatus>
      }
      break;
 800e9a4:	e004      	b.n	800e9b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 f840 	bl	800ea2e <USBD_CtlError>
      break;
 800e9ae:	e000      	b.n	800e9b2 <USBD_ClrFeature+0x3c>
      break;
 800e9b0:	bf00      	nop
  }
}
 800e9b2:	bf00      	nop
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b084      	sub	sp, #16
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	781a      	ldrb	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	781a      	ldrb	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f7ff fa3d 	bl	800de64 <SWAPBYTE>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3301      	adds	r3, #1
 800e9f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fa30 	bl	800de64 <SWAPBYTE>
 800ea04:	4603      	mov	r3, r0
 800ea06:	461a      	mov	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	3301      	adds	r3, #1
 800ea16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ea18:	68f8      	ldr	r0, [r7, #12]
 800ea1a:	f7ff fa23 	bl	800de64 <SWAPBYTE>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	461a      	mov	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	80da      	strh	r2, [r3, #6]
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b082      	sub	sp, #8
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
 800ea36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea38:	2180      	movs	r1, #128	@ 0x80
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f00e fbd4 	bl	801d1e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ea40:	2100      	movs	r1, #0
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f00e fbd0 	bl	801d1e8 <USBD_LL_StallEP>
}
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b086      	sub	sp, #24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d042      	beq.n	800eaec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ea6a:	6938      	ldr	r0, [r7, #16]
 800ea6c:	f000 f842 	bl	800eaf4 <USBD_GetLen>
 800ea70:	4603      	mov	r3, r0
 800ea72:	3301      	adds	r3, #1
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ea7a:	d808      	bhi.n	800ea8e <USBD_GetString+0x3e>
 800ea7c:	6938      	ldr	r0, [r7, #16]
 800ea7e:	f000 f839 	bl	800eaf4 <USBD_GetLen>
 800ea82:	4603      	mov	r3, r0
 800ea84:	3301      	adds	r3, #1
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	e001      	b.n	800ea92 <USBD_GetString+0x42>
 800ea8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	68ba      	ldr	r2, [r7, #8]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	7812      	ldrb	r2, [r2, #0]
 800eaa0:	701a      	strb	r2, [r3, #0]
  idx++;
 800eaa2:	7dfb      	ldrb	r3, [r7, #23]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	4413      	add	r3, r2
 800eaae:	2203      	movs	r2, #3
 800eab0:	701a      	strb	r2, [r3, #0]
  idx++;
 800eab2:	7dfb      	ldrb	r3, [r7, #23]
 800eab4:	3301      	adds	r3, #1
 800eab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eab8:	e013      	b.n	800eae2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	68ba      	ldr	r2, [r7, #8]
 800eabe:	4413      	add	r3, r2
 800eac0:	693a      	ldr	r2, [r7, #16]
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	3301      	adds	r3, #1
 800eaca:	613b      	str	r3, [r7, #16]
    idx++;
 800eacc:	7dfb      	ldrb	r3, [r7, #23]
 800eace:	3301      	adds	r3, #1
 800ead0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	4413      	add	r3, r2
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
    idx++;
 800eadc:	7dfb      	ldrb	r3, [r7, #23]
 800eade:	3301      	adds	r3, #1
 800eae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e7      	bne.n	800eaba <USBD_GetString+0x6a>
 800eaea:	e000      	b.n	800eaee <USBD_GetString+0x9e>
    return;
 800eaec:	bf00      	nop
  }
}
 800eaee:	3718      	adds	r7, #24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b085      	sub	sp, #20
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800eafc:	2300      	movs	r3, #0
 800eafe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eb04:	e005      	b.n	800eb12 <USBD_GetLen+0x1e>
  {
    len++;
 800eb06:	7bfb      	ldrb	r3, [r7, #15]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1f5      	bne.n	800eb06 <USBD_GetLen+0x12>
  }

  return len;
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2202      	movs	r2, #2
 800eb38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	2100      	movs	r1, #0
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f00e fbd0 	bl	801d2fa <USBD_LL_Transmit>

  return USBD_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	60f8      	str	r0, [r7, #12]
 800eb6c:	60b9      	str	r1, [r7, #8]
 800eb6e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	2100      	movs	r1, #0
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f00e fbbf 	bl	801d2fa <USBD_LL_Transmit>

  return USBD_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	60b9      	str	r1, [r7, #8]
 800eb90:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2203      	movs	r2, #3
 800eb96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	68f8      	ldr	r0, [r7, #12]
 800ebba:	f00e fbbf 	bl	801d33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	68ba      	ldr	r2, [r7, #8]
 800ebd8:	2100      	movs	r1, #0
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f00e fbae 	bl	801d33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b082      	sub	sp, #8
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2204      	movs	r2, #4
 800ebf6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f00e fb7a 	bl	801d2fa <USBD_LL_Transmit>

  return USBD_OK;
 800ec06:	2300      	movs	r3, #0
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2205      	movs	r2, #5
 800ec1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec20:	2300      	movs	r3, #0
 800ec22:	2200      	movs	r2, #0
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f00e fb88 	bl	801d33c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec2c:	2300      	movs	r3, #0
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3708      	adds	r7, #8
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b085      	sub	sp, #20
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ec40:	2300      	movs	r3, #0
 800ec42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ec44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ec48:	2b84      	cmp	r3, #132	@ 0x84
 800ec4a:	d005      	beq.n	800ec58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ec4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4413      	add	r3, r2
 800ec54:	3303      	adds	r3, #3
 800ec56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ec58:	68fb      	ldr	r3, [r7, #12]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b083      	sub	sp, #12
 800ec6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6c:	f3ef 8305 	mrs	r3, IPSR
 800ec70:	607b      	str	r3, [r7, #4]
  return(result);
 800ec72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bf14      	ite	ne
 800ec78:	2301      	movne	r3, #1
 800ec7a:	2300      	moveq	r3, #0
 800ec7c:	b2db      	uxtb	r3, r3
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ec8e:	f001 fc95 	bl	80105bc <vTaskStartScheduler>
  
  return osOK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ec9c:	f7ff ffe3 	bl	800ec66 <inHandlerMode>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800eca6:	f001 fdaf 	bl	8010808 <xTaskGetTickCountFromISR>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	e002      	b.n	800ecb4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ecae:	f001 fd9b 	bl	80107e8 <xTaskGetTickCount>
 800ecb2:	4603      	mov	r3, r0
  }
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	bd80      	pop	{r7, pc}

0800ecb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ecb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecba:	b089      	sub	sp, #36	@ 0x24
 800ecbc:	af04      	add	r7, sp, #16
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d020      	beq.n	800ed0c <osThreadCreate+0x54>
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d01c      	beq.n	800ed0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685c      	ldr	r4, [r3, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691e      	ldr	r6, [r3, #16]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7ff ffa6 	bl	800ec36 <makeFreeRtosPriority>
 800ecea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	687a      	ldr	r2, [r7, #4]
 800ecf2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ecf4:	9202      	str	r2, [sp, #8]
 800ecf6:	9301      	str	r3, [sp, #4]
 800ecf8:	9100      	str	r1, [sp, #0]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	4632      	mov	r2, r6
 800ecfe:	4629      	mov	r1, r5
 800ed00:	4620      	mov	r0, r4
 800ed02:	f001 fa75 	bl	80101f0 <xTaskCreateStatic>
 800ed06:	4603      	mov	r3, r0
 800ed08:	60fb      	str	r3, [r7, #12]
 800ed0a:	e01c      	b.n	800ed46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	685c      	ldr	r4, [r3, #4]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff ff88 	bl	800ec36 <makeFreeRtosPriority>
 800ed26:	4602      	mov	r2, r0
 800ed28:	f107 030c 	add.w	r3, r7, #12
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	9200      	str	r2, [sp, #0]
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	4632      	mov	r2, r6
 800ed34:	4629      	mov	r1, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	f001 faba 	bl	80102b0 <xTaskCreate>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d001      	beq.n	800ed46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ed42:	2300      	movs	r3, #0
 800ed44:	e000      	b.n	800ed48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ed46:	68fb      	ldr	r3, [r7, #12]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3714      	adds	r7, #20
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d001      	beq.n	800ed66 <osDelay+0x16>
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	e000      	b.n	800ed68 <osDelay+0x18>
 800ed66:	2301      	movs	r3, #1
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f001 fbf1 	bl	8010550 <vTaskDelay>
  
  return osOK;
 800ed6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3710      	adds	r7, #16
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	2001      	movs	r0, #1
 800ed90:	f000 fc47 	bl	800f622 <xQueueCreateMutexStatic>
 800ed94:	4603      	mov	r3, r0
 800ed96:	e003      	b.n	800eda0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ed98:	2001      	movs	r0, #1
 800ed9a:	f000 fc2a 	bl	800f5f2 <xQueueCreateMutex>
 800ed9e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3708      	adds	r7, #8
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800edb2:	2300      	movs	r3, #0
 800edb4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d101      	bne.n	800edc0 <osMutexWait+0x18>
    return osErrorParameter;
 800edbc:	2380      	movs	r3, #128	@ 0x80
 800edbe:	e03a      	b.n	800ee36 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800edc0:	2300      	movs	r3, #0
 800edc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edca:	d103      	bne.n	800edd4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800edcc:	f04f 33ff 	mov.w	r3, #4294967295
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	e009      	b.n	800ede8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d006      	beq.n	800ede8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <osMutexWait+0x40>
      ticks = 1;
 800ede4:	2301      	movs	r3, #1
 800ede6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ede8:	f7ff ff3d 	bl	800ec66 <inHandlerMode>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d017      	beq.n	800ee22 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	461a      	mov	r2, r3
 800edf8:	2100      	movs	r1, #0
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f001 f84e 	bl	800fe9c <xQueueReceiveFromISR>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d001      	beq.n	800ee0a <osMutexWait+0x62>
      return osErrorOS;
 800ee06:	23ff      	movs	r3, #255	@ 0xff
 800ee08:	e015      	b.n	800ee36 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d011      	beq.n	800ee34 <osMutexWait+0x8c>
 800ee10:	4b0b      	ldr	r3, [pc, #44]	@ (800ee40 <osMutexWait+0x98>)
 800ee12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee16:	601a      	str	r2, [r3, #0]
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	f3bf 8f6f 	isb	sy
 800ee20:	e008      	b.n	800ee34 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ee22:	68f9      	ldr	r1, [r7, #12]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 ff29 	bl	800fc7c <xQueueSemaphoreTake>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d001      	beq.n	800ee34 <osMutexWait+0x8c>
    return osErrorOS;
 800ee30:	23ff      	movs	r3, #255	@ 0xff
 800ee32:	e000      	b.n	800ee36 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	e000ed04 	.word	0xe000ed04

0800ee44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ee50:	2300      	movs	r3, #0
 800ee52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ee54:	f7ff ff07 	bl	800ec66 <inHandlerMode>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d016      	beq.n	800ee8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ee5e:	f107 0308 	add.w	r3, r7, #8
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 fd97 	bl	800f998 <xQueueGiveFromISR>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d001      	beq.n	800ee74 <osMutexRelease+0x30>
      return osErrorOS;
 800ee70:	23ff      	movs	r3, #255	@ 0xff
 800ee72:	e017      	b.n	800eea4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d013      	beq.n	800eea2 <osMutexRelease+0x5e>
 800ee7a:	4b0c      	ldr	r3, [pc, #48]	@ (800eeac <osMutexRelease+0x68>)
 800ee7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	e00a      	b.n	800eea2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2100      	movs	r1, #0
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 fbe0 	bl	800f658 <xQueueGenericSend>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d001      	beq.n	800eea2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ee9e:	23ff      	movs	r3, #255	@ 0xff
 800eea0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800eea2:	68fb      	ldr	r3, [r7, #12]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3710      	adds	r7, #16
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	e000ed04 	.word	0xe000ed04

0800eeb0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b086      	sub	sp, #24
 800eeb4:	af02      	add	r7, sp, #8
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d00f      	beq.n	800eee2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	d10a      	bne.n	800eede <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	685b      	ldr	r3, [r3, #4]
 800eecc:	2203      	movs	r2, #3
 800eece:	9200      	str	r2, [sp, #0]
 800eed0:	2200      	movs	r2, #0
 800eed2:	2100      	movs	r1, #0
 800eed4:	2001      	movs	r0, #1
 800eed6:	f000 fa9b 	bl	800f410 <xQueueGenericCreateStatic>
 800eeda:	4603      	mov	r3, r0
 800eedc:	e016      	b.n	800ef0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	e014      	b.n	800ef0c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d110      	bne.n	800ef0a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800eee8:	2203      	movs	r2, #3
 800eeea:	2100      	movs	r1, #0
 800eeec:	2001      	movs	r0, #1
 800eeee:	f000 fb0c 	bl	800f50a <xQueueGenericCreate>
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d005      	beq.n	800ef06 <osSemaphoreCreate+0x56>
 800eefa:	2300      	movs	r3, #0
 800eefc:	2200      	movs	r2, #0
 800eefe:	2100      	movs	r1, #0
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 fba9 	bl	800f658 <xQueueGenericSend>
      return sema;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	e000      	b.n	800ef0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ef0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}

0800ef14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b084      	sub	sp, #16
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ef1e:	2300      	movs	r3, #0
 800ef20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d101      	bne.n	800ef2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ef28:	2380      	movs	r3, #128	@ 0x80
 800ef2a:	e03a      	b.n	800efa2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef36:	d103      	bne.n	800ef40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ef38:	f04f 33ff 	mov.w	r3, #4294967295
 800ef3c:	60fb      	str	r3, [r7, #12]
 800ef3e:	e009      	b.n	800ef54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d006      	beq.n	800ef54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <osSemaphoreWait+0x40>
      ticks = 1;
 800ef50:	2301      	movs	r3, #1
 800ef52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ef54:	f7ff fe87 	bl	800ec66 <inHandlerMode>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d017      	beq.n	800ef8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ef5e:	f107 0308 	add.w	r3, r7, #8
 800ef62:	461a      	mov	r2, r3
 800ef64:	2100      	movs	r1, #0
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 ff98 	bl	800fe9c <xQueueReceiveFromISR>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d001      	beq.n	800ef76 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ef72:	23ff      	movs	r3, #255	@ 0xff
 800ef74:	e015      	b.n	800efa2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d011      	beq.n	800efa0 <osSemaphoreWait+0x8c>
 800ef7c:	4b0b      	ldr	r3, [pc, #44]	@ (800efac <osSemaphoreWait+0x98>)
 800ef7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef82:	601a      	str	r2, [r3, #0]
 800ef84:	f3bf 8f4f 	dsb	sy
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	e008      	b.n	800efa0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ef8e:	68f9      	ldr	r1, [r7, #12]
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 fe73 	bl	800fc7c <xQueueSemaphoreTake>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d001      	beq.n	800efa0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ef9c:	23ff      	movs	r3, #255	@ 0xff
 800ef9e:	e000      	b.n	800efa2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800efa0:	2300      	movs	r3, #0
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	e000ed04 	.word	0xe000ed04

0800efb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800efb8:	2300      	movs	r3, #0
 800efba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800efbc:	2300      	movs	r3, #0
 800efbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800efc0:	f7ff fe51 	bl	800ec66 <inHandlerMode>
 800efc4:	4603      	mov	r3, r0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d016      	beq.n	800eff8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800efca:	f107 0308 	add.w	r3, r7, #8
 800efce:	4619      	mov	r1, r3
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fce1 	bl	800f998 <xQueueGiveFromISR>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d001      	beq.n	800efe0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800efdc:	23ff      	movs	r3, #255	@ 0xff
 800efde:	e017      	b.n	800f010 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d013      	beq.n	800f00e <osSemaphoreRelease+0x5e>
 800efe6:	4b0c      	ldr	r3, [pc, #48]	@ (800f018 <osSemaphoreRelease+0x68>)
 800efe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efec:	601a      	str	r2, [r3, #0]
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	e00a      	b.n	800f00e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800eff8:	2300      	movs	r3, #0
 800effa:	2200      	movs	r2, #0
 800effc:	2100      	movs	r1, #0
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 fb2a 	bl	800f658 <xQueueGenericSend>
 800f004:	4603      	mov	r3, r0
 800f006:	2b01      	cmp	r3, #1
 800f008:	d001      	beq.n	800f00e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f00a:	23ff      	movs	r3, #255	@ 0xff
 800f00c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f00e:	68fb      	ldr	r3, [r7, #12]
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	e000ed04 	.word	0xe000ed04

0800f01c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f01c:	b590      	push	{r4, r7, lr}
 800f01e:	b085      	sub	sp, #20
 800f020:	af02      	add	r7, sp, #8
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d011      	beq.n	800f052 <osMessageCreate+0x36>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00d      	beq.n	800f052 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6859      	ldr	r1, [r3, #4]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	689a      	ldr	r2, [r3, #8]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	2400      	movs	r4, #0
 800f048:	9400      	str	r4, [sp, #0]
 800f04a:	f000 f9e1 	bl	800f410 <xQueueGenericCreateStatic>
 800f04e:	4603      	mov	r3, r0
 800f050:	e008      	b.n	800f064 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6818      	ldr	r0, [r3, #0]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	4619      	mov	r1, r3
 800f05e:	f000 fa54 	bl	800f50a <xQueueGenericCreate>
 800f062:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f064:	4618      	mov	r0, r3
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd90      	pop	{r4, r7, pc}

0800f06c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b086      	sub	sp, #24
 800f070:	af00      	add	r7, sp, #0
 800f072:	60f8      	str	r0, [r7, #12]
 800f074:	60b9      	str	r1, [r7, #8]
 800f076:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f078:	2300      	movs	r3, #0
 800f07a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d101      	bne.n	800f08a <osMessagePut+0x1e>
    ticks = 1;
 800f086:	2301      	movs	r3, #1
 800f088:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f08a:	f7ff fdec 	bl	800ec66 <inHandlerMode>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d018      	beq.n	800f0c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f094:	f107 0210 	add.w	r2, r7, #16
 800f098:	f107 0108 	add.w	r1, r7, #8
 800f09c:	2300      	movs	r3, #0
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f000 fbdc 	bl	800f85c <xQueueGenericSendFromISR>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d001      	beq.n	800f0ae <osMessagePut+0x42>
      return osErrorOS;
 800f0aa:	23ff      	movs	r3, #255	@ 0xff
 800f0ac:	e018      	b.n	800f0e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d014      	beq.n	800f0de <osMessagePut+0x72>
 800f0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f0e8 <osMessagePut+0x7c>)
 800f0b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0ba:	601a      	str	r2, [r3, #0]
 800f0bc:	f3bf 8f4f 	dsb	sy
 800f0c0:	f3bf 8f6f 	isb	sy
 800f0c4:	e00b      	b.n	800f0de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f0c6:	f107 0108 	add.w	r1, r7, #8
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	697a      	ldr	r2, [r7, #20]
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f000 fac2 	bl	800f658 <xQueueGenericSend>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d001      	beq.n	800f0de <osMessagePut+0x72>
      return osErrorOS;
 800f0da:	23ff      	movs	r3, #255	@ 0xff
 800f0dc:	e000      	b.n	800f0e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f0de:	2300      	movs	r3, #0
}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3718      	adds	r7, #24
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}
 800f0e8:	e000ed04 	.word	0xe000ed04

0800f0ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f0ec:	b590      	push	{r4, r7, lr}
 800f0ee:	b08b      	sub	sp, #44	@ 0x2c
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10a      	bne.n	800f11c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f106:	2380      	movs	r3, #128	@ 0x80
 800f108:	617b      	str	r3, [r7, #20]
    return event;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	461c      	mov	r4, r3
 800f10e:	f107 0314 	add.w	r3, r7, #20
 800f112:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f11a:	e054      	b.n	800f1c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f11c:	2300      	movs	r3, #0
 800f11e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f120:	2300      	movs	r3, #0
 800f122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f12a:	d103      	bne.n	800f134 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	627b      	str	r3, [r7, #36]	@ 0x24
 800f132:	e009      	b.n	800f148 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d006      	beq.n	800f148 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800f13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <osMessageGet+0x5c>
      ticks = 1;
 800f144:	2301      	movs	r3, #1
 800f146:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f148:	f7ff fd8d 	bl	800ec66 <inHandlerMode>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d01c      	beq.n	800f18c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f152:	f107 0220 	add.w	r2, r7, #32
 800f156:	f107 0314 	add.w	r3, r7, #20
 800f15a:	3304      	adds	r3, #4
 800f15c:	4619      	mov	r1, r3
 800f15e:	68b8      	ldr	r0, [r7, #8]
 800f160:	f000 fe9c 	bl	800fe9c <xQueueReceiveFromISR>
 800f164:	4603      	mov	r3, r0
 800f166:	2b01      	cmp	r3, #1
 800f168:	d102      	bne.n	800f170 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f16a:	2310      	movs	r3, #16
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	e001      	b.n	800f174 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f170:	2300      	movs	r3, #0
 800f172:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d01d      	beq.n	800f1b6 <osMessageGet+0xca>
 800f17a:	4b15      	ldr	r3, [pc, #84]	@ (800f1d0 <osMessageGet+0xe4>)
 800f17c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	f3bf 8f6f 	isb	sy
 800f18a:	e014      	b.n	800f1b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f18c:	f107 0314 	add.w	r3, r7, #20
 800f190:	3304      	adds	r3, #4
 800f192:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f194:	4619      	mov	r1, r3
 800f196:	68b8      	ldr	r0, [r7, #8]
 800f198:	f000 fc8e 	bl	800fab8 <xQueueReceive>
 800f19c:	4603      	mov	r3, r0
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d102      	bne.n	800f1a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f1a2:	2310      	movs	r3, #16
 800f1a4:	617b      	str	r3, [r7, #20]
 800f1a6:	e006      	b.n	800f1b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <osMessageGet+0xc6>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e000      	b.n	800f1b4 <osMessageGet+0xc8>
 800f1b2:	2340      	movs	r3, #64	@ 0x40
 800f1b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	f107 0314 	add.w	r3, r7, #20
 800f1be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	372c      	adds	r7, #44	@ 0x2c
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd90      	pop	{r4, r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	e000ed04 	.word	0xe000ed04

0800f1d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f103 0208 	add.w	r2, r3, #8
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f103 0208 	add.w	r2, r3, #8
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f103 0208 	add.w	r2, r3, #8
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2200      	movs	r2, #0
 800f206:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f208:	bf00      	nop
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr

0800f214 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f222:	bf00      	nop
 800f224:	370c      	adds	r7, #12
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr

0800f22e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f22e:	b480      	push	{r7}
 800f230:	b085      	sub	sp, #20
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	689a      	ldr	r2, [r3, #8]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	683a      	ldr	r2, [r7, #0]
 800f252:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	687a      	ldr	r2, [r7, #4]
 800f25e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	1c5a      	adds	r2, r3, #1
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	601a      	str	r2, [r3, #0]
}
 800f26a:	bf00      	nop
 800f26c:	3714      	adds	r7, #20
 800f26e:	46bd      	mov	sp, r7
 800f270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f274:	4770      	bx	lr

0800f276 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f276:	b480      	push	{r7}
 800f278:	b085      	sub	sp, #20
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
 800f27e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28c:	d103      	bne.n	800f296 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	691b      	ldr	r3, [r3, #16]
 800f292:	60fb      	str	r3, [r7, #12]
 800f294:	e00c      	b.n	800f2b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	3308      	adds	r3, #8
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	e002      	b.n	800f2a4 <vListInsert+0x2e>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d2f6      	bcs.n	800f29e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	685a      	ldr	r2, [r3, #4]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	1c5a      	adds	r2, r3, #1
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	601a      	str	r2, [r3, #0]
}
 800f2dc:	bf00      	nop
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b085      	sub	sp, #20
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	6892      	ldr	r2, [r2, #8]
 800f2fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	689b      	ldr	r3, [r3, #8]
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	6852      	ldr	r2, [r2, #4]
 800f308:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	687a      	ldr	r2, [r7, #4]
 800f310:	429a      	cmp	r2, r3
 800f312:	d103      	bne.n	800f31c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	1e5a      	subs	r2, r3, #1
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10b      	bne.n	800f368 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f368:	f002 f8be 	bl	80114e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f374:	68f9      	ldr	r1, [r7, #12]
 800f376:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f378:	fb01 f303 	mul.w	r3, r1, r3
 800f37c:	441a      	add	r2, r3
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f398:	3b01      	subs	r3, #1
 800f39a:	68f9      	ldr	r1, [r7, #12]
 800f39c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f39e:	fb01 f303 	mul.w	r3, r1, r3
 800f3a2:	441a      	add	r2, r3
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	22ff      	movs	r2, #255	@ 0xff
 800f3ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	22ff      	movs	r2, #255	@ 0xff
 800f3b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d114      	bne.n	800f3e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d01a      	beq.n	800f3fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	3310      	adds	r3, #16
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f001 fb72 	bl	8010ab4 <xTaskRemoveFromEventList>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d012      	beq.n	800f3fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f40c <xQueueGenericReset+0xd0>)
 800f3d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3dc:	601a      	str	r2, [r3, #0]
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	e009      	b.n	800f3fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	3310      	adds	r3, #16
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff fef1 	bl	800f1d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	3324      	adds	r3, #36	@ 0x24
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff feec 	bl	800f1d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3fc:	f002 f8a6 	bl	801154c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f400:	2301      	movs	r3, #1
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	e000ed04 	.word	0xe000ed04

0800f410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08e      	sub	sp, #56	@ 0x38
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10b      	bne.n	800f43c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f428:	f383 8811 	msr	BASEPRI, r3
 800f42c:	f3bf 8f6f 	isb	sy
 800f430:	f3bf 8f4f 	dsb	sy
 800f434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	e7fd      	b.n	800f438 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d10b      	bne.n	800f45a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f446:	f383 8811 	msr	BASEPRI, r3
 800f44a:	f3bf 8f6f 	isb	sy
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f454:	bf00      	nop
 800f456:	bf00      	nop
 800f458:	e7fd      	b.n	800f456 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d002      	beq.n	800f466 <xQueueGenericCreateStatic+0x56>
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <xQueueGenericCreateStatic+0x5a>
 800f466:	2301      	movs	r3, #1
 800f468:	e000      	b.n	800f46c <xQueueGenericCreateStatic+0x5c>
 800f46a:	2300      	movs	r3, #0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10b      	bne.n	800f488 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	623b      	str	r3, [r7, #32]
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	e7fd      	b.n	800f484 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d102      	bne.n	800f494 <xQueueGenericCreateStatic+0x84>
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d101      	bne.n	800f498 <xQueueGenericCreateStatic+0x88>
 800f494:	2301      	movs	r3, #1
 800f496:	e000      	b.n	800f49a <xQueueGenericCreateStatic+0x8a>
 800f498:	2300      	movs	r3, #0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10b      	bne.n	800f4b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	61fb      	str	r3, [r7, #28]
}
 800f4b0:	bf00      	nop
 800f4b2:	bf00      	nop
 800f4b4:	e7fd      	b.n	800f4b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f4b6:	2348      	movs	r3, #72	@ 0x48
 800f4b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b48      	cmp	r3, #72	@ 0x48
 800f4be:	d00b      	beq.n	800f4d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c4:	f383 8811 	msr	BASEPRI, r3
 800f4c8:	f3bf 8f6f 	isb	sy
 800f4cc:	f3bf 8f4f 	dsb	sy
 800f4d0:	61bb      	str	r3, [r7, #24]
}
 800f4d2:	bf00      	nop
 800f4d4:	bf00      	nop
 800f4d6:	e7fd      	b.n	800f4d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f4d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00d      	beq.n	800f500 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	687a      	ldr	r2, [r7, #4]
 800f4f8:	68b9      	ldr	r1, [r7, #8]
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f000 f840 	bl	800f580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f502:	4618      	mov	r0, r3
 800f504:	3730      	adds	r7, #48	@ 0x30
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}

0800f50a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f50a:	b580      	push	{r7, lr}
 800f50c:	b08a      	sub	sp, #40	@ 0x28
 800f50e:	af02      	add	r7, sp, #8
 800f510:	60f8      	str	r0, [r7, #12]
 800f512:	60b9      	str	r1, [r7, #8]
 800f514:	4613      	mov	r3, r2
 800f516:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10b      	bne.n	800f536 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	613b      	str	r3, [r7, #16]
}
 800f530:	bf00      	nop
 800f532:	bf00      	nop
 800f534:	e7fd      	b.n	800f532 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	fb02 f303 	mul.w	r3, r2, r3
 800f53e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	3348      	adds	r3, #72	@ 0x48
 800f544:	4618      	mov	r0, r3
 800f546:	f002 f8f1 	bl	801172c <pvPortMalloc>
 800f54a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d011      	beq.n	800f576 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f552:	69bb      	ldr	r3, [r7, #24]
 800f554:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	3348      	adds	r3, #72	@ 0x48
 800f55a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	2200      	movs	r2, #0
 800f560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f564:	79fa      	ldrb	r2, [r7, #7]
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	9300      	str	r3, [sp, #0]
 800f56a:	4613      	mov	r3, r2
 800f56c:	697a      	ldr	r2, [r7, #20]
 800f56e:	68b9      	ldr	r1, [r7, #8]
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f000 f805 	bl	800f580 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f576:	69bb      	ldr	r3, [r7, #24]
	}
 800f578:	4618      	mov	r0, r3
 800f57a:	3720      	adds	r7, #32
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}

0800f580 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	60f8      	str	r0, [r7, #12]
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
 800f58c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d103      	bne.n	800f59c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	69ba      	ldr	r2, [r7, #24]
 800f598:	601a      	str	r2, [r3, #0]
 800f59a:	e002      	b.n	800f5a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f5a2:	69bb      	ldr	r3, [r7, #24]
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5ae:	2101      	movs	r1, #1
 800f5b0:	69b8      	ldr	r0, [r7, #24]
 800f5b2:	f7ff fec3 	bl	800f33c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5b6:	bf00      	nop
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00e      	beq.n	800f5ea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5de:	2300      	movs	r3, #0
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f837 	bl	800f658 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b086      	sub	sp, #24
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	617b      	str	r3, [r7, #20]
 800f600:	2300      	movs	r3, #0
 800f602:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	461a      	mov	r2, r3
 800f608:	6939      	ldr	r1, [r7, #16]
 800f60a:	6978      	ldr	r0, [r7, #20]
 800f60c:	f7ff ff7d 	bl	800f50a <xQueueGenericCreate>
 800f610:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f7ff ffd3 	bl	800f5be <prvInitialiseMutex>

		return xNewQueue;
 800f618:	68fb      	ldr	r3, [r7, #12]
	}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3718      	adds	r7, #24
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f622:	b580      	push	{r7, lr}
 800f624:	b088      	sub	sp, #32
 800f626:	af02      	add	r7, sp, #8
 800f628:	4603      	mov	r3, r0
 800f62a:	6039      	str	r1, [r7, #0]
 800f62c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f62e:	2301      	movs	r3, #1
 800f630:	617b      	str	r3, [r7, #20]
 800f632:	2300      	movs	r3, #0
 800f634:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f636:	79fb      	ldrb	r3, [r7, #7]
 800f638:	9300      	str	r3, [sp, #0]
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2200      	movs	r2, #0
 800f63e:	6939      	ldr	r1, [r7, #16]
 800f640:	6978      	ldr	r0, [r7, #20]
 800f642:	f7ff fee5 	bl	800f410 <xQueueGenericCreateStatic>
 800f646:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f648:	68f8      	ldr	r0, [r7, #12]
 800f64a:	f7ff ffb8 	bl	800f5be <prvInitialiseMutex>

		return xNewQueue;
 800f64e:	68fb      	ldr	r3, [r7, #12]
	}
 800f650:	4618      	mov	r0, r3
 800f652:	3718      	adds	r7, #24
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08e      	sub	sp, #56	@ 0x38
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	60f8      	str	r0, [r7, #12]
 800f660:	60b9      	str	r1, [r7, #8]
 800f662:	607a      	str	r2, [r7, #4]
 800f664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f666:	2300      	movs	r3, #0
 800f668:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10b      	bne.n	800f68c <xQueueGenericSend+0x34>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f686:	bf00      	nop
 800f688:	bf00      	nop
 800f68a:	e7fd      	b.n	800f688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d103      	bne.n	800f69a <xQueueGenericSend+0x42>
 800f692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <xQueueGenericSend+0x46>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e000      	b.n	800f6a0 <xQueueGenericSend+0x48>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10b      	bne.n	800f6bc <xQueueGenericSend+0x64>
	__asm volatile
 800f6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f6b6:	bf00      	nop
 800f6b8:	bf00      	nop
 800f6ba:	e7fd      	b.n	800f6b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d103      	bne.n	800f6ca <xQueueGenericSend+0x72>
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	d101      	bne.n	800f6ce <xQueueGenericSend+0x76>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e000      	b.n	800f6d0 <xQueueGenericSend+0x78>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d10b      	bne.n	800f6ec <xQueueGenericSend+0x94>
	__asm volatile
 800f6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	623b      	str	r3, [r7, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	bf00      	nop
 800f6ea:	e7fd      	b.n	800f6e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ec:	f001 fba8 	bl	8010e40 <xTaskGetSchedulerState>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d102      	bne.n	800f6fc <xQueueGenericSend+0xa4>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <xQueueGenericSend+0xa8>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e000      	b.n	800f702 <xQueueGenericSend+0xaa>
 800f700:	2300      	movs	r3, #0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10b      	bne.n	800f71e <xQueueGenericSend+0xc6>
	__asm volatile
 800f706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f70a:	f383 8811 	msr	BASEPRI, r3
 800f70e:	f3bf 8f6f 	isb	sy
 800f712:	f3bf 8f4f 	dsb	sy
 800f716:	61fb      	str	r3, [r7, #28]
}
 800f718:	bf00      	nop
 800f71a:	bf00      	nop
 800f71c:	e7fd      	b.n	800f71a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f71e:	f001 fee3 	bl	80114e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d302      	bcc.n	800f734 <xQueueGenericSend+0xdc>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b02      	cmp	r3, #2
 800f732:	d129      	bne.n	800f788 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f73a:	f000 fc49 	bl	800ffd0 <prvCopyDataToQueue>
 800f73e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	d010      	beq.n	800f76a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74a:	3324      	adds	r3, #36	@ 0x24
 800f74c:	4618      	mov	r0, r3
 800f74e:	f001 f9b1 	bl	8010ab4 <xTaskRemoveFromEventList>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d013      	beq.n	800f780 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f758:	4b3f      	ldr	r3, [pc, #252]	@ (800f858 <xQueueGenericSend+0x200>)
 800f75a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f75e:	601a      	str	r2, [r3, #0]
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	e00a      	b.n	800f780 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d007      	beq.n	800f780 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f770:	4b39      	ldr	r3, [pc, #228]	@ (800f858 <xQueueGenericSend+0x200>)
 800f772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f780:	f001 fee4 	bl	801154c <vPortExitCritical>
				return pdPASS;
 800f784:	2301      	movs	r3, #1
 800f786:	e063      	b.n	800f850 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f78e:	f001 fedd 	bl	801154c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f792:	2300      	movs	r3, #0
 800f794:	e05c      	b.n	800f850 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d106      	bne.n	800f7aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f79c:	f107 0314 	add.w	r3, r7, #20
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f001 f9eb 	bl	8010b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7aa:	f001 fecf 	bl	801154c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7ae:	f000 ff6f 	bl	8010690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7b2:	f001 fe99 	bl	80114e8 <vPortEnterCritical>
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7bc:	b25b      	sxtb	r3, r3
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c2:	d103      	bne.n	800f7cc <xQueueGenericSend+0x174>
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7d2:	b25b      	sxtb	r3, r3
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d103      	bne.n	800f7e2 <xQueueGenericSend+0x18a>
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f7e2:	f001 feb3 	bl	801154c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7e6:	1d3a      	adds	r2, r7, #4
 800f7e8:	f107 0314 	add.w	r3, r7, #20
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f001 f9da 	bl	8010ba8 <xTaskCheckForTimeOut>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d124      	bne.n	800f844 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f7fc:	f000 fce0 	bl	80101c0 <prvIsQueueFull>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d018      	beq.n	800f838 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f808:	3310      	adds	r3, #16
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	4611      	mov	r1, r2
 800f80e:	4618      	mov	r0, r3
 800f810:	f001 f92a 	bl	8010a68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f814:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f816:	f000 fc6b 	bl	80100f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f81a:	f000 ff47 	bl	80106ac <xTaskResumeAll>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	f47f af7c 	bne.w	800f71e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f826:	4b0c      	ldr	r3, [pc, #48]	@ (800f858 <xQueueGenericSend+0x200>)
 800f828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	e772      	b.n	800f71e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f83a:	f000 fc59 	bl	80100f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f83e:	f000 ff35 	bl	80106ac <xTaskResumeAll>
 800f842:	e76c      	b.n	800f71e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f846:	f000 fc53 	bl	80100f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f84a:	f000 ff2f 	bl	80106ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f84e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f850:	4618      	mov	r0, r3
 800f852:	3738      	adds	r7, #56	@ 0x38
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	e000ed04 	.word	0xe000ed04

0800f85c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b090      	sub	sp, #64	@ 0x40
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800f86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10b      	bne.n	800f88c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f886:	bf00      	nop
 800f888:	bf00      	nop
 800f88a:	e7fd      	b.n	800f888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d103      	bne.n	800f89a <xQueueGenericSendFromISR+0x3e>
 800f892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f896:	2b00      	cmp	r3, #0
 800f898:	d101      	bne.n	800f89e <xQueueGenericSendFromISR+0x42>
 800f89a:	2301      	movs	r3, #1
 800f89c:	e000      	b.n	800f8a0 <xQueueGenericSendFromISR+0x44>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d10b      	bne.n	800f8bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f8b6:	bf00      	nop
 800f8b8:	bf00      	nop
 800f8ba:	e7fd      	b.n	800f8b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	d103      	bne.n	800f8ca <xQueueGenericSendFromISR+0x6e>
 800f8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d101      	bne.n	800f8ce <xQueueGenericSendFromISR+0x72>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e000      	b.n	800f8d0 <xQueueGenericSendFromISR+0x74>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10b      	bne.n	800f8ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800f8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	623b      	str	r3, [r7, #32]
}
 800f8e6:	bf00      	nop
 800f8e8:	bf00      	nop
 800f8ea:	e7fd      	b.n	800f8e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8ec:	f001 fedc 	bl	80116a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f8f0:	f3ef 8211 	mrs	r2, BASEPRI
 800f8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8f8:	f383 8811 	msr	BASEPRI, r3
 800f8fc:	f3bf 8f6f 	isb	sy
 800f900:	f3bf 8f4f 	dsb	sy
 800f904:	61fa      	str	r2, [r7, #28]
 800f906:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f908:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f90a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f90e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f914:	429a      	cmp	r2, r3
 800f916:	d302      	bcc.n	800f91e <xQueueGenericSendFromISR+0xc2>
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d12f      	bne.n	800f97e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f924:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	68b9      	ldr	r1, [r7, #8]
 800f932:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f934:	f000 fb4c 	bl	800ffd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f938:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800f93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f940:	d112      	bne.n	800f968 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f946:	2b00      	cmp	r3, #0
 800f948:	d016      	beq.n	800f978 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94c:	3324      	adds	r3, #36	@ 0x24
 800f94e:	4618      	mov	r0, r3
 800f950:	f001 f8b0 	bl	8010ab4 <xTaskRemoveFromEventList>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00e      	beq.n	800f978 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d00b      	beq.n	800f978 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2201      	movs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]
 800f966:	e007      	b.n	800f978 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f96c:	3301      	adds	r3, #1
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	b25a      	sxtb	r2, r3
 800f972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800f978:	2301      	movs	r3, #1
 800f97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800f97c:	e001      	b.n	800f982 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f97e:	2300      	movs	r3, #0
 800f980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f984:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f98c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f98e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f990:	4618      	mov	r0, r3
 800f992:	3740      	adds	r7, #64	@ 0x40
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08e      	sub	sp, #56	@ 0x38
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10b      	bne.n	800f9c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800f9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b0:	f383 8811 	msr	BASEPRI, r3
 800f9b4:	f3bf 8f6f 	isb	sy
 800f9b8:	f3bf 8f4f 	dsb	sy
 800f9bc:	623b      	str	r3, [r7, #32]
}
 800f9be:	bf00      	nop
 800f9c0:	bf00      	nop
 800f9c2:	e7fd      	b.n	800f9c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00b      	beq.n	800f9e4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800f9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	61fb      	str	r3, [r7, #28]
}
 800f9de:	bf00      	nop
 800f9e0:	bf00      	nop
 800f9e2:	e7fd      	b.n	800f9e0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d103      	bne.n	800f9f4 <xQueueGiveFromISR+0x5c>
 800f9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <xQueueGiveFromISR+0x60>
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	e000      	b.n	800f9fa <xQueueGiveFromISR+0x62>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d10b      	bne.n	800fa16 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	f383 8811 	msr	BASEPRI, r3
 800fa06:	f3bf 8f6f 	isb	sy
 800fa0a:	f3bf 8f4f 	dsb	sy
 800fa0e:	61bb      	str	r3, [r7, #24]
}
 800fa10:	bf00      	nop
 800fa12:	bf00      	nop
 800fa14:	e7fd      	b.n	800fa12 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa16:	f001 fe47 	bl	80116a8 <vPortValidateInterruptPriority>
	__asm volatile
 800fa1a:	f3ef 8211 	mrs	r2, BASEPRI
 800fa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa22:	f383 8811 	msr	BASEPRI, r3
 800fa26:	f3bf 8f6f 	isb	sy
 800fa2a:	f3bf 8f4f 	dsb	sy
 800fa2e:	617a      	str	r2, [r7, #20]
 800fa30:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fa32:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa3a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d22b      	bcs.n	800fa9e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fa4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa52:	1c5a      	adds	r2, r3, #1
 800fa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa60:	d112      	bne.n	800fa88 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d016      	beq.n	800fa98 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa6c:	3324      	adds	r3, #36	@ 0x24
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f001 f820 	bl	8010ab4 <xTaskRemoveFromEventList>
 800fa74:	4603      	mov	r3, r0
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00e      	beq.n	800fa98 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00b      	beq.n	800fa98 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	2201      	movs	r2, #1
 800fa84:	601a      	str	r2, [r3, #0]
 800fa86:	e007      	b.n	800fa98 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	b25a      	sxtb	r2, r3
 800fa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa9c:	e001      	b.n	800faa2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800faa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800faa4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f383 8811 	msr	BASEPRI, r3
}
 800faac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800faae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3738      	adds	r7, #56	@ 0x38
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b08c      	sub	sp, #48	@ 0x30
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fac4:	2300      	movs	r3, #0
 800fac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800facc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10b      	bne.n	800faea <xQueueReceive+0x32>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	623b      	str	r3, [r7, #32]
}
 800fae4:	bf00      	nop
 800fae6:	bf00      	nop
 800fae8:	e7fd      	b.n	800fae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d103      	bne.n	800faf8 <xQueueReceive+0x40>
 800faf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d101      	bne.n	800fafc <xQueueReceive+0x44>
 800faf8:	2301      	movs	r3, #1
 800fafa:	e000      	b.n	800fafe <xQueueReceive+0x46>
 800fafc:	2300      	movs	r3, #0
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10b      	bne.n	800fb1a <xQueueReceive+0x62>
	__asm volatile
 800fb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	61fb      	str	r3, [r7, #28]
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop
 800fb18:	e7fd      	b.n	800fb16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb1a:	f001 f991 	bl	8010e40 <xTaskGetSchedulerState>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d102      	bne.n	800fb2a <xQueueReceive+0x72>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d101      	bne.n	800fb2e <xQueueReceive+0x76>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e000      	b.n	800fb30 <xQueueReceive+0x78>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10b      	bne.n	800fb4c <xQueueReceive+0x94>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	61bb      	str	r3, [r7, #24]
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	e7fd      	b.n	800fb48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb4c:	f001 fccc 	bl	80114e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d01f      	beq.n	800fb9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb5c:	68b9      	ldr	r1, [r7, #8]
 800fb5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb60:	f000 faa0 	bl	80100a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb66:	1e5a      	subs	r2, r3, #1
 800fb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00f      	beq.n	800fb94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb76:	3310      	adds	r3, #16
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 ff9b 	bl	8010ab4 <xTaskRemoveFromEventList>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d007      	beq.n	800fb94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb84:	4b3c      	ldr	r3, [pc, #240]	@ (800fc78 <xQueueReceive+0x1c0>)
 800fb86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb94:	f001 fcda 	bl	801154c <vPortExitCritical>
				return pdPASS;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	e069      	b.n	800fc70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d103      	bne.n	800fbaa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fba2:	f001 fcd3 	bl	801154c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fba6:	2300      	movs	r3, #0
 800fba8:	e062      	b.n	800fc70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d106      	bne.n	800fbbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fbb0:	f107 0310 	add.w	r3, r7, #16
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f000 ffe1 	bl	8010b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fbba:	2301      	movs	r3, #1
 800fbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbbe:	f001 fcc5 	bl	801154c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbc2:	f000 fd65 	bl	8010690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbc6:	f001 fc8f 	bl	80114e8 <vPortEnterCritical>
 800fbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fbd0:	b25b      	sxtb	r3, r3
 800fbd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbd6:	d103      	bne.n	800fbe0 <xQueueReceive+0x128>
 800fbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fbe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fbe6:	b25b      	sxtb	r3, r3
 800fbe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbec:	d103      	bne.n	800fbf6 <xQueueReceive+0x13e>
 800fbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fbf6:	f001 fca9 	bl	801154c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbfa:	1d3a      	adds	r2, r7, #4
 800fbfc:	f107 0310 	add.w	r3, r7, #16
 800fc00:	4611      	mov	r1, r2
 800fc02:	4618      	mov	r0, r3
 800fc04:	f000 ffd0 	bl	8010ba8 <xTaskCheckForTimeOut>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d123      	bne.n	800fc56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc10:	f000 fac0 	bl	8010194 <prvIsQueueEmpty>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d017      	beq.n	800fc4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1c:	3324      	adds	r3, #36	@ 0x24
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	4611      	mov	r1, r2
 800fc22:	4618      	mov	r0, r3
 800fc24:	f000 ff20 	bl	8010a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc2a:	f000 fa61 	bl	80100f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc2e:	f000 fd3d 	bl	80106ac <xTaskResumeAll>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d189      	bne.n	800fb4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fc38:	4b0f      	ldr	r3, [pc, #60]	@ (800fc78 <xQueueReceive+0x1c0>)
 800fc3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc3e:	601a      	str	r2, [r3, #0]
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	f3bf 8f6f 	isb	sy
 800fc48:	e780      	b.n	800fb4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fc4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc4c:	f000 fa50 	bl	80100f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc50:	f000 fd2c 	bl	80106ac <xTaskResumeAll>
 800fc54:	e77a      	b.n	800fb4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fc56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc58:	f000 fa4a 	bl	80100f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc5c:	f000 fd26 	bl	80106ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fc62:	f000 fa97 	bl	8010194 <prvIsQueueEmpty>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f43f af6f 	beq.w	800fb4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3730      	adds	r7, #48	@ 0x30
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	e000ed04 	.word	0xe000ed04

0800fc7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b08e      	sub	sp, #56	@ 0x38
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc86:	2300      	movs	r3, #0
 800fc88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc8e:	2300      	movs	r3, #0
 800fc90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10b      	bne.n	800fcb0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9c:	f383 8811 	msr	BASEPRI, r3
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	623b      	str	r3, [r7, #32]
}
 800fcaa:	bf00      	nop
 800fcac:	bf00      	nop
 800fcae:	e7fd      	b.n	800fcac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00b      	beq.n	800fcd0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fcb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbc:	f383 8811 	msr	BASEPRI, r3
 800fcc0:	f3bf 8f6f 	isb	sy
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	61fb      	str	r3, [r7, #28]
}
 800fcca:	bf00      	nop
 800fccc:	bf00      	nop
 800fcce:	e7fd      	b.n	800fccc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fcd0:	f001 f8b6 	bl	8010e40 <xTaskGetSchedulerState>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d102      	bne.n	800fce0 <xQueueSemaphoreTake+0x64>
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d101      	bne.n	800fce4 <xQueueSemaphoreTake+0x68>
 800fce0:	2301      	movs	r3, #1
 800fce2:	e000      	b.n	800fce6 <xQueueSemaphoreTake+0x6a>
 800fce4:	2300      	movs	r3, #0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d10b      	bne.n	800fd02 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800fcea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcee:	f383 8811 	msr	BASEPRI, r3
 800fcf2:	f3bf 8f6f 	isb	sy
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	61bb      	str	r3, [r7, #24]
}
 800fcfc:	bf00      	nop
 800fcfe:	bf00      	nop
 800fd00:	e7fd      	b.n	800fcfe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd02:	f001 fbf1 	bl	80114e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd0a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d024      	beq.n	800fd5c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd14:	1e5a      	subs	r2, r3, #1
 800fd16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd18:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d104      	bne.n	800fd2c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fd22:	f001 fa39 	bl	8011198 <pvTaskIncrementMutexHeldCount>
 800fd26:	4602      	mov	r2, r0
 800fd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2e:	691b      	ldr	r3, [r3, #16]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00f      	beq.n	800fd54 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd36:	3310      	adds	r3, #16
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f000 febb 	bl	8010ab4 <xTaskRemoveFromEventList>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d007      	beq.n	800fd54 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd44:	4b54      	ldr	r3, [pc, #336]	@ (800fe98 <xQueueSemaphoreTake+0x21c>)
 800fd46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd4a:	601a      	str	r2, [r3, #0]
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd54:	f001 fbfa 	bl	801154c <vPortExitCritical>
				return pdPASS;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e098      	b.n	800fe8e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d112      	bne.n	800fd88 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d00b      	beq.n	800fd80 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800fd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	617b      	str	r3, [r7, #20]
}
 800fd7a:	bf00      	nop
 800fd7c:	bf00      	nop
 800fd7e:	e7fd      	b.n	800fd7c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd80:	f001 fbe4 	bl	801154c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd84:	2300      	movs	r3, #0
 800fd86:	e082      	b.n	800fe8e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d106      	bne.n	800fd9c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd8e:	f107 030c 	add.w	r3, r7, #12
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 fef2 	bl	8010b7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd9c:	f001 fbd6 	bl	801154c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fda0:	f000 fc76 	bl	8010690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fda4:	f001 fba0 	bl	80114e8 <vPortEnterCritical>
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb4:	d103      	bne.n	800fdbe <xQueueSemaphoreTake+0x142>
 800fdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fdbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdc4:	b25b      	sxtb	r3, r3
 800fdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdca:	d103      	bne.n	800fdd4 <xQueueSemaphoreTake+0x158>
 800fdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fdd4:	f001 fbba 	bl	801154c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdd8:	463a      	mov	r2, r7
 800fdda:	f107 030c 	add.w	r3, r7, #12
 800fdde:	4611      	mov	r1, r2
 800fde0:	4618      	mov	r0, r3
 800fde2:	f000 fee1 	bl	8010ba8 <xTaskCheckForTimeOut>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d132      	bne.n	800fe52 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fdee:	f000 f9d1 	bl	8010194 <prvIsQueueEmpty>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d026      	beq.n	800fe46 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d109      	bne.n	800fe14 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800fe00:	f001 fb72 	bl	80114e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe06:	689b      	ldr	r3, [r3, #8]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f001 f837 	bl	8010e7c <xTaskPriorityInherit>
 800fe0e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800fe10:	f001 fb9c 	bl	801154c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fe14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe16:	3324      	adds	r3, #36	@ 0x24
 800fe18:	683a      	ldr	r2, [r7, #0]
 800fe1a:	4611      	mov	r1, r2
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f000 fe23 	bl	8010a68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe24:	f000 f964 	bl	80100f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe28:	f000 fc40 	bl	80106ac <xTaskResumeAll>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f47f af67 	bne.w	800fd02 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fe34:	4b18      	ldr	r3, [pc, #96]	@ (800fe98 <xQueueSemaphoreTake+0x21c>)
 800fe36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe3a:	601a      	str	r2, [r3, #0]
 800fe3c:	f3bf 8f4f 	dsb	sy
 800fe40:	f3bf 8f6f 	isb	sy
 800fe44:	e75d      	b.n	800fd02 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fe46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe48:	f000 f952 	bl	80100f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe4c:	f000 fc2e 	bl	80106ac <xTaskResumeAll>
 800fe50:	e757      	b.n	800fd02 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fe52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe54:	f000 f94c 	bl	80100f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe58:	f000 fc28 	bl	80106ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe5e:	f000 f999 	bl	8010194 <prvIsQueueEmpty>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f43f af4c 	beq.w	800fd02 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00d      	beq.n	800fe8c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800fe70:	f001 fb3a 	bl	80114e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe76:	f000 f893 	bl	800ffa0 <prvGetDisinheritPriorityAfterTimeout>
 800fe7a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fe7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7e:	689b      	ldr	r3, [r3, #8]
 800fe80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe82:	4618      	mov	r0, r3
 800fe84:	f001 f8f8 	bl	8011078 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe88:	f001 fb60 	bl	801154c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3738      	adds	r7, #56	@ 0x38
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	e000ed04 	.word	0xe000ed04

0800fe9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b08e      	sub	sp, #56	@ 0x38
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	60f8      	str	r0, [r7, #12]
 800fea4:	60b9      	str	r1, [r7, #8]
 800fea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800feac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10b      	bne.n	800feca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	623b      	str	r3, [r7, #32]
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	e7fd      	b.n	800fec6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800feca:	68bb      	ldr	r3, [r7, #8]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d103      	bne.n	800fed8 <xQueueReceiveFromISR+0x3c>
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <xQueueReceiveFromISR+0x40>
 800fed8:	2301      	movs	r3, #1
 800feda:	e000      	b.n	800fede <xQueueReceiveFromISR+0x42>
 800fedc:	2300      	movs	r3, #0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d10b      	bne.n	800fefa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800fee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee6:	f383 8811 	msr	BASEPRI, r3
 800feea:	f3bf 8f6f 	isb	sy
 800feee:	f3bf 8f4f 	dsb	sy
 800fef2:	61fb      	str	r3, [r7, #28]
}
 800fef4:	bf00      	nop
 800fef6:	bf00      	nop
 800fef8:	e7fd      	b.n	800fef6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fefa:	f001 fbd5 	bl	80116a8 <vPortValidateInterruptPriority>
	__asm volatile
 800fefe:	f3ef 8211 	mrs	r2, BASEPRI
 800ff02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff06:	f383 8811 	msr	BASEPRI, r3
 800ff0a:	f3bf 8f6f 	isb	sy
 800ff0e:	f3bf 8f4f 	dsb	sy
 800ff12:	61ba      	str	r2, [r7, #24]
 800ff14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ff16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff18:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff1e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d02f      	beq.n	800ff86 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff30:	68b9      	ldr	r1, [r7, #8]
 800ff32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff34:	f000 f8b6 	bl	80100a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3a:	1e5a      	subs	r2, r3, #1
 800ff3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff3e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ff40:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ff44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff48:	d112      	bne.n	800ff70 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d016      	beq.n	800ff80 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff54:	3310      	adds	r3, #16
 800ff56:	4618      	mov	r0, r3
 800ff58:	f000 fdac 	bl	8010ab4 <xTaskRemoveFromEventList>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d00e      	beq.n	800ff80 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d00b      	beq.n	800ff80 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	e007      	b.n	800ff80 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff74:	3301      	adds	r3, #1
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	b25a      	sxtb	r2, r3
 800ff7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ff80:	2301      	movs	r3, #1
 800ff82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff84:	e001      	b.n	800ff8a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	f383 8811 	msr	BASEPRI, r3
}
 800ff94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3738      	adds	r7, #56	@ 0x38
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d006      	beq.n	800ffbe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	f1c3 0307 	rsb	r3, r3, #7
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	e001      	b.n	800ffc2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
	}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	3714      	adds	r7, #20
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d10d      	bne.n	801000a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d14d      	bne.n	8010092 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f000 ffb4 	bl	8010f68 <xTaskPriorityDisinherit>
 8010000:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2200      	movs	r2, #0
 8010006:	609a      	str	r2, [r3, #8]
 8010008:	e043      	b.n	8010092 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d119      	bne.n	8010044 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	6858      	ldr	r0, [r3, #4]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010018:	461a      	mov	r2, r3
 801001a:	68b9      	ldr	r1, [r7, #8]
 801001c:	f00d fd41 	bl	801daa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	685a      	ldr	r2, [r3, #4]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010028:	441a      	add	r2, r3
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	429a      	cmp	r2, r3
 8010038:	d32b      	bcc.n	8010092 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	605a      	str	r2, [r3, #4]
 8010042:	e026      	b.n	8010092 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	68d8      	ldr	r0, [r3, #12]
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801004c:	461a      	mov	r2, r3
 801004e:	68b9      	ldr	r1, [r7, #8]
 8010050:	f00d fd27 	bl	801daa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	68da      	ldr	r2, [r3, #12]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801005c:	425b      	negs	r3, r3
 801005e:	441a      	add	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68da      	ldr	r2, [r3, #12]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	429a      	cmp	r2, r3
 801006e:	d207      	bcs.n	8010080 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	689a      	ldr	r2, [r3, #8]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010078:	425b      	negs	r3, r3
 801007a:	441a      	add	r2, r3
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b02      	cmp	r3, #2
 8010084:	d105      	bne.n	8010092 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d002      	beq.n	8010092 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	3b01      	subs	r3, #1
 8010090:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010092:	693b      	ldr	r3, [r7, #16]
 8010094:	1c5a      	adds	r2, r3, #1
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801009a:	697b      	ldr	r3, [r7, #20]
}
 801009c:	4618      	mov	r0, r3
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d018      	beq.n	80100e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	68da      	ldr	r2, [r3, #12]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100be:	441a      	add	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d303      	bcc.n	80100d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681a      	ldr	r2, [r3, #0]
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68d9      	ldr	r1, [r3, #12]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100e0:	461a      	mov	r2, r3
 80100e2:	6838      	ldr	r0, [r7, #0]
 80100e4:	f00d fcdd 	bl	801daa2 <memcpy>
	}
}
 80100e8:	bf00      	nop
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}

080100f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80100f8:	f001 f9f6 	bl	80114e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010104:	e011      	b.n	801012a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801010a:	2b00      	cmp	r3, #0
 801010c:	d012      	beq.n	8010134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	3324      	adds	r3, #36	@ 0x24
 8010112:	4618      	mov	r0, r3
 8010114:	f000 fcce 	bl	8010ab4 <xTaskRemoveFromEventList>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d001      	beq.n	8010122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801011e:	f000 fda7 	bl	8010c70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010122:	7bfb      	ldrb	r3, [r7, #15]
 8010124:	3b01      	subs	r3, #1
 8010126:	b2db      	uxtb	r3, r3
 8010128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801012a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801012e:	2b00      	cmp	r3, #0
 8010130:	dce9      	bgt.n	8010106 <prvUnlockQueue+0x16>
 8010132:	e000      	b.n	8010136 <prvUnlockQueue+0x46>
					break;
 8010134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	22ff      	movs	r2, #255	@ 0xff
 801013a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801013e:	f001 fa05 	bl	801154c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010142:	f001 f9d1 	bl	80114e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801014c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801014e:	e011      	b.n	8010174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d012      	beq.n	801017e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	3310      	adds	r3, #16
 801015c:	4618      	mov	r0, r3
 801015e:	f000 fca9 	bl	8010ab4 <xTaskRemoveFromEventList>
 8010162:	4603      	mov	r3, r0
 8010164:	2b00      	cmp	r3, #0
 8010166:	d001      	beq.n	801016c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010168:	f000 fd82 	bl	8010c70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801016c:	7bbb      	ldrb	r3, [r7, #14]
 801016e:	3b01      	subs	r3, #1
 8010170:	b2db      	uxtb	r3, r3
 8010172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010178:	2b00      	cmp	r3, #0
 801017a:	dce9      	bgt.n	8010150 <prvUnlockQueue+0x60>
 801017c:	e000      	b.n	8010180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801017e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	22ff      	movs	r2, #255	@ 0xff
 8010184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010188:	f001 f9e0 	bl	801154c <vPortExitCritical>
}
 801018c:	bf00      	nop
 801018e:	3710      	adds	r7, #16
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801019c:	f001 f9a4 	bl	80114e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d102      	bne.n	80101ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80101a8:	2301      	movs	r3, #1
 80101aa:	60fb      	str	r3, [r7, #12]
 80101ac:	e001      	b.n	80101b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80101ae:	2300      	movs	r3, #0
 80101b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101b2:	f001 f9cb 	bl	801154c <vPortExitCritical>

	return xReturn;
 80101b6:	68fb      	ldr	r3, [r7, #12]
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}

080101c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80101c8:	f001 f98e 	bl	80114e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d102      	bne.n	80101de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80101d8:	2301      	movs	r3, #1
 80101da:	60fb      	str	r3, [r7, #12]
 80101dc:	e001      	b.n	80101e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80101de:	2300      	movs	r3, #0
 80101e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80101e2:	f001 f9b3 	bl	801154c <vPortExitCritical>

	return xReturn;
 80101e6:	68fb      	ldr	r3, [r7, #12]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b08e      	sub	sp, #56	@ 0x38
 80101f4:	af04      	add	r7, sp, #16
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80101fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10b      	bne.n	801021c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	623b      	str	r3, [r7, #32]
}
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	e7fd      	b.n	8010218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801021c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10b      	bne.n	801023a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010226:	f383 8811 	msr	BASEPRI, r3
 801022a:	f3bf 8f6f 	isb	sy
 801022e:	f3bf 8f4f 	dsb	sy
 8010232:	61fb      	str	r3, [r7, #28]
}
 8010234:	bf00      	nop
 8010236:	bf00      	nop
 8010238:	e7fd      	b.n	8010236 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801023a:	23a0      	movs	r3, #160	@ 0xa0
 801023c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	2ba0      	cmp	r3, #160	@ 0xa0
 8010242:	d00b      	beq.n	801025c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	61bb      	str	r3, [r7, #24]
}
 8010256:	bf00      	nop
 8010258:	bf00      	nop
 801025a:	e7fd      	b.n	8010258 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801025c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801025e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010260:	2b00      	cmp	r3, #0
 8010262:	d01e      	beq.n	80102a2 <xTaskCreateStatic+0xb2>
 8010264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010266:	2b00      	cmp	r3, #0
 8010268:	d01b      	beq.n	80102a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801026a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801026e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010270:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010272:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010276:	2202      	movs	r2, #2
 8010278:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801027c:	2300      	movs	r3, #0
 801027e:	9303      	str	r3, [sp, #12]
 8010280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010282:	9302      	str	r3, [sp, #8]
 8010284:	f107 0314 	add.w	r3, r7, #20
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028c:	9300      	str	r3, [sp, #0]
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	68b9      	ldr	r1, [r7, #8]
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f000 f851 	bl	801033c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801029a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801029c:	f000 f8ee 	bl	801047c <prvAddNewTaskToReadyList>
 80102a0:	e001      	b.n	80102a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80102a6:	697b      	ldr	r3, [r7, #20]
	}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3728      	adds	r7, #40	@ 0x28
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08c      	sub	sp, #48	@ 0x30
 80102b4:	af04      	add	r7, sp, #16
 80102b6:	60f8      	str	r0, [r7, #12]
 80102b8:	60b9      	str	r1, [r7, #8]
 80102ba:	603b      	str	r3, [r7, #0]
 80102bc:	4613      	mov	r3, r2
 80102be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80102c0:	88fb      	ldrh	r3, [r7, #6]
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4618      	mov	r0, r3
 80102c6:	f001 fa31 	bl	801172c <pvPortMalloc>
 80102ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d00e      	beq.n	80102f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80102d2:	20a0      	movs	r0, #160	@ 0xa0
 80102d4:	f001 fa2a 	bl	801172c <pvPortMalloc>
 80102d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d003      	beq.n	80102e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	697a      	ldr	r2, [r7, #20]
 80102e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80102e6:	e005      	b.n	80102f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80102e8:	6978      	ldr	r0, [r7, #20]
 80102ea:	f001 faed 	bl	80118c8 <vPortFree>
 80102ee:	e001      	b.n	80102f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80102f0:	2300      	movs	r3, #0
 80102f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d017      	beq.n	801032a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010302:	88fa      	ldrh	r2, [r7, #6]
 8010304:	2300      	movs	r3, #0
 8010306:	9303      	str	r3, [sp, #12]
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	9302      	str	r3, [sp, #8]
 801030c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030e:	9301      	str	r3, [sp, #4]
 8010310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010312:	9300      	str	r3, [sp, #0]
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	68b9      	ldr	r1, [r7, #8]
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f000 f80f 	bl	801033c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801031e:	69f8      	ldr	r0, [r7, #28]
 8010320:	f000 f8ac 	bl	801047c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010324:	2301      	movs	r3, #1
 8010326:	61bb      	str	r3, [r7, #24]
 8010328:	e002      	b.n	8010330 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801032a:	f04f 33ff 	mov.w	r3, #4294967295
 801032e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010330:	69bb      	ldr	r3, [r7, #24]
	}
 8010332:	4618      	mov	r0, r3
 8010334:	3720      	adds	r7, #32
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b088      	sub	sp, #32
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801034a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010354:	3b01      	subs	r3, #1
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	4413      	add	r3, r2
 801035a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	f023 0307 	bic.w	r3, r3, #7
 8010362:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	2b00      	cmp	r3, #0
 801036c:	d00b      	beq.n	8010386 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801036e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	617b      	str	r3, [r7, #20]
}
 8010380:	bf00      	nop
 8010382:	bf00      	nop
 8010384:	e7fd      	b.n	8010382 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d01f      	beq.n	80103cc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801038c:	2300      	movs	r3, #0
 801038e:	61fb      	str	r3, [r7, #28]
 8010390:	e012      	b.n	80103b8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	4413      	add	r3, r2
 8010398:	7819      	ldrb	r1, [r3, #0]
 801039a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	4413      	add	r3, r2
 80103a0:	3334      	adds	r3, #52	@ 0x34
 80103a2:	460a      	mov	r2, r1
 80103a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	4413      	add	r3, r2
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d006      	beq.n	80103c0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	3301      	adds	r3, #1
 80103b6:	61fb      	str	r3, [r7, #28]
 80103b8:	69fb      	ldr	r3, [r7, #28]
 80103ba:	2b0f      	cmp	r3, #15
 80103bc:	d9e9      	bls.n	8010392 <prvInitialiseNewTask+0x56>
 80103be:	e000      	b.n	80103c2 <prvInitialiseNewTask+0x86>
			{
				break;
 80103c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80103c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c4:	2200      	movs	r2, #0
 80103c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103ca:	e003      	b.n	80103d4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80103cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80103d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103d6:	2b06      	cmp	r3, #6
 80103d8:	d901      	bls.n	80103de <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80103da:	2306      	movs	r3, #6
 80103dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80103de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80103e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103e8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80103ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ec:	2200      	movs	r2, #0
 80103ee:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80103f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f2:	3304      	adds	r3, #4
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe ff0d 	bl	800f214 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80103fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103fc:	3318      	adds	r3, #24
 80103fe:	4618      	mov	r0, r3
 8010400:	f7fe ff08 	bl	800f214 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010408:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801040a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801040c:	f1c3 0207 	rsb	r2, r3, #7
 8010410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010412:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010418:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801041a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801041c:	2200      	movs	r2, #0
 801041e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010424:	2200      	movs	r2, #0
 8010426:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801042a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801042c:	334c      	adds	r3, #76	@ 0x4c
 801042e:	224c      	movs	r2, #76	@ 0x4c
 8010430:	2100      	movs	r1, #0
 8010432:	4618      	mov	r0, r3
 8010434:	f00d fa37 	bl	801d8a6 <memset>
 8010438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801043a:	4a0d      	ldr	r2, [pc, #52]	@ (8010470 <prvInitialiseNewTask+0x134>)
 801043c:	651a      	str	r2, [r3, #80]	@ 0x50
 801043e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010440:	4a0c      	ldr	r2, [pc, #48]	@ (8010474 <prvInitialiseNewTask+0x138>)
 8010442:	655a      	str	r2, [r3, #84]	@ 0x54
 8010444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010446:	4a0c      	ldr	r2, [pc, #48]	@ (8010478 <prvInitialiseNewTask+0x13c>)
 8010448:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	68f9      	ldr	r1, [r7, #12]
 801044e:	69b8      	ldr	r0, [r7, #24]
 8010450:	f000 ff1c 	bl	801128c <pxPortInitialiseStack>
 8010454:	4602      	mov	r2, r0
 8010456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010458:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801045a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010466:	bf00      	nop
 8010468:	3720      	adds	r7, #32
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	2000e700 	.word	0x2000e700
 8010474:	2000e768 	.word	0x2000e768
 8010478:	2000e7d0 	.word	0x2000e7d0

0801047c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010484:	f001 f830 	bl	80114e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010488:	4b2a      	ldr	r3, [pc, #168]	@ (8010534 <prvAddNewTaskToReadyList+0xb8>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	3301      	adds	r3, #1
 801048e:	4a29      	ldr	r2, [pc, #164]	@ (8010534 <prvAddNewTaskToReadyList+0xb8>)
 8010490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010492:	4b29      	ldr	r3, [pc, #164]	@ (8010538 <prvAddNewTaskToReadyList+0xbc>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d109      	bne.n	80104ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801049a:	4a27      	ldr	r2, [pc, #156]	@ (8010538 <prvAddNewTaskToReadyList+0xbc>)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80104a0:	4b24      	ldr	r3, [pc, #144]	@ (8010534 <prvAddNewTaskToReadyList+0xb8>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	d110      	bne.n	80104ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80104a8:	f000 fc06 	bl	8010cb8 <prvInitialiseTaskLists>
 80104ac:	e00d      	b.n	80104ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80104ae:	4b23      	ldr	r3, [pc, #140]	@ (801053c <prvAddNewTaskToReadyList+0xc0>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d109      	bne.n	80104ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80104b6:	4b20      	ldr	r3, [pc, #128]	@ (8010538 <prvAddNewTaskToReadyList+0xbc>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d802      	bhi.n	80104ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80104c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010538 <prvAddNewTaskToReadyList+0xbc>)
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80104ca:	4b1d      	ldr	r3, [pc, #116]	@ (8010540 <prvAddNewTaskToReadyList+0xc4>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	3301      	adds	r3, #1
 80104d0:	4a1b      	ldr	r2, [pc, #108]	@ (8010540 <prvAddNewTaskToReadyList+0xc4>)
 80104d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104d8:	2201      	movs	r2, #1
 80104da:	409a      	lsls	r2, r3
 80104dc:	4b19      	ldr	r3, [pc, #100]	@ (8010544 <prvAddNewTaskToReadyList+0xc8>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	4a18      	ldr	r2, [pc, #96]	@ (8010544 <prvAddNewTaskToReadyList+0xc8>)
 80104e4:	6013      	str	r3, [r2, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ea:	4613      	mov	r3, r2
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	4413      	add	r3, r2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	4a15      	ldr	r2, [pc, #84]	@ (8010548 <prvAddNewTaskToReadyList+0xcc>)
 80104f4:	441a      	add	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	3304      	adds	r3, #4
 80104fa:	4619      	mov	r1, r3
 80104fc:	4610      	mov	r0, r2
 80104fe:	f7fe fe96 	bl	800f22e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010502:	f001 f823 	bl	801154c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010506:	4b0d      	ldr	r3, [pc, #52]	@ (801053c <prvAddNewTaskToReadyList+0xc0>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d00e      	beq.n	801052c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801050e:	4b0a      	ldr	r3, [pc, #40]	@ (8010538 <prvAddNewTaskToReadyList+0xbc>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010518:	429a      	cmp	r2, r3
 801051a:	d207      	bcs.n	801052c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801051c:	4b0b      	ldr	r3, [pc, #44]	@ (801054c <prvAddNewTaskToReadyList+0xd0>)
 801051e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	200055f8 	.word	0x200055f8
 8010538:	200054f8 	.word	0x200054f8
 801053c:	20005604 	.word	0x20005604
 8010540:	20005614 	.word	0x20005614
 8010544:	20005600 	.word	0x20005600
 8010548:	200054fc 	.word	0x200054fc
 801054c:	e000ed04 	.word	0xe000ed04

08010550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010558:	2300      	movs	r3, #0
 801055a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d018      	beq.n	8010594 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010562:	4b14      	ldr	r3, [pc, #80]	@ (80105b4 <vTaskDelay+0x64>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00b      	beq.n	8010582 <vTaskDelay+0x32>
	__asm volatile
 801056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801056e:	f383 8811 	msr	BASEPRI, r3
 8010572:	f3bf 8f6f 	isb	sy
 8010576:	f3bf 8f4f 	dsb	sy
 801057a:	60bb      	str	r3, [r7, #8]
}
 801057c:	bf00      	nop
 801057e:	bf00      	nop
 8010580:	e7fd      	b.n	801057e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010582:	f000 f885 	bl	8010690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010586:	2100      	movs	r1, #0
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 fe19 	bl	80111c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801058e:	f000 f88d 	bl	80106ac <xTaskResumeAll>
 8010592:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2b00      	cmp	r3, #0
 8010598:	d107      	bne.n	80105aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801059a:	4b07      	ldr	r3, [pc, #28]	@ (80105b8 <vTaskDelay+0x68>)
 801059c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	f3bf 8f4f 	dsb	sy
 80105a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105aa:	bf00      	nop
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	20005620 	.word	0x20005620
 80105b8:	e000ed04 	.word	0xe000ed04

080105bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b08a      	sub	sp, #40	@ 0x28
 80105c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80105c6:	2300      	movs	r3, #0
 80105c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80105ca:	463a      	mov	r2, r7
 80105cc:	1d39      	adds	r1, r7, #4
 80105ce:	f107 0308 	add.w	r3, r7, #8
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7f1 f8cc 	bl	8001770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80105d8:	6839      	ldr	r1, [r7, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	68ba      	ldr	r2, [r7, #8]
 80105de:	9202      	str	r2, [sp, #8]
 80105e0:	9301      	str	r3, [sp, #4]
 80105e2:	2300      	movs	r3, #0
 80105e4:	9300      	str	r3, [sp, #0]
 80105e6:	2300      	movs	r3, #0
 80105e8:	460a      	mov	r2, r1
 80105ea:	4921      	ldr	r1, [pc, #132]	@ (8010670 <vTaskStartScheduler+0xb4>)
 80105ec:	4821      	ldr	r0, [pc, #132]	@ (8010674 <vTaskStartScheduler+0xb8>)
 80105ee:	f7ff fdff 	bl	80101f0 <xTaskCreateStatic>
 80105f2:	4603      	mov	r3, r0
 80105f4:	4a20      	ldr	r2, [pc, #128]	@ (8010678 <vTaskStartScheduler+0xbc>)
 80105f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80105f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010678 <vTaskStartScheduler+0xbc>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d002      	beq.n	8010606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010600:	2301      	movs	r3, #1
 8010602:	617b      	str	r3, [r7, #20]
 8010604:	e001      	b.n	801060a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010606:	2300      	movs	r3, #0
 8010608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	2b01      	cmp	r3, #1
 801060e:	d11b      	bne.n	8010648 <vTaskStartScheduler+0x8c>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	613b      	str	r3, [r7, #16]
}
 8010622:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010624:	4b15      	ldr	r3, [pc, #84]	@ (801067c <vTaskStartScheduler+0xc0>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	334c      	adds	r3, #76	@ 0x4c
 801062a:	4a15      	ldr	r2, [pc, #84]	@ (8010680 <vTaskStartScheduler+0xc4>)
 801062c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801062e:	4b15      	ldr	r3, [pc, #84]	@ (8010684 <vTaskStartScheduler+0xc8>)
 8010630:	f04f 32ff 	mov.w	r2, #4294967295
 8010634:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010636:	4b14      	ldr	r3, [pc, #80]	@ (8010688 <vTaskStartScheduler+0xcc>)
 8010638:	2201      	movs	r2, #1
 801063a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801063c:	4b13      	ldr	r3, [pc, #76]	@ (801068c <vTaskStartScheduler+0xd0>)
 801063e:	2200      	movs	r2, #0
 8010640:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010642:	f000 fead 	bl	80113a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010646:	e00f      	b.n	8010668 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010648:	697b      	ldr	r3, [r7, #20]
 801064a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801064e:	d10b      	bne.n	8010668 <vTaskStartScheduler+0xac>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	60fb      	str	r3, [r7, #12]
}
 8010662:	bf00      	nop
 8010664:	bf00      	nop
 8010666:	e7fd      	b.n	8010664 <vTaskStartScheduler+0xa8>
}
 8010668:	bf00      	nop
 801066a:	3718      	adds	r7, #24
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	08020560 	.word	0x08020560
 8010674:	08010c89 	.word	0x08010c89
 8010678:	2000561c 	.word	0x2000561c
 801067c:	200054f8 	.word	0x200054f8
 8010680:	20000118 	.word	0x20000118
 8010684:	20005618 	.word	0x20005618
 8010688:	20005604 	.word	0x20005604
 801068c:	200055fc 	.word	0x200055fc

08010690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010690:	b480      	push	{r7}
 8010692:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010694:	4b04      	ldr	r3, [pc, #16]	@ (80106a8 <vTaskSuspendAll+0x18>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3301      	adds	r3, #1
 801069a:	4a03      	ldr	r2, [pc, #12]	@ (80106a8 <vTaskSuspendAll+0x18>)
 801069c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801069e:	bf00      	nop
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr
 80106a8:	20005620 	.word	0x20005620

080106ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80106b2:	2300      	movs	r3, #0
 80106b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80106b6:	2300      	movs	r3, #0
 80106b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80106ba:	4b42      	ldr	r3, [pc, #264]	@ (80107c4 <xTaskResumeAll+0x118>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10b      	bne.n	80106da <xTaskResumeAll+0x2e>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	603b      	str	r3, [r7, #0]
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop
 80106d8:	e7fd      	b.n	80106d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80106da:	f000 ff05 	bl	80114e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80106de:	4b39      	ldr	r3, [pc, #228]	@ (80107c4 <xTaskResumeAll+0x118>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	3b01      	subs	r3, #1
 80106e4:	4a37      	ldr	r2, [pc, #220]	@ (80107c4 <xTaskResumeAll+0x118>)
 80106e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106e8:	4b36      	ldr	r3, [pc, #216]	@ (80107c4 <xTaskResumeAll+0x118>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d161      	bne.n	80107b4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80106f0:	4b35      	ldr	r3, [pc, #212]	@ (80107c8 <xTaskResumeAll+0x11c>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d05d      	beq.n	80107b4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80106f8:	e02e      	b.n	8010758 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106fa:	4b34      	ldr	r3, [pc, #208]	@ (80107cc <xTaskResumeAll+0x120>)
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3318      	adds	r3, #24
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe fdee 	bl	800f2e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	3304      	adds	r3, #4
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fde9 	bl	800f2e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801071a:	2201      	movs	r2, #1
 801071c:	409a      	lsls	r2, r3
 801071e:	4b2c      	ldr	r3, [pc, #176]	@ (80107d0 <xTaskResumeAll+0x124>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	4313      	orrs	r3, r2
 8010724:	4a2a      	ldr	r2, [pc, #168]	@ (80107d0 <xTaskResumeAll+0x124>)
 8010726:	6013      	str	r3, [r2, #0]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801072c:	4613      	mov	r3, r2
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	4413      	add	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	4a27      	ldr	r2, [pc, #156]	@ (80107d4 <xTaskResumeAll+0x128>)
 8010736:	441a      	add	r2, r3
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3304      	adds	r3, #4
 801073c:	4619      	mov	r1, r3
 801073e:	4610      	mov	r0, r2
 8010740:	f7fe fd75 	bl	800f22e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010748:	4b23      	ldr	r3, [pc, #140]	@ (80107d8 <xTaskResumeAll+0x12c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801074e:	429a      	cmp	r2, r3
 8010750:	d302      	bcc.n	8010758 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010752:	4b22      	ldr	r3, [pc, #136]	@ (80107dc <xTaskResumeAll+0x130>)
 8010754:	2201      	movs	r2, #1
 8010756:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010758:	4b1c      	ldr	r3, [pc, #112]	@ (80107cc <xTaskResumeAll+0x120>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d1cc      	bne.n	80106fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010766:	f000 fb4b 	bl	8010e00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801076a:	4b1d      	ldr	r3, [pc, #116]	@ (80107e0 <xTaskResumeAll+0x134>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d010      	beq.n	8010798 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010776:	f000 f859 	bl	801082c <xTaskIncrementTick>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d002      	beq.n	8010786 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010780:	4b16      	ldr	r3, [pc, #88]	@ (80107dc <xTaskResumeAll+0x130>)
 8010782:	2201      	movs	r2, #1
 8010784:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3b01      	subs	r3, #1
 801078a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1f1      	bne.n	8010776 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010792:	4b13      	ldr	r3, [pc, #76]	@ (80107e0 <xTaskResumeAll+0x134>)
 8010794:	2200      	movs	r2, #0
 8010796:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010798:	4b10      	ldr	r3, [pc, #64]	@ (80107dc <xTaskResumeAll+0x130>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d009      	beq.n	80107b4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80107a0:	2301      	movs	r3, #1
 80107a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80107a4:	4b0f      	ldr	r3, [pc, #60]	@ (80107e4 <xTaskResumeAll+0x138>)
 80107a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107aa:	601a      	str	r2, [r3, #0]
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107b4:	f000 feca 	bl	801154c <vPortExitCritical>

	return xAlreadyYielded;
 80107b8:	68bb      	ldr	r3, [r7, #8]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	20005620 	.word	0x20005620
 80107c8:	200055f8 	.word	0x200055f8
 80107cc:	200055b8 	.word	0x200055b8
 80107d0:	20005600 	.word	0x20005600
 80107d4:	200054fc 	.word	0x200054fc
 80107d8:	200054f8 	.word	0x200054f8
 80107dc:	2000560c 	.word	0x2000560c
 80107e0:	20005608 	.word	0x20005608
 80107e4:	e000ed04 	.word	0xe000ed04

080107e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80107ee:	4b05      	ldr	r3, [pc, #20]	@ (8010804 <xTaskGetTickCount+0x1c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80107f4:	687b      	ldr	r3, [r7, #4]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	200055fc 	.word	0x200055fc

08010808 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b082      	sub	sp, #8
 801080c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801080e:	f000 ff4b 	bl	80116a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010812:	2300      	movs	r3, #0
 8010814:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010816:	4b04      	ldr	r3, [pc, #16]	@ (8010828 <xTaskGetTickCountFromISR+0x20>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801081c:	683b      	ldr	r3, [r7, #0]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	200055fc 	.word	0x200055fc

0801082c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b086      	sub	sp, #24
 8010830:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010832:	2300      	movs	r3, #0
 8010834:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010836:	4b4f      	ldr	r3, [pc, #316]	@ (8010974 <xTaskIncrementTick+0x148>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	f040 808f 	bne.w	801095e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010840:	4b4d      	ldr	r3, [pc, #308]	@ (8010978 <xTaskIncrementTick+0x14c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	3301      	adds	r3, #1
 8010846:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010848:	4a4b      	ldr	r2, [pc, #300]	@ (8010978 <xTaskIncrementTick+0x14c>)
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d121      	bne.n	8010898 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010854:	4b49      	ldr	r3, [pc, #292]	@ (801097c <xTaskIncrementTick+0x150>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d00b      	beq.n	8010876 <xTaskIncrementTick+0x4a>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010862:	f383 8811 	msr	BASEPRI, r3
 8010866:	f3bf 8f6f 	isb	sy
 801086a:	f3bf 8f4f 	dsb	sy
 801086e:	603b      	str	r3, [r7, #0]
}
 8010870:	bf00      	nop
 8010872:	bf00      	nop
 8010874:	e7fd      	b.n	8010872 <xTaskIncrementTick+0x46>
 8010876:	4b41      	ldr	r3, [pc, #260]	@ (801097c <xTaskIncrementTick+0x150>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	60fb      	str	r3, [r7, #12]
 801087c:	4b40      	ldr	r3, [pc, #256]	@ (8010980 <xTaskIncrementTick+0x154>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a3e      	ldr	r2, [pc, #248]	@ (801097c <xTaskIncrementTick+0x150>)
 8010882:	6013      	str	r3, [r2, #0]
 8010884:	4a3e      	ldr	r2, [pc, #248]	@ (8010980 <xTaskIncrementTick+0x154>)
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6013      	str	r3, [r2, #0]
 801088a:	4b3e      	ldr	r3, [pc, #248]	@ (8010984 <xTaskIncrementTick+0x158>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3301      	adds	r3, #1
 8010890:	4a3c      	ldr	r2, [pc, #240]	@ (8010984 <xTaskIncrementTick+0x158>)
 8010892:	6013      	str	r3, [r2, #0]
 8010894:	f000 fab4 	bl	8010e00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010898:	4b3b      	ldr	r3, [pc, #236]	@ (8010988 <xTaskIncrementTick+0x15c>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	693a      	ldr	r2, [r7, #16]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d348      	bcc.n	8010934 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108a2:	4b36      	ldr	r3, [pc, #216]	@ (801097c <xTaskIncrementTick+0x150>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d104      	bne.n	80108b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ac:	4b36      	ldr	r3, [pc, #216]	@ (8010988 <xTaskIncrementTick+0x15c>)
 80108ae:	f04f 32ff 	mov.w	r2, #4294967295
 80108b2:	601a      	str	r2, [r3, #0]
					break;
 80108b4:	e03e      	b.n	8010934 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108b6:	4b31      	ldr	r3, [pc, #196]	@ (801097c <xTaskIncrementTick+0x150>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80108c6:	693a      	ldr	r2, [r7, #16]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d203      	bcs.n	80108d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80108ce:	4a2e      	ldr	r2, [pc, #184]	@ (8010988 <xTaskIncrementTick+0x15c>)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80108d4:	e02e      	b.n	8010934 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	3304      	adds	r3, #4
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fe fd04 	bl	800f2e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d004      	beq.n	80108f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	3318      	adds	r3, #24
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fe fcfb 	bl	800f2e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108f6:	2201      	movs	r2, #1
 80108f8:	409a      	lsls	r2, r3
 80108fa:	4b24      	ldr	r3, [pc, #144]	@ (801098c <xTaskIncrementTick+0x160>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4313      	orrs	r3, r2
 8010900:	4a22      	ldr	r2, [pc, #136]	@ (801098c <xTaskIncrementTick+0x160>)
 8010902:	6013      	str	r3, [r2, #0]
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010908:	4613      	mov	r3, r2
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	4413      	add	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	4a1f      	ldr	r2, [pc, #124]	@ (8010990 <xTaskIncrementTick+0x164>)
 8010912:	441a      	add	r2, r3
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	3304      	adds	r3, #4
 8010918:	4619      	mov	r1, r3
 801091a:	4610      	mov	r0, r2
 801091c:	f7fe fc87 	bl	800f22e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010924:	4b1b      	ldr	r3, [pc, #108]	@ (8010994 <xTaskIncrementTick+0x168>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801092a:	429a      	cmp	r2, r3
 801092c:	d3b9      	bcc.n	80108a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801092e:	2301      	movs	r3, #1
 8010930:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010932:	e7b6      	b.n	80108a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010934:	4b17      	ldr	r3, [pc, #92]	@ (8010994 <xTaskIncrementTick+0x168>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801093a:	4915      	ldr	r1, [pc, #84]	@ (8010990 <xTaskIncrementTick+0x164>)
 801093c:	4613      	mov	r3, r2
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4413      	add	r3, r2
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	440b      	add	r3, r1
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d901      	bls.n	8010950 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801094c:	2301      	movs	r3, #1
 801094e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010950:	4b11      	ldr	r3, [pc, #68]	@ (8010998 <xTaskIncrementTick+0x16c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d007      	beq.n	8010968 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010958:	2301      	movs	r3, #1
 801095a:	617b      	str	r3, [r7, #20]
 801095c:	e004      	b.n	8010968 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801095e:	4b0f      	ldr	r3, [pc, #60]	@ (801099c <xTaskIncrementTick+0x170>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	3301      	adds	r3, #1
 8010964:	4a0d      	ldr	r2, [pc, #52]	@ (801099c <xTaskIncrementTick+0x170>)
 8010966:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010968:	697b      	ldr	r3, [r7, #20]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3718      	adds	r7, #24
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	20005620 	.word	0x20005620
 8010978:	200055fc 	.word	0x200055fc
 801097c:	200055b0 	.word	0x200055b0
 8010980:	200055b4 	.word	0x200055b4
 8010984:	20005610 	.word	0x20005610
 8010988:	20005618 	.word	0x20005618
 801098c:	20005600 	.word	0x20005600
 8010990:	200054fc 	.word	0x200054fc
 8010994:	200054f8 	.word	0x200054f8
 8010998:	2000560c 	.word	0x2000560c
 801099c:	20005608 	.word	0x20005608

080109a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80109a0:	b480      	push	{r7}
 80109a2:	b087      	sub	sp, #28
 80109a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80109a6:	4b2a      	ldr	r3, [pc, #168]	@ (8010a50 <vTaskSwitchContext+0xb0>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d003      	beq.n	80109b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80109ae:	4b29      	ldr	r3, [pc, #164]	@ (8010a54 <vTaskSwitchContext+0xb4>)
 80109b0:	2201      	movs	r2, #1
 80109b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80109b4:	e045      	b.n	8010a42 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80109b6:	4b27      	ldr	r3, [pc, #156]	@ (8010a54 <vTaskSwitchContext+0xb4>)
 80109b8:	2200      	movs	r2, #0
 80109ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109bc:	4b26      	ldr	r3, [pc, #152]	@ (8010a58 <vTaskSwitchContext+0xb8>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	fab3 f383 	clz	r3, r3
 80109c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80109ca:	7afb      	ldrb	r3, [r7, #11]
 80109cc:	f1c3 031f 	rsb	r3, r3, #31
 80109d0:	617b      	str	r3, [r7, #20]
 80109d2:	4922      	ldr	r1, [pc, #136]	@ (8010a5c <vTaskSwitchContext+0xbc>)
 80109d4:	697a      	ldr	r2, [r7, #20]
 80109d6:	4613      	mov	r3, r2
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4413      	add	r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	440b      	add	r3, r1
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10b      	bne.n	80109fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80109e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ea:	f383 8811 	msr	BASEPRI, r3
 80109ee:	f3bf 8f6f 	isb	sy
 80109f2:	f3bf 8f4f 	dsb	sy
 80109f6:	607b      	str	r3, [r7, #4]
}
 80109f8:	bf00      	nop
 80109fa:	bf00      	nop
 80109fc:	e7fd      	b.n	80109fa <vTaskSwitchContext+0x5a>
 80109fe:	697a      	ldr	r2, [r7, #20]
 8010a00:	4613      	mov	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	4413      	add	r3, r2
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	4a14      	ldr	r2, [pc, #80]	@ (8010a5c <vTaskSwitchContext+0xbc>)
 8010a0a:	4413      	add	r3, r2
 8010a0c:	613b      	str	r3, [r7, #16]
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	685b      	ldr	r3, [r3, #4]
 8010a12:	685a      	ldr	r2, [r3, #4]
 8010a14:	693b      	ldr	r3, [r7, #16]
 8010a16:	605a      	str	r2, [r3, #4]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	3308      	adds	r3, #8
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d104      	bne.n	8010a2e <vTaskSwitchContext+0x8e>
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	685a      	ldr	r2, [r3, #4]
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	605a      	str	r2, [r3, #4]
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	4a0a      	ldr	r2, [pc, #40]	@ (8010a60 <vTaskSwitchContext+0xc0>)
 8010a36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010a38:	4b09      	ldr	r3, [pc, #36]	@ (8010a60 <vTaskSwitchContext+0xc0>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	334c      	adds	r3, #76	@ 0x4c
 8010a3e:	4a09      	ldr	r2, [pc, #36]	@ (8010a64 <vTaskSwitchContext+0xc4>)
 8010a40:	6013      	str	r3, [r2, #0]
}
 8010a42:	bf00      	nop
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	20005620 	.word	0x20005620
 8010a54:	2000560c 	.word	0x2000560c
 8010a58:	20005600 	.word	0x20005600
 8010a5c:	200054fc 	.word	0x200054fc
 8010a60:	200054f8 	.word	0x200054f8
 8010a64:	20000118 	.word	0x20000118

08010a68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d10b      	bne.n	8010a90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7c:	f383 8811 	msr	BASEPRI, r3
 8010a80:	f3bf 8f6f 	isb	sy
 8010a84:	f3bf 8f4f 	dsb	sy
 8010a88:	60fb      	str	r3, [r7, #12]
}
 8010a8a:	bf00      	nop
 8010a8c:	bf00      	nop
 8010a8e:	e7fd      	b.n	8010a8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010a90:	4b07      	ldr	r3, [pc, #28]	@ (8010ab0 <vTaskPlaceOnEventList+0x48>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	3318      	adds	r3, #24
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7fe fbec 	bl	800f276 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010a9e:	2101      	movs	r1, #1
 8010aa0:	6838      	ldr	r0, [r7, #0]
 8010aa2:	f000 fb8d 	bl	80111c0 <prvAddCurrentTaskToDelayedList>
}
 8010aa6:	bf00      	nop
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	200054f8 	.word	0x200054f8

08010ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d10b      	bne.n	8010ae2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ace:	f383 8811 	msr	BASEPRI, r3
 8010ad2:	f3bf 8f6f 	isb	sy
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	60fb      	str	r3, [r7, #12]
}
 8010adc:	bf00      	nop
 8010ade:	bf00      	nop
 8010ae0:	e7fd      	b.n	8010ade <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010ae2:	693b      	ldr	r3, [r7, #16]
 8010ae4:	3318      	adds	r3, #24
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f7fe fbfe 	bl	800f2e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010aec:	4b1d      	ldr	r3, [pc, #116]	@ (8010b64 <xTaskRemoveFromEventList+0xb0>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d11c      	bne.n	8010b2e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	3304      	adds	r3, #4
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fe fbf5 	bl	800f2e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b02:	2201      	movs	r2, #1
 8010b04:	409a      	lsls	r2, r3
 8010b06:	4b18      	ldr	r3, [pc, #96]	@ (8010b68 <xTaskRemoveFromEventList+0xb4>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	4a16      	ldr	r2, [pc, #88]	@ (8010b68 <xTaskRemoveFromEventList+0xb4>)
 8010b0e:	6013      	str	r3, [r2, #0]
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b14:	4613      	mov	r3, r2
 8010b16:	009b      	lsls	r3, r3, #2
 8010b18:	4413      	add	r3, r2
 8010b1a:	009b      	lsls	r3, r3, #2
 8010b1c:	4a13      	ldr	r2, [pc, #76]	@ (8010b6c <xTaskRemoveFromEventList+0xb8>)
 8010b1e:	441a      	add	r2, r3
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	3304      	adds	r3, #4
 8010b24:	4619      	mov	r1, r3
 8010b26:	4610      	mov	r0, r2
 8010b28:	f7fe fb81 	bl	800f22e <vListInsertEnd>
 8010b2c:	e005      	b.n	8010b3a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	3318      	adds	r3, #24
 8010b32:	4619      	mov	r1, r3
 8010b34:	480e      	ldr	r0, [pc, #56]	@ (8010b70 <xTaskRemoveFromEventList+0xbc>)
 8010b36:	f7fe fb7a 	bl	800f22e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010b74 <xTaskRemoveFromEventList+0xc0>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d905      	bls.n	8010b54 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010b78 <xTaskRemoveFromEventList+0xc4>)
 8010b4e:	2201      	movs	r2, #1
 8010b50:	601a      	str	r2, [r3, #0]
 8010b52:	e001      	b.n	8010b58 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8010b54:	2300      	movs	r3, #0
 8010b56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010b58:	697b      	ldr	r3, [r7, #20]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3718      	adds	r7, #24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	20005620 	.word	0x20005620
 8010b68:	20005600 	.word	0x20005600
 8010b6c:	200054fc 	.word	0x200054fc
 8010b70:	200055b8 	.word	0x200055b8
 8010b74:	200054f8 	.word	0x200054f8
 8010b78:	2000560c 	.word	0x2000560c

08010b7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010b7c:	b480      	push	{r7}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010b84:	4b06      	ldr	r3, [pc, #24]	@ (8010ba0 <vTaskInternalSetTimeOutState+0x24>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010b8c:	4b05      	ldr	r3, [pc, #20]	@ (8010ba4 <vTaskInternalSetTimeOutState+0x28>)
 8010b8e:	681a      	ldr	r2, [r3, #0]
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	605a      	str	r2, [r3, #4]
}
 8010b94:	bf00      	nop
 8010b96:	370c      	adds	r7, #12
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9e:	4770      	bx	lr
 8010ba0:	20005610 	.word	0x20005610
 8010ba4:	200055fc 	.word	0x200055fc

08010ba8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b088      	sub	sp, #32
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d10b      	bne.n	8010bd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8010bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bbc:	f383 8811 	msr	BASEPRI, r3
 8010bc0:	f3bf 8f6f 	isb	sy
 8010bc4:	f3bf 8f4f 	dsb	sy
 8010bc8:	613b      	str	r3, [r7, #16]
}
 8010bca:	bf00      	nop
 8010bcc:	bf00      	nop
 8010bce:	e7fd      	b.n	8010bcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d10b      	bne.n	8010bee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
 8010be6:	60fb      	str	r3, [r7, #12]
}
 8010be8:	bf00      	nop
 8010bea:	bf00      	nop
 8010bec:	e7fd      	b.n	8010bea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8010bee:	f000 fc7b 	bl	80114e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8010c68 <xTaskCheckForTimeOut+0xc0>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	69ba      	ldr	r2, [r7, #24]
 8010bfe:	1ad3      	subs	r3, r2, r3
 8010c00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0a:	d102      	bne.n	8010c12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	61fb      	str	r3, [r7, #28]
 8010c10:	e023      	b.n	8010c5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	4b15      	ldr	r3, [pc, #84]	@ (8010c6c <xTaskCheckForTimeOut+0xc4>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d007      	beq.n	8010c2e <xTaskCheckForTimeOut+0x86>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	685b      	ldr	r3, [r3, #4]
 8010c22:	69ba      	ldr	r2, [r7, #24]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d302      	bcc.n	8010c2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	61fb      	str	r3, [r7, #28]
 8010c2c:	e015      	b.n	8010c5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d20b      	bcs.n	8010c50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	1ad2      	subs	r2, r2, r3
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7ff ff99 	bl	8010b7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	61fb      	str	r3, [r7, #28]
 8010c4e:	e004      	b.n	8010c5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	2200      	movs	r2, #0
 8010c54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010c56:	2301      	movs	r3, #1
 8010c58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010c5a:	f000 fc77 	bl	801154c <vPortExitCritical>

	return xReturn;
 8010c5e:	69fb      	ldr	r3, [r7, #28]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3720      	adds	r7, #32
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	200055fc 	.word	0x200055fc
 8010c6c:	20005610 	.word	0x20005610

08010c70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010c70:	b480      	push	{r7}
 8010c72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010c74:	4b03      	ldr	r3, [pc, #12]	@ (8010c84 <vTaskMissedYield+0x14>)
 8010c76:	2201      	movs	r2, #1
 8010c78:	601a      	str	r2, [r3, #0]
}
 8010c7a:	bf00      	nop
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr
 8010c84:	2000560c 	.word	0x2000560c

08010c88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010c90:	f000 f852 	bl	8010d38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010c94:	4b06      	ldr	r3, [pc, #24]	@ (8010cb0 <prvIdleTask+0x28>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d9f9      	bls.n	8010c90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010c9c:	4b05      	ldr	r3, [pc, #20]	@ (8010cb4 <prvIdleTask+0x2c>)
 8010c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ca2:	601a      	str	r2, [r3, #0]
 8010ca4:	f3bf 8f4f 	dsb	sy
 8010ca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010cac:	e7f0      	b.n	8010c90 <prvIdleTask+0x8>
 8010cae:	bf00      	nop
 8010cb0:	200054fc 	.word	0x200054fc
 8010cb4:	e000ed04 	.word	0xe000ed04

08010cb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	607b      	str	r3, [r7, #4]
 8010cc2:	e00c      	b.n	8010cde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	4413      	add	r3, r2
 8010ccc:	009b      	lsls	r3, r3, #2
 8010cce:	4a12      	ldr	r2, [pc, #72]	@ (8010d18 <prvInitialiseTaskLists+0x60>)
 8010cd0:	4413      	add	r3, r2
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fe fa7e 	bl	800f1d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	3301      	adds	r3, #1
 8010cdc:	607b      	str	r3, [r7, #4]
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2b06      	cmp	r3, #6
 8010ce2:	d9ef      	bls.n	8010cc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010ce4:	480d      	ldr	r0, [pc, #52]	@ (8010d1c <prvInitialiseTaskLists+0x64>)
 8010ce6:	f7fe fa75 	bl	800f1d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010cea:	480d      	ldr	r0, [pc, #52]	@ (8010d20 <prvInitialiseTaskLists+0x68>)
 8010cec:	f7fe fa72 	bl	800f1d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010cf0:	480c      	ldr	r0, [pc, #48]	@ (8010d24 <prvInitialiseTaskLists+0x6c>)
 8010cf2:	f7fe fa6f 	bl	800f1d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010cf6:	480c      	ldr	r0, [pc, #48]	@ (8010d28 <prvInitialiseTaskLists+0x70>)
 8010cf8:	f7fe fa6c 	bl	800f1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010cfc:	480b      	ldr	r0, [pc, #44]	@ (8010d2c <prvInitialiseTaskLists+0x74>)
 8010cfe:	f7fe fa69 	bl	800f1d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010d02:	4b0b      	ldr	r3, [pc, #44]	@ (8010d30 <prvInitialiseTaskLists+0x78>)
 8010d04:	4a05      	ldr	r2, [pc, #20]	@ (8010d1c <prvInitialiseTaskLists+0x64>)
 8010d06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010d08:	4b0a      	ldr	r3, [pc, #40]	@ (8010d34 <prvInitialiseTaskLists+0x7c>)
 8010d0a:	4a05      	ldr	r2, [pc, #20]	@ (8010d20 <prvInitialiseTaskLists+0x68>)
 8010d0c:	601a      	str	r2, [r3, #0]
}
 8010d0e:	bf00      	nop
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	200054fc 	.word	0x200054fc
 8010d1c:	20005588 	.word	0x20005588
 8010d20:	2000559c 	.word	0x2000559c
 8010d24:	200055b8 	.word	0x200055b8
 8010d28:	200055cc 	.word	0x200055cc
 8010d2c:	200055e4 	.word	0x200055e4
 8010d30:	200055b0 	.word	0x200055b0
 8010d34:	200055b4 	.word	0x200055b4

08010d38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d3e:	e019      	b.n	8010d74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010d40:	f000 fbd2 	bl	80114e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d44:	4b10      	ldr	r3, [pc, #64]	@ (8010d88 <prvCheckTasksWaitingTermination+0x50>)
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	4618      	mov	r0, r3
 8010d52:	f7fe fac9 	bl	800f2e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010d56:	4b0d      	ldr	r3, [pc, #52]	@ (8010d8c <prvCheckTasksWaitingTermination+0x54>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8010d8c <prvCheckTasksWaitingTermination+0x54>)
 8010d5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010d60:	4b0b      	ldr	r3, [pc, #44]	@ (8010d90 <prvCheckTasksWaitingTermination+0x58>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	3b01      	subs	r3, #1
 8010d66:	4a0a      	ldr	r2, [pc, #40]	@ (8010d90 <prvCheckTasksWaitingTermination+0x58>)
 8010d68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010d6a:	f000 fbef 	bl	801154c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 f810 	bl	8010d94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010d74:	4b06      	ldr	r3, [pc, #24]	@ (8010d90 <prvCheckTasksWaitingTermination+0x58>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1e1      	bne.n	8010d40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010d7c:	bf00      	nop
 8010d7e:	bf00      	nop
 8010d80:	3708      	adds	r7, #8
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	200055cc 	.word	0x200055cc
 8010d8c:	200055f8 	.word	0x200055f8
 8010d90:	200055e0 	.word	0x200055e0

08010d94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b084      	sub	sp, #16
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	334c      	adds	r3, #76	@ 0x4c
 8010da0:	4618      	mov	r0, r3
 8010da2:	f00c fdb5 	bl	801d910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d108      	bne.n	8010dc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010db4:	4618      	mov	r0, r3
 8010db6:	f000 fd87 	bl	80118c8 <vPortFree>
				vPortFree( pxTCB );
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fd84 	bl	80118c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010dc0:	e019      	b.n	8010df6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d103      	bne.n	8010dd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 fd7b 	bl	80118c8 <vPortFree>
	}
 8010dd2:	e010      	b.n	8010df6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010dda:	2b02      	cmp	r3, #2
 8010ddc:	d00b      	beq.n	8010df6 <prvDeleteTCB+0x62>
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	60fb      	str	r3, [r7, #12]
}
 8010df0:	bf00      	nop
 8010df2:	bf00      	nop
 8010df4:	e7fd      	b.n	8010df2 <prvDeleteTCB+0x5e>
	}
 8010df6:	bf00      	nop
 8010df8:	3710      	adds	r7, #16
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
	...

08010e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e06:	4b0c      	ldr	r3, [pc, #48]	@ (8010e38 <prvResetNextTaskUnblockTime+0x38>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d104      	bne.n	8010e1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010e10:	4b0a      	ldr	r3, [pc, #40]	@ (8010e3c <prvResetNextTaskUnblockTime+0x3c>)
 8010e12:	f04f 32ff 	mov.w	r2, #4294967295
 8010e16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010e18:	e008      	b.n	8010e2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e1a:	4b07      	ldr	r3, [pc, #28]	@ (8010e38 <prvResetNextTaskUnblockTime+0x38>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	4a04      	ldr	r2, [pc, #16]	@ (8010e3c <prvResetNextTaskUnblockTime+0x3c>)
 8010e2a:	6013      	str	r3, [r2, #0]
}
 8010e2c:	bf00      	nop
 8010e2e:	370c      	adds	r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr
 8010e38:	200055b0 	.word	0x200055b0
 8010e3c:	20005618 	.word	0x20005618

08010e40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010e46:	4b0b      	ldr	r3, [pc, #44]	@ (8010e74 <xTaskGetSchedulerState+0x34>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d102      	bne.n	8010e54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010e4e:	2301      	movs	r3, #1
 8010e50:	607b      	str	r3, [r7, #4]
 8010e52:	e008      	b.n	8010e66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e54:	4b08      	ldr	r3, [pc, #32]	@ (8010e78 <xTaskGetSchedulerState+0x38>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d102      	bne.n	8010e62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010e5c:	2302      	movs	r3, #2
 8010e5e:	607b      	str	r3, [r7, #4]
 8010e60:	e001      	b.n	8010e66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010e62:	2300      	movs	r3, #0
 8010e64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010e66:	687b      	ldr	r3, [r7, #4]
	}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	370c      	adds	r7, #12
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e72:	4770      	bx	lr
 8010e74:	20005604 	.word	0x20005604
 8010e78:	20005620 	.word	0x20005620

08010e7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d05e      	beq.n	8010f50 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e96:	4b31      	ldr	r3, [pc, #196]	@ (8010f5c <xTaskPriorityInherit+0xe0>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d24e      	bcs.n	8010f3e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	db06      	blt.n	8010eb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8010f5c <xTaskPriorityInherit+0xe0>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eae:	f1c3 0207 	rsb	r2, r3, #7
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	6959      	ldr	r1, [r3, #20]
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	4413      	add	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4a26      	ldr	r2, [pc, #152]	@ (8010f60 <xTaskPriorityInherit+0xe4>)
 8010ec8:	4413      	add	r3, r2
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	d12f      	bne.n	8010f2e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7fe fa08 	bl	800f2e8 <uxListRemove>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10a      	bne.n	8010ef4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee2:	2201      	movs	r2, #1
 8010ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee8:	43da      	mvns	r2, r3
 8010eea:	4b1e      	ldr	r3, [pc, #120]	@ (8010f64 <xTaskPriorityInherit+0xe8>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4013      	ands	r3, r2
 8010ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8010f64 <xTaskPriorityInherit+0xe8>)
 8010ef2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010ef4:	4b19      	ldr	r3, [pc, #100]	@ (8010f5c <xTaskPriorityInherit+0xe0>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f02:	2201      	movs	r2, #1
 8010f04:	409a      	lsls	r2, r3
 8010f06:	4b17      	ldr	r3, [pc, #92]	@ (8010f64 <xTaskPriorityInherit+0xe8>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	4a15      	ldr	r2, [pc, #84]	@ (8010f64 <xTaskPriorityInherit+0xe8>)
 8010f0e:	6013      	str	r3, [r2, #0]
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f14:	4613      	mov	r3, r2
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	4413      	add	r3, r2
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	4a10      	ldr	r2, [pc, #64]	@ (8010f60 <xTaskPriorityInherit+0xe4>)
 8010f1e:	441a      	add	r2, r3
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	3304      	adds	r3, #4
 8010f24:	4619      	mov	r1, r3
 8010f26:	4610      	mov	r0, r2
 8010f28:	f7fe f981 	bl	800f22e <vListInsertEnd>
 8010f2c:	e004      	b.n	8010f38 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010f5c <xTaskPriorityInherit+0xe0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	60fb      	str	r3, [r7, #12]
 8010f3c:	e008      	b.n	8010f50 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f42:	4b06      	ldr	r3, [pc, #24]	@ (8010f5c <xTaskPriorityInherit+0xe0>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d201      	bcs.n	8010f50 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f50:	68fb      	ldr	r3, [r7, #12]
	}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	200054f8 	.word	0x200054f8
 8010f60:	200054fc 	.word	0x200054fc
 8010f64:	20005600 	.word	0x20005600

08010f68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010f68:	b580      	push	{r7, lr}
 8010f6a:	b086      	sub	sp, #24
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010f74:	2300      	movs	r3, #0
 8010f76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d070      	beq.n	8011060 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010f7e:	4b3b      	ldr	r3, [pc, #236]	@ (801106c <xTaskPriorityDisinherit+0x104>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	693a      	ldr	r2, [r7, #16]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d00b      	beq.n	8010fa0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8010f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f8c:	f383 8811 	msr	BASEPRI, r3
 8010f90:	f3bf 8f6f 	isb	sy
 8010f94:	f3bf 8f4f 	dsb	sy
 8010f98:	60fb      	str	r3, [r7, #12]
}
 8010f9a:	bf00      	nop
 8010f9c:	bf00      	nop
 8010f9e:	e7fd      	b.n	8010f9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10b      	bne.n	8010fc0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8010fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fac:	f383 8811 	msr	BASEPRI, r3
 8010fb0:	f3bf 8f6f 	isb	sy
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	60bb      	str	r3, [r7, #8]
}
 8010fba:	bf00      	nop
 8010fbc:	bf00      	nop
 8010fbe:	e7fd      	b.n	8010fbc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fc4:	1e5a      	subs	r2, r3, #1
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d044      	beq.n	8011060 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d140      	bne.n	8011060 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	3304      	adds	r3, #4
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7fe f980 	bl	800f2e8 <uxListRemove>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d115      	bne.n	801101a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ff2:	491f      	ldr	r1, [pc, #124]	@ (8011070 <xTaskPriorityDisinherit+0x108>)
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	4413      	add	r3, r2
 8010ffa:	009b      	lsls	r3, r3, #2
 8010ffc:	440b      	add	r3, r1
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10a      	bne.n	801101a <xTaskPriorityDisinherit+0xb2>
 8011004:	693b      	ldr	r3, [r7, #16]
 8011006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011008:	2201      	movs	r2, #1
 801100a:	fa02 f303 	lsl.w	r3, r2, r3
 801100e:	43da      	mvns	r2, r3
 8011010:	4b18      	ldr	r3, [pc, #96]	@ (8011074 <xTaskPriorityDisinherit+0x10c>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4013      	ands	r3, r2
 8011016:	4a17      	ldr	r2, [pc, #92]	@ (8011074 <xTaskPriorityDisinherit+0x10c>)
 8011018:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011026:	f1c3 0207 	rsb	r2, r3, #7
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011032:	2201      	movs	r2, #1
 8011034:	409a      	lsls	r2, r3
 8011036:	4b0f      	ldr	r3, [pc, #60]	@ (8011074 <xTaskPriorityDisinherit+0x10c>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4313      	orrs	r3, r2
 801103c:	4a0d      	ldr	r2, [pc, #52]	@ (8011074 <xTaskPriorityDisinherit+0x10c>)
 801103e:	6013      	str	r3, [r2, #0]
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011044:	4613      	mov	r3, r2
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	4413      	add	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4a08      	ldr	r2, [pc, #32]	@ (8011070 <xTaskPriorityDisinherit+0x108>)
 801104e:	441a      	add	r2, r3
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	3304      	adds	r3, #4
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	f7fe f8e9 	bl	800f22e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801105c:	2301      	movs	r3, #1
 801105e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011060:	697b      	ldr	r3, [r7, #20]
	}
 8011062:	4618      	mov	r0, r3
 8011064:	3718      	adds	r7, #24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	200054f8 	.word	0x200054f8
 8011070:	200054fc 	.word	0x200054fc
 8011074:	20005600 	.word	0x20005600

08011078 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011078:	b580      	push	{r7, lr}
 801107a:	b088      	sub	sp, #32
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011086:	2301      	movs	r3, #1
 8011088:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d079      	beq.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011094:	2b00      	cmp	r3, #0
 8011096:	d10b      	bne.n	80110b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	60fb      	str	r3, [r7, #12]
}
 80110aa:	bf00      	nop
 80110ac:	bf00      	nop
 80110ae:	e7fd      	b.n	80110ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d902      	bls.n	80110c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	61fb      	str	r3, [r7, #28]
 80110be:	e002      	b.n	80110c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80110c6:	69bb      	ldr	r3, [r7, #24]
 80110c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d059      	beq.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80110d4:	697a      	ldr	r2, [r7, #20]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d154      	bne.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80110da:	4b2c      	ldr	r3, [pc, #176]	@ (801118c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	69ba      	ldr	r2, [r7, #24]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d10b      	bne.n	80110fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80110e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	60bb      	str	r3, [r7, #8]
}
 80110f6:	bf00      	nop
 80110f8:	bf00      	nop
 80110fa:	e7fd      	b.n	80110f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011100:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	69fa      	ldr	r2, [r7, #28]
 8011106:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011108:	69bb      	ldr	r3, [r7, #24]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	2b00      	cmp	r3, #0
 801110e:	db04      	blt.n	801111a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	f1c3 0207 	rsb	r2, r3, #7
 8011116:	69bb      	ldr	r3, [r7, #24]
 8011118:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801111a:	69bb      	ldr	r3, [r7, #24]
 801111c:	6959      	ldr	r1, [r3, #20]
 801111e:	693a      	ldr	r2, [r7, #16]
 8011120:	4613      	mov	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4413      	add	r3, r2
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	4a19      	ldr	r2, [pc, #100]	@ (8011190 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801112a:	4413      	add	r3, r2
 801112c:	4299      	cmp	r1, r3
 801112e:	d129      	bne.n	8011184 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	3304      	adds	r3, #4
 8011134:	4618      	mov	r0, r3
 8011136:	f7fe f8d7 	bl	800f2e8 <uxListRemove>
 801113a:	4603      	mov	r3, r0
 801113c:	2b00      	cmp	r3, #0
 801113e:	d10a      	bne.n	8011156 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011140:	69bb      	ldr	r3, [r7, #24]
 8011142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011144:	2201      	movs	r2, #1
 8011146:	fa02 f303 	lsl.w	r3, r2, r3
 801114a:	43da      	mvns	r2, r3
 801114c:	4b11      	ldr	r3, [pc, #68]	@ (8011194 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4013      	ands	r3, r2
 8011152:	4a10      	ldr	r2, [pc, #64]	@ (8011194 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011154:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011156:	69bb      	ldr	r3, [r7, #24]
 8011158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115a:	2201      	movs	r2, #1
 801115c:	409a      	lsls	r2, r3
 801115e:	4b0d      	ldr	r3, [pc, #52]	@ (8011194 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	4313      	orrs	r3, r2
 8011164:	4a0b      	ldr	r2, [pc, #44]	@ (8011194 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8011166:	6013      	str	r3, [r2, #0]
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801116c:	4613      	mov	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	4a06      	ldr	r2, [pc, #24]	@ (8011190 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011176:	441a      	add	r2, r3
 8011178:	69bb      	ldr	r3, [r7, #24]
 801117a:	3304      	adds	r3, #4
 801117c:	4619      	mov	r1, r3
 801117e:	4610      	mov	r0, r2
 8011180:	f7fe f855 	bl	800f22e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011184:	bf00      	nop
 8011186:	3720      	adds	r7, #32
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	200054f8 	.word	0x200054f8
 8011190:	200054fc 	.word	0x200054fc
 8011194:	20005600 	.word	0x20005600

08011198 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011198:	b480      	push	{r7}
 801119a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801119c:	4b07      	ldr	r3, [pc, #28]	@ (80111bc <pvTaskIncrementMutexHeldCount+0x24>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d004      	beq.n	80111ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80111a4:	4b05      	ldr	r3, [pc, #20]	@ (80111bc <pvTaskIncrementMutexHeldCount+0x24>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80111aa:	3201      	adds	r2, #1
 80111ac:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80111ae:	4b03      	ldr	r3, [pc, #12]	@ (80111bc <pvTaskIncrementMutexHeldCount+0x24>)
 80111b0:	681b      	ldr	r3, [r3, #0]
	}
 80111b2:	4618      	mov	r0, r3
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	200054f8 	.word	0x200054f8

080111c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b084      	sub	sp, #16
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80111ca:	4b29      	ldr	r3, [pc, #164]	@ (8011270 <prvAddCurrentTaskToDelayedList+0xb0>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111d0:	4b28      	ldr	r3, [pc, #160]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	3304      	adds	r3, #4
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7fe f886 	bl	800f2e8 <uxListRemove>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10b      	bne.n	80111fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80111e2:	4b24      	ldr	r3, [pc, #144]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111e8:	2201      	movs	r2, #1
 80111ea:	fa02 f303 	lsl.w	r3, r2, r3
 80111ee:	43da      	mvns	r2, r3
 80111f0:	4b21      	ldr	r3, [pc, #132]	@ (8011278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4013      	ands	r3, r2
 80111f6:	4a20      	ldr	r2, [pc, #128]	@ (8011278 <prvAddCurrentTaskToDelayedList+0xb8>)
 80111f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011200:	d10a      	bne.n	8011218 <prvAddCurrentTaskToDelayedList+0x58>
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011208:	4b1a      	ldr	r3, [pc, #104]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	3304      	adds	r3, #4
 801120e:	4619      	mov	r1, r3
 8011210:	481a      	ldr	r0, [pc, #104]	@ (801127c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011212:	f7fe f80c 	bl	800f22e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011216:	e026      	b.n	8011266 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4413      	add	r3, r2
 801121e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011220:	4b14      	ldr	r3, [pc, #80]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	68ba      	ldr	r2, [r7, #8]
 8011226:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	429a      	cmp	r2, r3
 801122e:	d209      	bcs.n	8011244 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011230:	4b13      	ldr	r3, [pc, #76]	@ (8011280 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011232:	681a      	ldr	r2, [r3, #0]
 8011234:	4b0f      	ldr	r3, [pc, #60]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	3304      	adds	r3, #4
 801123a:	4619      	mov	r1, r3
 801123c:	4610      	mov	r0, r2
 801123e:	f7fe f81a 	bl	800f276 <vListInsert>
}
 8011242:	e010      	b.n	8011266 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011244:	4b0f      	ldr	r3, [pc, #60]	@ (8011284 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011246:	681a      	ldr	r2, [r3, #0]
 8011248:	4b0a      	ldr	r3, [pc, #40]	@ (8011274 <prvAddCurrentTaskToDelayedList+0xb4>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	3304      	adds	r3, #4
 801124e:	4619      	mov	r1, r3
 8011250:	4610      	mov	r0, r2
 8011252:	f7fe f810 	bl	800f276 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011256:	4b0c      	ldr	r3, [pc, #48]	@ (8011288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68ba      	ldr	r2, [r7, #8]
 801125c:	429a      	cmp	r2, r3
 801125e:	d202      	bcs.n	8011266 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011260:	4a09      	ldr	r2, [pc, #36]	@ (8011288 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	6013      	str	r3, [r2, #0]
}
 8011266:	bf00      	nop
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	200055fc 	.word	0x200055fc
 8011274:	200054f8 	.word	0x200054f8
 8011278:	20005600 	.word	0x20005600
 801127c:	200055e4 	.word	0x200055e4
 8011280:	200055b4 	.word	0x200055b4
 8011284:	200055b0 	.word	0x200055b0
 8011288:	20005618 	.word	0x20005618

0801128c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801128c:	b480      	push	{r7}
 801128e:	b085      	sub	sp, #20
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	3b04      	subs	r3, #4
 801129c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80112a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3b04      	subs	r3, #4
 80112aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	f023 0201 	bic.w	r2, r3, #1
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	3b04      	subs	r3, #4
 80112ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80112bc:	4a0c      	ldr	r2, [pc, #48]	@ (80112f0 <pxPortInitialiseStack+0x64>)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	3b14      	subs	r3, #20
 80112c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80112c8:	687a      	ldr	r2, [r7, #4]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3b04      	subs	r3, #4
 80112d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f06f 0202 	mvn.w	r2, #2
 80112da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	3b20      	subs	r3, #32
 80112e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80112e2:	68fb      	ldr	r3, [r7, #12]
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3714      	adds	r7, #20
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	080112f5 	.word	0x080112f5

080112f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80112fa:	2300      	movs	r3, #0
 80112fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80112fe:	4b13      	ldr	r3, [pc, #76]	@ (801134c <prvTaskExitError+0x58>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011306:	d00b      	beq.n	8011320 <prvTaskExitError+0x2c>
	__asm volatile
 8011308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801130c:	f383 8811 	msr	BASEPRI, r3
 8011310:	f3bf 8f6f 	isb	sy
 8011314:	f3bf 8f4f 	dsb	sy
 8011318:	60fb      	str	r3, [r7, #12]
}
 801131a:	bf00      	nop
 801131c:	bf00      	nop
 801131e:	e7fd      	b.n	801131c <prvTaskExitError+0x28>
	__asm volatile
 8011320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011324:	f383 8811 	msr	BASEPRI, r3
 8011328:	f3bf 8f6f 	isb	sy
 801132c:	f3bf 8f4f 	dsb	sy
 8011330:	60bb      	str	r3, [r7, #8]
}
 8011332:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011334:	bf00      	nop
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d0fc      	beq.n	8011336 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801133c:	bf00      	nop
 801133e:	bf00      	nop
 8011340:	3714      	adds	r7, #20
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr
 801134a:	bf00      	nop
 801134c:	20000098 	.word	0x20000098

08011350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011350:	4b07      	ldr	r3, [pc, #28]	@ (8011370 <pxCurrentTCBConst2>)
 8011352:	6819      	ldr	r1, [r3, #0]
 8011354:	6808      	ldr	r0, [r1, #0]
 8011356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135a:	f380 8809 	msr	PSP, r0
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f04f 0000 	mov.w	r0, #0
 8011366:	f380 8811 	msr	BASEPRI, r0
 801136a:	4770      	bx	lr
 801136c:	f3af 8000 	nop.w

08011370 <pxCurrentTCBConst2>:
 8011370:	200054f8 	.word	0x200054f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011374:	bf00      	nop
 8011376:	bf00      	nop

08011378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011378:	4808      	ldr	r0, [pc, #32]	@ (801139c <prvPortStartFirstTask+0x24>)
 801137a:	6800      	ldr	r0, [r0, #0]
 801137c:	6800      	ldr	r0, [r0, #0]
 801137e:	f380 8808 	msr	MSP, r0
 8011382:	f04f 0000 	mov.w	r0, #0
 8011386:	f380 8814 	msr	CONTROL, r0
 801138a:	b662      	cpsie	i
 801138c:	b661      	cpsie	f
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	f3bf 8f6f 	isb	sy
 8011396:	df00      	svc	0
 8011398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801139a:	bf00      	nop
 801139c:	e000ed08 	.word	0xe000ed08

080113a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80113a6:	4b47      	ldr	r3, [pc, #284]	@ (80114c4 <xPortStartScheduler+0x124>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	4a47      	ldr	r2, [pc, #284]	@ (80114c8 <xPortStartScheduler+0x128>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d10b      	bne.n	80113c8 <xPortStartScheduler+0x28>
	__asm volatile
 80113b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	60fb      	str	r3, [r7, #12]
}
 80113c2:	bf00      	nop
 80113c4:	bf00      	nop
 80113c6:	e7fd      	b.n	80113c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80113c8:	4b3e      	ldr	r3, [pc, #248]	@ (80114c4 <xPortStartScheduler+0x124>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4a3f      	ldr	r2, [pc, #252]	@ (80114cc <xPortStartScheduler+0x12c>)
 80113ce:	4293      	cmp	r3, r2
 80113d0:	d10b      	bne.n	80113ea <xPortStartScheduler+0x4a>
	__asm volatile
 80113d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d6:	f383 8811 	msr	BASEPRI, r3
 80113da:	f3bf 8f6f 	isb	sy
 80113de:	f3bf 8f4f 	dsb	sy
 80113e2:	613b      	str	r3, [r7, #16]
}
 80113e4:	bf00      	nop
 80113e6:	bf00      	nop
 80113e8:	e7fd      	b.n	80113e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80113ea:	4b39      	ldr	r3, [pc, #228]	@ (80114d0 <xPortStartScheduler+0x130>)
 80113ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	22ff      	movs	r2, #255	@ 0xff
 80113fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	b2db      	uxtb	r3, r3
 8011402:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011404:	78fb      	ldrb	r3, [r7, #3]
 8011406:	b2db      	uxtb	r3, r3
 8011408:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801140c:	b2da      	uxtb	r2, r3
 801140e:	4b31      	ldr	r3, [pc, #196]	@ (80114d4 <xPortStartScheduler+0x134>)
 8011410:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011412:	4b31      	ldr	r3, [pc, #196]	@ (80114d8 <xPortStartScheduler+0x138>)
 8011414:	2207      	movs	r2, #7
 8011416:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011418:	e009      	b.n	801142e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801141a:	4b2f      	ldr	r3, [pc, #188]	@ (80114d8 <xPortStartScheduler+0x138>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	3b01      	subs	r3, #1
 8011420:	4a2d      	ldr	r2, [pc, #180]	@ (80114d8 <xPortStartScheduler+0x138>)
 8011422:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011424:	78fb      	ldrb	r3, [r7, #3]
 8011426:	b2db      	uxtb	r3, r3
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	b2db      	uxtb	r3, r3
 801142c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801142e:	78fb      	ldrb	r3, [r7, #3]
 8011430:	b2db      	uxtb	r3, r3
 8011432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011436:	2b80      	cmp	r3, #128	@ 0x80
 8011438:	d0ef      	beq.n	801141a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801143a:	4b27      	ldr	r3, [pc, #156]	@ (80114d8 <xPortStartScheduler+0x138>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f1c3 0307 	rsb	r3, r3, #7
 8011442:	2b04      	cmp	r3, #4
 8011444:	d00b      	beq.n	801145e <xPortStartScheduler+0xbe>
	__asm volatile
 8011446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801144a:	f383 8811 	msr	BASEPRI, r3
 801144e:	f3bf 8f6f 	isb	sy
 8011452:	f3bf 8f4f 	dsb	sy
 8011456:	60bb      	str	r3, [r7, #8]
}
 8011458:	bf00      	nop
 801145a:	bf00      	nop
 801145c:	e7fd      	b.n	801145a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801145e:	4b1e      	ldr	r3, [pc, #120]	@ (80114d8 <xPortStartScheduler+0x138>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	021b      	lsls	r3, r3, #8
 8011464:	4a1c      	ldr	r2, [pc, #112]	@ (80114d8 <xPortStartScheduler+0x138>)
 8011466:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011468:	4b1b      	ldr	r3, [pc, #108]	@ (80114d8 <xPortStartScheduler+0x138>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011470:	4a19      	ldr	r2, [pc, #100]	@ (80114d8 <xPortStartScheduler+0x138>)
 8011472:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	b2da      	uxtb	r2, r3
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801147c:	4b17      	ldr	r3, [pc, #92]	@ (80114dc <xPortStartScheduler+0x13c>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a16      	ldr	r2, [pc, #88]	@ (80114dc <xPortStartScheduler+0x13c>)
 8011482:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011486:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011488:	4b14      	ldr	r3, [pc, #80]	@ (80114dc <xPortStartScheduler+0x13c>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	4a13      	ldr	r2, [pc, #76]	@ (80114dc <xPortStartScheduler+0x13c>)
 801148e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011492:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011494:	f000 f8da 	bl	801164c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011498:	4b11      	ldr	r3, [pc, #68]	@ (80114e0 <xPortStartScheduler+0x140>)
 801149a:	2200      	movs	r2, #0
 801149c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801149e:	f000 f8f9 	bl	8011694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80114a2:	4b10      	ldr	r3, [pc, #64]	@ (80114e4 <xPortStartScheduler+0x144>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	4a0f      	ldr	r2, [pc, #60]	@ (80114e4 <xPortStartScheduler+0x144>)
 80114a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80114ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80114ae:	f7ff ff63 	bl	8011378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80114b2:	f7ff fa75 	bl	80109a0 <vTaskSwitchContext>
	prvTaskExitError();
 80114b6:	f7ff ff1d 	bl	80112f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3718      	adds	r7, #24
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	e000ed00 	.word	0xe000ed00
 80114c8:	410fc271 	.word	0x410fc271
 80114cc:	410fc270 	.word	0x410fc270
 80114d0:	e000e400 	.word	0xe000e400
 80114d4:	20005624 	.word	0x20005624
 80114d8:	20005628 	.word	0x20005628
 80114dc:	e000ed20 	.word	0xe000ed20
 80114e0:	20000098 	.word	0x20000098
 80114e4:	e000ef34 	.word	0xe000ef34

080114e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	607b      	str	r3, [r7, #4]
}
 8011500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011502:	4b10      	ldr	r3, [pc, #64]	@ (8011544 <vPortEnterCritical+0x5c>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	3301      	adds	r3, #1
 8011508:	4a0e      	ldr	r2, [pc, #56]	@ (8011544 <vPortEnterCritical+0x5c>)
 801150a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801150c:	4b0d      	ldr	r3, [pc, #52]	@ (8011544 <vPortEnterCritical+0x5c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	2b01      	cmp	r3, #1
 8011512:	d110      	bne.n	8011536 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011514:	4b0c      	ldr	r3, [pc, #48]	@ (8011548 <vPortEnterCritical+0x60>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00b      	beq.n	8011536 <vPortEnterCritical+0x4e>
	__asm volatile
 801151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	603b      	str	r3, [r7, #0]
}
 8011530:	bf00      	nop
 8011532:	bf00      	nop
 8011534:	e7fd      	b.n	8011532 <vPortEnterCritical+0x4a>
	}
}
 8011536:	bf00      	nop
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr
 8011542:	bf00      	nop
 8011544:	20000098 	.word	0x20000098
 8011548:	e000ed04 	.word	0xe000ed04

0801154c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011552:	4b12      	ldr	r3, [pc, #72]	@ (801159c <vPortExitCritical+0x50>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d10b      	bne.n	8011572 <vPortExitCritical+0x26>
	__asm volatile
 801155a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801155e:	f383 8811 	msr	BASEPRI, r3
 8011562:	f3bf 8f6f 	isb	sy
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	607b      	str	r3, [r7, #4]
}
 801156c:	bf00      	nop
 801156e:	bf00      	nop
 8011570:	e7fd      	b.n	801156e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011572:	4b0a      	ldr	r3, [pc, #40]	@ (801159c <vPortExitCritical+0x50>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	3b01      	subs	r3, #1
 8011578:	4a08      	ldr	r2, [pc, #32]	@ (801159c <vPortExitCritical+0x50>)
 801157a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801157c:	4b07      	ldr	r3, [pc, #28]	@ (801159c <vPortExitCritical+0x50>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d105      	bne.n	8011590 <vPortExitCritical+0x44>
 8011584:	2300      	movs	r3, #0
 8011586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	f383 8811 	msr	BASEPRI, r3
}
 801158e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011590:	bf00      	nop
 8011592:	370c      	adds	r7, #12
 8011594:	46bd      	mov	sp, r7
 8011596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159a:	4770      	bx	lr
 801159c:	20000098 	.word	0x20000098

080115a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80115a0:	f3ef 8009 	mrs	r0, PSP
 80115a4:	f3bf 8f6f 	isb	sy
 80115a8:	4b15      	ldr	r3, [pc, #84]	@ (8011600 <pxCurrentTCBConst>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	f01e 0f10 	tst.w	lr, #16
 80115b0:	bf08      	it	eq
 80115b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80115b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ba:	6010      	str	r0, [r2, #0]
 80115bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80115c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80115c4:	f380 8811 	msr	BASEPRI, r0
 80115c8:	f3bf 8f4f 	dsb	sy
 80115cc:	f3bf 8f6f 	isb	sy
 80115d0:	f7ff f9e6 	bl	80109a0 <vTaskSwitchContext>
 80115d4:	f04f 0000 	mov.w	r0, #0
 80115d8:	f380 8811 	msr	BASEPRI, r0
 80115dc:	bc09      	pop	{r0, r3}
 80115de:	6819      	ldr	r1, [r3, #0]
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e6:	f01e 0f10 	tst.w	lr, #16
 80115ea:	bf08      	it	eq
 80115ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80115f0:	f380 8809 	msr	PSP, r0
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	4770      	bx	lr
 80115fa:	bf00      	nop
 80115fc:	f3af 8000 	nop.w

08011600 <pxCurrentTCBConst>:
 8011600:	200054f8 	.word	0x200054f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011604:	bf00      	nop
 8011606:	bf00      	nop

08011608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
	__asm volatile
 801160e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	607b      	str	r3, [r7, #4]
}
 8011620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011622:	f7ff f903 	bl	801082c <xTaskIncrementTick>
 8011626:	4603      	mov	r3, r0
 8011628:	2b00      	cmp	r3, #0
 801162a:	d003      	beq.n	8011634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801162c:	4b06      	ldr	r3, [pc, #24]	@ (8011648 <SysTick_Handler+0x40>)
 801162e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011632:	601a      	str	r2, [r3, #0]
 8011634:	2300      	movs	r3, #0
 8011636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	f383 8811 	msr	BASEPRI, r3
}
 801163e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011640:	bf00      	nop
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	e000ed04 	.word	0xe000ed04

0801164c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801164c:	b480      	push	{r7}
 801164e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011650:	4b0b      	ldr	r3, [pc, #44]	@ (8011680 <vPortSetupTimerInterrupt+0x34>)
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011656:	4b0b      	ldr	r3, [pc, #44]	@ (8011684 <vPortSetupTimerInterrupt+0x38>)
 8011658:	2200      	movs	r2, #0
 801165a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801165c:	4b0a      	ldr	r3, [pc, #40]	@ (8011688 <vPortSetupTimerInterrupt+0x3c>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4a0a      	ldr	r2, [pc, #40]	@ (801168c <vPortSetupTimerInterrupt+0x40>)
 8011662:	fba2 2303 	umull	r2, r3, r2, r3
 8011666:	099b      	lsrs	r3, r3, #6
 8011668:	4a09      	ldr	r2, [pc, #36]	@ (8011690 <vPortSetupTimerInterrupt+0x44>)
 801166a:	3b01      	subs	r3, #1
 801166c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801166e:	4b04      	ldr	r3, [pc, #16]	@ (8011680 <vPortSetupTimerInterrupt+0x34>)
 8011670:	2207      	movs	r2, #7
 8011672:	601a      	str	r2, [r3, #0]
}
 8011674:	bf00      	nop
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr
 801167e:	bf00      	nop
 8011680:	e000e010 	.word	0xe000e010
 8011684:	e000e018 	.word	0xe000e018
 8011688:	20000000 	.word	0x20000000
 801168c:	10624dd3 	.word	0x10624dd3
 8011690:	e000e014 	.word	0xe000e014

08011694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011694:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80116a4 <vPortEnableVFP+0x10>
 8011698:	6801      	ldr	r1, [r0, #0]
 801169a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801169e:	6001      	str	r1, [r0, #0]
 80116a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80116a2:	bf00      	nop
 80116a4:	e000ed88 	.word	0xe000ed88

080116a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80116ae:	f3ef 8305 	mrs	r3, IPSR
 80116b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2b0f      	cmp	r3, #15
 80116b8:	d915      	bls.n	80116e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80116ba:	4a18      	ldr	r2, [pc, #96]	@ (801171c <vPortValidateInterruptPriority+0x74>)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	4413      	add	r3, r2
 80116c0:	781b      	ldrb	r3, [r3, #0]
 80116c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80116c4:	4b16      	ldr	r3, [pc, #88]	@ (8011720 <vPortValidateInterruptPriority+0x78>)
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	7afa      	ldrb	r2, [r7, #11]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d20b      	bcs.n	80116e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80116ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116d2:	f383 8811 	msr	BASEPRI, r3
 80116d6:	f3bf 8f6f 	isb	sy
 80116da:	f3bf 8f4f 	dsb	sy
 80116de:	607b      	str	r3, [r7, #4]
}
 80116e0:	bf00      	nop
 80116e2:	bf00      	nop
 80116e4:	e7fd      	b.n	80116e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80116e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011724 <vPortValidateInterruptPriority+0x7c>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80116ee:	4b0e      	ldr	r3, [pc, #56]	@ (8011728 <vPortValidateInterruptPriority+0x80>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d90b      	bls.n	801170e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80116f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116fa:	f383 8811 	msr	BASEPRI, r3
 80116fe:	f3bf 8f6f 	isb	sy
 8011702:	f3bf 8f4f 	dsb	sy
 8011706:	603b      	str	r3, [r7, #0]
}
 8011708:	bf00      	nop
 801170a:	bf00      	nop
 801170c:	e7fd      	b.n	801170a <vPortValidateInterruptPriority+0x62>
	}
 801170e:	bf00      	nop
 8011710:	3714      	adds	r7, #20
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr
 801171a:	bf00      	nop
 801171c:	e000e3f0 	.word	0xe000e3f0
 8011720:	20005624 	.word	0x20005624
 8011724:	e000ed0c 	.word	0xe000ed0c
 8011728:	20005628 	.word	0x20005628

0801172c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08a      	sub	sp, #40	@ 0x28
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011734:	2300      	movs	r3, #0
 8011736:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011738:	f7fe ffaa 	bl	8010690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801173c:	4b5c      	ldr	r3, [pc, #368]	@ (80118b0 <pvPortMalloc+0x184>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d101      	bne.n	8011748 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011744:	f000 f924 	bl	8011990 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011748:	4b5a      	ldr	r3, [pc, #360]	@ (80118b4 <pvPortMalloc+0x188>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	4013      	ands	r3, r2
 8011750:	2b00      	cmp	r3, #0
 8011752:	f040 8095 	bne.w	8011880 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d01e      	beq.n	801179a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801175c:	2208      	movs	r2, #8
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4413      	add	r3, r2
 8011762:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f003 0307 	and.w	r3, r3, #7
 801176a:	2b00      	cmp	r3, #0
 801176c:	d015      	beq.n	801179a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f023 0307 	bic.w	r3, r3, #7
 8011774:	3308      	adds	r3, #8
 8011776:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f003 0307 	and.w	r3, r3, #7
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00b      	beq.n	801179a <pvPortMalloc+0x6e>
	__asm volatile
 8011782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011786:	f383 8811 	msr	BASEPRI, r3
 801178a:	f3bf 8f6f 	isb	sy
 801178e:	f3bf 8f4f 	dsb	sy
 8011792:	617b      	str	r3, [r7, #20]
}
 8011794:	bf00      	nop
 8011796:	bf00      	nop
 8011798:	e7fd      	b.n	8011796 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d06f      	beq.n	8011880 <pvPortMalloc+0x154>
 80117a0:	4b45      	ldr	r3, [pc, #276]	@ (80118b8 <pvPortMalloc+0x18c>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	687a      	ldr	r2, [r7, #4]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d86a      	bhi.n	8011880 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80117aa:	4b44      	ldr	r3, [pc, #272]	@ (80118bc <pvPortMalloc+0x190>)
 80117ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80117ae:	4b43      	ldr	r3, [pc, #268]	@ (80118bc <pvPortMalloc+0x190>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117b4:	e004      	b.n	80117c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80117b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80117ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d903      	bls.n	80117d2 <pvPortMalloc+0xa6>
 80117ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1f1      	bne.n	80117b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80117d2:	4b37      	ldr	r3, [pc, #220]	@ (80118b0 <pvPortMalloc+0x184>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117d8:	429a      	cmp	r2, r3
 80117da:	d051      	beq.n	8011880 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80117dc:	6a3b      	ldr	r3, [r7, #32]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2208      	movs	r2, #8
 80117e2:	4413      	add	r3, r2
 80117e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80117e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80117ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f0:	685a      	ldr	r2, [r3, #4]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	1ad2      	subs	r2, r2, r3
 80117f6:	2308      	movs	r3, #8
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	429a      	cmp	r2, r3
 80117fc:	d920      	bls.n	8011840 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80117fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4413      	add	r3, r2
 8011804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	f003 0307 	and.w	r3, r3, #7
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00b      	beq.n	8011828 <pvPortMalloc+0xfc>
	__asm volatile
 8011810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011814:	f383 8811 	msr	BASEPRI, r3
 8011818:	f3bf 8f6f 	isb	sy
 801181c:	f3bf 8f4f 	dsb	sy
 8011820:	613b      	str	r3, [r7, #16]
}
 8011822:	bf00      	nop
 8011824:	bf00      	nop
 8011826:	e7fd      	b.n	8011824 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801182a:	685a      	ldr	r2, [r3, #4]
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	1ad2      	subs	r2, r2, r3
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801183a:	69b8      	ldr	r0, [r7, #24]
 801183c:	f000 f90a 	bl	8011a54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011840:	4b1d      	ldr	r3, [pc, #116]	@ (80118b8 <pvPortMalloc+0x18c>)
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	1ad3      	subs	r3, r2, r3
 801184a:	4a1b      	ldr	r2, [pc, #108]	@ (80118b8 <pvPortMalloc+0x18c>)
 801184c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801184e:	4b1a      	ldr	r3, [pc, #104]	@ (80118b8 <pvPortMalloc+0x18c>)
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	4b1b      	ldr	r3, [pc, #108]	@ (80118c0 <pvPortMalloc+0x194>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	429a      	cmp	r2, r3
 8011858:	d203      	bcs.n	8011862 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801185a:	4b17      	ldr	r3, [pc, #92]	@ (80118b8 <pvPortMalloc+0x18c>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	4a18      	ldr	r2, [pc, #96]	@ (80118c0 <pvPortMalloc+0x194>)
 8011860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011864:	685a      	ldr	r2, [r3, #4]
 8011866:	4b13      	ldr	r3, [pc, #76]	@ (80118b4 <pvPortMalloc+0x188>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	431a      	orrs	r2, r3
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011872:	2200      	movs	r2, #0
 8011874:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011876:	4b13      	ldr	r3, [pc, #76]	@ (80118c4 <pvPortMalloc+0x198>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3301      	adds	r3, #1
 801187c:	4a11      	ldr	r2, [pc, #68]	@ (80118c4 <pvPortMalloc+0x198>)
 801187e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011880:	f7fe ff14 	bl	80106ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	f003 0307 	and.w	r3, r3, #7
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00b      	beq.n	80118a6 <pvPortMalloc+0x17a>
	__asm volatile
 801188e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011892:	f383 8811 	msr	BASEPRI, r3
 8011896:	f3bf 8f6f 	isb	sy
 801189a:	f3bf 8f4f 	dsb	sy
 801189e:	60fb      	str	r3, [r7, #12]
}
 80118a0:	bf00      	nop
 80118a2:	bf00      	nop
 80118a4:	e7fd      	b.n	80118a2 <pvPortMalloc+0x176>
	return pvReturn;
 80118a6:	69fb      	ldr	r3, [r7, #28]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3728      	adds	r7, #40	@ 0x28
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}
 80118b0:	20009234 	.word	0x20009234
 80118b4:	20009248 	.word	0x20009248
 80118b8:	20009238 	.word	0x20009238
 80118bc:	2000922c 	.word	0x2000922c
 80118c0:	2000923c 	.word	0x2000923c
 80118c4:	20009240 	.word	0x20009240

080118c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d04f      	beq.n	801197a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80118da:	2308      	movs	r3, #8
 80118dc:	425b      	negs	r3, r3
 80118de:	697a      	ldr	r2, [r7, #20]
 80118e0:	4413      	add	r3, r2
 80118e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	4b25      	ldr	r3, [pc, #148]	@ (8011984 <vPortFree+0xbc>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	4013      	ands	r3, r2
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d10b      	bne.n	801190e <vPortFree+0x46>
	__asm volatile
 80118f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118fa:	f383 8811 	msr	BASEPRI, r3
 80118fe:	f3bf 8f6f 	isb	sy
 8011902:	f3bf 8f4f 	dsb	sy
 8011906:	60fb      	str	r3, [r7, #12]
}
 8011908:	bf00      	nop
 801190a:	bf00      	nop
 801190c:	e7fd      	b.n	801190a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00b      	beq.n	801192e <vPortFree+0x66>
	__asm volatile
 8011916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801191a:	f383 8811 	msr	BASEPRI, r3
 801191e:	f3bf 8f6f 	isb	sy
 8011922:	f3bf 8f4f 	dsb	sy
 8011926:	60bb      	str	r3, [r7, #8]
}
 8011928:	bf00      	nop
 801192a:	bf00      	nop
 801192c:	e7fd      	b.n	801192a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	685a      	ldr	r2, [r3, #4]
 8011932:	4b14      	ldr	r3, [pc, #80]	@ (8011984 <vPortFree+0xbc>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	4013      	ands	r3, r2
 8011938:	2b00      	cmp	r3, #0
 801193a:	d01e      	beq.n	801197a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d11a      	bne.n	801197a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	685a      	ldr	r2, [r3, #4]
 8011948:	4b0e      	ldr	r3, [pc, #56]	@ (8011984 <vPortFree+0xbc>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	43db      	mvns	r3, r3
 801194e:	401a      	ands	r2, r3
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011954:	f7fe fe9c 	bl	8010690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	685a      	ldr	r2, [r3, #4]
 801195c:	4b0a      	ldr	r3, [pc, #40]	@ (8011988 <vPortFree+0xc0>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4413      	add	r3, r2
 8011962:	4a09      	ldr	r2, [pc, #36]	@ (8011988 <vPortFree+0xc0>)
 8011964:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011966:	6938      	ldr	r0, [r7, #16]
 8011968:	f000 f874 	bl	8011a54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801196c:	4b07      	ldr	r3, [pc, #28]	@ (801198c <vPortFree+0xc4>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	3301      	adds	r3, #1
 8011972:	4a06      	ldr	r2, [pc, #24]	@ (801198c <vPortFree+0xc4>)
 8011974:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011976:	f7fe fe99 	bl	80106ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801197a:	bf00      	nop
 801197c:	3718      	adds	r7, #24
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	20009248 	.word	0x20009248
 8011988:	20009238 	.word	0x20009238
 801198c:	20009244 	.word	0x20009244

08011990 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011990:	b480      	push	{r7}
 8011992:	b085      	sub	sp, #20
 8011994:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011996:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801199a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801199c:	4b27      	ldr	r3, [pc, #156]	@ (8011a3c <prvHeapInit+0xac>)
 801199e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f003 0307 	and.w	r3, r3, #7
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d00c      	beq.n	80119c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	3307      	adds	r3, #7
 80119ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f023 0307 	bic.w	r3, r3, #7
 80119b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80119b8:	68ba      	ldr	r2, [r7, #8]
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	4a1f      	ldr	r2, [pc, #124]	@ (8011a3c <prvHeapInit+0xac>)
 80119c0:	4413      	add	r3, r2
 80119c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80119c8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a40 <prvHeapInit+0xb0>)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80119ce:	4b1c      	ldr	r3, [pc, #112]	@ (8011a40 <prvHeapInit+0xb0>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	4413      	add	r3, r2
 80119da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80119dc:	2208      	movs	r2, #8
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	1a9b      	subs	r3, r3, r2
 80119e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	f023 0307 	bic.w	r3, r3, #7
 80119ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	4a15      	ldr	r2, [pc, #84]	@ (8011a44 <prvHeapInit+0xb4>)
 80119f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80119f2:	4b14      	ldr	r3, [pc, #80]	@ (8011a44 <prvHeapInit+0xb4>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2200      	movs	r2, #0
 80119f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80119fa:	4b12      	ldr	r3, [pc, #72]	@ (8011a44 <prvHeapInit+0xb4>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2200      	movs	r2, #0
 8011a00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	1ad2      	subs	r2, r2, r3
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011a10:	4b0c      	ldr	r3, [pc, #48]	@ (8011a44 <prvHeapInit+0xb4>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	685b      	ldr	r3, [r3, #4]
 8011a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8011a48 <prvHeapInit+0xb8>)
 8011a1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	4a09      	ldr	r2, [pc, #36]	@ (8011a4c <prvHeapInit+0xbc>)
 8011a26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011a28:	4b09      	ldr	r3, [pc, #36]	@ (8011a50 <prvHeapInit+0xc0>)
 8011a2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011a2e:	601a      	str	r2, [r3, #0]
}
 8011a30:	bf00      	nop
 8011a32:	3714      	adds	r7, #20
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr
 8011a3c:	2000562c 	.word	0x2000562c
 8011a40:	2000922c 	.word	0x2000922c
 8011a44:	20009234 	.word	0x20009234
 8011a48:	2000923c 	.word	0x2000923c
 8011a4c:	20009238 	.word	0x20009238
 8011a50:	20009248 	.word	0x20009248

08011a54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011a54:	b480      	push	{r7}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a5c:	4b28      	ldr	r3, [pc, #160]	@ (8011b00 <prvInsertBlockIntoFreeList+0xac>)
 8011a5e:	60fb      	str	r3, [r7, #12]
 8011a60:	e002      	b.n	8011a68 <prvInsertBlockIntoFreeList+0x14>
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d8f7      	bhi.n	8011a62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d108      	bne.n	8011a96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	441a      	add	r2, r3
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	68ba      	ldr	r2, [r7, #8]
 8011aa0:	441a      	add	r2, r3
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d118      	bne.n	8011adc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	4b15      	ldr	r3, [pc, #84]	@ (8011b04 <prvInsertBlockIntoFreeList+0xb0>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d00d      	beq.n	8011ad2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	685a      	ldr	r2, [r3, #4]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	441a      	add	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	601a      	str	r2, [r3, #0]
 8011ad0:	e008      	b.n	8011ae4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8011b04 <prvInsertBlockIntoFreeList+0xb0>)
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	e003      	b.n	8011ae4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d002      	beq.n	8011af2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011af2:	bf00      	nop
 8011af4:	3714      	adds	r7, #20
 8011af6:	46bd      	mov	sp, r7
 8011af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop
 8011b00:	2000922c 	.word	0x2000922c
 8011b04:	20009234 	.word	0x20009234

08011b08 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011b12:	f008 f945 	bl	8019da0 <sys_timeouts_sleeptime>
 8011b16:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b1e:	d10b      	bne.n	8011b38 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011b20:	4813      	ldr	r0, [pc, #76]	@ (8011b70 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b22:	f00a ff18 	bl	801c956 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011b26:	2200      	movs	r2, #0
 8011b28:	6839      	ldr	r1, [r7, #0]
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f00a fe8a 	bl	801c844 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011b30:	480f      	ldr	r0, [pc, #60]	@ (8011b70 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b32:	f00a ff01 	bl	801c938 <sys_mutex_lock>
    return;
 8011b36:	e018      	b.n	8011b6a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d102      	bne.n	8011b44 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011b3e:	f008 f8f5 	bl	8019d2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011b42:	e7e6      	b.n	8011b12 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011b44:	480a      	ldr	r0, [pc, #40]	@ (8011b70 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b46:	f00a ff06 	bl	801c956 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8011b4a:	68fa      	ldr	r2, [r7, #12]
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f00a fe78 	bl	801c844 <sys_arch_mbox_fetch>
 8011b54:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8011b56:	4806      	ldr	r0, [pc, #24]	@ (8011b70 <tcpip_timeouts_mbox_fetch+0x68>)
 8011b58:	f00a feee 	bl	801c938 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b62:	d102      	bne.n	8011b6a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011b64:	f008 f8e2 	bl	8019d2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011b68:	e7d3      	b.n	8011b12 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	20009258 	.word	0x20009258

08011b74 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011b7c:	4810      	ldr	r0, [pc, #64]	@ (8011bc0 <tcpip_thread+0x4c>)
 8011b7e:	f00a fedb 	bl	801c938 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011b82:	4b10      	ldr	r3, [pc, #64]	@ (8011bc4 <tcpip_thread+0x50>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d005      	beq.n	8011b96 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8011bc4 <tcpip_thread+0x50>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8011bc8 <tcpip_thread+0x54>)
 8011b90:	6812      	ldr	r2, [r2, #0]
 8011b92:	4610      	mov	r0, r2
 8011b94:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011b96:	f107 030c 	add.w	r3, r7, #12
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	480b      	ldr	r0, [pc, #44]	@ (8011bcc <tcpip_thread+0x58>)
 8011b9e:	f7ff ffb3 	bl	8011b08 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d106      	bne.n	8011bb6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011ba8:	4b09      	ldr	r3, [pc, #36]	@ (8011bd0 <tcpip_thread+0x5c>)
 8011baa:	2291      	movs	r2, #145	@ 0x91
 8011bac:	4909      	ldr	r1, [pc, #36]	@ (8011bd4 <tcpip_thread+0x60>)
 8011bae:	480a      	ldr	r0, [pc, #40]	@ (8011bd8 <tcpip_thread+0x64>)
 8011bb0:	f00b fdc4 	bl	801d73c <iprintf>
      continue;
 8011bb4:	e003      	b.n	8011bbe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 f80f 	bl	8011bdc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011bbe:	e7ea      	b.n	8011b96 <tcpip_thread+0x22>
 8011bc0:	20009258 	.word	0x20009258
 8011bc4:	2000924c 	.word	0x2000924c
 8011bc8:	20009250 	.word	0x20009250
 8011bcc:	20009254 	.word	0x20009254
 8011bd0:	08020568 	.word	0x08020568
 8011bd4:	08020598 	.word	0x08020598
 8011bd8:	080205b8 	.word	0x080205b8

08011bdc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b02      	cmp	r3, #2
 8011bea:	d026      	beq.n	8011c3a <tcpip_thread_handle_msg+0x5e>
 8011bec:	2b02      	cmp	r3, #2
 8011bee:	dc2b      	bgt.n	8011c48 <tcpip_thread_handle_msg+0x6c>
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d002      	beq.n	8011bfa <tcpip_thread_handle_msg+0x1e>
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d015      	beq.n	8011c24 <tcpip_thread_handle_msg+0x48>
 8011bf8:	e026      	b.n	8011c48 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	6850      	ldr	r0, [r2, #4]
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	6892      	ldr	r2, [r2, #8]
 8011c06:	4611      	mov	r1, r2
 8011c08:	4798      	blx	r3
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f001 fcd9 	bl	80135cc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011c1a:	6879      	ldr	r1, [r7, #4]
 8011c1c:	2009      	movs	r0, #9
 8011c1e:	f000 fe63 	bl	80128e8 <memp_free>
      break;
 8011c22:	e018      	b.n	8011c56 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	6892      	ldr	r2, [r2, #8]
 8011c2c:	4610      	mov	r0, r2
 8011c2e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	2008      	movs	r0, #8
 8011c34:	f000 fe58 	bl	80128e8 <memp_free>
      break;
 8011c38:	e00d      	b.n	8011c56 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	6892      	ldr	r2, [r2, #8]
 8011c42:	4610      	mov	r0, r2
 8011c44:	4798      	blx	r3
      break;
 8011c46:	e006      	b.n	8011c56 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011c48:	4b05      	ldr	r3, [pc, #20]	@ (8011c60 <tcpip_thread_handle_msg+0x84>)
 8011c4a:	22cf      	movs	r2, #207	@ 0xcf
 8011c4c:	4905      	ldr	r1, [pc, #20]	@ (8011c64 <tcpip_thread_handle_msg+0x88>)
 8011c4e:	4806      	ldr	r0, [pc, #24]	@ (8011c68 <tcpip_thread_handle_msg+0x8c>)
 8011c50:	f00b fd74 	bl	801d73c <iprintf>
      break;
 8011c54:	bf00      	nop
  }
}
 8011c56:	bf00      	nop
 8011c58:	3708      	adds	r7, #8
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	08020568 	.word	0x08020568
 8011c64:	08020598 	.word	0x08020598
 8011c68:	080205b8 	.word	0x080205b8

08011c6c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011c78:	481a      	ldr	r0, [pc, #104]	@ (8011ce4 <tcpip_inpkt+0x78>)
 8011c7a:	f00a fe22 	bl	801c8c2 <sys_mbox_valid>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d105      	bne.n	8011c90 <tcpip_inpkt+0x24>
 8011c84:	4b18      	ldr	r3, [pc, #96]	@ (8011ce8 <tcpip_inpkt+0x7c>)
 8011c86:	22fc      	movs	r2, #252	@ 0xfc
 8011c88:	4918      	ldr	r1, [pc, #96]	@ (8011cec <tcpip_inpkt+0x80>)
 8011c8a:	4819      	ldr	r0, [pc, #100]	@ (8011cf0 <tcpip_inpkt+0x84>)
 8011c8c:	f00b fd56 	bl	801d73c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011c90:	2009      	movs	r0, #9
 8011c92:	f000 fdb3 	bl	80127fc <memp_malloc>
 8011c96:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d102      	bne.n	8011ca4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca2:	e01a      	b.n	8011cda <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	687a      	ldr	r2, [r7, #4]
 8011cba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011cbc:	6979      	ldr	r1, [r7, #20]
 8011cbe:	4809      	ldr	r0, [pc, #36]	@ (8011ce4 <tcpip_inpkt+0x78>)
 8011cc0:	f00a fda6 	bl	801c810 <sys_mbox_trypost>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d006      	beq.n	8011cd8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011cca:	6979      	ldr	r1, [r7, #20]
 8011ccc:	2009      	movs	r0, #9
 8011cce:	f000 fe0b 	bl	80128e8 <memp_free>
    return ERR_MEM;
 8011cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd6:	e000      	b.n	8011cda <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011cd8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3718      	adds	r7, #24
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20009254 	.word	0x20009254
 8011ce8:	08020568 	.word	0x08020568
 8011cec:	080205e0 	.word	0x080205e0
 8011cf0:	080205b8 	.word	0x080205b8

08011cf4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011d04:	f003 0318 	and.w	r3, r3, #24
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d006      	beq.n	8011d1a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011d0c:	4a08      	ldr	r2, [pc, #32]	@ (8011d30 <tcpip_input+0x3c>)
 8011d0e:	6839      	ldr	r1, [r7, #0]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff ffab 	bl	8011c6c <tcpip_inpkt>
 8011d16:	4603      	mov	r3, r0
 8011d18:	e005      	b.n	8011d26 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011d1a:	4a06      	ldr	r2, [pc, #24]	@ (8011d34 <tcpip_input+0x40>)
 8011d1c:	6839      	ldr	r1, [r7, #0]
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f7ff ffa4 	bl	8011c6c <tcpip_inpkt>
 8011d24:	4603      	mov	r3, r0
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	0801c621 	.word	0x0801c621
 8011d34:	0801b409 	.word	0x0801b409

08011d38 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
 8011d40:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011d42:	4819      	ldr	r0, [pc, #100]	@ (8011da8 <tcpip_try_callback+0x70>)
 8011d44:	f00a fdbd 	bl	801c8c2 <sys_mbox_valid>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <tcpip_try_callback+0x24>
 8011d4e:	4b17      	ldr	r3, [pc, #92]	@ (8011dac <tcpip_try_callback+0x74>)
 8011d50:	f240 125d 	movw	r2, #349	@ 0x15d
 8011d54:	4916      	ldr	r1, [pc, #88]	@ (8011db0 <tcpip_try_callback+0x78>)
 8011d56:	4817      	ldr	r0, [pc, #92]	@ (8011db4 <tcpip_try_callback+0x7c>)
 8011d58:	f00b fcf0 	bl	801d73c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011d5c:	2008      	movs	r0, #8
 8011d5e:	f000 fd4d 	bl	80127fc <memp_malloc>
 8011d62:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d102      	bne.n	8011d70 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011d6e:	e017      	b.n	8011da0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2201      	movs	r2, #1
 8011d74:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011d82:	68f9      	ldr	r1, [r7, #12]
 8011d84:	4808      	ldr	r0, [pc, #32]	@ (8011da8 <tcpip_try_callback+0x70>)
 8011d86:	f00a fd43 	bl	801c810 <sys_mbox_trypost>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d006      	beq.n	8011d9e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011d90:	68f9      	ldr	r1, [r7, #12]
 8011d92:	2008      	movs	r0, #8
 8011d94:	f000 fda8 	bl	80128e8 <memp_free>
    return ERR_MEM;
 8011d98:	f04f 33ff 	mov.w	r3, #4294967295
 8011d9c:	e000      	b.n	8011da0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011d9e:	2300      	movs	r3, #0
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3710      	adds	r7, #16
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	20009254 	.word	0x20009254
 8011dac:	08020568 	.word	0x08020568
 8011db0:	080205e0 	.word	0x080205e0
 8011db4:	080205b8 	.word	0x080205b8

08011db8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af02      	add	r7, sp, #8
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011dc2:	f000 f872 	bl	8011eaa <lwip_init>

  tcpip_init_done = initfunc;
 8011dc6:	4a17      	ldr	r2, [pc, #92]	@ (8011e24 <tcpip_init+0x6c>)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011dcc:	4a16      	ldr	r2, [pc, #88]	@ (8011e28 <tcpip_init+0x70>)
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011dd2:	2106      	movs	r1, #6
 8011dd4:	4815      	ldr	r0, [pc, #84]	@ (8011e2c <tcpip_init+0x74>)
 8011dd6:	f00a fcf9 	bl	801c7cc <sys_mbox_new>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d006      	beq.n	8011dee <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011de0:	4b13      	ldr	r3, [pc, #76]	@ (8011e30 <tcpip_init+0x78>)
 8011de2:	f240 2261 	movw	r2, #609	@ 0x261
 8011de6:	4913      	ldr	r1, [pc, #76]	@ (8011e34 <tcpip_init+0x7c>)
 8011de8:	4813      	ldr	r0, [pc, #76]	@ (8011e38 <tcpip_init+0x80>)
 8011dea:	f00b fca7 	bl	801d73c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011dee:	4813      	ldr	r0, [pc, #76]	@ (8011e3c <tcpip_init+0x84>)
 8011df0:	f00a fd86 	bl	801c900 <sys_mutex_new>
 8011df4:	4603      	mov	r3, r0
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d006      	beq.n	8011e08 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8011e30 <tcpip_init+0x78>)
 8011dfc:	f240 2265 	movw	r2, #613	@ 0x265
 8011e00:	490f      	ldr	r1, [pc, #60]	@ (8011e40 <tcpip_init+0x88>)
 8011e02:	480d      	ldr	r0, [pc, #52]	@ (8011e38 <tcpip_init+0x80>)
 8011e04:	f00b fc9a 	bl	801d73c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011e08:	2300      	movs	r3, #0
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e10:	2200      	movs	r2, #0
 8011e12:	490c      	ldr	r1, [pc, #48]	@ (8011e44 <tcpip_init+0x8c>)
 8011e14:	480c      	ldr	r0, [pc, #48]	@ (8011e48 <tcpip_init+0x90>)
 8011e16:	f00a fdab 	bl	801c970 <sys_thread_new>
}
 8011e1a:	bf00      	nop
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	2000924c 	.word	0x2000924c
 8011e28:	20009250 	.word	0x20009250
 8011e2c:	20009254 	.word	0x20009254
 8011e30:	08020568 	.word	0x08020568
 8011e34:	080205f0 	.word	0x080205f0
 8011e38:	080205b8 	.word	0x080205b8
 8011e3c:	20009258 	.word	0x20009258
 8011e40:	08020614 	.word	0x08020614
 8011e44:	08011b75 	.word	0x08011b75
 8011e48:	08020638 	.word	0x08020638

08011e4c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b083      	sub	sp, #12
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	4603      	mov	r3, r0
 8011e54:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e5a:	021b      	lsls	r3, r3, #8
 8011e5c:	b21a      	sxth	r2, r3
 8011e5e:	88fb      	ldrh	r3, [r7, #6]
 8011e60:	0a1b      	lsrs	r3, r3, #8
 8011e62:	b29b      	uxth	r3, r3
 8011e64:	b21b      	sxth	r3, r3
 8011e66:	4313      	orrs	r3, r2
 8011e68:	b21b      	sxth	r3, r3
 8011e6a:	b29b      	uxth	r3, r3
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	061a      	lsls	r2, r3, #24
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	021b      	lsls	r3, r3, #8
 8011e88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011e8c:	431a      	orrs	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	0a1b      	lsrs	r3, r3, #8
 8011e92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011e96:	431a      	orrs	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	0e1b      	lsrs	r3, r3, #24
 8011e9c:	4313      	orrs	r3, r2
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b082      	sub	sp, #8
 8011eae:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011eb4:	f00a fd16 	bl	801c8e4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011eb8:	f000 f8d4 	bl	8012064 <mem_init>
  memp_init();
 8011ebc:	f000 fc30 	bl	8012720 <memp_init>
  pbuf_init();
  netif_init();
 8011ec0:	f000 fd3c 	bl	801293c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011ec4:	f007 ffa4 	bl	8019e10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011ec8:	f001 fe1a 	bl	8013b00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011ecc:	f007 fee6 	bl	8019c9c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011ed0:	bf00      	nop
 8011ed2:	3708      	adds	r7, #8
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011ee2:	4b05      	ldr	r3, [pc, #20]	@ (8011ef8 <ptr_to_mem+0x20>)
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	88fb      	ldrh	r3, [r7, #6]
 8011ee8:	4413      	add	r3, r2
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	200098c8 	.word	0x200098c8

08011efc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011efc:	b480      	push	{r7}
 8011efe:	b083      	sub	sp, #12
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011f04:	4b05      	ldr	r3, [pc, #20]	@ (8011f1c <mem_to_ptr+0x20>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	b29b      	uxth	r3, r3
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	370c      	adds	r7, #12
 8011f12:	46bd      	mov	sp, r7
 8011f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f18:	4770      	bx	lr
 8011f1a:	bf00      	nop
 8011f1c:	200098c8 	.word	0x200098c8

08011f20 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011f20:	b590      	push	{r4, r7, lr}
 8011f22:	b085      	sub	sp, #20
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011f28:	4b45      	ldr	r3, [pc, #276]	@ (8012040 <plug_holes+0x120>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	687a      	ldr	r2, [r7, #4]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d206      	bcs.n	8011f40 <plug_holes+0x20>
 8011f32:	4b44      	ldr	r3, [pc, #272]	@ (8012044 <plug_holes+0x124>)
 8011f34:	f240 12df 	movw	r2, #479	@ 0x1df
 8011f38:	4943      	ldr	r1, [pc, #268]	@ (8012048 <plug_holes+0x128>)
 8011f3a:	4844      	ldr	r0, [pc, #272]	@ (801204c <plug_holes+0x12c>)
 8011f3c:	f00b fbfe 	bl	801d73c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011f40:	4b43      	ldr	r3, [pc, #268]	@ (8012050 <plug_holes+0x130>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d306      	bcc.n	8011f58 <plug_holes+0x38>
 8011f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8012044 <plug_holes+0x124>)
 8011f4c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011f50:	4940      	ldr	r1, [pc, #256]	@ (8012054 <plug_holes+0x134>)
 8011f52:	483e      	ldr	r0, [pc, #248]	@ (801204c <plug_holes+0x12c>)
 8011f54:	f00b fbf2 	bl	801d73c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	791b      	ldrb	r3, [r3, #4]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d006      	beq.n	8011f6e <plug_holes+0x4e>
 8011f60:	4b38      	ldr	r3, [pc, #224]	@ (8012044 <plug_holes+0x124>)
 8011f62:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8011f66:	493c      	ldr	r1, [pc, #240]	@ (8012058 <plug_holes+0x138>)
 8011f68:	4838      	ldr	r0, [pc, #224]	@ (801204c <plug_holes+0x12c>)
 8011f6a:	f00b fbe7 	bl	801d73c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011f76:	d906      	bls.n	8011f86 <plug_holes+0x66>
 8011f78:	4b32      	ldr	r3, [pc, #200]	@ (8012044 <plug_holes+0x124>)
 8011f7a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8011f7e:	4937      	ldr	r1, [pc, #220]	@ (801205c <plug_holes+0x13c>)
 8011f80:	4832      	ldr	r0, [pc, #200]	@ (801204c <plug_holes+0x12c>)
 8011f82:	f00b fbdb 	bl	801d73c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	881b      	ldrh	r3, [r3, #0]
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7ff ffa4 	bl	8011ed8 <ptr_to_mem>
 8011f90:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d024      	beq.n	8011fe4 <plug_holes+0xc4>
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	791b      	ldrb	r3, [r3, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d120      	bne.n	8011fe4 <plug_holes+0xc4>
 8011fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8012050 <plug_holes+0x130>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	68fa      	ldr	r2, [r7, #12]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d01b      	beq.n	8011fe4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011fac:	4b2c      	ldr	r3, [pc, #176]	@ (8012060 <plug_holes+0x140>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d102      	bne.n	8011fbc <plug_holes+0x9c>
      lfree = mem;
 8011fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8012060 <plug_holes+0x140>)
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	881a      	ldrh	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011fcc:	d00a      	beq.n	8011fe4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	881b      	ldrh	r3, [r3, #0]
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f7ff ff80 	bl	8011ed8 <ptr_to_mem>
 8011fd8:	4604      	mov	r4, r0
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff ff8e 	bl	8011efc <mem_to_ptr>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	885b      	ldrh	r3, [r3, #2]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f7ff ff75 	bl	8011ed8 <ptr_to_mem>
 8011fee:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011ff0:	68ba      	ldr	r2, [r7, #8]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d01f      	beq.n	8012038 <plug_holes+0x118>
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	791b      	ldrb	r3, [r3, #4]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d11b      	bne.n	8012038 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012000:	4b17      	ldr	r3, [pc, #92]	@ (8012060 <plug_holes+0x140>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	429a      	cmp	r2, r3
 8012008:	d102      	bne.n	8012010 <plug_holes+0xf0>
      lfree = pmem;
 801200a:	4a15      	ldr	r2, [pc, #84]	@ (8012060 <plug_holes+0x140>)
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	881a      	ldrh	r2, [r3, #0]
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	881b      	ldrh	r3, [r3, #0]
 801201c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012020:	d00a      	beq.n	8012038 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff ff56 	bl	8011ed8 <ptr_to_mem>
 801202c:	4604      	mov	r4, r0
 801202e:	68b8      	ldr	r0, [r7, #8]
 8012030:	f7ff ff64 	bl	8011efc <mem_to_ptr>
 8012034:	4603      	mov	r3, r0
 8012036:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012038:	bf00      	nop
 801203a:	3714      	adds	r7, #20
 801203c:	46bd      	mov	sp, r7
 801203e:	bd90      	pop	{r4, r7, pc}
 8012040:	200098c8 	.word	0x200098c8
 8012044:	08020648 	.word	0x08020648
 8012048:	08020678 	.word	0x08020678
 801204c:	08020690 	.word	0x08020690
 8012050:	200098cc 	.word	0x200098cc
 8012054:	080206b8 	.word	0x080206b8
 8012058:	080206d4 	.word	0x080206d4
 801205c:	080206f0 	.word	0x080206f0
 8012060:	200098d4 	.word	0x200098d4

08012064 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b082      	sub	sp, #8
 8012068:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801206a:	4b1f      	ldr	r3, [pc, #124]	@ (80120e8 <mem_init+0x84>)
 801206c:	3303      	adds	r3, #3
 801206e:	f023 0303 	bic.w	r3, r3, #3
 8012072:	461a      	mov	r2, r3
 8012074:	4b1d      	ldr	r3, [pc, #116]	@ (80120ec <mem_init+0x88>)
 8012076:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012078:	4b1c      	ldr	r3, [pc, #112]	@ (80120ec <mem_init+0x88>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8012084:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2200      	movs	r2, #0
 801208a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012092:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8012096:	f7ff ff1f 	bl	8011ed8 <ptr_to_mem>
 801209a:	4603      	mov	r3, r0
 801209c:	4a14      	ldr	r2, [pc, #80]	@ (80120f0 <mem_init+0x8c>)
 801209e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80120a0:	4b13      	ldr	r3, [pc, #76]	@ (80120f0 <mem_init+0x8c>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2201      	movs	r2, #1
 80120a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80120a8:	4b11      	ldr	r3, [pc, #68]	@ (80120f0 <mem_init+0x8c>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80120b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80120b2:	4b0f      	ldr	r3, [pc, #60]	@ (80120f0 <mem_init+0x8c>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80120ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80120bc:	4b0b      	ldr	r3, [pc, #44]	@ (80120ec <mem_init+0x88>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	4a0c      	ldr	r2, [pc, #48]	@ (80120f4 <mem_init+0x90>)
 80120c2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80120c4:	480c      	ldr	r0, [pc, #48]	@ (80120f8 <mem_init+0x94>)
 80120c6:	f00a fc1b 	bl	801c900 <sys_mutex_new>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d006      	beq.n	80120de <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80120d0:	4b0a      	ldr	r3, [pc, #40]	@ (80120fc <mem_init+0x98>)
 80120d2:	f240 221f 	movw	r2, #543	@ 0x21f
 80120d6:	490a      	ldr	r1, [pc, #40]	@ (8012100 <mem_init+0x9c>)
 80120d8:	480a      	ldr	r0, [pc, #40]	@ (8012104 <mem_init+0xa0>)
 80120da:	f00b fb2f 	bl	801d73c <iprintf>
  }
}
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	20009274 	.word	0x20009274
 80120ec:	200098c8 	.word	0x200098c8
 80120f0:	200098cc 	.word	0x200098cc
 80120f4:	200098d4 	.word	0x200098d4
 80120f8:	200098d0 	.word	0x200098d0
 80120fc:	08020648 	.word	0x08020648
 8012100:	0802071c 	.word	0x0802071c
 8012104:	08020690 	.word	0x08020690

08012108 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b086      	sub	sp, #24
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f7ff fef3 	bl	8011efc <mem_to_ptr>
 8012116:	4603      	mov	r3, r0
 8012118:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	4618      	mov	r0, r3
 8012120:	f7ff feda 	bl	8011ed8 <ptr_to_mem>
 8012124:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	885b      	ldrh	r3, [r3, #2]
 801212a:	4618      	mov	r0, r3
 801212c:	f7ff fed4 	bl	8011ed8 <ptr_to_mem>
 8012130:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801213a:	d818      	bhi.n	801216e <mem_link_valid+0x66>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	885b      	ldrh	r3, [r3, #2]
 8012140:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012144:	d813      	bhi.n	801216e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801214a:	8afa      	ldrh	r2, [r7, #22]
 801214c:	429a      	cmp	r2, r3
 801214e:	d004      	beq.n	801215a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	881b      	ldrh	r3, [r3, #0]
 8012154:	8afa      	ldrh	r2, [r7, #22]
 8012156:	429a      	cmp	r2, r3
 8012158:	d109      	bne.n	801216e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801215a:	4b08      	ldr	r3, [pc, #32]	@ (801217c <mem_link_valid+0x74>)
 801215c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801215e:	693a      	ldr	r2, [r7, #16]
 8012160:	429a      	cmp	r2, r3
 8012162:	d006      	beq.n	8012172 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	885b      	ldrh	r3, [r3, #2]
 8012168:	8afa      	ldrh	r2, [r7, #22]
 801216a:	429a      	cmp	r2, r3
 801216c:	d001      	beq.n	8012172 <mem_link_valid+0x6a>
    return 0;
 801216e:	2300      	movs	r3, #0
 8012170:	e000      	b.n	8012174 <mem_link_valid+0x6c>
  }
  return 1;
 8012172:	2301      	movs	r3, #1
}
 8012174:	4618      	mov	r0, r3
 8012176:	3718      	adds	r7, #24
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}
 801217c:	200098cc 	.word	0x200098cc

08012180 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b088      	sub	sp, #32
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d070      	beq.n	8012270 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f003 0303 	and.w	r3, r3, #3
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00d      	beq.n	80121b4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012198:	4b37      	ldr	r3, [pc, #220]	@ (8012278 <mem_free+0xf8>)
 801219a:	f240 2273 	movw	r2, #627	@ 0x273
 801219e:	4937      	ldr	r1, [pc, #220]	@ (801227c <mem_free+0xfc>)
 80121a0:	4837      	ldr	r0, [pc, #220]	@ (8012280 <mem_free+0x100>)
 80121a2:	f00b facb 	bl	801d73c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80121a6:	f00a fc09 	bl	801c9bc <sys_arch_protect>
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f00a fc13 	bl	801c9d8 <sys_arch_unprotect>
    return;
 80121b2:	e05e      	b.n	8012272 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	3b08      	subs	r3, #8
 80121b8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80121ba:	4b32      	ldr	r3, [pc, #200]	@ (8012284 <mem_free+0x104>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	69fa      	ldr	r2, [r7, #28]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d306      	bcc.n	80121d2 <mem_free+0x52>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f103 020c 	add.w	r2, r3, #12
 80121ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012288 <mem_free+0x108>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d90d      	bls.n	80121ee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80121d2:	4b29      	ldr	r3, [pc, #164]	@ (8012278 <mem_free+0xf8>)
 80121d4:	f240 227f 	movw	r2, #639	@ 0x27f
 80121d8:	492c      	ldr	r1, [pc, #176]	@ (801228c <mem_free+0x10c>)
 80121da:	4829      	ldr	r0, [pc, #164]	@ (8012280 <mem_free+0x100>)
 80121dc:	f00b faae 	bl	801d73c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80121e0:	f00a fbec 	bl	801c9bc <sys_arch_protect>
 80121e4:	6138      	str	r0, [r7, #16]
 80121e6:	6938      	ldr	r0, [r7, #16]
 80121e8:	f00a fbf6 	bl	801c9d8 <sys_arch_unprotect>
    return;
 80121ec:	e041      	b.n	8012272 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80121ee:	4828      	ldr	r0, [pc, #160]	@ (8012290 <mem_free+0x110>)
 80121f0:	f00a fba2 	bl	801c938 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	791b      	ldrb	r3, [r3, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d110      	bne.n	801221e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80121fc:	4b1e      	ldr	r3, [pc, #120]	@ (8012278 <mem_free+0xf8>)
 80121fe:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012202:	4924      	ldr	r1, [pc, #144]	@ (8012294 <mem_free+0x114>)
 8012204:	481e      	ldr	r0, [pc, #120]	@ (8012280 <mem_free+0x100>)
 8012206:	f00b fa99 	bl	801d73c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801220a:	4821      	ldr	r0, [pc, #132]	@ (8012290 <mem_free+0x110>)
 801220c:	f00a fba3 	bl	801c956 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012210:	f00a fbd4 	bl	801c9bc <sys_arch_protect>
 8012214:	6178      	str	r0, [r7, #20]
 8012216:	6978      	ldr	r0, [r7, #20]
 8012218:	f00a fbde 	bl	801c9d8 <sys_arch_unprotect>
    return;
 801221c:	e029      	b.n	8012272 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801221e:	69f8      	ldr	r0, [r7, #28]
 8012220:	f7ff ff72 	bl	8012108 <mem_link_valid>
 8012224:	4603      	mov	r3, r0
 8012226:	2b00      	cmp	r3, #0
 8012228:	d110      	bne.n	801224c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801222a:	4b13      	ldr	r3, [pc, #76]	@ (8012278 <mem_free+0xf8>)
 801222c:	f240 2295 	movw	r2, #661	@ 0x295
 8012230:	4919      	ldr	r1, [pc, #100]	@ (8012298 <mem_free+0x118>)
 8012232:	4813      	ldr	r0, [pc, #76]	@ (8012280 <mem_free+0x100>)
 8012234:	f00b fa82 	bl	801d73c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012238:	4815      	ldr	r0, [pc, #84]	@ (8012290 <mem_free+0x110>)
 801223a:	f00a fb8c 	bl	801c956 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801223e:	f00a fbbd 	bl	801c9bc <sys_arch_protect>
 8012242:	61b8      	str	r0, [r7, #24]
 8012244:	69b8      	ldr	r0, [r7, #24]
 8012246:	f00a fbc7 	bl	801c9d8 <sys_arch_unprotect>
    return;
 801224a:	e012      	b.n	8012272 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	2200      	movs	r2, #0
 8012250:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012252:	4b12      	ldr	r3, [pc, #72]	@ (801229c <mem_free+0x11c>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	69fa      	ldr	r2, [r7, #28]
 8012258:	429a      	cmp	r2, r3
 801225a:	d202      	bcs.n	8012262 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801225c:	4a0f      	ldr	r2, [pc, #60]	@ (801229c <mem_free+0x11c>)
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012262:	69f8      	ldr	r0, [r7, #28]
 8012264:	f7ff fe5c 	bl	8011f20 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012268:	4809      	ldr	r0, [pc, #36]	@ (8012290 <mem_free+0x110>)
 801226a:	f00a fb74 	bl	801c956 <sys_mutex_unlock>
 801226e:	e000      	b.n	8012272 <mem_free+0xf2>
    return;
 8012270:	bf00      	nop
}
 8012272:	3720      	adds	r7, #32
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	08020648 	.word	0x08020648
 801227c:	08020738 	.word	0x08020738
 8012280:	08020690 	.word	0x08020690
 8012284:	200098c8 	.word	0x200098c8
 8012288:	200098cc 	.word	0x200098cc
 801228c:	0802075c 	.word	0x0802075c
 8012290:	200098d0 	.word	0x200098d0
 8012294:	08020778 	.word	0x08020778
 8012298:	080207a0 	.word	0x080207a0
 801229c:	200098d4 	.word	0x200098d4

080122a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b088      	sub	sp, #32
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
 80122a8:	460b      	mov	r3, r1
 80122aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80122ac:	887b      	ldrh	r3, [r7, #2]
 80122ae:	3303      	adds	r3, #3
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	f023 0303 	bic.w	r3, r3, #3
 80122b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80122b8:	8bfb      	ldrh	r3, [r7, #30]
 80122ba:	2b0b      	cmp	r3, #11
 80122bc:	d801      	bhi.n	80122c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80122be:	230c      	movs	r3, #12
 80122c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80122c2:	8bfb      	ldrh	r3, [r7, #30]
 80122c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80122c8:	d803      	bhi.n	80122d2 <mem_trim+0x32>
 80122ca:	8bfa      	ldrh	r2, [r7, #30]
 80122cc:	887b      	ldrh	r3, [r7, #2]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d201      	bcs.n	80122d6 <mem_trim+0x36>
    return NULL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	e0d8      	b.n	8012488 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80122d6:	4b6e      	ldr	r3, [pc, #440]	@ (8012490 <mem_trim+0x1f0>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d304      	bcc.n	80122ea <mem_trim+0x4a>
 80122e0:	4b6c      	ldr	r3, [pc, #432]	@ (8012494 <mem_trim+0x1f4>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d306      	bcc.n	80122f8 <mem_trim+0x58>
 80122ea:	4b6b      	ldr	r3, [pc, #428]	@ (8012498 <mem_trim+0x1f8>)
 80122ec:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80122f0:	496a      	ldr	r1, [pc, #424]	@ (801249c <mem_trim+0x1fc>)
 80122f2:	486b      	ldr	r0, [pc, #428]	@ (80124a0 <mem_trim+0x200>)
 80122f4:	f00b fa22 	bl	801d73c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80122f8:	4b65      	ldr	r3, [pc, #404]	@ (8012490 <mem_trim+0x1f0>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d304      	bcc.n	801230c <mem_trim+0x6c>
 8012302:	4b64      	ldr	r3, [pc, #400]	@ (8012494 <mem_trim+0x1f4>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	429a      	cmp	r2, r3
 801230a:	d307      	bcc.n	801231c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801230c:	f00a fb56 	bl	801c9bc <sys_arch_protect>
 8012310:	60b8      	str	r0, [r7, #8]
 8012312:	68b8      	ldr	r0, [r7, #8]
 8012314:	f00a fb60 	bl	801c9d8 <sys_arch_unprotect>
    return rmem;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	e0b5      	b.n	8012488 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	3b08      	subs	r3, #8
 8012320:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012322:	69b8      	ldr	r0, [r7, #24]
 8012324:	f7ff fdea 	bl	8011efc <mem_to_ptr>
 8012328:	4603      	mov	r3, r0
 801232a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801232c:	69bb      	ldr	r3, [r7, #24]
 801232e:	881a      	ldrh	r2, [r3, #0]
 8012330:	8afb      	ldrh	r3, [r7, #22]
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	b29b      	uxth	r3, r3
 8012336:	3b08      	subs	r3, #8
 8012338:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801233a:	8bfa      	ldrh	r2, [r7, #30]
 801233c:	8abb      	ldrh	r3, [r7, #20]
 801233e:	429a      	cmp	r2, r3
 8012340:	d906      	bls.n	8012350 <mem_trim+0xb0>
 8012342:	4b55      	ldr	r3, [pc, #340]	@ (8012498 <mem_trim+0x1f8>)
 8012344:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012348:	4956      	ldr	r1, [pc, #344]	@ (80124a4 <mem_trim+0x204>)
 801234a:	4855      	ldr	r0, [pc, #340]	@ (80124a0 <mem_trim+0x200>)
 801234c:	f00b f9f6 	bl	801d73c <iprintf>
  if (newsize > size) {
 8012350:	8bfa      	ldrh	r2, [r7, #30]
 8012352:	8abb      	ldrh	r3, [r7, #20]
 8012354:	429a      	cmp	r2, r3
 8012356:	d901      	bls.n	801235c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012358:	2300      	movs	r3, #0
 801235a:	e095      	b.n	8012488 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 801235c:	8bfa      	ldrh	r2, [r7, #30]
 801235e:	8abb      	ldrh	r3, [r7, #20]
 8012360:	429a      	cmp	r2, r3
 8012362:	d101      	bne.n	8012368 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	e08f      	b.n	8012488 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012368:	484f      	ldr	r0, [pc, #316]	@ (80124a8 <mem_trim+0x208>)
 801236a:	f00a fae5 	bl	801c938 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	4618      	mov	r0, r3
 8012374:	f7ff fdb0 	bl	8011ed8 <ptr_to_mem>
 8012378:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	791b      	ldrb	r3, [r3, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d13f      	bne.n	8012402 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	881b      	ldrh	r3, [r3, #0]
 8012386:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801238a:	d106      	bne.n	801239a <mem_trim+0xfa>
 801238c:	4b42      	ldr	r3, [pc, #264]	@ (8012498 <mem_trim+0x1f8>)
 801238e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012392:	4946      	ldr	r1, [pc, #280]	@ (80124ac <mem_trim+0x20c>)
 8012394:	4842      	ldr	r0, [pc, #264]	@ (80124a0 <mem_trim+0x200>)
 8012396:	f00b f9d1 	bl	801d73c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	881b      	ldrh	r3, [r3, #0]
 801239e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80123a0:	8afa      	ldrh	r2, [r7, #22]
 80123a2:	8bfb      	ldrh	r3, [r7, #30]
 80123a4:	4413      	add	r3, r2
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	3308      	adds	r3, #8
 80123aa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80123ac:	4b40      	ldr	r3, [pc, #256]	@ (80124b0 <mem_trim+0x210>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	693a      	ldr	r2, [r7, #16]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d106      	bne.n	80123c4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80123b6:	89fb      	ldrh	r3, [r7, #14]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7ff fd8d 	bl	8011ed8 <ptr_to_mem>
 80123be:	4603      	mov	r3, r0
 80123c0:	4a3b      	ldr	r2, [pc, #236]	@ (80124b0 <mem_trim+0x210>)
 80123c2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80123c4:	89fb      	ldrh	r3, [r7, #14]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7ff fd86 	bl	8011ed8 <ptr_to_mem>
 80123cc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	2200      	movs	r2, #0
 80123d2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	89ba      	ldrh	r2, [r7, #12]
 80123d8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	8afa      	ldrh	r2, [r7, #22]
 80123de:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	89fa      	ldrh	r2, [r7, #14]
 80123e4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	881b      	ldrh	r3, [r3, #0]
 80123ea:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80123ee:	d047      	beq.n	8012480 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	881b      	ldrh	r3, [r3, #0]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fd6f 	bl	8011ed8 <ptr_to_mem>
 80123fa:	4602      	mov	r2, r0
 80123fc:	89fb      	ldrh	r3, [r7, #14]
 80123fe:	8053      	strh	r3, [r2, #2]
 8012400:	e03e      	b.n	8012480 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012402:	8bfb      	ldrh	r3, [r7, #30]
 8012404:	f103 0214 	add.w	r2, r3, #20
 8012408:	8abb      	ldrh	r3, [r7, #20]
 801240a:	429a      	cmp	r2, r3
 801240c:	d838      	bhi.n	8012480 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801240e:	8afa      	ldrh	r2, [r7, #22]
 8012410:	8bfb      	ldrh	r3, [r7, #30]
 8012412:	4413      	add	r3, r2
 8012414:	b29b      	uxth	r3, r3
 8012416:	3308      	adds	r3, #8
 8012418:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801241a:	69bb      	ldr	r3, [r7, #24]
 801241c:	881b      	ldrh	r3, [r3, #0]
 801241e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8012422:	d106      	bne.n	8012432 <mem_trim+0x192>
 8012424:	4b1c      	ldr	r3, [pc, #112]	@ (8012498 <mem_trim+0x1f8>)
 8012426:	f240 3216 	movw	r2, #790	@ 0x316
 801242a:	4920      	ldr	r1, [pc, #128]	@ (80124ac <mem_trim+0x20c>)
 801242c:	481c      	ldr	r0, [pc, #112]	@ (80124a0 <mem_trim+0x200>)
 801242e:	f00b f985 	bl	801d73c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012432:	89fb      	ldrh	r3, [r7, #14]
 8012434:	4618      	mov	r0, r3
 8012436:	f7ff fd4f 	bl	8011ed8 <ptr_to_mem>
 801243a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801243c:	4b1c      	ldr	r3, [pc, #112]	@ (80124b0 <mem_trim+0x210>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	693a      	ldr	r2, [r7, #16]
 8012442:	429a      	cmp	r2, r3
 8012444:	d202      	bcs.n	801244c <mem_trim+0x1ac>
      lfree = mem2;
 8012446:	4a1a      	ldr	r2, [pc, #104]	@ (80124b0 <mem_trim+0x210>)
 8012448:	693b      	ldr	r3, [r7, #16]
 801244a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	2200      	movs	r2, #0
 8012450:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	881a      	ldrh	r2, [r3, #0]
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	8afa      	ldrh	r2, [r7, #22]
 801245e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	89fa      	ldrh	r2, [r7, #14]
 8012464:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801246e:	d007      	beq.n	8012480 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff fd2f 	bl	8011ed8 <ptr_to_mem>
 801247a:	4602      	mov	r2, r0
 801247c:	89fb      	ldrh	r3, [r7, #14]
 801247e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012480:	4809      	ldr	r0, [pc, #36]	@ (80124a8 <mem_trim+0x208>)
 8012482:	f00a fa68 	bl	801c956 <sys_mutex_unlock>
  return rmem;
 8012486:	687b      	ldr	r3, [r7, #4]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3720      	adds	r7, #32
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	200098c8 	.word	0x200098c8
 8012494:	200098cc 	.word	0x200098cc
 8012498:	08020648 	.word	0x08020648
 801249c:	080207d4 	.word	0x080207d4
 80124a0:	08020690 	.word	0x08020690
 80124a4:	080207ec 	.word	0x080207ec
 80124a8:	200098d0 	.word	0x200098d0
 80124ac:	0802080c 	.word	0x0802080c
 80124b0:	200098d4 	.word	0x200098d4

080124b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b088      	sub	sp, #32
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	4603      	mov	r3, r0
 80124bc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80124be:	88fb      	ldrh	r3, [r7, #6]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d101      	bne.n	80124c8 <mem_malloc+0x14>
    return NULL;
 80124c4:	2300      	movs	r3, #0
 80124c6:	e0e2      	b.n	801268e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80124c8:	88fb      	ldrh	r3, [r7, #6]
 80124ca:	3303      	adds	r3, #3
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	f023 0303 	bic.w	r3, r3, #3
 80124d2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80124d4:	8bbb      	ldrh	r3, [r7, #28]
 80124d6:	2b0b      	cmp	r3, #11
 80124d8:	d801      	bhi.n	80124de <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80124da:	230c      	movs	r3, #12
 80124dc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80124de:	8bbb      	ldrh	r3, [r7, #28]
 80124e0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80124e4:	d803      	bhi.n	80124ee <mem_malloc+0x3a>
 80124e6:	8bba      	ldrh	r2, [r7, #28]
 80124e8:	88fb      	ldrh	r3, [r7, #6]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d201      	bcs.n	80124f2 <mem_malloc+0x3e>
    return NULL;
 80124ee:	2300      	movs	r3, #0
 80124f0:	e0cd      	b.n	801268e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80124f2:	4869      	ldr	r0, [pc, #420]	@ (8012698 <mem_malloc+0x1e4>)
 80124f4:	f00a fa20 	bl	801c938 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80124f8:	4b68      	ldr	r3, [pc, #416]	@ (801269c <mem_malloc+0x1e8>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7ff fcfd 	bl	8011efc <mem_to_ptr>
 8012502:	4603      	mov	r3, r0
 8012504:	83fb      	strh	r3, [r7, #30]
 8012506:	e0b7      	b.n	8012678 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012508:	8bfb      	ldrh	r3, [r7, #30]
 801250a:	4618      	mov	r0, r3
 801250c:	f7ff fce4 	bl	8011ed8 <ptr_to_mem>
 8012510:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	791b      	ldrb	r3, [r3, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	f040 80a7 	bne.w	801266a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	461a      	mov	r2, r3
 8012522:	8bfb      	ldrh	r3, [r7, #30]
 8012524:	1ad3      	subs	r3, r2, r3
 8012526:	f1a3 0208 	sub.w	r2, r3, #8
 801252a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801252c:	429a      	cmp	r2, r3
 801252e:	f0c0 809c 	bcc.w	801266a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	881b      	ldrh	r3, [r3, #0]
 8012536:	461a      	mov	r2, r3
 8012538:	8bfb      	ldrh	r3, [r7, #30]
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	f1a3 0208 	sub.w	r2, r3, #8
 8012540:	8bbb      	ldrh	r3, [r7, #28]
 8012542:	3314      	adds	r3, #20
 8012544:	429a      	cmp	r2, r3
 8012546:	d333      	bcc.n	80125b0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012548:	8bfa      	ldrh	r2, [r7, #30]
 801254a:	8bbb      	ldrh	r3, [r7, #28]
 801254c:	4413      	add	r3, r2
 801254e:	b29b      	uxth	r3, r3
 8012550:	3308      	adds	r3, #8
 8012552:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012554:	8a7b      	ldrh	r3, [r7, #18]
 8012556:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801255a:	d106      	bne.n	801256a <mem_malloc+0xb6>
 801255c:	4b50      	ldr	r3, [pc, #320]	@ (80126a0 <mem_malloc+0x1ec>)
 801255e:	f240 3287 	movw	r2, #903	@ 0x387
 8012562:	4950      	ldr	r1, [pc, #320]	@ (80126a4 <mem_malloc+0x1f0>)
 8012564:	4850      	ldr	r0, [pc, #320]	@ (80126a8 <mem_malloc+0x1f4>)
 8012566:	f00b f8e9 	bl	801d73c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801256a:	8a7b      	ldrh	r3, [r7, #18]
 801256c:	4618      	mov	r0, r3
 801256e:	f7ff fcb3 	bl	8011ed8 <ptr_to_mem>
 8012572:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2200      	movs	r2, #0
 8012578:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	881a      	ldrh	r2, [r3, #0]
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	8bfa      	ldrh	r2, [r7, #30]
 8012586:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	8a7a      	ldrh	r2, [r7, #18]
 801258c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	2201      	movs	r2, #1
 8012592:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	881b      	ldrh	r3, [r3, #0]
 8012598:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801259c:	d00b      	beq.n	80125b6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	881b      	ldrh	r3, [r3, #0]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fc98 	bl	8011ed8 <ptr_to_mem>
 80125a8:	4602      	mov	r2, r0
 80125aa:	8a7b      	ldrh	r3, [r7, #18]
 80125ac:	8053      	strh	r3, [r2, #2]
 80125ae:	e002      	b.n	80125b6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	2201      	movs	r2, #1
 80125b4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80125b6:	4b39      	ldr	r3, [pc, #228]	@ (801269c <mem_malloc+0x1e8>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	697a      	ldr	r2, [r7, #20]
 80125bc:	429a      	cmp	r2, r3
 80125be:	d127      	bne.n	8012610 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80125c0:	4b36      	ldr	r3, [pc, #216]	@ (801269c <mem_malloc+0x1e8>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80125c6:	e005      	b.n	80125d4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	881b      	ldrh	r3, [r3, #0]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff fc83 	bl	8011ed8 <ptr_to_mem>
 80125d2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	791b      	ldrb	r3, [r3, #4]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d004      	beq.n	80125e6 <mem_malloc+0x132>
 80125dc:	4b33      	ldr	r3, [pc, #204]	@ (80126ac <mem_malloc+0x1f8>)
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	69ba      	ldr	r2, [r7, #24]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d1f0      	bne.n	80125c8 <mem_malloc+0x114>
          }
          lfree = cur;
 80125e6:	4a2d      	ldr	r2, [pc, #180]	@ (801269c <mem_malloc+0x1e8>)
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80125ec:	4b2b      	ldr	r3, [pc, #172]	@ (801269c <mem_malloc+0x1e8>)
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	4b2e      	ldr	r3, [pc, #184]	@ (80126ac <mem_malloc+0x1f8>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d00b      	beq.n	8012610 <mem_malloc+0x15c>
 80125f8:	4b28      	ldr	r3, [pc, #160]	@ (801269c <mem_malloc+0x1e8>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	791b      	ldrb	r3, [r3, #4]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d006      	beq.n	8012610 <mem_malloc+0x15c>
 8012602:	4b27      	ldr	r3, [pc, #156]	@ (80126a0 <mem_malloc+0x1ec>)
 8012604:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8012608:	4929      	ldr	r1, [pc, #164]	@ (80126b0 <mem_malloc+0x1fc>)
 801260a:	4827      	ldr	r0, [pc, #156]	@ (80126a8 <mem_malloc+0x1f4>)
 801260c:	f00b f896 	bl	801d73c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012610:	4821      	ldr	r0, [pc, #132]	@ (8012698 <mem_malloc+0x1e4>)
 8012612:	f00a f9a0 	bl	801c956 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012616:	8bba      	ldrh	r2, [r7, #28]
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	4413      	add	r3, r2
 801261c:	3308      	adds	r3, #8
 801261e:	4a23      	ldr	r2, [pc, #140]	@ (80126ac <mem_malloc+0x1f8>)
 8012620:	6812      	ldr	r2, [r2, #0]
 8012622:	4293      	cmp	r3, r2
 8012624:	d906      	bls.n	8012634 <mem_malloc+0x180>
 8012626:	4b1e      	ldr	r3, [pc, #120]	@ (80126a0 <mem_malloc+0x1ec>)
 8012628:	f240 32b9 	movw	r2, #953	@ 0x3b9
 801262c:	4921      	ldr	r1, [pc, #132]	@ (80126b4 <mem_malloc+0x200>)
 801262e:	481e      	ldr	r0, [pc, #120]	@ (80126a8 <mem_malloc+0x1f4>)
 8012630:	f00b f884 	bl	801d73c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	f003 0303 	and.w	r3, r3, #3
 801263a:	2b00      	cmp	r3, #0
 801263c:	d006      	beq.n	801264c <mem_malloc+0x198>
 801263e:	4b18      	ldr	r3, [pc, #96]	@ (80126a0 <mem_malloc+0x1ec>)
 8012640:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8012644:	491c      	ldr	r1, [pc, #112]	@ (80126b8 <mem_malloc+0x204>)
 8012646:	4818      	ldr	r0, [pc, #96]	@ (80126a8 <mem_malloc+0x1f4>)
 8012648:	f00b f878 	bl	801d73c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	f003 0303 	and.w	r3, r3, #3
 8012652:	2b00      	cmp	r3, #0
 8012654:	d006      	beq.n	8012664 <mem_malloc+0x1b0>
 8012656:	4b12      	ldr	r3, [pc, #72]	@ (80126a0 <mem_malloc+0x1ec>)
 8012658:	f240 32bd 	movw	r2, #957	@ 0x3bd
 801265c:	4917      	ldr	r1, [pc, #92]	@ (80126bc <mem_malloc+0x208>)
 801265e:	4812      	ldr	r0, [pc, #72]	@ (80126a8 <mem_malloc+0x1f4>)
 8012660:	f00b f86c 	bl	801d73c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012664:	697b      	ldr	r3, [r7, #20]
 8012666:	3308      	adds	r3, #8
 8012668:	e011      	b.n	801268e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801266a:	8bfb      	ldrh	r3, [r7, #30]
 801266c:	4618      	mov	r0, r3
 801266e:	f7ff fc33 	bl	8011ed8 <ptr_to_mem>
 8012672:	4603      	mov	r3, r0
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012678:	8bfa      	ldrh	r2, [r7, #30]
 801267a:	8bbb      	ldrh	r3, [r7, #28]
 801267c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8012680:	429a      	cmp	r2, r3
 8012682:	f4ff af41 	bcc.w	8012508 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012686:	4804      	ldr	r0, [pc, #16]	@ (8012698 <mem_malloc+0x1e4>)
 8012688:	f00a f965 	bl	801c956 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801268c:	2300      	movs	r3, #0
}
 801268e:	4618      	mov	r0, r3
 8012690:	3720      	adds	r7, #32
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	200098d0 	.word	0x200098d0
 801269c:	200098d4 	.word	0x200098d4
 80126a0:	08020648 	.word	0x08020648
 80126a4:	0802080c 	.word	0x0802080c
 80126a8:	08020690 	.word	0x08020690
 80126ac:	200098cc 	.word	0x200098cc
 80126b0:	08020820 	.word	0x08020820
 80126b4:	0802083c 	.word	0x0802083c
 80126b8:	0802086c 	.word	0x0802086c
 80126bc:	0802089c 	.word	0x0802089c

080126c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	2200      	movs	r2, #0
 80126ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	3303      	adds	r3, #3
 80126d6:	f023 0303 	bic.w	r3, r3, #3
 80126da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80126dc:	2300      	movs	r3, #0
 80126de:	60fb      	str	r3, [r7, #12]
 80126e0:	e011      	b.n	8012706 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	689b      	ldr	r3, [r3, #8]
 80126f0:	68ba      	ldr	r2, [r7, #8]
 80126f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	881b      	ldrh	r3, [r3, #0]
 80126f8:	461a      	mov	r2, r3
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	4413      	add	r3, r2
 80126fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	3301      	adds	r3, #1
 8012704:	60fb      	str	r3, [r7, #12]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	885b      	ldrh	r3, [r3, #2]
 801270a:	461a      	mov	r2, r3
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	4293      	cmp	r3, r2
 8012710:	dbe7      	blt.n	80126e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012712:	bf00      	nop
 8012714:	bf00      	nop
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012726:	2300      	movs	r3, #0
 8012728:	80fb      	strh	r3, [r7, #6]
 801272a:	e009      	b.n	8012740 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801272c:	88fb      	ldrh	r3, [r7, #6]
 801272e:	4a08      	ldr	r2, [pc, #32]	@ (8012750 <memp_init+0x30>)
 8012730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012734:	4618      	mov	r0, r3
 8012736:	f7ff ffc3 	bl	80126c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801273a:	88fb      	ldrh	r3, [r7, #6]
 801273c:	3301      	adds	r3, #1
 801273e:	80fb      	strh	r3, [r7, #6]
 8012740:	88fb      	ldrh	r3, [r7, #6]
 8012742:	2b0c      	cmp	r3, #12
 8012744:	d9f2      	bls.n	801272c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012746:	bf00      	nop
 8012748:	bf00      	nop
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	08023100 	.word	0x08023100

08012754 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b084      	sub	sp, #16
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801275c:	f00a f92e 	bl	801c9bc <sys_arch_protect>
 8012760:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d015      	beq.n	801279c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	6812      	ldr	r2, [r2, #0]
 8012778:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	f003 0303 	and.w	r3, r3, #3
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <do_memp_malloc_pool+0x3e>
 8012784:	4b09      	ldr	r3, [pc, #36]	@ (80127ac <do_memp_malloc_pool+0x58>)
 8012786:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801278a:	4909      	ldr	r1, [pc, #36]	@ (80127b0 <do_memp_malloc_pool+0x5c>)
 801278c:	4809      	ldr	r0, [pc, #36]	@ (80127b4 <do_memp_malloc_pool+0x60>)
 801278e:	f00a ffd5 	bl	801d73c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012792:	68f8      	ldr	r0, [r7, #12]
 8012794:	f00a f920 	bl	801c9d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	e003      	b.n	80127a4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f00a f91b 	bl	801c9d8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	080208c0 	.word	0x080208c0
 80127b0:	080208f0 	.word	0x080208f0
 80127b4:	08020914 	.word	0x08020914

080127b8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b082      	sub	sp, #8
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <memp_malloc_pool+0x1c>
 80127c6:	4b0a      	ldr	r3, [pc, #40]	@ (80127f0 <memp_malloc_pool+0x38>)
 80127c8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80127cc:	4909      	ldr	r1, [pc, #36]	@ (80127f4 <memp_malloc_pool+0x3c>)
 80127ce:	480a      	ldr	r0, [pc, #40]	@ (80127f8 <memp_malloc_pool+0x40>)
 80127d0:	f00a ffb4 	bl	801d73c <iprintf>
  if (desc == NULL) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <memp_malloc_pool+0x26>
    return NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	e003      	b.n	80127e6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff ffb8 	bl	8012754 <do_memp_malloc_pool>
 80127e4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	080208c0 	.word	0x080208c0
 80127f4:	0802093c 	.word	0x0802093c
 80127f8:	08020914 	.word	0x08020914

080127fc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012806:	79fb      	ldrb	r3, [r7, #7]
 8012808:	2b0c      	cmp	r3, #12
 801280a:	d908      	bls.n	801281e <memp_malloc+0x22>
 801280c:	4b0a      	ldr	r3, [pc, #40]	@ (8012838 <memp_malloc+0x3c>)
 801280e:	f240 1257 	movw	r2, #343	@ 0x157
 8012812:	490a      	ldr	r1, [pc, #40]	@ (801283c <memp_malloc+0x40>)
 8012814:	480a      	ldr	r0, [pc, #40]	@ (8012840 <memp_malloc+0x44>)
 8012816:	f00a ff91 	bl	801d73c <iprintf>
 801281a:	2300      	movs	r3, #0
 801281c:	e008      	b.n	8012830 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801281e:	79fb      	ldrb	r3, [r7, #7]
 8012820:	4a08      	ldr	r2, [pc, #32]	@ (8012844 <memp_malloc+0x48>)
 8012822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012826:	4618      	mov	r0, r3
 8012828:	f7ff ff94 	bl	8012754 <do_memp_malloc_pool>
 801282c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801282e:	68fb      	ldr	r3, [r7, #12]
}
 8012830:	4618      	mov	r0, r3
 8012832:	3710      	adds	r7, #16
 8012834:	46bd      	mov	sp, r7
 8012836:	bd80      	pop	{r7, pc}
 8012838:	080208c0 	.word	0x080208c0
 801283c:	08020950 	.word	0x08020950
 8012840:	08020914 	.word	0x08020914
 8012844:	08023100 	.word	0x08023100

08012848 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	f003 0303 	and.w	r3, r3, #3
 8012858:	2b00      	cmp	r3, #0
 801285a:	d006      	beq.n	801286a <do_memp_free_pool+0x22>
 801285c:	4b0d      	ldr	r3, [pc, #52]	@ (8012894 <do_memp_free_pool+0x4c>)
 801285e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8012862:	490d      	ldr	r1, [pc, #52]	@ (8012898 <do_memp_free_pool+0x50>)
 8012864:	480d      	ldr	r0, [pc, #52]	@ (801289c <do_memp_free_pool+0x54>)
 8012866:	f00a ff69 	bl	801d73c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801286e:	f00a f8a5 	bl	801c9bc <sys_arch_protect>
 8012872:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	689b      	ldr	r3, [r3, #8]
 8012882:	68fa      	ldr	r2, [r7, #12]
 8012884:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012886:	68b8      	ldr	r0, [r7, #8]
 8012888:	f00a f8a6 	bl	801c9d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801288c:	bf00      	nop
 801288e:	3710      	adds	r7, #16
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	080208c0 	.word	0x080208c0
 8012898:	08020970 	.word	0x08020970
 801289c:	08020914 	.word	0x08020914

080128a0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d106      	bne.n	80128be <memp_free_pool+0x1e>
 80128b0:	4b0a      	ldr	r3, [pc, #40]	@ (80128dc <memp_free_pool+0x3c>)
 80128b2:	f240 1295 	movw	r2, #405	@ 0x195
 80128b6:	490a      	ldr	r1, [pc, #40]	@ (80128e0 <memp_free_pool+0x40>)
 80128b8:	480a      	ldr	r0, [pc, #40]	@ (80128e4 <memp_free_pool+0x44>)
 80128ba:	f00a ff3f 	bl	801d73c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d007      	beq.n	80128d4 <memp_free_pool+0x34>
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d004      	beq.n	80128d4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80128ca:	6839      	ldr	r1, [r7, #0]
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff ffbb 	bl	8012848 <do_memp_free_pool>
 80128d2:	e000      	b.n	80128d6 <memp_free_pool+0x36>
    return;
 80128d4:	bf00      	nop
}
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	080208c0 	.word	0x080208c0
 80128e0:	0802093c 	.word	0x0802093c
 80128e4:	08020914 	.word	0x08020914

080128e8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	4603      	mov	r3, r0
 80128f0:	6039      	str	r1, [r7, #0]
 80128f2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80128f4:	79fb      	ldrb	r3, [r7, #7]
 80128f6:	2b0c      	cmp	r3, #12
 80128f8:	d907      	bls.n	801290a <memp_free+0x22>
 80128fa:	4b0c      	ldr	r3, [pc, #48]	@ (801292c <memp_free+0x44>)
 80128fc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8012900:	490b      	ldr	r1, [pc, #44]	@ (8012930 <memp_free+0x48>)
 8012902:	480c      	ldr	r0, [pc, #48]	@ (8012934 <memp_free+0x4c>)
 8012904:	f00a ff1a 	bl	801d73c <iprintf>
 8012908:	e00c      	b.n	8012924 <memp_free+0x3c>

  if (mem == NULL) {
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d008      	beq.n	8012922 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012910:	79fb      	ldrb	r3, [r7, #7]
 8012912:	4a09      	ldr	r2, [pc, #36]	@ (8012938 <memp_free+0x50>)
 8012914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012918:	6839      	ldr	r1, [r7, #0]
 801291a:	4618      	mov	r0, r3
 801291c:	f7ff ff94 	bl	8012848 <do_memp_free_pool>
 8012920:	e000      	b.n	8012924 <memp_free+0x3c>
    return;
 8012922:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012924:	3708      	adds	r7, #8
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	080208c0 	.word	0x080208c0
 8012930:	08020990 	.word	0x08020990
 8012934:	08020914 	.word	0x08020914
 8012938:	08023100 	.word	0x08023100

0801293c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801293c:	b480      	push	{r7}
 801293e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012940:	bf00      	nop
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
	...

0801294c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b086      	sub	sp, #24
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d108      	bne.n	8012972 <netif_add+0x26>
 8012960:	4b57      	ldr	r3, [pc, #348]	@ (8012ac0 <netif_add+0x174>)
 8012962:	f240 1227 	movw	r2, #295	@ 0x127
 8012966:	4957      	ldr	r1, [pc, #348]	@ (8012ac4 <netif_add+0x178>)
 8012968:	4857      	ldr	r0, [pc, #348]	@ (8012ac8 <netif_add+0x17c>)
 801296a:	f00a fee7 	bl	801d73c <iprintf>
 801296e:	2300      	movs	r3, #0
 8012970:	e0a2      	b.n	8012ab8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012974:	2b00      	cmp	r3, #0
 8012976:	d108      	bne.n	801298a <netif_add+0x3e>
 8012978:	4b51      	ldr	r3, [pc, #324]	@ (8012ac0 <netif_add+0x174>)
 801297a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801297e:	4953      	ldr	r1, [pc, #332]	@ (8012acc <netif_add+0x180>)
 8012980:	4851      	ldr	r0, [pc, #324]	@ (8012ac8 <netif_add+0x17c>)
 8012982:	f00a fedb 	bl	801d73c <iprintf>
 8012986:	2300      	movs	r3, #0
 8012988:	e096      	b.n	8012ab8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d101      	bne.n	8012994 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012990:	4b4f      	ldr	r3, [pc, #316]	@ (8012ad0 <netif_add+0x184>)
 8012992:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d101      	bne.n	801299e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801299a:	4b4d      	ldr	r3, [pc, #308]	@ (8012ad0 <netif_add+0x184>)
 801299c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d101      	bne.n	80129a8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80129a4:	4b4a      	ldr	r3, [pc, #296]	@ (8012ad0 <netif_add+0x184>)
 80129a6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2200      	movs	r2, #0
 80129ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2200      	movs	r2, #0
 80129b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2200      	movs	r2, #0
 80129b8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	4a45      	ldr	r2, [pc, #276]	@ (8012ad4 <netif_add+0x188>)
 80129be:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2200      	movs	r2, #0
 80129ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2200      	movs	r2, #0
 80129d2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	6a3a      	ldr	r2, [r7, #32]
 80129d8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80129da:	4b3f      	ldr	r3, [pc, #252]	@ (8012ad8 <netif_add+0x18c>)
 80129dc:	781a      	ldrb	r2, [r3, #0]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129e8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	68b9      	ldr	r1, [r7, #8]
 80129f0:	68f8      	ldr	r0, [r7, #12]
 80129f2:	f000 f913 	bl	8012c1c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80129f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f8:	68f8      	ldr	r0, [r7, #12]
 80129fa:	4798      	blx	r3
 80129fc:	4603      	mov	r3, r0
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d001      	beq.n	8012a06 <netif_add+0xba>
    return NULL;
 8012a02:	2300      	movs	r3, #0
 8012a04:	e058      	b.n	8012ab8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a0c:	2bff      	cmp	r3, #255	@ 0xff
 8012a0e:	d103      	bne.n	8012a18 <netif_add+0xcc>
        netif->num = 0;
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2200      	movs	r2, #0
 8012a14:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8012adc <netif_add+0x190>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	617b      	str	r3, [r7, #20]
 8012a22:	e02b      	b.n	8012a7c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012a24:	697a      	ldr	r2, [r7, #20]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d106      	bne.n	8012a3a <netif_add+0xee>
 8012a2c:	4b24      	ldr	r3, [pc, #144]	@ (8012ac0 <netif_add+0x174>)
 8012a2e:	f240 128b 	movw	r2, #395	@ 0x18b
 8012a32:	492b      	ldr	r1, [pc, #172]	@ (8012ae0 <netif_add+0x194>)
 8012a34:	4824      	ldr	r0, [pc, #144]	@ (8012ac8 <netif_add+0x17c>)
 8012a36:	f00a fe81 	bl	801d73c <iprintf>
        num_netifs++;
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2bff      	cmp	r3, #255	@ 0xff
 8012a44:	dd06      	ble.n	8012a54 <netif_add+0x108>
 8012a46:	4b1e      	ldr	r3, [pc, #120]	@ (8012ac0 <netif_add+0x174>)
 8012a48:	f240 128d 	movw	r2, #397	@ 0x18d
 8012a4c:	4925      	ldr	r1, [pc, #148]	@ (8012ae4 <netif_add+0x198>)
 8012a4e:	481e      	ldr	r0, [pc, #120]	@ (8012ac8 <netif_add+0x17c>)
 8012a50:	f00a fe74 	bl	801d73c <iprintf>
        if (netif2->num == netif->num) {
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d108      	bne.n	8012a76 <netif_add+0x12a>
          netif->num++;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	b2da      	uxtb	r2, r3
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8012a74:	e005      	b.n	8012a82 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	617b      	str	r3, [r7, #20]
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d1d0      	bne.n	8012a24 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d1be      	bne.n	8012a06 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a90:	d103      	bne.n	8012a9a <netif_add+0x14e>
    netif_num = 0;
 8012a92:	4b11      	ldr	r3, [pc, #68]	@ (8012ad8 <netif_add+0x18c>)
 8012a94:	2200      	movs	r2, #0
 8012a96:	701a      	strb	r2, [r3, #0]
 8012a98:	e006      	b.n	8012aa8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012aa0:	3301      	adds	r3, #1
 8012aa2:	b2da      	uxtb	r2, r3
 8012aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8012ad8 <netif_add+0x18c>)
 8012aa6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8012adc <netif_add+0x190>)
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8012adc <netif_add+0x190>)
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3718      	adds	r7, #24
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	080209ac 	.word	0x080209ac
 8012ac4:	08020a40 	.word	0x08020a40
 8012ac8:	080209fc 	.word	0x080209fc
 8012acc:	08020a5c 	.word	0x08020a5c
 8012ad0:	08023174 	.word	0x08023174
 8012ad4:	08012e93 	.word	0x08012e93
 8012ad8:	2000c9ac 	.word	0x2000c9ac
 8012adc:	2000c9a4 	.word	0x2000c9a4
 8012ae0:	08020a80 	.word	0x08020a80
 8012ae4:	08020a94 	.word	0x08020a94

08012ae8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012af2:	6839      	ldr	r1, [r7, #0]
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f002 fdab 	bl	8015650 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012afa:	6839      	ldr	r1, [r7, #0]
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f007 fb11 	bl	801a124 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012b02:	bf00      	nop
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
	...

08012b0c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b086      	sub	sp, #24
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d106      	bne.n	8012b2c <netif_do_set_ipaddr+0x20>
 8012b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012b94 <netif_do_set_ipaddr+0x88>)
 8012b20:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8012b24:	491c      	ldr	r1, [pc, #112]	@ (8012b98 <netif_do_set_ipaddr+0x8c>)
 8012b26:	481d      	ldr	r0, [pc, #116]	@ (8012b9c <netif_do_set_ipaddr+0x90>)
 8012b28:	f00a fe08 	bl	801d73c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d106      	bne.n	8012b40 <netif_do_set_ipaddr+0x34>
 8012b32:	4b18      	ldr	r3, [pc, #96]	@ (8012b94 <netif_do_set_ipaddr+0x88>)
 8012b34:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8012b38:	4917      	ldr	r1, [pc, #92]	@ (8012b98 <netif_do_set_ipaddr+0x8c>)
 8012b3a:	4818      	ldr	r0, [pc, #96]	@ (8012b9c <netif_do_set_ipaddr+0x90>)
 8012b3c:	f00a fdfe 	bl	801d73c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	3304      	adds	r3, #4
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d01c      	beq.n	8012b88 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	3304      	adds	r3, #4
 8012b58:	681a      	ldr	r2, [r3, #0]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012b5e:	f107 0314 	add.w	r3, r7, #20
 8012b62:	4619      	mov	r1, r3
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f7ff ffbf 	bl	8012ae8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d002      	beq.n	8012b76 <netif_do_set_ipaddr+0x6a>
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	e000      	b.n	8012b78 <netif_do_set_ipaddr+0x6c>
 8012b76:	2300      	movs	r3, #0
 8012b78:	68fa      	ldr	r2, [r7, #12]
 8012b7a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f000 f8d2 	bl	8012d28 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012b84:	2301      	movs	r3, #1
 8012b86:	e000      	b.n	8012b8a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012b88:	2300      	movs	r3, #0
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3718      	adds	r7, #24
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	080209ac 	.word	0x080209ac
 8012b98:	08020ac4 	.word	0x08020ac4
 8012b9c:	080209fc 	.word	0x080209fc

08012ba0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012ba0:	b480      	push	{r7}
 8012ba2:	b085      	sub	sp, #20
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	60f8      	str	r0, [r7, #12]
 8012ba8:	60b9      	str	r1, [r7, #8]
 8012baa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	3308      	adds	r3, #8
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d00a      	beq.n	8012bd0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <netif_do_set_netmask+0x26>
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	e000      	b.n	8012bc8 <netif_do_set_netmask+0x28>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	68fa      	ldr	r2, [r7, #12]
 8012bca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e000      	b.n	8012bd2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012bde:	b480      	push	{r7}
 8012be0:	b085      	sub	sp, #20
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	60f8      	str	r0, [r7, #12]
 8012be6:	60b9      	str	r1, [r7, #8]
 8012be8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	681a      	ldr	r2, [r3, #0]
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	330c      	adds	r3, #12
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d00a      	beq.n	8012c0e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <netif_do_set_gw+0x26>
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	e000      	b.n	8012c06 <netif_do_set_gw+0x28>
 8012c04:	2300      	movs	r3, #0
 8012c06:	68fa      	ldr	r2, [r7, #12]
 8012c08:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e000      	b.n	8012c10 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	3714      	adds	r7, #20
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b088      	sub	sp, #32
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d101      	bne.n	8012c3c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012c38:	4b1c      	ldr	r3, [pc, #112]	@ (8012cac <netif_set_addr+0x90>)
 8012c3a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d101      	bne.n	8012c46 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012c42:	4b1a      	ldr	r3, [pc, #104]	@ (8012cac <netif_set_addr+0x90>)
 8012c44:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d101      	bne.n	8012c50 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012c4c:	4b17      	ldr	r3, [pc, #92]	@ (8012cac <netif_set_addr+0x90>)
 8012c4e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012c50:	68bb      	ldr	r3, [r7, #8]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d003      	beq.n	8012c5e <netif_set_addr+0x42>
 8012c56:	68bb      	ldr	r3, [r7, #8]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d101      	bne.n	8012c62 <netif_set_addr+0x46>
 8012c5e:	2301      	movs	r3, #1
 8012c60:	e000      	b.n	8012c64 <netif_set_addr+0x48>
 8012c62:	2300      	movs	r3, #0
 8012c64:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d006      	beq.n	8012c7a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012c6c:	f107 0310 	add.w	r3, r7, #16
 8012c70:	461a      	mov	r2, r3
 8012c72:	68b9      	ldr	r1, [r7, #8]
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f7ff ff49 	bl	8012b0c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	6879      	ldr	r1, [r7, #4]
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f7ff ff8e 	bl	8012ba0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012c84:	69ba      	ldr	r2, [r7, #24]
 8012c86:	6839      	ldr	r1, [r7, #0]
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7ff ffa8 	bl	8012bde <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d106      	bne.n	8012ca2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012c94:	f107 0310 	add.w	r3, r7, #16
 8012c98:	461a      	mov	r2, r3
 8012c9a:	68b9      	ldr	r1, [r7, #8]
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	f7ff ff35 	bl	8012b0c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012ca2:	bf00      	nop
 8012ca4:	3720      	adds	r7, #32
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	08023174 	.word	0x08023174

08012cb0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b083      	sub	sp, #12
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012cb8:	4a04      	ldr	r2, [pc, #16]	@ (8012ccc <netif_set_default+0x1c>)
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012cbe:	bf00      	nop
 8012cc0:	370c      	adds	r7, #12
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	2000c9a8 	.word	0x2000c9a8

08012cd0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d107      	bne.n	8012cee <netif_set_up+0x1e>
 8012cde:	4b0f      	ldr	r3, [pc, #60]	@ (8012d1c <netif_set_up+0x4c>)
 8012ce0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8012ce4:	490e      	ldr	r1, [pc, #56]	@ (8012d20 <netif_set_up+0x50>)
 8012ce6:	480f      	ldr	r0, [pc, #60]	@ (8012d24 <netif_set_up+0x54>)
 8012ce8:	f00a fd28 	bl	801d73c <iprintf>
 8012cec:	e013      	b.n	8012d16 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012cf4:	f003 0301 	and.w	r3, r3, #1
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d10c      	bne.n	8012d16 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d02:	f043 0301 	orr.w	r3, r3, #1
 8012d06:	b2da      	uxtb	r2, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012d0e:	2103      	movs	r1, #3
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 f809 	bl	8012d28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	080209ac 	.word	0x080209ac
 8012d20:	08020b34 	.word	0x08020b34
 8012d24:	080209fc 	.word	0x080209fc

08012d28 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b082      	sub	sp, #8
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	460b      	mov	r3, r1
 8012d32:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d106      	bne.n	8012d48 <netif_issue_reports+0x20>
 8012d3a:	4b18      	ldr	r3, [pc, #96]	@ (8012d9c <netif_issue_reports+0x74>)
 8012d3c:	f240 326d 	movw	r2, #877	@ 0x36d
 8012d40:	4917      	ldr	r1, [pc, #92]	@ (8012da0 <netif_issue_reports+0x78>)
 8012d42:	4818      	ldr	r0, [pc, #96]	@ (8012da4 <netif_issue_reports+0x7c>)
 8012d44:	f00a fcfa 	bl	801d73c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d4e:	f003 0304 	and.w	r3, r3, #4
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d01e      	beq.n	8012d94 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d5c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d017      	beq.n	8012d94 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012d64:	78fb      	ldrb	r3, [r7, #3]
 8012d66:	f003 0301 	and.w	r3, r3, #1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d013      	beq.n	8012d96 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	3304      	adds	r3, #4
 8012d72:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d00e      	beq.n	8012d96 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012d7e:	f003 0308 	and.w	r3, r3, #8
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d007      	beq.n	8012d96 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	3304      	adds	r3, #4
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f008 f903 	bl	801af98 <etharp_request>
 8012d92:	e000      	b.n	8012d96 <netif_issue_reports+0x6e>
    return;
 8012d94:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	080209ac 	.word	0x080209ac
 8012da0:	08020b50 	.word	0x08020b50
 8012da4:	080209fc 	.word	0x080209fc

08012da8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d107      	bne.n	8012dc6 <netif_set_link_up+0x1e>
 8012db6:	4b13      	ldr	r3, [pc, #76]	@ (8012e04 <netif_set_link_up+0x5c>)
 8012db8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8012dbc:	4912      	ldr	r1, [pc, #72]	@ (8012e08 <netif_set_link_up+0x60>)
 8012dbe:	4813      	ldr	r0, [pc, #76]	@ (8012e0c <netif_set_link_up+0x64>)
 8012dc0:	f00a fcbc 	bl	801d73c <iprintf>
 8012dc4:	e01b      	b.n	8012dfe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012dcc:	f003 0304 	and.w	r3, r3, #4
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d114      	bne.n	8012dfe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012dda:	f043 0304 	orr.w	r3, r3, #4
 8012dde:	b2da      	uxtb	r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012de6:	2103      	movs	r1, #3
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ff ff9d 	bl	8012d28 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	69db      	ldr	r3, [r3, #28]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d003      	beq.n	8012dfe <netif_set_link_up+0x56>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012dfe:	3708      	adds	r7, #8
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}
 8012e04:	080209ac 	.word	0x080209ac
 8012e08:	08020b94 	.word	0x08020b94
 8012e0c:	080209fc 	.word	0x080209fc

08012e10 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b082      	sub	sp, #8
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d107      	bne.n	8012e2e <netif_set_link_down+0x1e>
 8012e1e:	4b11      	ldr	r3, [pc, #68]	@ (8012e64 <netif_set_link_down+0x54>)
 8012e20:	f240 4206 	movw	r2, #1030	@ 0x406
 8012e24:	4910      	ldr	r1, [pc, #64]	@ (8012e68 <netif_set_link_down+0x58>)
 8012e26:	4811      	ldr	r0, [pc, #68]	@ (8012e6c <netif_set_link_down+0x5c>)
 8012e28:	f00a fc88 	bl	801d73c <iprintf>
 8012e2c:	e017      	b.n	8012e5e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012e34:	f003 0304 	and.w	r3, r3, #4
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d010      	beq.n	8012e5e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012e42:	f023 0304 	bic.w	r3, r3, #4
 8012e46:	b2da      	uxtb	r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	69db      	ldr	r3, [r3, #28]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d003      	beq.n	8012e5e <netif_set_link_down+0x4e>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	69db      	ldr	r3, [r3, #28]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012e5e:	3708      	adds	r7, #8
 8012e60:	46bd      	mov	sp, r7
 8012e62:	bd80      	pop	{r7, pc}
 8012e64:	080209ac 	.word	0x080209ac
 8012e68:	08020bb8 	.word	0x08020bb8
 8012e6c:	080209fc 	.word	0x080209fc

08012e70 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012e70:	b480      	push	{r7}
 8012e72:	b083      	sub	sp, #12
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
 8012e78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d002      	beq.n	8012e86 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	61da      	str	r2, [r3, #28]
  }
}
 8012e86:	bf00      	nop
 8012e88:	370c      	adds	r7, #12
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr

08012e92 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012e92:	b480      	push	{r7}
 8012e94:	b085      	sub	sp, #20
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	60f8      	str	r0, [r7, #12]
 8012e9a:	60b9      	str	r1, [r7, #8]
 8012e9c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012e9e:	f06f 030b 	mvn.w	r3, #11
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3714      	adds	r7, #20
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eac:	4770      	bx	lr
	...

08012eb0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012eb0:	b480      	push	{r7}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012eba:	79fb      	ldrb	r3, [r7, #7]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d013      	beq.n	8012ee8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8012ef8 <netif_get_by_index+0x48>)
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	60fb      	str	r3, [r7, #12]
 8012ec6:	e00c      	b.n	8012ee2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ece:	3301      	adds	r3, #1
 8012ed0:	b2db      	uxtb	r3, r3
 8012ed2:	79fa      	ldrb	r2, [r7, #7]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d101      	bne.n	8012edc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	e006      	b.n	8012eea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	60fb      	str	r3, [r7, #12]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d1ef      	bne.n	8012ec8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012ee8:	2300      	movs	r3, #0
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3714      	adds	r7, #20
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	2000c9a4 	.word	0x2000c9a4

08012efc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b082      	sub	sp, #8
 8012f00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012f02:	f009 fd5b 	bl	801c9bc <sys_arch_protect>
 8012f06:	6038      	str	r0, [r7, #0]
 8012f08:	4b0d      	ldr	r3, [pc, #52]	@ (8012f40 <pbuf_free_ooseq+0x44>)
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	701a      	strb	r2, [r3, #0]
 8012f0e:	6838      	ldr	r0, [r7, #0]
 8012f10:	f009 fd62 	bl	801c9d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012f14:	4b0b      	ldr	r3, [pc, #44]	@ (8012f44 <pbuf_free_ooseq+0x48>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	607b      	str	r3, [r7, #4]
 8012f1a:	e00a      	b.n	8012f32 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f002 fbd1 	bl	80156cc <tcp_free_ooseq>
      return;
 8012f2a:	e005      	b.n	8012f38 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	68db      	ldr	r3, [r3, #12]
 8012f30:	607b      	str	r3, [r7, #4]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d1f1      	bne.n	8012f1c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012f38:	3708      	adds	r7, #8
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}
 8012f3e:	bf00      	nop
 8012f40:	2000c9ad 	.word	0x2000c9ad
 8012f44:	2000c9bc 	.word	0x2000c9bc

08012f48 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012f50:	f7ff ffd4 	bl	8012efc <pbuf_free_ooseq>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012f62:	f009 fd2b 	bl	801c9bc <sys_arch_protect>
 8012f66:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012f68:	4b0f      	ldr	r3, [pc, #60]	@ (8012fa8 <pbuf_pool_is_empty+0x4c>)
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8012fa8 <pbuf_pool_is_empty+0x4c>)
 8012f70:	2201      	movs	r2, #1
 8012f72:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f009 fd2f 	bl	801c9d8 <sys_arch_unprotect>

  if (!queued) {
 8012f7a:	78fb      	ldrb	r3, [r7, #3]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d10f      	bne.n	8012fa0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012f80:	2100      	movs	r1, #0
 8012f82:	480a      	ldr	r0, [pc, #40]	@ (8012fac <pbuf_pool_is_empty+0x50>)
 8012f84:	f7fe fed8 	bl	8011d38 <tcpip_try_callback>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d008      	beq.n	8012fa0 <pbuf_pool_is_empty+0x44>
 8012f8e:	f009 fd15 	bl	801c9bc <sys_arch_protect>
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	4b04      	ldr	r3, [pc, #16]	@ (8012fa8 <pbuf_pool_is_empty+0x4c>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	701a      	strb	r2, [r3, #0]
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f009 fd1c 	bl	801c9d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012fa0:	bf00      	nop
 8012fa2:	3708      	adds	r7, #8
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	2000c9ad 	.word	0x2000c9ad
 8012fac:	08012f49 	.word	0x08012f49

08012fb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b085      	sub	sp, #20
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	60f8      	str	r0, [r7, #12]
 8012fb8:	60b9      	str	r1, [r7, #8]
 8012fba:	4611      	mov	r1, r2
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	80fb      	strh	r3, [r7, #6]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	88fa      	ldrh	r2, [r7, #6]
 8012fd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	88ba      	ldrh	r2, [r7, #4]
 8012fdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012fde:	8b3b      	ldrh	r3, [r7, #24]
 8012fe0:	b2da      	uxtb	r2, r3
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	7f3a      	ldrb	r2, [r7, #28]
 8012fea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2201      	movs	r2, #1
 8012ff0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	73da      	strb	r2, [r3, #15]
}
 8012ff8:	bf00      	nop
 8012ffa:	3714      	adds	r7, #20
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013002:	4770      	bx	lr

08013004 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b08c      	sub	sp, #48	@ 0x30
 8013008:	af02      	add	r7, sp, #8
 801300a:	4603      	mov	r3, r0
 801300c:	71fb      	strb	r3, [r7, #7]
 801300e:	460b      	mov	r3, r1
 8013010:	80bb      	strh	r3, [r7, #4]
 8013012:	4613      	mov	r3, r2
 8013014:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013016:	79fb      	ldrb	r3, [r7, #7]
 8013018:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801301a:	887b      	ldrh	r3, [r7, #2]
 801301c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013020:	d07f      	beq.n	8013122 <pbuf_alloc+0x11e>
 8013022:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013026:	f300 80c8 	bgt.w	80131ba <pbuf_alloc+0x1b6>
 801302a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801302e:	d010      	beq.n	8013052 <pbuf_alloc+0x4e>
 8013030:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013034:	f300 80c1 	bgt.w	80131ba <pbuf_alloc+0x1b6>
 8013038:	2b01      	cmp	r3, #1
 801303a:	d002      	beq.n	8013042 <pbuf_alloc+0x3e>
 801303c:	2b41      	cmp	r3, #65	@ 0x41
 801303e:	f040 80bc 	bne.w	80131ba <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013042:	887a      	ldrh	r2, [r7, #2]
 8013044:	88bb      	ldrh	r3, [r7, #4]
 8013046:	4619      	mov	r1, r3
 8013048:	2000      	movs	r0, #0
 801304a:	f000 f8d1 	bl	80131f0 <pbuf_alloc_reference>
 801304e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013050:	e0bd      	b.n	80131ce <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013052:	2300      	movs	r3, #0
 8013054:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013056:	2300      	movs	r3, #0
 8013058:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801305a:	88bb      	ldrh	r3, [r7, #4]
 801305c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801305e:	200c      	movs	r0, #12
 8013060:	f7ff fbcc 	bl	80127fc <memp_malloc>
 8013064:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d109      	bne.n	8013080 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801306c:	f7ff ff76 	bl	8012f5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013072:	2b00      	cmp	r3, #0
 8013074:	d002      	beq.n	801307c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013078:	f000 faa8 	bl	80135cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801307c:	2300      	movs	r3, #0
 801307e:	e0a7      	b.n	80131d0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013080:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013082:	3303      	adds	r3, #3
 8013084:	b29b      	uxth	r3, r3
 8013086:	f023 0303 	bic.w	r3, r3, #3
 801308a:	b29b      	uxth	r3, r3
 801308c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013090:	b29b      	uxth	r3, r3
 8013092:	8b7a      	ldrh	r2, [r7, #26]
 8013094:	4293      	cmp	r3, r2
 8013096:	bf28      	it	cs
 8013098:	4613      	movcs	r3, r2
 801309a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801309c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801309e:	3310      	adds	r3, #16
 80130a0:	693a      	ldr	r2, [r7, #16]
 80130a2:	4413      	add	r3, r2
 80130a4:	3303      	adds	r3, #3
 80130a6:	f023 0303 	bic.w	r3, r3, #3
 80130aa:	4618      	mov	r0, r3
 80130ac:	89f9      	ldrh	r1, [r7, #14]
 80130ae:	8b7a      	ldrh	r2, [r7, #26]
 80130b0:	2300      	movs	r3, #0
 80130b2:	9301      	str	r3, [sp, #4]
 80130b4:	887b      	ldrh	r3, [r7, #2]
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	460b      	mov	r3, r1
 80130ba:	4601      	mov	r1, r0
 80130bc:	6938      	ldr	r0, [r7, #16]
 80130be:	f7ff ff77 	bl	8012fb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	f003 0303 	and.w	r3, r3, #3
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d006      	beq.n	80130dc <pbuf_alloc+0xd8>
 80130ce:	4b42      	ldr	r3, [pc, #264]	@ (80131d8 <pbuf_alloc+0x1d4>)
 80130d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80130d4:	4941      	ldr	r1, [pc, #260]	@ (80131dc <pbuf_alloc+0x1d8>)
 80130d6:	4842      	ldr	r0, [pc, #264]	@ (80131e0 <pbuf_alloc+0x1dc>)
 80130d8:	f00a fb30 	bl	801d73c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80130dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80130de:	3303      	adds	r3, #3
 80130e0:	f023 0303 	bic.w	r3, r3, #3
 80130e4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80130e8:	d106      	bne.n	80130f8 <pbuf_alloc+0xf4>
 80130ea:	4b3b      	ldr	r3, [pc, #236]	@ (80131d8 <pbuf_alloc+0x1d4>)
 80130ec:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80130f0:	493c      	ldr	r1, [pc, #240]	@ (80131e4 <pbuf_alloc+0x1e0>)
 80130f2:	483b      	ldr	r0, [pc, #236]	@ (80131e0 <pbuf_alloc+0x1dc>)
 80130f4:	f00a fb22 	bl	801d73c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80130f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d102      	bne.n	8013104 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	627b      	str	r3, [r7, #36]	@ 0x24
 8013102:	e002      	b.n	801310a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	693a      	ldr	r2, [r7, #16]
 8013108:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801310e:	8b7a      	ldrh	r2, [r7, #26]
 8013110:	89fb      	ldrh	r3, [r7, #14]
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801311a:	8b7b      	ldrh	r3, [r7, #26]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d19e      	bne.n	801305e <pbuf_alloc+0x5a>
      break;
 8013120:	e055      	b.n	80131ce <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013122:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013124:	3303      	adds	r3, #3
 8013126:	b29b      	uxth	r3, r3
 8013128:	f023 0303 	bic.w	r3, r3, #3
 801312c:	b29a      	uxth	r2, r3
 801312e:	88bb      	ldrh	r3, [r7, #4]
 8013130:	3303      	adds	r3, #3
 8013132:	b29b      	uxth	r3, r3
 8013134:	f023 0303 	bic.w	r3, r3, #3
 8013138:	b29b      	uxth	r3, r3
 801313a:	4413      	add	r3, r2
 801313c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801313e:	8b3b      	ldrh	r3, [r7, #24]
 8013140:	3310      	adds	r3, #16
 8013142:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013144:	8b3a      	ldrh	r2, [r7, #24]
 8013146:	88bb      	ldrh	r3, [r7, #4]
 8013148:	3303      	adds	r3, #3
 801314a:	f023 0303 	bic.w	r3, r3, #3
 801314e:	429a      	cmp	r2, r3
 8013150:	d306      	bcc.n	8013160 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013152:	8afa      	ldrh	r2, [r7, #22]
 8013154:	88bb      	ldrh	r3, [r7, #4]
 8013156:	3303      	adds	r3, #3
 8013158:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801315c:	429a      	cmp	r2, r3
 801315e:	d201      	bcs.n	8013164 <pbuf_alloc+0x160>
        return NULL;
 8013160:	2300      	movs	r3, #0
 8013162:	e035      	b.n	80131d0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013164:	8afb      	ldrh	r3, [r7, #22]
 8013166:	4618      	mov	r0, r3
 8013168:	f7ff f9a4 	bl	80124b4 <mem_malloc>
 801316c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013170:	2b00      	cmp	r3, #0
 8013172:	d101      	bne.n	8013178 <pbuf_alloc+0x174>
        return NULL;
 8013174:	2300      	movs	r3, #0
 8013176:	e02b      	b.n	80131d0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013178:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801317a:	3310      	adds	r3, #16
 801317c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801317e:	4413      	add	r3, r2
 8013180:	3303      	adds	r3, #3
 8013182:	f023 0303 	bic.w	r3, r3, #3
 8013186:	4618      	mov	r0, r3
 8013188:	88b9      	ldrh	r1, [r7, #4]
 801318a:	88ba      	ldrh	r2, [r7, #4]
 801318c:	2300      	movs	r3, #0
 801318e:	9301      	str	r3, [sp, #4]
 8013190:	887b      	ldrh	r3, [r7, #2]
 8013192:	9300      	str	r3, [sp, #0]
 8013194:	460b      	mov	r3, r1
 8013196:	4601      	mov	r1, r0
 8013198:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801319a:	f7ff ff09 	bl	8012fb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	f003 0303 	and.w	r3, r3, #3
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d010      	beq.n	80131cc <pbuf_alloc+0x1c8>
 80131aa:	4b0b      	ldr	r3, [pc, #44]	@ (80131d8 <pbuf_alloc+0x1d4>)
 80131ac:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80131b0:	490d      	ldr	r1, [pc, #52]	@ (80131e8 <pbuf_alloc+0x1e4>)
 80131b2:	480b      	ldr	r0, [pc, #44]	@ (80131e0 <pbuf_alloc+0x1dc>)
 80131b4:	f00a fac2 	bl	801d73c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80131b8:	e008      	b.n	80131cc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80131ba:	4b07      	ldr	r3, [pc, #28]	@ (80131d8 <pbuf_alloc+0x1d4>)
 80131bc:	f240 1227 	movw	r2, #295	@ 0x127
 80131c0:	490a      	ldr	r1, [pc, #40]	@ (80131ec <pbuf_alloc+0x1e8>)
 80131c2:	4807      	ldr	r0, [pc, #28]	@ (80131e0 <pbuf_alloc+0x1dc>)
 80131c4:	f00a faba 	bl	801d73c <iprintf>
      return NULL;
 80131c8:	2300      	movs	r3, #0
 80131ca:	e001      	b.n	80131d0 <pbuf_alloc+0x1cc>
      break;
 80131cc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80131ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80131d0:	4618      	mov	r0, r3
 80131d2:	3728      	adds	r7, #40	@ 0x28
 80131d4:	46bd      	mov	sp, r7
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	08020bdc 	.word	0x08020bdc
 80131dc:	08020c0c 	.word	0x08020c0c
 80131e0:	08020c3c 	.word	0x08020c3c
 80131e4:	08020c64 	.word	0x08020c64
 80131e8:	08020c98 	.word	0x08020c98
 80131ec:	08020cc4 	.word	0x08020cc4

080131f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af02      	add	r7, sp, #8
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	460b      	mov	r3, r1
 80131fa:	807b      	strh	r3, [r7, #2]
 80131fc:	4613      	mov	r3, r2
 80131fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013200:	883b      	ldrh	r3, [r7, #0]
 8013202:	2b41      	cmp	r3, #65	@ 0x41
 8013204:	d009      	beq.n	801321a <pbuf_alloc_reference+0x2a>
 8013206:	883b      	ldrh	r3, [r7, #0]
 8013208:	2b01      	cmp	r3, #1
 801320a:	d006      	beq.n	801321a <pbuf_alloc_reference+0x2a>
 801320c:	4b0f      	ldr	r3, [pc, #60]	@ (801324c <pbuf_alloc_reference+0x5c>)
 801320e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013212:	490f      	ldr	r1, [pc, #60]	@ (8013250 <pbuf_alloc_reference+0x60>)
 8013214:	480f      	ldr	r0, [pc, #60]	@ (8013254 <pbuf_alloc_reference+0x64>)
 8013216:	f00a fa91 	bl	801d73c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801321a:	200b      	movs	r0, #11
 801321c:	f7ff faee 	bl	80127fc <memp_malloc>
 8013220:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d101      	bne.n	801322c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013228:	2300      	movs	r3, #0
 801322a:	e00b      	b.n	8013244 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801322c:	8879      	ldrh	r1, [r7, #2]
 801322e:	887a      	ldrh	r2, [r7, #2]
 8013230:	2300      	movs	r3, #0
 8013232:	9301      	str	r3, [sp, #4]
 8013234:	883b      	ldrh	r3, [r7, #0]
 8013236:	9300      	str	r3, [sp, #0]
 8013238:	460b      	mov	r3, r1
 801323a:	6879      	ldr	r1, [r7, #4]
 801323c:	68f8      	ldr	r0, [r7, #12]
 801323e:	f7ff feb7 	bl	8012fb0 <pbuf_init_alloced_pbuf>
  return p;
 8013242:	68fb      	ldr	r3, [r7, #12]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	08020bdc 	.word	0x08020bdc
 8013250:	08020ce0 	.word	0x08020ce0
 8013254:	08020c3c 	.word	0x08020c3c

08013258 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b088      	sub	sp, #32
 801325c:	af02      	add	r7, sp, #8
 801325e:	607b      	str	r3, [r7, #4]
 8013260:	4603      	mov	r3, r0
 8013262:	73fb      	strb	r3, [r7, #15]
 8013264:	460b      	mov	r3, r1
 8013266:	81bb      	strh	r3, [r7, #12]
 8013268:	4613      	mov	r3, r2
 801326a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801326c:	7bfb      	ldrb	r3, [r7, #15]
 801326e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013270:	8a7b      	ldrh	r3, [r7, #18]
 8013272:	3303      	adds	r3, #3
 8013274:	f023 0203 	bic.w	r2, r3, #3
 8013278:	89bb      	ldrh	r3, [r7, #12]
 801327a:	441a      	add	r2, r3
 801327c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801327e:	429a      	cmp	r2, r3
 8013280:	d901      	bls.n	8013286 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013282:	2300      	movs	r3, #0
 8013284:	e018      	b.n	80132b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d007      	beq.n	801329c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801328c:	8a7b      	ldrh	r3, [r7, #18]
 801328e:	3303      	adds	r3, #3
 8013290:	f023 0303 	bic.w	r3, r3, #3
 8013294:	6a3a      	ldr	r2, [r7, #32]
 8013296:	4413      	add	r3, r2
 8013298:	617b      	str	r3, [r7, #20]
 801329a:	e001      	b.n	80132a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801329c:	2300      	movs	r3, #0
 801329e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	89b9      	ldrh	r1, [r7, #12]
 80132a4:	89ba      	ldrh	r2, [r7, #12]
 80132a6:	2302      	movs	r3, #2
 80132a8:	9301      	str	r3, [sp, #4]
 80132aa:	897b      	ldrh	r3, [r7, #10]
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	460b      	mov	r3, r1
 80132b0:	6979      	ldr	r1, [r7, #20]
 80132b2:	f7ff fe7d 	bl	8012fb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80132b6:	687b      	ldr	r3, [r7, #4]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3718      	adds	r7, #24
 80132bc:	46bd      	mov	sp, r7
 80132be:	bd80      	pop	{r7, pc}

080132c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
 80132c8:	460b      	mov	r3, r1
 80132ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d106      	bne.n	80132e0 <pbuf_realloc+0x20>
 80132d2:	4b3a      	ldr	r3, [pc, #232]	@ (80133bc <pbuf_realloc+0xfc>)
 80132d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80132d8:	4939      	ldr	r1, [pc, #228]	@ (80133c0 <pbuf_realloc+0x100>)
 80132da:	483a      	ldr	r0, [pc, #232]	@ (80133c4 <pbuf_realloc+0x104>)
 80132dc:	f00a fa2e 	bl	801d73c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	891b      	ldrh	r3, [r3, #8]
 80132e4:	887a      	ldrh	r2, [r7, #2]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d263      	bcs.n	80133b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	891a      	ldrh	r2, [r3, #8]
 80132ee:	887b      	ldrh	r3, [r7, #2]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80132f4:	887b      	ldrh	r3, [r7, #2]
 80132f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80132fc:	e018      	b.n	8013330 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	895b      	ldrh	r3, [r3, #10]
 8013302:	897a      	ldrh	r2, [r7, #10]
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	891a      	ldrh	r2, [r3, #8]
 801330c:	893b      	ldrh	r3, [r7, #8]
 801330e:	1ad3      	subs	r3, r2, r3
 8013310:	b29a      	uxth	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d106      	bne.n	8013330 <pbuf_realloc+0x70>
 8013322:	4b26      	ldr	r3, [pc, #152]	@ (80133bc <pbuf_realloc+0xfc>)
 8013324:	f240 12af 	movw	r2, #431	@ 0x1af
 8013328:	4927      	ldr	r1, [pc, #156]	@ (80133c8 <pbuf_realloc+0x108>)
 801332a:	4826      	ldr	r0, [pc, #152]	@ (80133c4 <pbuf_realloc+0x104>)
 801332c:	f00a fa06 	bl	801d73c <iprintf>
  while (rem_len > q->len) {
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	895b      	ldrh	r3, [r3, #10]
 8013334:	897a      	ldrh	r2, [r7, #10]
 8013336:	429a      	cmp	r2, r3
 8013338:	d8e1      	bhi.n	80132fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	7b1b      	ldrb	r3, [r3, #12]
 801333e:	f003 030f 	and.w	r3, r3, #15
 8013342:	2b00      	cmp	r3, #0
 8013344:	d121      	bne.n	801338a <pbuf_realloc+0xca>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	895b      	ldrh	r3, [r3, #10]
 801334a:	897a      	ldrh	r2, [r7, #10]
 801334c:	429a      	cmp	r2, r3
 801334e:	d01c      	beq.n	801338a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	7b5b      	ldrb	r3, [r3, #13]
 8013354:	f003 0302 	and.w	r3, r3, #2
 8013358:	2b00      	cmp	r3, #0
 801335a:	d116      	bne.n	801338a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	685a      	ldr	r2, [r3, #4]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	b29a      	uxth	r2, r3
 8013366:	897b      	ldrh	r3, [r7, #10]
 8013368:	4413      	add	r3, r2
 801336a:	b29b      	uxth	r3, r3
 801336c:	4619      	mov	r1, r3
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f7fe ff96 	bl	80122a0 <mem_trim>
 8013374:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d106      	bne.n	801338a <pbuf_realloc+0xca>
 801337c:	4b0f      	ldr	r3, [pc, #60]	@ (80133bc <pbuf_realloc+0xfc>)
 801337e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013382:	4912      	ldr	r1, [pc, #72]	@ (80133cc <pbuf_realloc+0x10c>)
 8013384:	480f      	ldr	r0, [pc, #60]	@ (80133c4 <pbuf_realloc+0x104>)
 8013386:	f00a f9d9 	bl	801d73c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	897a      	ldrh	r2, [r7, #10]
 801338e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	895a      	ldrh	r2, [r3, #10]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d004      	beq.n	80133aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f000 f911 	bl	80135cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	2200      	movs	r2, #0
 80133ae:	601a      	str	r2, [r3, #0]
 80133b0:	e000      	b.n	80133b4 <pbuf_realloc+0xf4>
    return;
 80133b2:	bf00      	nop

}
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	08020bdc 	.word	0x08020bdc
 80133c0:	08020cf4 	.word	0x08020cf4
 80133c4:	08020c3c 	.word	0x08020c3c
 80133c8:	08020d0c 	.word	0x08020d0c
 80133cc:	08020d24 	.word	0x08020d24

080133d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b086      	sub	sp, #24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	60f8      	str	r0, [r7, #12]
 80133d8:	60b9      	str	r1, [r7, #8]
 80133da:	4613      	mov	r3, r2
 80133dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d106      	bne.n	80133f2 <pbuf_add_header_impl+0x22>
 80133e4:	4b2b      	ldr	r3, [pc, #172]	@ (8013494 <pbuf_add_header_impl+0xc4>)
 80133e6:	f240 12df 	movw	r2, #479	@ 0x1df
 80133ea:	492b      	ldr	r1, [pc, #172]	@ (8013498 <pbuf_add_header_impl+0xc8>)
 80133ec:	482b      	ldr	r0, [pc, #172]	@ (801349c <pbuf_add_header_impl+0xcc>)
 80133ee:	f00a f9a5 	bl	801d73c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d003      	beq.n	8013400 <pbuf_add_header_impl+0x30>
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133fe:	d301      	bcc.n	8013404 <pbuf_add_header_impl+0x34>
    return 1;
 8013400:	2301      	movs	r3, #1
 8013402:	e043      	b.n	801348c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d101      	bne.n	801340e <pbuf_add_header_impl+0x3e>
    return 0;
 801340a:	2300      	movs	r3, #0
 801340c:	e03e      	b.n	801348c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	891a      	ldrh	r2, [r3, #8]
 8013416:	8a7b      	ldrh	r3, [r7, #18]
 8013418:	4413      	add	r3, r2
 801341a:	b29b      	uxth	r3, r3
 801341c:	8a7a      	ldrh	r2, [r7, #18]
 801341e:	429a      	cmp	r2, r3
 8013420:	d901      	bls.n	8013426 <pbuf_add_header_impl+0x56>
    return 1;
 8013422:	2301      	movs	r3, #1
 8013424:	e032      	b.n	801348c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	7b1b      	ldrb	r3, [r3, #12]
 801342a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801342c:	8a3b      	ldrh	r3, [r7, #16]
 801342e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013432:	2b00      	cmp	r3, #0
 8013434:	d00c      	beq.n	8013450 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	685a      	ldr	r2, [r3, #4]
 801343a:	68bb      	ldr	r3, [r7, #8]
 801343c:	425b      	negs	r3, r3
 801343e:	4413      	add	r3, r2
 8013440:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	3310      	adds	r3, #16
 8013446:	697a      	ldr	r2, [r7, #20]
 8013448:	429a      	cmp	r2, r3
 801344a:	d20d      	bcs.n	8013468 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801344c:	2301      	movs	r3, #1
 801344e:	e01d      	b.n	801348c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013450:	79fb      	ldrb	r3, [r7, #7]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d006      	beq.n	8013464 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	425b      	negs	r3, r3
 801345e:	4413      	add	r3, r2
 8013460:	617b      	str	r3, [r7, #20]
 8013462:	e001      	b.n	8013468 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013464:	2301      	movs	r3, #1
 8013466:	e011      	b.n	801348c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	697a      	ldr	r2, [r7, #20]
 801346c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	895a      	ldrh	r2, [r3, #10]
 8013472:	8a7b      	ldrh	r3, [r7, #18]
 8013474:	4413      	add	r3, r2
 8013476:	b29a      	uxth	r2, r3
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	891a      	ldrh	r2, [r3, #8]
 8013480:	8a7b      	ldrh	r3, [r7, #18]
 8013482:	4413      	add	r3, r2
 8013484:	b29a      	uxth	r2, r3
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	811a      	strh	r2, [r3, #8]


  return 0;
 801348a:	2300      	movs	r3, #0
}
 801348c:	4618      	mov	r0, r3
 801348e:	3718      	adds	r7, #24
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	08020bdc 	.word	0x08020bdc
 8013498:	08020d40 	.word	0x08020d40
 801349c:	08020c3c 	.word	0x08020c3c

080134a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80134aa:	2200      	movs	r2, #0
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7ff ff8e 	bl	80133d0 <pbuf_add_header_impl>
 80134b4:	4603      	mov	r3, r0
}
 80134b6:	4618      	mov	r0, r3
 80134b8:	3708      	adds	r7, #8
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}
	...

080134c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b084      	sub	sp, #16
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
 80134c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d106      	bne.n	80134de <pbuf_remove_header+0x1e>
 80134d0:	4b20      	ldr	r3, [pc, #128]	@ (8013554 <pbuf_remove_header+0x94>)
 80134d2:	f240 224b 	movw	r2, #587	@ 0x24b
 80134d6:	4920      	ldr	r1, [pc, #128]	@ (8013558 <pbuf_remove_header+0x98>)
 80134d8:	4820      	ldr	r0, [pc, #128]	@ (801355c <pbuf_remove_header+0x9c>)
 80134da:	f00a f92f 	bl	801d73c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d003      	beq.n	80134ec <pbuf_remove_header+0x2c>
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80134ea:	d301      	bcc.n	80134f0 <pbuf_remove_header+0x30>
    return 1;
 80134ec:	2301      	movs	r3, #1
 80134ee:	e02c      	b.n	801354a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d101      	bne.n	80134fa <pbuf_remove_header+0x3a>
    return 0;
 80134f6:	2300      	movs	r3, #0
 80134f8:	e027      	b.n	801354a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	895b      	ldrh	r3, [r3, #10]
 8013502:	89fa      	ldrh	r2, [r7, #14]
 8013504:	429a      	cmp	r2, r3
 8013506:	d908      	bls.n	801351a <pbuf_remove_header+0x5a>
 8013508:	4b12      	ldr	r3, [pc, #72]	@ (8013554 <pbuf_remove_header+0x94>)
 801350a:	f240 2255 	movw	r2, #597	@ 0x255
 801350e:	4914      	ldr	r1, [pc, #80]	@ (8013560 <pbuf_remove_header+0xa0>)
 8013510:	4812      	ldr	r0, [pc, #72]	@ (801355c <pbuf_remove_header+0x9c>)
 8013512:	f00a f913 	bl	801d73c <iprintf>
 8013516:	2301      	movs	r3, #1
 8013518:	e017      	b.n	801354a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	685a      	ldr	r2, [r3, #4]
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	441a      	add	r2, r3
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	895a      	ldrh	r2, [r3, #10]
 8013530:	89fb      	ldrh	r3, [r7, #14]
 8013532:	1ad3      	subs	r3, r2, r3
 8013534:	b29a      	uxth	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	891a      	ldrh	r2, [r3, #8]
 801353e:	89fb      	ldrh	r3, [r7, #14]
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	b29a      	uxth	r2, r3
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013548:	2300      	movs	r3, #0
}
 801354a:	4618      	mov	r0, r3
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	08020bdc 	.word	0x08020bdc
 8013558:	08020d40 	.word	0x08020d40
 801355c:	08020c3c 	.word	0x08020c3c
 8013560:	08020d4c 	.word	0x08020d4c

08013564 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b082      	sub	sp, #8
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	807b      	strh	r3, [r7, #2]
 8013570:	4613      	mov	r3, r2
 8013572:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013574:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013578:	2b00      	cmp	r3, #0
 801357a:	da08      	bge.n	801358e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801357c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013580:	425b      	negs	r3, r3
 8013582:	4619      	mov	r1, r3
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff ff9b 	bl	80134c0 <pbuf_remove_header>
 801358a:	4603      	mov	r3, r0
 801358c:	e007      	b.n	801359e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801358e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013592:	787a      	ldrb	r2, [r7, #1]
 8013594:	4619      	mov	r1, r3
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7ff ff1a 	bl	80133d0 <pbuf_add_header_impl>
 801359c:	4603      	mov	r3, r0
  }
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3708      	adds	r7, #8
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}

080135a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b082      	sub	sp, #8
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
 80135ae:	460b      	mov	r3, r1
 80135b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80135b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80135b6:	2201      	movs	r2, #1
 80135b8:	4619      	mov	r1, r3
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f7ff ffd2 	bl	8013564 <pbuf_header_impl>
 80135c0:	4603      	mov	r3, r0
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
	...

080135cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b088      	sub	sp, #32
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d10b      	bne.n	80135f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d106      	bne.n	80135ee <pbuf_free+0x22>
 80135e0:	4b3b      	ldr	r3, [pc, #236]	@ (80136d0 <pbuf_free+0x104>)
 80135e2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80135e6:	493b      	ldr	r1, [pc, #236]	@ (80136d4 <pbuf_free+0x108>)
 80135e8:	483b      	ldr	r0, [pc, #236]	@ (80136d8 <pbuf_free+0x10c>)
 80135ea:	f00a f8a7 	bl	801d73c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	e069      	b.n	80136c6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80135f6:	e062      	b.n	80136be <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80135f8:	f009 f9e0 	bl	801c9bc <sys_arch_protect>
 80135fc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	7b9b      	ldrb	r3, [r3, #14]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d106      	bne.n	8013614 <pbuf_free+0x48>
 8013606:	4b32      	ldr	r3, [pc, #200]	@ (80136d0 <pbuf_free+0x104>)
 8013608:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801360c:	4933      	ldr	r1, [pc, #204]	@ (80136dc <pbuf_free+0x110>)
 801360e:	4832      	ldr	r0, [pc, #200]	@ (80136d8 <pbuf_free+0x10c>)
 8013610:	f00a f894 	bl	801d73c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	7b9b      	ldrb	r3, [r3, #14]
 8013618:	3b01      	subs	r3, #1
 801361a:	b2da      	uxtb	r2, r3
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	739a      	strb	r2, [r3, #14]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	7b9b      	ldrb	r3, [r3, #14]
 8013624:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013626:	69b8      	ldr	r0, [r7, #24]
 8013628:	f009 f9d6 	bl	801c9d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801362c:	7dfb      	ldrb	r3, [r7, #23]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d143      	bne.n	80136ba <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	7b1b      	ldrb	r3, [r3, #12]
 801363c:	f003 030f 	and.w	r3, r3, #15
 8013640:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	7b5b      	ldrb	r3, [r3, #13]
 8013646:	f003 0302 	and.w	r3, r3, #2
 801364a:	2b00      	cmp	r3, #0
 801364c:	d011      	beq.n	8013672 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	691b      	ldr	r3, [r3, #16]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d106      	bne.n	8013668 <pbuf_free+0x9c>
 801365a:	4b1d      	ldr	r3, [pc, #116]	@ (80136d0 <pbuf_free+0x104>)
 801365c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8013660:	491f      	ldr	r1, [pc, #124]	@ (80136e0 <pbuf_free+0x114>)
 8013662:	481d      	ldr	r0, [pc, #116]	@ (80136d8 <pbuf_free+0x10c>)
 8013664:	f00a f86a 	bl	801d73c <iprintf>
        pc->custom_free_function(p);
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	691b      	ldr	r3, [r3, #16]
 801366c:	6878      	ldr	r0, [r7, #4]
 801366e:	4798      	blx	r3
 8013670:	e01d      	b.n	80136ae <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013672:	7bfb      	ldrb	r3, [r7, #15]
 8013674:	2b02      	cmp	r3, #2
 8013676:	d104      	bne.n	8013682 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	200c      	movs	r0, #12
 801367c:	f7ff f934 	bl	80128e8 <memp_free>
 8013680:	e015      	b.n	80136ae <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013682:	7bfb      	ldrb	r3, [r7, #15]
 8013684:	2b01      	cmp	r3, #1
 8013686:	d104      	bne.n	8013692 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013688:	6879      	ldr	r1, [r7, #4]
 801368a:	200b      	movs	r0, #11
 801368c:	f7ff f92c 	bl	80128e8 <memp_free>
 8013690:	e00d      	b.n	80136ae <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013692:	7bfb      	ldrb	r3, [r7, #15]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d103      	bne.n	80136a0 <pbuf_free+0xd4>
          mem_free(p);
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f7fe fd71 	bl	8012180 <mem_free>
 801369e:	e006      	b.n	80136ae <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80136a0:	4b0b      	ldr	r3, [pc, #44]	@ (80136d0 <pbuf_free+0x104>)
 80136a2:	f240 320f 	movw	r2, #783	@ 0x30f
 80136a6:	490f      	ldr	r1, [pc, #60]	@ (80136e4 <pbuf_free+0x118>)
 80136a8:	480b      	ldr	r0, [pc, #44]	@ (80136d8 <pbuf_free+0x10c>)
 80136aa:	f00a f847 	bl	801d73c <iprintf>
        }
      }
      count++;
 80136ae:	7ffb      	ldrb	r3, [r7, #31]
 80136b0:	3301      	adds	r3, #1
 80136b2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	607b      	str	r3, [r7, #4]
 80136b8:	e001      	b.n	80136be <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80136ba:	2300      	movs	r3, #0
 80136bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d199      	bne.n	80135f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80136c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3720      	adds	r7, #32
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	08020bdc 	.word	0x08020bdc
 80136d4:	08020d40 	.word	0x08020d40
 80136d8:	08020c3c 	.word	0x08020c3c
 80136dc:	08020d6c 	.word	0x08020d6c
 80136e0:	08020d84 	.word	0x08020d84
 80136e4:	08020da8 	.word	0x08020da8

080136e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80136e8:	b480      	push	{r7}
 80136ea:	b085      	sub	sp, #20
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80136f0:	2300      	movs	r3, #0
 80136f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80136f4:	e005      	b.n	8013702 <pbuf_clen+0x1a>
    ++len;
 80136f6:	89fb      	ldrh	r3, [r7, #14]
 80136f8:	3301      	adds	r3, #1
 80136fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d1f6      	bne.n	80136f6 <pbuf_clen+0xe>
  }
  return len;
 8013708:	89fb      	ldrh	r3, [r7, #14]
}
 801370a:	4618      	mov	r0, r3
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
	...

08013718 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d016      	beq.n	8013754 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013726:	f009 f949 	bl	801c9bc <sys_arch_protect>
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	7b9b      	ldrb	r3, [r3, #14]
 8013730:	3301      	adds	r3, #1
 8013732:	b2da      	uxtb	r2, r3
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	739a      	strb	r2, [r3, #14]
 8013738:	68f8      	ldr	r0, [r7, #12]
 801373a:	f009 f94d 	bl	801c9d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	7b9b      	ldrb	r3, [r3, #14]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d106      	bne.n	8013754 <pbuf_ref+0x3c>
 8013746:	4b05      	ldr	r3, [pc, #20]	@ (801375c <pbuf_ref+0x44>)
 8013748:	f240 3242 	movw	r2, #834	@ 0x342
 801374c:	4904      	ldr	r1, [pc, #16]	@ (8013760 <pbuf_ref+0x48>)
 801374e:	4805      	ldr	r0, [pc, #20]	@ (8013764 <pbuf_ref+0x4c>)
 8013750:	f009 fff4 	bl	801d73c <iprintf>
  }
}
 8013754:	bf00      	nop
 8013756:	3710      	adds	r7, #16
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	08020bdc 	.word	0x08020bdc
 8013760:	08020dbc 	.word	0x08020dbc
 8013764:	08020c3c 	.word	0x08020c3c

08013768 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b084      	sub	sp, #16
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d002      	beq.n	801377e <pbuf_cat+0x16>
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d107      	bne.n	801378e <pbuf_cat+0x26>
 801377e:	4b20      	ldr	r3, [pc, #128]	@ (8013800 <pbuf_cat+0x98>)
 8013780:	f240 3259 	movw	r2, #857	@ 0x359
 8013784:	491f      	ldr	r1, [pc, #124]	@ (8013804 <pbuf_cat+0x9c>)
 8013786:	4820      	ldr	r0, [pc, #128]	@ (8013808 <pbuf_cat+0xa0>)
 8013788:	f009 ffd8 	bl	801d73c <iprintf>
 801378c:	e034      	b.n	80137f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	60fb      	str	r3, [r7, #12]
 8013792:	e00a      	b.n	80137aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	891a      	ldrh	r2, [r3, #8]
 8013798:	683b      	ldr	r3, [r7, #0]
 801379a:	891b      	ldrh	r3, [r3, #8]
 801379c:	4413      	add	r3, r2
 801379e:	b29a      	uxth	r2, r3
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	60fb      	str	r3, [r7, #12]
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d1f0      	bne.n	8013794 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	891a      	ldrh	r2, [r3, #8]
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	895b      	ldrh	r3, [r3, #10]
 80137ba:	429a      	cmp	r2, r3
 80137bc:	d006      	beq.n	80137cc <pbuf_cat+0x64>
 80137be:	4b10      	ldr	r3, [pc, #64]	@ (8013800 <pbuf_cat+0x98>)
 80137c0:	f240 3262 	movw	r2, #866	@ 0x362
 80137c4:	4911      	ldr	r1, [pc, #68]	@ (801380c <pbuf_cat+0xa4>)
 80137c6:	4810      	ldr	r0, [pc, #64]	@ (8013808 <pbuf_cat+0xa0>)
 80137c8:	f009 ffb8 	bl	801d73c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d006      	beq.n	80137e2 <pbuf_cat+0x7a>
 80137d4:	4b0a      	ldr	r3, [pc, #40]	@ (8013800 <pbuf_cat+0x98>)
 80137d6:	f240 3263 	movw	r2, #867	@ 0x363
 80137da:	490d      	ldr	r1, [pc, #52]	@ (8013810 <pbuf_cat+0xa8>)
 80137dc:	480a      	ldr	r0, [pc, #40]	@ (8013808 <pbuf_cat+0xa0>)
 80137de:	f009 ffad 	bl	801d73c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	891a      	ldrh	r2, [r3, #8]
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	891b      	ldrh	r3, [r3, #8]
 80137ea:	4413      	add	r3, r2
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	683a      	ldr	r2, [r7, #0]
 80137f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80137f8:	3710      	adds	r7, #16
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	08020bdc 	.word	0x08020bdc
 8013804:	08020dd0 	.word	0x08020dd0
 8013808:	08020c3c 	.word	0x08020c3c
 801380c:	08020e08 	.word	0x08020e08
 8013810:	08020e38 	.word	0x08020e38

08013814 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b086      	sub	sp, #24
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801381e:	2300      	movs	r3, #0
 8013820:	617b      	str	r3, [r7, #20]
 8013822:	2300      	movs	r3, #0
 8013824:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d008      	beq.n	801383e <pbuf_copy+0x2a>
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d005      	beq.n	801383e <pbuf_copy+0x2a>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	891a      	ldrh	r2, [r3, #8]
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	891b      	ldrh	r3, [r3, #8]
 801383a:	429a      	cmp	r2, r3
 801383c:	d209      	bcs.n	8013852 <pbuf_copy+0x3e>
 801383e:	4b57      	ldr	r3, [pc, #348]	@ (801399c <pbuf_copy+0x188>)
 8013840:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8013844:	4956      	ldr	r1, [pc, #344]	@ (80139a0 <pbuf_copy+0x18c>)
 8013846:	4857      	ldr	r0, [pc, #348]	@ (80139a4 <pbuf_copy+0x190>)
 8013848:	f009 ff78 	bl	801d73c <iprintf>
 801384c:	f06f 030f 	mvn.w	r3, #15
 8013850:	e09f      	b.n	8013992 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	895b      	ldrh	r3, [r3, #10]
 8013856:	461a      	mov	r2, r3
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	1ad2      	subs	r2, r2, r3
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	895b      	ldrh	r3, [r3, #10]
 8013860:	4619      	mov	r1, r3
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	1acb      	subs	r3, r1, r3
 8013866:	429a      	cmp	r2, r3
 8013868:	d306      	bcc.n	8013878 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	895b      	ldrh	r3, [r3, #10]
 801386e:	461a      	mov	r2, r3
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	1ad3      	subs	r3, r2, r3
 8013874:	60fb      	str	r3, [r7, #12]
 8013876:	e005      	b.n	8013884 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	895b      	ldrh	r3, [r3, #10]
 801387c:	461a      	mov	r2, r3
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685a      	ldr	r2, [r3, #4]
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	18d0      	adds	r0, r2, r3
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	685a      	ldr	r2, [r3, #4]
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	4413      	add	r3, r2
 8013894:	68fa      	ldr	r2, [r7, #12]
 8013896:	4619      	mov	r1, r3
 8013898:	f00a f903 	bl	801daa2 <memcpy>
    offset_to += len;
 801389c:	697a      	ldr	r2, [r7, #20]
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	4413      	add	r3, r2
 80138a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80138a4:	693a      	ldr	r2, [r7, #16]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	4413      	add	r3, r2
 80138aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	895b      	ldrh	r3, [r3, #10]
 80138b0:	461a      	mov	r2, r3
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d906      	bls.n	80138c6 <pbuf_copy+0xb2>
 80138b8:	4b38      	ldr	r3, [pc, #224]	@ (801399c <pbuf_copy+0x188>)
 80138ba:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80138be:	493a      	ldr	r1, [pc, #232]	@ (80139a8 <pbuf_copy+0x194>)
 80138c0:	4838      	ldr	r0, [pc, #224]	@ (80139a4 <pbuf_copy+0x190>)
 80138c2:	f009 ff3b 	bl	801d73c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	895b      	ldrh	r3, [r3, #10]
 80138ca:	461a      	mov	r2, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d906      	bls.n	80138e0 <pbuf_copy+0xcc>
 80138d2:	4b32      	ldr	r3, [pc, #200]	@ (801399c <pbuf_copy+0x188>)
 80138d4:	f240 32da 	movw	r2, #986	@ 0x3da
 80138d8:	4934      	ldr	r1, [pc, #208]	@ (80139ac <pbuf_copy+0x198>)
 80138da:	4832      	ldr	r0, [pc, #200]	@ (80139a4 <pbuf_copy+0x190>)
 80138dc:	f009 ff2e 	bl	801d73c <iprintf>
    if (offset_from >= p_from->len) {
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	895b      	ldrh	r3, [r3, #10]
 80138e4:	461a      	mov	r2, r3
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d304      	bcc.n	80138f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80138ec:	2300      	movs	r3, #0
 80138ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	895b      	ldrh	r3, [r3, #10]
 80138fa:	461a      	mov	r2, r3
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	4293      	cmp	r3, r2
 8013900:	d114      	bne.n	801392c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8013902:	2300      	movs	r3, #0
 8013904:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10c      	bne.n	801392c <pbuf_copy+0x118>
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d009      	beq.n	801392c <pbuf_copy+0x118>
 8013918:	4b20      	ldr	r3, [pc, #128]	@ (801399c <pbuf_copy+0x188>)
 801391a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801391e:	4924      	ldr	r1, [pc, #144]	@ (80139b0 <pbuf_copy+0x19c>)
 8013920:	4820      	ldr	r0, [pc, #128]	@ (80139a4 <pbuf_copy+0x190>)
 8013922:	f009 ff0b 	bl	801d73c <iprintf>
 8013926:	f06f 030f 	mvn.w	r3, #15
 801392a:	e032      	b.n	8013992 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d013      	beq.n	801395a <pbuf_copy+0x146>
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	895a      	ldrh	r2, [r3, #10]
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	891b      	ldrh	r3, [r3, #8]
 801393a:	429a      	cmp	r2, r3
 801393c:	d10d      	bne.n	801395a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d009      	beq.n	801395a <pbuf_copy+0x146>
 8013946:	4b15      	ldr	r3, [pc, #84]	@ (801399c <pbuf_copy+0x188>)
 8013948:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801394c:	4919      	ldr	r1, [pc, #100]	@ (80139b4 <pbuf_copy+0x1a0>)
 801394e:	4815      	ldr	r0, [pc, #84]	@ (80139a4 <pbuf_copy+0x190>)
 8013950:	f009 fef4 	bl	801d73c <iprintf>
 8013954:	f06f 0305 	mvn.w	r3, #5
 8013958:	e01b      	b.n	8013992 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d013      	beq.n	8013988 <pbuf_copy+0x174>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	895a      	ldrh	r2, [r3, #10]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	891b      	ldrh	r3, [r3, #8]
 8013968:	429a      	cmp	r2, r3
 801396a:	d10d      	bne.n	8013988 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d009      	beq.n	8013988 <pbuf_copy+0x174>
 8013974:	4b09      	ldr	r3, [pc, #36]	@ (801399c <pbuf_copy+0x188>)
 8013976:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801397a:	490e      	ldr	r1, [pc, #56]	@ (80139b4 <pbuf_copy+0x1a0>)
 801397c:	4809      	ldr	r0, [pc, #36]	@ (80139a4 <pbuf_copy+0x190>)
 801397e:	f009 fedd 	bl	801d73c <iprintf>
 8013982:	f06f 0305 	mvn.w	r3, #5
 8013986:	e004      	b.n	8013992 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013988:	683b      	ldr	r3, [r7, #0]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f47f af61 	bne.w	8013852 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3718      	adds	r7, #24
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}
 801399a:	bf00      	nop
 801399c:	08020bdc 	.word	0x08020bdc
 80139a0:	08020e84 	.word	0x08020e84
 80139a4:	08020c3c 	.word	0x08020c3c
 80139a8:	08020eb4 	.word	0x08020eb4
 80139ac:	08020ecc 	.word	0x08020ecc
 80139b0:	08020ee8 	.word	0x08020ee8
 80139b4:	08020ef8 	.word	0x08020ef8

080139b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b088      	sub	sp, #32
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	4611      	mov	r1, r2
 80139c4:	461a      	mov	r2, r3
 80139c6:	460b      	mov	r3, r1
 80139c8:	80fb      	strh	r3, [r7, #6]
 80139ca:	4613      	mov	r3, r2
 80139cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80139ce:	2300      	movs	r3, #0
 80139d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80139d2:	2300      	movs	r3, #0
 80139d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d108      	bne.n	80139ee <pbuf_copy_partial+0x36>
 80139dc:	4b2b      	ldr	r3, [pc, #172]	@ (8013a8c <pbuf_copy_partial+0xd4>)
 80139de:	f240 420a 	movw	r2, #1034	@ 0x40a
 80139e2:	492b      	ldr	r1, [pc, #172]	@ (8013a90 <pbuf_copy_partial+0xd8>)
 80139e4:	482b      	ldr	r0, [pc, #172]	@ (8013a94 <pbuf_copy_partial+0xdc>)
 80139e6:	f009 fea9 	bl	801d73c <iprintf>
 80139ea:	2300      	movs	r3, #0
 80139ec:	e04a      	b.n	8013a84 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d108      	bne.n	8013a06 <pbuf_copy_partial+0x4e>
 80139f4:	4b25      	ldr	r3, [pc, #148]	@ (8013a8c <pbuf_copy_partial+0xd4>)
 80139f6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80139fa:	4927      	ldr	r1, [pc, #156]	@ (8013a98 <pbuf_copy_partial+0xe0>)
 80139fc:	4825      	ldr	r0, [pc, #148]	@ (8013a94 <pbuf_copy_partial+0xdc>)
 80139fe:	f009 fe9d 	bl	801d73c <iprintf>
 8013a02:	2300      	movs	r3, #0
 8013a04:	e03e      	b.n	8013a84 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	61fb      	str	r3, [r7, #28]
 8013a0a:	e034      	b.n	8013a76 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013a0c:	88bb      	ldrh	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00a      	beq.n	8013a28 <pbuf_copy_partial+0x70>
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	895b      	ldrh	r3, [r3, #10]
 8013a16:	88ba      	ldrh	r2, [r7, #4]
 8013a18:	429a      	cmp	r2, r3
 8013a1a:	d305      	bcc.n	8013a28 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	895b      	ldrh	r3, [r3, #10]
 8013a20:	88ba      	ldrh	r2, [r7, #4]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	80bb      	strh	r3, [r7, #4]
 8013a26:	e023      	b.n	8013a70 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	895a      	ldrh	r2, [r3, #10]
 8013a2c:	88bb      	ldrh	r3, [r7, #4]
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8013a32:	8b3a      	ldrh	r2, [r7, #24]
 8013a34:	88fb      	ldrh	r3, [r7, #6]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d901      	bls.n	8013a3e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013a3a:	88fb      	ldrh	r3, [r7, #6]
 8013a3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8013a3e:	8b7b      	ldrh	r3, [r7, #26]
 8013a40:	68ba      	ldr	r2, [r7, #8]
 8013a42:	18d0      	adds	r0, r2, r3
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	685a      	ldr	r2, [r3, #4]
 8013a48:	88bb      	ldrh	r3, [r7, #4]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	8b3a      	ldrh	r2, [r7, #24]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	f00a f827 	bl	801daa2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013a54:	8afa      	ldrh	r2, [r7, #22]
 8013a56:	8b3b      	ldrh	r3, [r7, #24]
 8013a58:	4413      	add	r3, r2
 8013a5a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013a5c:	8b7a      	ldrh	r2, [r7, #26]
 8013a5e:	8b3b      	ldrh	r3, [r7, #24]
 8013a60:	4413      	add	r3, r2
 8013a62:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013a64:	88fa      	ldrh	r2, [r7, #6]
 8013a66:	8b3b      	ldrh	r3, [r7, #24]
 8013a68:	1ad3      	subs	r3, r2, r3
 8013a6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	61fb      	str	r3, [r7, #28]
 8013a76:	88fb      	ldrh	r3, [r7, #6]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d002      	beq.n	8013a82 <pbuf_copy_partial+0xca>
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d1c4      	bne.n	8013a0c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013a82:	8afb      	ldrh	r3, [r7, #22]
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3720      	adds	r7, #32
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	08020bdc 	.word	0x08020bdc
 8013a90:	08020f24 	.word	0x08020f24
 8013a94:	08020c3c 	.word	0x08020c3c
 8013a98:	08020f44 	.word	0x08020f44

08013a9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	603a      	str	r2, [r7, #0]
 8013aa6:	71fb      	strb	r3, [r7, #7]
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	8919      	ldrh	r1, [r3, #8]
 8013ab0:	88ba      	ldrh	r2, [r7, #4]
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7ff faa5 	bl	8013004 <pbuf_alloc>
 8013aba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d101      	bne.n	8013ac6 <pbuf_clone+0x2a>
    return NULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	e011      	b.n	8013aea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013ac6:	6839      	ldr	r1, [r7, #0]
 8013ac8:	68f8      	ldr	r0, [r7, #12]
 8013aca:	f7ff fea3 	bl	8013814 <pbuf_copy>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013ad2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d006      	beq.n	8013ae8 <pbuf_clone+0x4c>
 8013ada:	4b06      	ldr	r3, [pc, #24]	@ (8013af4 <pbuf_clone+0x58>)
 8013adc:	f240 5224 	movw	r2, #1316	@ 0x524
 8013ae0:	4905      	ldr	r1, [pc, #20]	@ (8013af8 <pbuf_clone+0x5c>)
 8013ae2:	4806      	ldr	r0, [pc, #24]	@ (8013afc <pbuf_clone+0x60>)
 8013ae4:	f009 fe2a 	bl	801d73c <iprintf>
  return q;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
}
 8013aea:	4618      	mov	r0, r3
 8013aec:	3710      	adds	r7, #16
 8013aee:	46bd      	mov	sp, r7
 8013af0:	bd80      	pop	{r7, pc}
 8013af2:	bf00      	nop
 8013af4:	08020bdc 	.word	0x08020bdc
 8013af8:	08021050 	.word	0x08021050
 8013afc:	08020c3c 	.word	0x08020c3c

08013b00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013b04:	f009 fc96 	bl	801d434 <rand>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	4b01      	ldr	r3, [pc, #4]	@ (8013b20 <tcp_init+0x20>)
 8013b1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013b1c:	bf00      	nop
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	2000009c 	.word	0x2000009c

08013b24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	7d1b      	ldrb	r3, [r3, #20]
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d105      	bne.n	8013b40 <tcp_free+0x1c>
 8013b34:	4b06      	ldr	r3, [pc, #24]	@ (8013b50 <tcp_free+0x2c>)
 8013b36:	22d4      	movs	r2, #212	@ 0xd4
 8013b38:	4906      	ldr	r1, [pc, #24]	@ (8013b54 <tcp_free+0x30>)
 8013b3a:	4807      	ldr	r0, [pc, #28]	@ (8013b58 <tcp_free+0x34>)
 8013b3c:	f009 fdfe 	bl	801d73c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013b40:	6879      	ldr	r1, [r7, #4]
 8013b42:	2001      	movs	r0, #1
 8013b44:	f7fe fed0 	bl	80128e8 <memp_free>
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	080210dc 	.word	0x080210dc
 8013b54:	0802110c 	.word	0x0802110c
 8013b58:	08021120 	.word	0x08021120

08013b5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	7d1b      	ldrb	r3, [r3, #20]
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d105      	bne.n	8013b78 <tcp_free_listen+0x1c>
 8013b6c:	4b06      	ldr	r3, [pc, #24]	@ (8013b88 <tcp_free_listen+0x2c>)
 8013b6e:	22df      	movs	r2, #223	@ 0xdf
 8013b70:	4906      	ldr	r1, [pc, #24]	@ (8013b8c <tcp_free_listen+0x30>)
 8013b72:	4807      	ldr	r0, [pc, #28]	@ (8013b90 <tcp_free_listen+0x34>)
 8013b74:	f009 fde2 	bl	801d73c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013b78:	6879      	ldr	r1, [r7, #4]
 8013b7a:	2002      	movs	r0, #2
 8013b7c:	f7fe feb4 	bl	80128e8 <memp_free>
}
 8013b80:	bf00      	nop
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}
 8013b88:	080210dc 	.word	0x080210dc
 8013b8c:	08021148 	.word	0x08021148
 8013b90:	08021120 	.word	0x08021120

08013b94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013b98:	f001 f85e 	bl	8014c58 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013b9c:	4b07      	ldr	r3, [pc, #28]	@ (8013bbc <tcp_tmr+0x28>)
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	b2da      	uxtb	r2, r3
 8013ba4:	4b05      	ldr	r3, [pc, #20]	@ (8013bbc <tcp_tmr+0x28>)
 8013ba6:	701a      	strb	r2, [r3, #0]
 8013ba8:	4b04      	ldr	r3, [pc, #16]	@ (8013bbc <tcp_tmr+0x28>)
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f003 0301 	and.w	r3, r3, #1
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013bb4:	f000 fd0e 	bl	80145d4 <tcp_slowtmr>
  }
}
 8013bb8:	bf00      	nop
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	2000c9c5 	.word	0x2000c9c5

08013bc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d105      	bne.n	8013bdc <tcp_remove_listener+0x1c>
 8013bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8013c08 <tcp_remove_listener+0x48>)
 8013bd2:	22ff      	movs	r2, #255	@ 0xff
 8013bd4:	490d      	ldr	r1, [pc, #52]	@ (8013c0c <tcp_remove_listener+0x4c>)
 8013bd6:	480e      	ldr	r0, [pc, #56]	@ (8013c10 <tcp_remove_listener+0x50>)
 8013bd8:	f009 fdb0 	bl	801d73c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	60fb      	str	r3, [r7, #12]
 8013be0:	e00a      	b.n	8013bf8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013be6:	683a      	ldr	r2, [r7, #0]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d102      	bne.n	8013bf2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2200      	movs	r2, #0
 8013bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	68db      	ldr	r3, [r3, #12]
 8013bf6:	60fb      	str	r3, [r7, #12]
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1f1      	bne.n	8013be2 <tcp_remove_listener+0x22>
    }
  }
}
 8013bfe:	bf00      	nop
 8013c00:	bf00      	nop
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	080210dc 	.word	0x080210dc
 8013c0c:	08021164 	.word	0x08021164
 8013c10:	08021120 	.word	0x08021120

08013c14 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d106      	bne.n	8013c30 <tcp_listen_closed+0x1c>
 8013c22:	4b14      	ldr	r3, [pc, #80]	@ (8013c74 <tcp_listen_closed+0x60>)
 8013c24:	f240 1211 	movw	r2, #273	@ 0x111
 8013c28:	4913      	ldr	r1, [pc, #76]	@ (8013c78 <tcp_listen_closed+0x64>)
 8013c2a:	4814      	ldr	r0, [pc, #80]	@ (8013c7c <tcp_listen_closed+0x68>)
 8013c2c:	f009 fd86 	bl	801d73c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	7d1b      	ldrb	r3, [r3, #20]
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d006      	beq.n	8013c46 <tcp_listen_closed+0x32>
 8013c38:	4b0e      	ldr	r3, [pc, #56]	@ (8013c74 <tcp_listen_closed+0x60>)
 8013c3a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8013c3e:	4910      	ldr	r1, [pc, #64]	@ (8013c80 <tcp_listen_closed+0x6c>)
 8013c40:	480e      	ldr	r0, [pc, #56]	@ (8013c7c <tcp_listen_closed+0x68>)
 8013c42:	f009 fd7b 	bl	801d73c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013c46:	2301      	movs	r3, #1
 8013c48:	60fb      	str	r3, [r7, #12]
 8013c4a:	e00b      	b.n	8013c64 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8013c84 <tcp_listen_closed+0x70>)
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7ff ffb1 	bl	8013bc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	3301      	adds	r3, #1
 8013c62:	60fb      	str	r3, [r7, #12]
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2b03      	cmp	r3, #3
 8013c68:	d9f0      	bls.n	8013c4c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013c6a:	bf00      	nop
 8013c6c:	bf00      	nop
 8013c6e:	3710      	adds	r7, #16
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	080210dc 	.word	0x080210dc
 8013c78:	0802118c 	.word	0x0802118c
 8013c7c:	08021120 	.word	0x08021120
 8013c80:	08021198 	.word	0x08021198
 8013c84:	0802314c 	.word	0x0802314c

08013c88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013c88:	b5b0      	push	{r4, r5, r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af04      	add	r7, sp, #16
 8013c8e:	6078      	str	r0, [r7, #4]
 8013c90:	460b      	mov	r3, r1
 8013c92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d106      	bne.n	8013ca8 <tcp_close_shutdown+0x20>
 8013c9a:	4b63      	ldr	r3, [pc, #396]	@ (8013e28 <tcp_close_shutdown+0x1a0>)
 8013c9c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8013ca0:	4962      	ldr	r1, [pc, #392]	@ (8013e2c <tcp_close_shutdown+0x1a4>)
 8013ca2:	4863      	ldr	r0, [pc, #396]	@ (8013e30 <tcp_close_shutdown+0x1a8>)
 8013ca4:	f009 fd4a 	bl	801d73c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013ca8:	78fb      	ldrb	r3, [r7, #3]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d066      	beq.n	8013d7c <tcp_close_shutdown+0xf4>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	7d1b      	ldrb	r3, [r3, #20]
 8013cb2:	2b04      	cmp	r3, #4
 8013cb4:	d003      	beq.n	8013cbe <tcp_close_shutdown+0x36>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	7d1b      	ldrb	r3, [r3, #20]
 8013cba:	2b07      	cmp	r3, #7
 8013cbc:	d15e      	bne.n	8013d7c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d104      	bne.n	8013cd0 <tcp_close_shutdown+0x48>
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013cce:	d055      	beq.n	8013d7c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	8b5b      	ldrh	r3, [r3, #26]
 8013cd4:	f003 0310 	and.w	r3, r3, #16
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d106      	bne.n	8013cea <tcp_close_shutdown+0x62>
 8013cdc:	4b52      	ldr	r3, [pc, #328]	@ (8013e28 <tcp_close_shutdown+0x1a0>)
 8013cde:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8013ce2:	4954      	ldr	r1, [pc, #336]	@ (8013e34 <tcp_close_shutdown+0x1ac>)
 8013ce4:	4852      	ldr	r0, [pc, #328]	@ (8013e30 <tcp_close_shutdown+0x1a8>)
 8013ce6:	f009 fd29 	bl	801d73c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013cf2:	687d      	ldr	r5, [r7, #4]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	3304      	adds	r3, #4
 8013cf8:	687a      	ldr	r2, [r7, #4]
 8013cfa:	8ad2      	ldrh	r2, [r2, #22]
 8013cfc:	6879      	ldr	r1, [r7, #4]
 8013cfe:	8b09      	ldrh	r1, [r1, #24]
 8013d00:	9102      	str	r1, [sp, #8]
 8013d02:	9201      	str	r2, [sp, #4]
 8013d04:	9300      	str	r3, [sp, #0]
 8013d06:	462b      	mov	r3, r5
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4601      	mov	r1, r0
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f005 fd43 	bl	8019798 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013d12:	6878      	ldr	r0, [r7, #4]
 8013d14:	f001 fb26 	bl	8015364 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013d18:	4b47      	ldr	r3, [pc, #284]	@ (8013e38 <tcp_close_shutdown+0x1b0>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d105      	bne.n	8013d2e <tcp_close_shutdown+0xa6>
 8013d22:	4b45      	ldr	r3, [pc, #276]	@ (8013e38 <tcp_close_shutdown+0x1b0>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	4a43      	ldr	r2, [pc, #268]	@ (8013e38 <tcp_close_shutdown+0x1b0>)
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	e013      	b.n	8013d56 <tcp_close_shutdown+0xce>
 8013d2e:	4b42      	ldr	r3, [pc, #264]	@ (8013e38 <tcp_close_shutdown+0x1b0>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	60fb      	str	r3, [r7, #12]
 8013d34:	e00c      	b.n	8013d50 <tcp_close_shutdown+0xc8>
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	687a      	ldr	r2, [r7, #4]
 8013d3c:	429a      	cmp	r2, r3
 8013d3e:	d104      	bne.n	8013d4a <tcp_close_shutdown+0xc2>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	68da      	ldr	r2, [r3, #12]
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	60da      	str	r2, [r3, #12]
 8013d48:	e005      	b.n	8013d56 <tcp_close_shutdown+0xce>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	68db      	ldr	r3, [r3, #12]
 8013d4e:	60fb      	str	r3, [r7, #12]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d1ef      	bne.n	8013d36 <tcp_close_shutdown+0xae>
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	60da      	str	r2, [r3, #12]
 8013d5c:	4b37      	ldr	r3, [pc, #220]	@ (8013e3c <tcp_close_shutdown+0x1b4>)
 8013d5e:	2201      	movs	r2, #1
 8013d60:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013d62:	4b37      	ldr	r3, [pc, #220]	@ (8013e40 <tcp_close_shutdown+0x1b8>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d102      	bne.n	8013d72 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013d6c:	f003 ffba 	bl	8017ce4 <tcp_trigger_input_pcb_close>
 8013d70:	e002      	b.n	8013d78 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f7ff fed6 	bl	8013b24 <tcp_free>
      }
      return ERR_OK;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	e050      	b.n	8013e1e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	7d1b      	ldrb	r3, [r3, #20]
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d03b      	beq.n	8013dfc <tcp_close_shutdown+0x174>
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	dc44      	bgt.n	8013e12 <tcp_close_shutdown+0x18a>
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d002      	beq.n	8013d92 <tcp_close_shutdown+0x10a>
 8013d8c:	2b01      	cmp	r3, #1
 8013d8e:	d02a      	beq.n	8013de6 <tcp_close_shutdown+0x15e>
 8013d90:	e03f      	b.n	8013e12 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	8adb      	ldrh	r3, [r3, #22]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d021      	beq.n	8013dde <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013d9a:	4b2a      	ldr	r3, [pc, #168]	@ (8013e44 <tcp_close_shutdown+0x1bc>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	687a      	ldr	r2, [r7, #4]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d105      	bne.n	8013db0 <tcp_close_shutdown+0x128>
 8013da4:	4b27      	ldr	r3, [pc, #156]	@ (8013e44 <tcp_close_shutdown+0x1bc>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	4a26      	ldr	r2, [pc, #152]	@ (8013e44 <tcp_close_shutdown+0x1bc>)
 8013dac:	6013      	str	r3, [r2, #0]
 8013dae:	e013      	b.n	8013dd8 <tcp_close_shutdown+0x150>
 8013db0:	4b24      	ldr	r3, [pc, #144]	@ (8013e44 <tcp_close_shutdown+0x1bc>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	60bb      	str	r3, [r7, #8]
 8013db6:	e00c      	b.n	8013dd2 <tcp_close_shutdown+0x14a>
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	429a      	cmp	r2, r3
 8013dc0:	d104      	bne.n	8013dcc <tcp_close_shutdown+0x144>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	68da      	ldr	r2, [r3, #12]
 8013dc6:	68bb      	ldr	r3, [r7, #8]
 8013dc8:	60da      	str	r2, [r3, #12]
 8013dca:	e005      	b.n	8013dd8 <tcp_close_shutdown+0x150>
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	60bb      	str	r3, [r7, #8]
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d1ef      	bne.n	8013db8 <tcp_close_shutdown+0x130>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f7ff fea0 	bl	8013b24 <tcp_free>
      break;
 8013de4:	e01a      	b.n	8013e1c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f7ff ff14 	bl	8013c14 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013dec:	6879      	ldr	r1, [r7, #4]
 8013dee:	4816      	ldr	r0, [pc, #88]	@ (8013e48 <tcp_close_shutdown+0x1c0>)
 8013df0:	f001 fb08 	bl	8015404 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff feb1 	bl	8013b5c <tcp_free_listen>
      break;
 8013dfa:	e00f      	b.n	8013e1c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013dfc:	6879      	ldr	r1, [r7, #4]
 8013dfe:	480e      	ldr	r0, [pc, #56]	@ (8013e38 <tcp_close_shutdown+0x1b0>)
 8013e00:	f001 fb00 	bl	8015404 <tcp_pcb_remove>
 8013e04:	4b0d      	ldr	r3, [pc, #52]	@ (8013e3c <tcp_close_shutdown+0x1b4>)
 8013e06:	2201      	movs	r2, #1
 8013e08:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7ff fe8a 	bl	8013b24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013e10:	e004      	b.n	8013e1c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f000 f81a 	bl	8013e4c <tcp_close_shutdown_fin>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	e000      	b.n	8013e1e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013e1c:	2300      	movs	r3, #0
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bdb0      	pop	{r4, r5, r7, pc}
 8013e26:	bf00      	nop
 8013e28:	080210dc 	.word	0x080210dc
 8013e2c:	080211b0 	.word	0x080211b0
 8013e30:	08021120 	.word	0x08021120
 8013e34:	080211d0 	.word	0x080211d0
 8013e38:	2000c9bc 	.word	0x2000c9bc
 8013e3c:	2000c9c4 	.word	0x2000c9c4
 8013e40:	2000c9fc 	.word	0x2000c9fc
 8013e44:	2000c9b4 	.word	0x2000c9b4
 8013e48:	2000c9b8 	.word	0x2000c9b8

08013e4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d106      	bne.n	8013e68 <tcp_close_shutdown_fin+0x1c>
 8013e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8013f14 <tcp_close_shutdown_fin+0xc8>)
 8013e5c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8013e60:	492d      	ldr	r1, [pc, #180]	@ (8013f18 <tcp_close_shutdown_fin+0xcc>)
 8013e62:	482e      	ldr	r0, [pc, #184]	@ (8013f1c <tcp_close_shutdown_fin+0xd0>)
 8013e64:	f009 fc6a 	bl	801d73c <iprintf>

  switch (pcb->state) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	7d1b      	ldrb	r3, [r3, #20]
 8013e6c:	2b07      	cmp	r3, #7
 8013e6e:	d020      	beq.n	8013eb2 <tcp_close_shutdown_fin+0x66>
 8013e70:	2b07      	cmp	r3, #7
 8013e72:	dc2b      	bgt.n	8013ecc <tcp_close_shutdown_fin+0x80>
 8013e74:	2b03      	cmp	r3, #3
 8013e76:	d002      	beq.n	8013e7e <tcp_close_shutdown_fin+0x32>
 8013e78:	2b04      	cmp	r3, #4
 8013e7a:	d00d      	beq.n	8013e98 <tcp_close_shutdown_fin+0x4c>
 8013e7c:	e026      	b.n	8013ecc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f004 fd98 	bl	80189b4 <tcp_send_fin>
 8013e84:	4603      	mov	r3, r0
 8013e86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d11f      	bne.n	8013ed0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2205      	movs	r2, #5
 8013e94:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e96:	e01b      	b.n	8013ed0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f004 fd8b 	bl	80189b4 <tcp_send_fin>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d114      	bne.n	8013ed4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2205      	movs	r2, #5
 8013eae:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013eb0:	e010      	b.n	8013ed4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f004 fd7e 	bl	80189b4 <tcp_send_fin>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d109      	bne.n	8013ed8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2209      	movs	r2, #9
 8013ec8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013eca:	e005      	b.n	8013ed8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	e01c      	b.n	8013f0a <tcp_close_shutdown_fin+0xbe>
      break;
 8013ed0:	bf00      	nop
 8013ed2:	e002      	b.n	8013eda <tcp_close_shutdown_fin+0x8e>
      break;
 8013ed4:	bf00      	nop
 8013ed6:	e000      	b.n	8013eda <tcp_close_shutdown_fin+0x8e>
      break;
 8013ed8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d103      	bne.n	8013eea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f004 fea4 	bl	8018c30 <tcp_output>
 8013ee8:	e00d      	b.n	8013f06 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef2:	d108      	bne.n	8013f06 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	8b5b      	ldrh	r3, [r3, #26]
 8013ef8:	f043 0308 	orr.w	r3, r3, #8
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013f02:	2300      	movs	r3, #0
 8013f04:	e001      	b.n	8013f0a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3710      	adds	r7, #16
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	080210dc 	.word	0x080210dc
 8013f18:	0802118c 	.word	0x0802118c
 8013f1c:	08021120 	.word	0x08021120

08013f20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d109      	bne.n	8013f42 <tcp_close+0x22>
 8013f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8013f6c <tcp_close+0x4c>)
 8013f30:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8013f34:	490e      	ldr	r1, [pc, #56]	@ (8013f70 <tcp_close+0x50>)
 8013f36:	480f      	ldr	r0, [pc, #60]	@ (8013f74 <tcp_close+0x54>)
 8013f38:	f009 fc00 	bl	801d73c <iprintf>
 8013f3c:	f06f 030f 	mvn.w	r3, #15
 8013f40:	e00f      	b.n	8013f62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	7d1b      	ldrb	r3, [r3, #20]
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d006      	beq.n	8013f58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	8b5b      	ldrh	r3, [r3, #26]
 8013f4e:	f043 0310 	orr.w	r3, r3, #16
 8013f52:	b29a      	uxth	r2, r3
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013f58:	2101      	movs	r1, #1
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7ff fe94 	bl	8013c88 <tcp_close_shutdown>
 8013f60:	4603      	mov	r3, r0
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3708      	adds	r7, #8
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	080210dc 	.word	0x080210dc
 8013f70:	080211ec 	.word	0x080211ec
 8013f74:	08021120 	.word	0x08021120

08013f78 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b08e      	sub	sp, #56	@ 0x38
 8013f7c:	af04      	add	r7, sp, #16
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d107      	bne.n	8013f98 <tcp_abandon+0x20>
 8013f88:	4b52      	ldr	r3, [pc, #328]	@ (80140d4 <tcp_abandon+0x15c>)
 8013f8a:	f240 223d 	movw	r2, #573	@ 0x23d
 8013f8e:	4952      	ldr	r1, [pc, #328]	@ (80140d8 <tcp_abandon+0x160>)
 8013f90:	4852      	ldr	r0, [pc, #328]	@ (80140dc <tcp_abandon+0x164>)
 8013f92:	f009 fbd3 	bl	801d73c <iprintf>
 8013f96:	e099      	b.n	80140cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	7d1b      	ldrb	r3, [r3, #20]
 8013f9c:	2b01      	cmp	r3, #1
 8013f9e:	d106      	bne.n	8013fae <tcp_abandon+0x36>
 8013fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80140d4 <tcp_abandon+0x15c>)
 8013fa2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013fa6:	494e      	ldr	r1, [pc, #312]	@ (80140e0 <tcp_abandon+0x168>)
 8013fa8:	484c      	ldr	r0, [pc, #304]	@ (80140dc <tcp_abandon+0x164>)
 8013faa:	f009 fbc7 	bl	801d73c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	7d1b      	ldrb	r3, [r3, #20]
 8013fb2:	2b0a      	cmp	r3, #10
 8013fb4:	d107      	bne.n	8013fc6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013fb6:	6879      	ldr	r1, [r7, #4]
 8013fb8:	484a      	ldr	r0, [pc, #296]	@ (80140e4 <tcp_abandon+0x16c>)
 8013fba:	f001 fa23 	bl	8015404 <tcp_pcb_remove>
    tcp_free(pcb);
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	f7ff fdb0 	bl	8013b24 <tcp_free>
 8013fc4:	e082      	b.n	80140cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013fd2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fd8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013fe0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	691b      	ldr	r3, [r3, #16]
 8013fe6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	7d1b      	ldrb	r3, [r3, #20]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d126      	bne.n	801403e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	8adb      	ldrh	r3, [r3, #22]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d02e      	beq.n	8014056 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80140e8 <tcp_abandon+0x170>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d105      	bne.n	801400e <tcp_abandon+0x96>
 8014002:	4b39      	ldr	r3, [pc, #228]	@ (80140e8 <tcp_abandon+0x170>)
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	4a37      	ldr	r2, [pc, #220]	@ (80140e8 <tcp_abandon+0x170>)
 801400a:	6013      	str	r3, [r2, #0]
 801400c:	e013      	b.n	8014036 <tcp_abandon+0xbe>
 801400e:	4b36      	ldr	r3, [pc, #216]	@ (80140e8 <tcp_abandon+0x170>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	61fb      	str	r3, [r7, #28]
 8014014:	e00c      	b.n	8014030 <tcp_abandon+0xb8>
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	429a      	cmp	r2, r3
 801401e:	d104      	bne.n	801402a <tcp_abandon+0xb2>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	68da      	ldr	r2, [r3, #12]
 8014024:	69fb      	ldr	r3, [r7, #28]
 8014026:	60da      	str	r2, [r3, #12]
 8014028:	e005      	b.n	8014036 <tcp_abandon+0xbe>
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	61fb      	str	r3, [r7, #28]
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d1ef      	bne.n	8014016 <tcp_abandon+0x9e>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2200      	movs	r2, #0
 801403a:	60da      	str	r2, [r3, #12]
 801403c:	e00b      	b.n	8014056 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	8adb      	ldrh	r3, [r3, #22]
 8014046:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014048:	6879      	ldr	r1, [r7, #4]
 801404a:	4828      	ldr	r0, [pc, #160]	@ (80140ec <tcp_abandon+0x174>)
 801404c:	f001 f9da 	bl	8015404 <tcp_pcb_remove>
 8014050:	4b27      	ldr	r3, [pc, #156]	@ (80140f0 <tcp_abandon+0x178>)
 8014052:	2201      	movs	r2, #1
 8014054:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801405a:	2b00      	cmp	r3, #0
 801405c:	d004      	beq.n	8014068 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014062:	4618      	mov	r0, r3
 8014064:	f000 fed8 	bl	8014e18 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801406c:	2b00      	cmp	r3, #0
 801406e:	d004      	beq.n	801407a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014074:	4618      	mov	r0, r3
 8014076:	f000 fecf 	bl	8014e18 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801407e:	2b00      	cmp	r3, #0
 8014080:	d004      	beq.n	801408c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014086:	4618      	mov	r0, r3
 8014088:	f000 fec6 	bl	8014e18 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408e:	2b00      	cmp	r3, #0
 8014090:	d00e      	beq.n	80140b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014092:	6879      	ldr	r1, [r7, #4]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	3304      	adds	r3, #4
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	8b12      	ldrh	r2, [r2, #24]
 801409c:	9202      	str	r2, [sp, #8]
 801409e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80140a0:	9201      	str	r2, [sp, #4]
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	460b      	mov	r3, r1
 80140a6:	697a      	ldr	r2, [r7, #20]
 80140a8:	69b9      	ldr	r1, [r7, #24]
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f005 fb74 	bl	8019798 <tcp_rst>
    }
    last_state = pcb->state;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	7d1b      	ldrb	r3, [r3, #20]
 80140b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f7ff fd34 	bl	8013b24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80140bc:	693b      	ldr	r3, [r7, #16]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d004      	beq.n	80140cc <tcp_abandon+0x154>
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	f06f 010c 	mvn.w	r1, #12
 80140c8:	68f8      	ldr	r0, [r7, #12]
 80140ca:	4798      	blx	r3
  }
}
 80140cc:	3728      	adds	r7, #40	@ 0x28
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}
 80140d2:	bf00      	nop
 80140d4:	080210dc 	.word	0x080210dc
 80140d8:	08021220 	.word	0x08021220
 80140dc:	08021120 	.word	0x08021120
 80140e0:	0802123c 	.word	0x0802123c
 80140e4:	2000c9c0 	.word	0x2000c9c0
 80140e8:	2000c9b4 	.word	0x2000c9b4
 80140ec:	2000c9bc 	.word	0x2000c9bc
 80140f0:	2000c9c4 	.word	0x2000c9c4

080140f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80140fc:	2101      	movs	r1, #1
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f7ff ff3a 	bl	8013f78 <tcp_abandon>
}
 8014104:	bf00      	nop
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b088      	sub	sp, #32
 8014110:	af00      	add	r7, sp, #0
 8014112:	60f8      	str	r0, [r7, #12]
 8014114:	60b9      	str	r1, [r7, #8]
 8014116:	4613      	mov	r3, r2
 8014118:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801411a:	2304      	movs	r3, #4
 801411c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d101      	bne.n	8014128 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014124:	4b3e      	ldr	r3, [pc, #248]	@ (8014220 <tcp_bind+0x114>)
 8014126:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d109      	bne.n	8014142 <tcp_bind+0x36>
 801412e:	4b3d      	ldr	r3, [pc, #244]	@ (8014224 <tcp_bind+0x118>)
 8014130:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8014134:	493c      	ldr	r1, [pc, #240]	@ (8014228 <tcp_bind+0x11c>)
 8014136:	483d      	ldr	r0, [pc, #244]	@ (801422c <tcp_bind+0x120>)
 8014138:	f009 fb00 	bl	801d73c <iprintf>
 801413c:	f06f 030f 	mvn.w	r3, #15
 8014140:	e06a      	b.n	8014218 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	7d1b      	ldrb	r3, [r3, #20]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d009      	beq.n	801415e <tcp_bind+0x52>
 801414a:	4b36      	ldr	r3, [pc, #216]	@ (8014224 <tcp_bind+0x118>)
 801414c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014150:	4937      	ldr	r1, [pc, #220]	@ (8014230 <tcp_bind+0x124>)
 8014152:	4836      	ldr	r0, [pc, #216]	@ (801422c <tcp_bind+0x120>)
 8014154:	f009 faf2 	bl	801d73c <iprintf>
 8014158:	f06f 0305 	mvn.w	r3, #5
 801415c:	e05c      	b.n	8014218 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801415e:	88fb      	ldrh	r3, [r7, #6]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <tcp_bind+0x6c>
    port = tcp_new_port();
 8014164:	f000 f9f0 	bl	8014548 <tcp_new_port>
 8014168:	4603      	mov	r3, r0
 801416a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801416c:	88fb      	ldrh	r3, [r7, #6]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d135      	bne.n	80141de <tcp_bind+0xd2>
      return ERR_BUF;
 8014172:	f06f 0301 	mvn.w	r3, #1
 8014176:	e04f      	b.n	8014218 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014178:	2300      	movs	r3, #0
 801417a:	61fb      	str	r3, [r7, #28]
 801417c:	e02b      	b.n	80141d6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801417e:	4a2d      	ldr	r2, [pc, #180]	@ (8014234 <tcp_bind+0x128>)
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	61bb      	str	r3, [r7, #24]
 801418a:	e01e      	b.n	80141ca <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801418c:	69bb      	ldr	r3, [r7, #24]
 801418e:	8adb      	ldrh	r3, [r3, #22]
 8014190:	88fa      	ldrh	r2, [r7, #6]
 8014192:	429a      	cmp	r2, r3
 8014194:	d116      	bne.n	80141c4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014196:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014198:	2b00      	cmp	r3, #0
 801419a:	d010      	beq.n	80141be <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801419c:	69bb      	ldr	r3, [r7, #24]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00c      	beq.n	80141be <tcp_bind+0xb2>
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d009      	beq.n	80141be <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d005      	beq.n	80141be <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80141b2:	69bb      	ldr	r3, [r7, #24]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80141ba:	429a      	cmp	r2, r3
 80141bc:	d102      	bne.n	80141c4 <tcp_bind+0xb8>
              return ERR_USE;
 80141be:	f06f 0307 	mvn.w	r3, #7
 80141c2:	e029      	b.n	8014218 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80141c4:	69bb      	ldr	r3, [r7, #24]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	61bb      	str	r3, [r7, #24]
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1dd      	bne.n	801418c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80141d0:	69fb      	ldr	r3, [r7, #28]
 80141d2:	3301      	adds	r3, #1
 80141d4:	61fb      	str	r3, [r7, #28]
 80141d6:	69fa      	ldr	r2, [r7, #28]
 80141d8:	697b      	ldr	r3, [r7, #20]
 80141da:	429a      	cmp	r2, r3
 80141dc:	dbcf      	blt.n	801417e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d00c      	beq.n	80141fe <tcp_bind+0xf2>
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d008      	beq.n	80141fe <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80141ec:	68bb      	ldr	r3, [r7, #8]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <tcp_bind+0xec>
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	e000      	b.n	80141fa <tcp_bind+0xee>
 80141f8:	2300      	movs	r3, #0
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	88fa      	ldrh	r2, [r7, #6]
 8014202:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014204:	4b0c      	ldr	r3, [pc, #48]	@ (8014238 <tcp_bind+0x12c>)
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	60da      	str	r2, [r3, #12]
 801420c:	4a0a      	ldr	r2, [pc, #40]	@ (8014238 <tcp_bind+0x12c>)
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	6013      	str	r3, [r2, #0]
 8014212:	f005 fc83 	bl	8019b1c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	3720      	adds	r7, #32
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	08023174 	.word	0x08023174
 8014224:	080210dc 	.word	0x080210dc
 8014228:	08021270 	.word	0x08021270
 801422c:	08021120 	.word	0x08021120
 8014230:	08021288 	.word	0x08021288
 8014234:	0802314c 	.word	0x0802314c
 8014238:	2000c9b4 	.word	0x2000c9b4

0801423c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	4613      	mov	r3, r2
 8014248:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d106      	bne.n	801425e <tcp_accept_null+0x22>
 8014250:	4b07      	ldr	r3, [pc, #28]	@ (8014270 <tcp_accept_null+0x34>)
 8014252:	f240 320f 	movw	r2, #783	@ 0x30f
 8014256:	4907      	ldr	r1, [pc, #28]	@ (8014274 <tcp_accept_null+0x38>)
 8014258:	4807      	ldr	r0, [pc, #28]	@ (8014278 <tcp_accept_null+0x3c>)
 801425a:	f009 fa6f 	bl	801d73c <iprintf>

  tcp_abort(pcb);
 801425e:	68b8      	ldr	r0, [r7, #8]
 8014260:	f7ff ff48 	bl	80140f4 <tcp_abort>

  return ERR_ABRT;
 8014264:	f06f 030c 	mvn.w	r3, #12
}
 8014268:	4618      	mov	r0, r3
 801426a:	3710      	adds	r7, #16
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	080210dc 	.word	0x080210dc
 8014274:	080212b0 	.word	0x080212b0
 8014278:	08021120 	.word	0x08021120

0801427c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b082      	sub	sp, #8
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	460b      	mov	r3, r1
 8014286:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8014288:	78fb      	ldrb	r3, [r7, #3]
 801428a:	2200      	movs	r2, #0
 801428c:	4619      	mov	r1, r3
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f000 f806 	bl	80142a0 <tcp_listen_with_backlog_and_err>
 8014294:	4603      	mov	r3, r0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}
	...

080142a0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b088      	sub	sp, #32
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	460b      	mov	r3, r1
 80142aa:	607a      	str	r2, [r7, #4]
 80142ac:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80142ae:	2300      	movs	r3, #0
 80142b0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d109      	bne.n	80142cc <tcp_listen_with_backlog_and_err+0x2c>
 80142b8:	4b47      	ldr	r3, [pc, #284]	@ (80143d8 <tcp_listen_with_backlog_and_err+0x138>)
 80142ba:	f240 3259 	movw	r2, #857	@ 0x359
 80142be:	4947      	ldr	r1, [pc, #284]	@ (80143dc <tcp_listen_with_backlog_and_err+0x13c>)
 80142c0:	4847      	ldr	r0, [pc, #284]	@ (80143e0 <tcp_listen_with_backlog_and_err+0x140>)
 80142c2:	f009 fa3b 	bl	801d73c <iprintf>
 80142c6:	23f0      	movs	r3, #240	@ 0xf0
 80142c8:	76fb      	strb	r3, [r7, #27]
 80142ca:	e079      	b.n	80143c0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	7d1b      	ldrb	r3, [r3, #20]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d009      	beq.n	80142e8 <tcp_listen_with_backlog_and_err+0x48>
 80142d4:	4b40      	ldr	r3, [pc, #256]	@ (80143d8 <tcp_listen_with_backlog_and_err+0x138>)
 80142d6:	f240 325a 	movw	r2, #858	@ 0x35a
 80142da:	4942      	ldr	r1, [pc, #264]	@ (80143e4 <tcp_listen_with_backlog_and_err+0x144>)
 80142dc:	4840      	ldr	r0, [pc, #256]	@ (80143e0 <tcp_listen_with_backlog_and_err+0x140>)
 80142de:	f009 fa2d 	bl	801d73c <iprintf>
 80142e2:	23f1      	movs	r3, #241	@ 0xf1
 80142e4:	76fb      	strb	r3, [r7, #27]
 80142e6:	e06b      	b.n	80143c0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	7d1b      	ldrb	r3, [r3, #20]
 80142ec:	2b01      	cmp	r3, #1
 80142ee:	d104      	bne.n	80142fa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80142f4:	23f7      	movs	r3, #247	@ 0xf7
 80142f6:	76fb      	strb	r3, [r7, #27]
    goto done;
 80142f8:	e062      	b.n	80143c0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80142fa:	2002      	movs	r0, #2
 80142fc:	f7fe fa7e 	bl	80127fc <memp_malloc>
 8014300:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d102      	bne.n	801430e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8014308:	23ff      	movs	r3, #255	@ 0xff
 801430a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801430c:	e058      	b.n	80143c0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	691a      	ldr	r2, [r3, #16]
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	8ada      	ldrh	r2, [r3, #22]
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	2201      	movs	r2, #1
 8014322:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	7d5a      	ldrb	r2, [r3, #21]
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	7a5a      	ldrb	r2, [r3, #9]
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014334:	69fb      	ldr	r3, [r7, #28]
 8014336:	2200      	movs	r2, #0
 8014338:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	7ada      	ldrb	r2, [r3, #11]
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	7a9a      	ldrb	r2, [r3, #10]
 8014346:	69fb      	ldr	r3, [r7, #28]
 8014348:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	681a      	ldr	r2, [r3, #0]
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	8adb      	ldrh	r3, [r3, #22]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d021      	beq.n	801439e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801435a:	4b23      	ldr	r3, [pc, #140]	@ (80143e8 <tcp_listen_with_backlog_and_err+0x148>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68fa      	ldr	r2, [r7, #12]
 8014360:	429a      	cmp	r2, r3
 8014362:	d105      	bne.n	8014370 <tcp_listen_with_backlog_and_err+0xd0>
 8014364:	4b20      	ldr	r3, [pc, #128]	@ (80143e8 <tcp_listen_with_backlog_and_err+0x148>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	4a1f      	ldr	r2, [pc, #124]	@ (80143e8 <tcp_listen_with_backlog_and_err+0x148>)
 801436c:	6013      	str	r3, [r2, #0]
 801436e:	e013      	b.n	8014398 <tcp_listen_with_backlog_and_err+0xf8>
 8014370:	4b1d      	ldr	r3, [pc, #116]	@ (80143e8 <tcp_listen_with_backlog_and_err+0x148>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	617b      	str	r3, [r7, #20]
 8014376:	e00c      	b.n	8014392 <tcp_listen_with_backlog_and_err+0xf2>
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	68fa      	ldr	r2, [r7, #12]
 801437e:	429a      	cmp	r2, r3
 8014380:	d104      	bne.n	801438c <tcp_listen_with_backlog_and_err+0xec>
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	68da      	ldr	r2, [r3, #12]
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	60da      	str	r2, [r3, #12]
 801438a:	e005      	b.n	8014398 <tcp_listen_with_backlog_and_err+0xf8>
 801438c:	697b      	ldr	r3, [r7, #20]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	617b      	str	r3, [r7, #20]
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d1ef      	bne.n	8014378 <tcp_listen_with_backlog_and_err+0xd8>
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	2200      	movs	r2, #0
 801439c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801439e:	68f8      	ldr	r0, [r7, #12]
 80143a0:	f7ff fbc0 	bl	8013b24 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	4a11      	ldr	r2, [pc, #68]	@ (80143ec <tcp_listen_with_backlog_and_err+0x14c>)
 80143a8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80143aa:	4b11      	ldr	r3, [pc, #68]	@ (80143f0 <tcp_listen_with_backlog_and_err+0x150>)
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	60da      	str	r2, [r3, #12]
 80143b2:	4a0f      	ldr	r2, [pc, #60]	@ (80143f0 <tcp_listen_with_backlog_and_err+0x150>)
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	6013      	str	r3, [r2, #0]
 80143b8:	f005 fbb0 	bl	8019b1c <tcp_timer_needed>
  res = ERR_OK;
 80143bc:	2300      	movs	r3, #0
 80143be:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d002      	beq.n	80143cc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	7efa      	ldrb	r2, [r7, #27]
 80143ca:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80143cc:	69fb      	ldr	r3, [r7, #28]
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3720      	adds	r7, #32
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}
 80143d6:	bf00      	nop
 80143d8:	080210dc 	.word	0x080210dc
 80143dc:	080212d0 	.word	0x080212d0
 80143e0:	08021120 	.word	0x08021120
 80143e4:	08021300 	.word	0x08021300
 80143e8:	2000c9b4 	.word	0x2000c9b4
 80143ec:	0801423d 	.word	0x0801423d
 80143f0:	2000c9b8 	.word	0x2000c9b8

080143f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d106      	bne.n	8014410 <tcp_update_rcv_ann_wnd+0x1c>
 8014402:	4b25      	ldr	r3, [pc, #148]	@ (8014498 <tcp_update_rcv_ann_wnd+0xa4>)
 8014404:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8014408:	4924      	ldr	r1, [pc, #144]	@ (801449c <tcp_update_rcv_ann_wnd+0xa8>)
 801440a:	4825      	ldr	r0, [pc, #148]	@ (80144a0 <tcp_update_rcv_ann_wnd+0xac>)
 801440c:	f009 f996 	bl	801d73c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8014418:	4413      	add	r3, r2
 801441a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8014424:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8014428:	bf28      	it	cs
 801442a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 801442e:	b292      	uxth	r2, r2
 8014430:	4413      	add	r3, r2
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	1ad3      	subs	r3, r2, r3
 8014436:	2b00      	cmp	r3, #0
 8014438:	db08      	blt.n	801444c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014446:	68fa      	ldr	r2, [r7, #12]
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	e020      	b.n	801448e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014454:	1ad3      	subs	r3, r2, r3
 8014456:	2b00      	cmp	r3, #0
 8014458:	dd03      	ble.n	8014462 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2200      	movs	r2, #0
 801445e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8014460:	e014      	b.n	801448c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801446a:	1ad3      	subs	r3, r2, r3
 801446c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014474:	d306      	bcc.n	8014484 <tcp_update_rcv_ann_wnd+0x90>
 8014476:	4b08      	ldr	r3, [pc, #32]	@ (8014498 <tcp_update_rcv_ann_wnd+0xa4>)
 8014478:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801447c:	4909      	ldr	r1, [pc, #36]	@ (80144a4 <tcp_update_rcv_ann_wnd+0xb0>)
 801447e:	4808      	ldr	r0, [pc, #32]	@ (80144a0 <tcp_update_rcv_ann_wnd+0xac>)
 8014480:	f009 f95c 	bl	801d73c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	b29a      	uxth	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801448c:	2300      	movs	r3, #0
  }
}
 801448e:	4618      	mov	r0, r3
 8014490:	3710      	adds	r7, #16
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	080210dc 	.word	0x080210dc
 801449c:	08021338 	.word	0x08021338
 80144a0:	08021120 	.word	0x08021120
 80144a4:	0802135c 	.word	0x0802135c

080144a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b084      	sub	sp, #16
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	460b      	mov	r3, r1
 80144b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d107      	bne.n	80144ca <tcp_recved+0x22>
 80144ba:	4b1f      	ldr	r3, [pc, #124]	@ (8014538 <tcp_recved+0x90>)
 80144bc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80144c0:	491e      	ldr	r1, [pc, #120]	@ (801453c <tcp_recved+0x94>)
 80144c2:	481f      	ldr	r0, [pc, #124]	@ (8014540 <tcp_recved+0x98>)
 80144c4:	f009 f93a 	bl	801d73c <iprintf>
 80144c8:	e032      	b.n	8014530 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	7d1b      	ldrb	r3, [r3, #20]
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d106      	bne.n	80144e0 <tcp_recved+0x38>
 80144d2:	4b19      	ldr	r3, [pc, #100]	@ (8014538 <tcp_recved+0x90>)
 80144d4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80144d8:	491a      	ldr	r1, [pc, #104]	@ (8014544 <tcp_recved+0x9c>)
 80144da:	4819      	ldr	r0, [pc, #100]	@ (8014540 <tcp_recved+0x98>)
 80144dc:	f009 f92e 	bl	801d73c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80144e4:	887b      	ldrh	r3, [r7, #2]
 80144e6:	4413      	add	r3, r2
 80144e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80144ea:	89fb      	ldrh	r3, [r7, #14]
 80144ec:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80144f0:	d804      	bhi.n	80144fc <tcp_recved+0x54>
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80144f6:	89fa      	ldrh	r2, [r7, #14]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d204      	bcs.n	8014506 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8014502:	851a      	strh	r2, [r3, #40]	@ 0x28
 8014504:	e002      	b.n	801450c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	89fa      	ldrh	r2, [r7, #14]
 801450a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7ff ff71 	bl	80143f4 <tcp_update_rcv_ann_wnd>
 8014512:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801451a:	d309      	bcc.n	8014530 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	8b5b      	ldrh	r3, [r3, #26]
 8014520:	f043 0302 	orr.w	r3, r3, #2
 8014524:	b29a      	uxth	r2, r3
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801452a:	6878      	ldr	r0, [r7, #4]
 801452c:	f004 fb80 	bl	8018c30 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014530:	3710      	adds	r7, #16
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	080210dc 	.word	0x080210dc
 801453c:	08021378 	.word	0x08021378
 8014540:	08021120 	.word	0x08021120
 8014544:	08021390 	.word	0x08021390

08014548 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8014548:	b480      	push	{r7}
 801454a:	b083      	sub	sp, #12
 801454c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801454e:	2300      	movs	r3, #0
 8014550:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8014552:	4b1e      	ldr	r3, [pc, #120]	@ (80145cc <tcp_new_port+0x84>)
 8014554:	881b      	ldrh	r3, [r3, #0]
 8014556:	3301      	adds	r3, #1
 8014558:	b29a      	uxth	r2, r3
 801455a:	4b1c      	ldr	r3, [pc, #112]	@ (80145cc <tcp_new_port+0x84>)
 801455c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801455e:	4b1b      	ldr	r3, [pc, #108]	@ (80145cc <tcp_new_port+0x84>)
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014566:	4293      	cmp	r3, r2
 8014568:	d103      	bne.n	8014572 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801456a:	4b18      	ldr	r3, [pc, #96]	@ (80145cc <tcp_new_port+0x84>)
 801456c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014570:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014572:	2300      	movs	r3, #0
 8014574:	71fb      	strb	r3, [r7, #7]
 8014576:	e01e      	b.n	80145b6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014578:	79fb      	ldrb	r3, [r7, #7]
 801457a:	4a15      	ldr	r2, [pc, #84]	@ (80145d0 <tcp_new_port+0x88>)
 801457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	603b      	str	r3, [r7, #0]
 8014584:	e011      	b.n	80145aa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	8ada      	ldrh	r2, [r3, #22]
 801458a:	4b10      	ldr	r3, [pc, #64]	@ (80145cc <tcp_new_port+0x84>)
 801458c:	881b      	ldrh	r3, [r3, #0]
 801458e:	429a      	cmp	r2, r3
 8014590:	d108      	bne.n	80145a4 <tcp_new_port+0x5c>
        n++;
 8014592:	88bb      	ldrh	r3, [r7, #4]
 8014594:	3301      	adds	r3, #1
 8014596:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014598:	88bb      	ldrh	r3, [r7, #4]
 801459a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801459e:	d3d8      	bcc.n	8014552 <tcp_new_port+0xa>
          return 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	e00d      	b.n	80145c0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	603b      	str	r3, [r7, #0]
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d1ea      	bne.n	8014586 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80145b0:	79fb      	ldrb	r3, [r7, #7]
 80145b2:	3301      	adds	r3, #1
 80145b4:	71fb      	strb	r3, [r7, #7]
 80145b6:	79fb      	ldrb	r3, [r7, #7]
 80145b8:	2b03      	cmp	r3, #3
 80145ba:	d9dd      	bls.n	8014578 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80145bc:	4b03      	ldr	r3, [pc, #12]	@ (80145cc <tcp_new_port+0x84>)
 80145be:	881b      	ldrh	r3, [r3, #0]
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr
 80145cc:	2000009c 	.word	0x2000009c
 80145d0:	0802314c 	.word	0x0802314c

080145d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80145d4:	b5b0      	push	{r4, r5, r7, lr}
 80145d6:	b090      	sub	sp, #64	@ 0x40
 80145d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80145da:	2300      	movs	r3, #0
 80145dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80145e0:	4b95      	ldr	r3, [pc, #596]	@ (8014838 <tcp_slowtmr+0x264>)
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	3301      	adds	r3, #1
 80145e6:	4a94      	ldr	r2, [pc, #592]	@ (8014838 <tcp_slowtmr+0x264>)
 80145e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80145ea:	4b94      	ldr	r3, [pc, #592]	@ (801483c <tcp_slowtmr+0x268>)
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	3301      	adds	r3, #1
 80145f0:	b2da      	uxtb	r2, r3
 80145f2:	4b92      	ldr	r3, [pc, #584]	@ (801483c <tcp_slowtmr+0x268>)
 80145f4:	701a      	strb	r2, [r3, #0]
 80145f6:	e000      	b.n	80145fa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80145f8:	bf00      	nop
  prev = NULL;
 80145fa:	2300      	movs	r3, #0
 80145fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80145fe:	4b90      	ldr	r3, [pc, #576]	@ (8014840 <tcp_slowtmr+0x26c>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014604:	e29f      	b.n	8014b46 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8014606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014608:	7d1b      	ldrb	r3, [r3, #20]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d106      	bne.n	801461c <tcp_slowtmr+0x48>
 801460e:	4b8d      	ldr	r3, [pc, #564]	@ (8014844 <tcp_slowtmr+0x270>)
 8014610:	f240 42be 	movw	r2, #1214	@ 0x4be
 8014614:	498c      	ldr	r1, [pc, #560]	@ (8014848 <tcp_slowtmr+0x274>)
 8014616:	488d      	ldr	r0, [pc, #564]	@ (801484c <tcp_slowtmr+0x278>)
 8014618:	f009 f890 	bl	801d73c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801461e:	7d1b      	ldrb	r3, [r3, #20]
 8014620:	2b01      	cmp	r3, #1
 8014622:	d106      	bne.n	8014632 <tcp_slowtmr+0x5e>
 8014624:	4b87      	ldr	r3, [pc, #540]	@ (8014844 <tcp_slowtmr+0x270>)
 8014626:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801462a:	4989      	ldr	r1, [pc, #548]	@ (8014850 <tcp_slowtmr+0x27c>)
 801462c:	4887      	ldr	r0, [pc, #540]	@ (801484c <tcp_slowtmr+0x278>)
 801462e:	f009 f885 	bl	801d73c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8014632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014634:	7d1b      	ldrb	r3, [r3, #20]
 8014636:	2b0a      	cmp	r3, #10
 8014638:	d106      	bne.n	8014648 <tcp_slowtmr+0x74>
 801463a:	4b82      	ldr	r3, [pc, #520]	@ (8014844 <tcp_slowtmr+0x270>)
 801463c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8014640:	4984      	ldr	r1, [pc, #528]	@ (8014854 <tcp_slowtmr+0x280>)
 8014642:	4882      	ldr	r0, [pc, #520]	@ (801484c <tcp_slowtmr+0x278>)
 8014644:	f009 f87a 	bl	801d73c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801464a:	7f9a      	ldrb	r2, [r3, #30]
 801464c:	4b7b      	ldr	r3, [pc, #492]	@ (801483c <tcp_slowtmr+0x268>)
 801464e:	781b      	ldrb	r3, [r3, #0]
 8014650:	429a      	cmp	r2, r3
 8014652:	d105      	bne.n	8014660 <tcp_slowtmr+0x8c>
      prev = pcb;
 8014654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014656:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801465a:	68db      	ldr	r3, [r3, #12]
 801465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801465e:	e272      	b.n	8014b46 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8014660:	4b76      	ldr	r3, [pc, #472]	@ (801483c <tcp_slowtmr+0x268>)
 8014662:	781a      	ldrb	r2, [r3, #0]
 8014664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014666:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8014668:	2300      	movs	r3, #0
 801466a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014676:	7d1b      	ldrb	r3, [r3, #20]
 8014678:	2b02      	cmp	r3, #2
 801467a:	d10a      	bne.n	8014692 <tcp_slowtmr+0xbe>
 801467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801467e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014682:	2b05      	cmp	r3, #5
 8014684:	d905      	bls.n	8014692 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8014686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801468a:	3301      	adds	r3, #1
 801468c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014690:	e11e      	b.n	80148d0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014698:	2b0b      	cmp	r3, #11
 801469a:	d905      	bls.n	80146a8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801469c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146a0:	3301      	adds	r3, #1
 80146a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146a6:	e113      	b.n	80148d0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80146a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146aa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d075      	beq.n	801479e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80146b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d006      	beq.n	80146c8 <tcp_slowtmr+0xf4>
 80146ba:	4b62      	ldr	r3, [pc, #392]	@ (8014844 <tcp_slowtmr+0x270>)
 80146bc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80146c0:	4965      	ldr	r1, [pc, #404]	@ (8014858 <tcp_slowtmr+0x284>)
 80146c2:	4862      	ldr	r0, [pc, #392]	@ (801484c <tcp_slowtmr+0x278>)
 80146c4:	f009 f83a 	bl	801d73c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80146c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d106      	bne.n	80146de <tcp_slowtmr+0x10a>
 80146d0:	4b5c      	ldr	r3, [pc, #368]	@ (8014844 <tcp_slowtmr+0x270>)
 80146d2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80146d6:	4961      	ldr	r1, [pc, #388]	@ (801485c <tcp_slowtmr+0x288>)
 80146d8:	485c      	ldr	r0, [pc, #368]	@ (801484c <tcp_slowtmr+0x278>)
 80146da:	f009 f82f 	bl	801d73c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80146de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80146e4:	2b0b      	cmp	r3, #11
 80146e6:	d905      	bls.n	80146f4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80146e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146ec:	3301      	adds	r3, #1
 80146ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80146f2:	e0ed      	b.n	80148d0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80146f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80146fa:	3b01      	subs	r3, #1
 80146fc:	4a58      	ldr	r2, [pc, #352]	@ (8014860 <tcp_slowtmr+0x28c>)
 80146fe:	5cd3      	ldrb	r3, [r2, r3]
 8014700:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014704:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014708:	7c7a      	ldrb	r2, [r7, #17]
 801470a:	429a      	cmp	r2, r3
 801470c:	d907      	bls.n	801471e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014710:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014714:	3301      	adds	r3, #1
 8014716:	b2da      	uxtb	r2, r3
 8014718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801471a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014720:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8014724:	7c7a      	ldrb	r2, [r7, #17]
 8014726:	429a      	cmp	r2, r3
 8014728:	f200 80d2 	bhi.w	80148d0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801472c:	2301      	movs	r3, #1
 801472e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8014730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014736:	2b00      	cmp	r3, #0
 8014738:	d108      	bne.n	801474c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801473a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801473c:	f005 f920 	bl	8019980 <tcp_zero_window_probe>
 8014740:	4603      	mov	r3, r0
 8014742:	2b00      	cmp	r3, #0
 8014744:	d014      	beq.n	8014770 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8014746:	2300      	movs	r3, #0
 8014748:	623b      	str	r3, [r7, #32]
 801474a:	e011      	b.n	8014770 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801474e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014752:	4619      	mov	r1, r3
 8014754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014756:	f003 ffe5 	bl	8018724 <tcp_split_unsent_seg>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d107      	bne.n	8014770 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8014760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014762:	f004 fa65 	bl	8018c30 <tcp_output>
 8014766:	4603      	mov	r3, r0
 8014768:	2b00      	cmp	r3, #0
 801476a:	d101      	bne.n	8014770 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801476c:	2300      	movs	r3, #0
 801476e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8014770:	6a3b      	ldr	r3, [r7, #32]
 8014772:	2b00      	cmp	r3, #0
 8014774:	f000 80ac 	beq.w	80148d0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8014778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801477a:	2200      	movs	r2, #0
 801477c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014782:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014786:	2b06      	cmp	r3, #6
 8014788:	f200 80a2 	bhi.w	80148d0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801478c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801478e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014792:	3301      	adds	r3, #1
 8014794:	b2da      	uxtb	r2, r3
 8014796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014798:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801479c:	e098      	b.n	80148d0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	db0f      	blt.n	80147c8 <tcp_slowtmr+0x1f4>
 80147a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80147ae:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d008      	beq.n	80147c8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80147b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80147bc:	b29b      	uxth	r3, r3
 80147be:	3301      	adds	r3, #1
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	b21a      	sxth	r2, r3
 80147c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147c6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80147c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80147ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80147d4:	429a      	cmp	r2, r3
 80147d6:	db7b      	blt.n	80148d0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80147d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147da:	f004 fd1d 	bl	8019218 <tcp_rexmit_rto_prepare>
 80147de:	4603      	mov	r3, r0
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d007      	beq.n	80147f4 <tcp_slowtmr+0x220>
 80147e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d171      	bne.n	80148d0 <tcp_slowtmr+0x2fc>
 80147ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d06d      	beq.n	80148d0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80147f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147f6:	7d1b      	ldrb	r3, [r3, #20]
 80147f8:	2b02      	cmp	r3, #2
 80147fa:	d03a      	beq.n	8014872 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80147fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014802:	2b0c      	cmp	r3, #12
 8014804:	bf28      	it	cs
 8014806:	230c      	movcs	r3, #12
 8014808:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801480c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014810:	10db      	asrs	r3, r3, #3
 8014812:	b21b      	sxth	r3, r3
 8014814:	461a      	mov	r2, r3
 8014816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014818:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801481c:	4413      	add	r3, r2
 801481e:	7efa      	ldrb	r2, [r7, #27]
 8014820:	4910      	ldr	r1, [pc, #64]	@ (8014864 <tcp_slowtmr+0x290>)
 8014822:	5c8a      	ldrb	r2, [r1, r2]
 8014824:	4093      	lsls	r3, r2
 8014826:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801482e:	4293      	cmp	r3, r2
 8014830:	dc1a      	bgt.n	8014868 <tcp_slowtmr+0x294>
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	b21a      	sxth	r2, r3
 8014836:	e019      	b.n	801486c <tcp_slowtmr+0x298>
 8014838:	2000c9b0 	.word	0x2000c9b0
 801483c:	2000c9c6 	.word	0x2000c9c6
 8014840:	2000c9bc 	.word	0x2000c9bc
 8014844:	080210dc 	.word	0x080210dc
 8014848:	08021420 	.word	0x08021420
 801484c:	08021120 	.word	0x08021120
 8014850:	0802144c 	.word	0x0802144c
 8014854:	08021478 	.word	0x08021478
 8014858:	080214a8 	.word	0x080214a8
 801485c:	080214dc 	.word	0x080214dc
 8014860:	08023144 	.word	0x08023144
 8014864:	08023134 	.word	0x08023134
 8014868:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801486e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8014872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014874:	2200      	movs	r2, #0
 8014876:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801487a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014880:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014884:	4293      	cmp	r3, r2
 8014886:	bf28      	it	cs
 8014888:	4613      	movcs	r3, r2
 801488a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801488c:	8a7b      	ldrh	r3, [r7, #18]
 801488e:	085b      	lsrs	r3, r3, #1
 8014890:	b29a      	uxth	r2, r3
 8014892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014894:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148a2:	005b      	lsls	r3, r3, #1
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	429a      	cmp	r2, r3
 80148a8:	d206      	bcs.n	80148b8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80148aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80148ae:	005b      	lsls	r3, r3, #1
 80148b0:	b29a      	uxth	r2, r3
 80148b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80148b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ba:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80148bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80148c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148c4:	2200      	movs	r2, #0
 80148c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80148ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80148cc:	f004 fd14 	bl	80192f8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80148d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148d2:	7d1b      	ldrb	r3, [r3, #20]
 80148d4:	2b06      	cmp	r3, #6
 80148d6:	d111      	bne.n	80148fc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80148d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148da:	8b5b      	ldrh	r3, [r3, #26]
 80148dc:	f003 0310 	and.w	r3, r3, #16
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00b      	beq.n	80148fc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80148e4:	4b9d      	ldr	r3, [pc, #628]	@ (8014b5c <tcp_slowtmr+0x588>)
 80148e6:	681a      	ldr	r2, [r3, #0]
 80148e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ea:	6a1b      	ldr	r3, [r3, #32]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	2b28      	cmp	r3, #40	@ 0x28
 80148f0:	d904      	bls.n	80148fc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80148f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80148f6:	3301      	adds	r3, #1
 80148f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80148fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148fe:	7a5b      	ldrb	r3, [r3, #9]
 8014900:	f003 0308 	and.w	r3, r3, #8
 8014904:	2b00      	cmp	r3, #0
 8014906:	d04c      	beq.n	80149a2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8014908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801490a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801490c:	2b04      	cmp	r3, #4
 801490e:	d003      	beq.n	8014918 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8014910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014912:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014914:	2b07      	cmp	r3, #7
 8014916:	d144      	bne.n	80149a2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014918:	4b90      	ldr	r3, [pc, #576]	@ (8014b5c <tcp_slowtmr+0x588>)
 801491a:	681a      	ldr	r2, [r3, #0]
 801491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801491e:	6a1b      	ldr	r3, [r3, #32]
 8014920:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014928:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801492c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8014930:	498b      	ldr	r1, [pc, #556]	@ (8014b60 <tcp_slowtmr+0x58c>)
 8014932:	fba1 1303 	umull	r1, r3, r1, r3
 8014936:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014938:	429a      	cmp	r2, r3
 801493a:	d90a      	bls.n	8014952 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801493c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014940:	3301      	adds	r3, #1
 8014942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8014946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801494a:	3301      	adds	r3, #1
 801494c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014950:	e027      	b.n	80149a2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014952:	4b82      	ldr	r3, [pc, #520]	@ (8014b5c <tcp_slowtmr+0x588>)
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014958:	6a1b      	ldr	r3, [r3, #32]
 801495a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801495e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8014962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014964:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014968:	4618      	mov	r0, r3
 801496a:	4b7e      	ldr	r3, [pc, #504]	@ (8014b64 <tcp_slowtmr+0x590>)
 801496c:	fb00 f303 	mul.w	r3, r0, r3
 8014970:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014972:	497b      	ldr	r1, [pc, #492]	@ (8014b60 <tcp_slowtmr+0x58c>)
 8014974:	fba1 1303 	umull	r1, r3, r1, r3
 8014978:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801497a:	429a      	cmp	r2, r3
 801497c:	d911      	bls.n	80149a2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801497e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014980:	f004 ffbe 	bl	8019900 <tcp_keepalive>
 8014984:	4603      	mov	r3, r0
 8014986:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801498a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801498e:	2b00      	cmp	r3, #0
 8014990:	d107      	bne.n	80149a2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8014992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014994:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014998:	3301      	adds	r3, #1
 801499a:	b2da      	uxtb	r2, r3
 801499c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801499e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80149a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d011      	beq.n	80149ce <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80149aa:	4b6c      	ldr	r3, [pc, #432]	@ (8014b5c <tcp_slowtmr+0x588>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149b0:	6a1b      	ldr	r3, [r3, #32]
 80149b2:	1ad2      	subs	r2, r2, r3
 80149b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80149ba:	4619      	mov	r1, r3
 80149bc:	460b      	mov	r3, r1
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	440b      	add	r3, r1
 80149c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80149c4:	429a      	cmp	r2, r3
 80149c6:	d302      	bcc.n	80149ce <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80149c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80149ca:	f000 fe7f 	bl	80156cc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80149ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d0:	7d1b      	ldrb	r3, [r3, #20]
 80149d2:	2b03      	cmp	r3, #3
 80149d4:	d10b      	bne.n	80149ee <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80149d6:	4b61      	ldr	r3, [pc, #388]	@ (8014b5c <tcp_slowtmr+0x588>)
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149dc:	6a1b      	ldr	r3, [r3, #32]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	2b28      	cmp	r3, #40	@ 0x28
 80149e2:	d904      	bls.n	80149ee <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80149e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149e8:	3301      	adds	r3, #1
 80149ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80149ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149f0:	7d1b      	ldrb	r3, [r3, #20]
 80149f2:	2b09      	cmp	r3, #9
 80149f4:	d10b      	bne.n	8014a0e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80149f6:	4b59      	ldr	r3, [pc, #356]	@ (8014b5c <tcp_slowtmr+0x588>)
 80149f8:	681a      	ldr	r2, [r3, #0]
 80149fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149fc:	6a1b      	ldr	r3, [r3, #32]
 80149fe:	1ad3      	subs	r3, r2, r3
 8014a00:	2bf0      	cmp	r3, #240	@ 0xf0
 8014a02:	d904      	bls.n	8014a0e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8014a04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a08:	3301      	adds	r3, #1
 8014a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8014a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d060      	beq.n	8014ad8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8014a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014a1c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8014a1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014a20:	f000 fca0 	bl	8015364 <tcp_pcb_purge>
      if (prev != NULL) {
 8014a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d010      	beq.n	8014a4c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8014b68 <tcp_slowtmr+0x594>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d106      	bne.n	8014a42 <tcp_slowtmr+0x46e>
 8014a34:	4b4d      	ldr	r3, [pc, #308]	@ (8014b6c <tcp_slowtmr+0x598>)
 8014a36:	f240 526d 	movw	r2, #1389	@ 0x56d
 8014a3a:	494d      	ldr	r1, [pc, #308]	@ (8014b70 <tcp_slowtmr+0x59c>)
 8014a3c:	484d      	ldr	r0, [pc, #308]	@ (8014b74 <tcp_slowtmr+0x5a0>)
 8014a3e:	f008 fe7d 	bl	801d73c <iprintf>
        prev->next = pcb->next;
 8014a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a44:	68da      	ldr	r2, [r3, #12]
 8014a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a48:	60da      	str	r2, [r3, #12]
 8014a4a:	e00f      	b.n	8014a6c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014a4c:	4b46      	ldr	r3, [pc, #280]	@ (8014b68 <tcp_slowtmr+0x594>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d006      	beq.n	8014a64 <tcp_slowtmr+0x490>
 8014a56:	4b45      	ldr	r3, [pc, #276]	@ (8014b6c <tcp_slowtmr+0x598>)
 8014a58:	f240 5271 	movw	r2, #1393	@ 0x571
 8014a5c:	4946      	ldr	r1, [pc, #280]	@ (8014b78 <tcp_slowtmr+0x5a4>)
 8014a5e:	4845      	ldr	r0, [pc, #276]	@ (8014b74 <tcp_slowtmr+0x5a0>)
 8014a60:	f008 fe6c 	bl	801d73c <iprintf>
        tcp_active_pcbs = pcb->next;
 8014a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a66:	68db      	ldr	r3, [r3, #12]
 8014a68:	4a3f      	ldr	r2, [pc, #252]	@ (8014b68 <tcp_slowtmr+0x594>)
 8014a6a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8014a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d013      	beq.n	8014a9c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a76:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a7a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014a7c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8014a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a80:	3304      	adds	r3, #4
 8014a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a84:	8ad2      	ldrh	r2, [r2, #22]
 8014a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a88:	8b09      	ldrh	r1, [r1, #24]
 8014a8a:	9102      	str	r1, [sp, #8]
 8014a8c:	9201      	str	r2, [sp, #4]
 8014a8e:	9300      	str	r3, [sp, #0]
 8014a90:	462b      	mov	r3, r5
 8014a92:	4622      	mov	r2, r4
 8014a94:	4601      	mov	r1, r0
 8014a96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014a98:	f004 fe7e 	bl	8019798 <tcp_rst>
      err_arg = pcb->callback_arg;
 8014a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a9e:	691b      	ldr	r3, [r3, #16]
 8014aa0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aa4:	7d1b      	ldrb	r3, [r3, #20]
 8014aa6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aaa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014ab2:	6838      	ldr	r0, [r7, #0]
 8014ab4:	f7ff f836 	bl	8013b24 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8014ab8:	4b30      	ldr	r3, [pc, #192]	@ (8014b7c <tcp_slowtmr+0x5a8>)
 8014aba:	2200      	movs	r2, #0
 8014abc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d004      	beq.n	8014ace <tcp_slowtmr+0x4fa>
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f06f 010c 	mvn.w	r1, #12
 8014aca:	68b8      	ldr	r0, [r7, #8]
 8014acc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014ace:	4b2b      	ldr	r3, [pc, #172]	@ (8014b7c <tcp_slowtmr+0x5a8>)
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d037      	beq.n	8014b46 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8014ad6:	e590      	b.n	80145fa <tcp_slowtmr+0x26>
      prev = pcb;
 8014ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ada:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8014ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ae4:	7f1b      	ldrb	r3, [r3, #28]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	b2da      	uxtb	r2, r3
 8014aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014af0:	7f1a      	ldrb	r2, [r3, #28]
 8014af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014af4:	7f5b      	ldrb	r3, [r3, #29]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d325      	bcc.n	8014b46 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8014afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014afc:	2200      	movs	r2, #0
 8014afe:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8014b00:	4b1e      	ldr	r3, [pc, #120]	@ (8014b7c <tcp_slowtmr+0x5a8>)
 8014b02:	2200      	movs	r2, #0
 8014b04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d00b      	beq.n	8014b28 <tcp_slowtmr+0x554>
 8014b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8014b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b18:	6912      	ldr	r2, [r2, #16]
 8014b1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014b1c:	4610      	mov	r0, r2
 8014b1e:	4798      	blx	r3
 8014b20:	4603      	mov	r3, r0
 8014b22:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014b26:	e002      	b.n	8014b2e <tcp_slowtmr+0x55a>
 8014b28:	2300      	movs	r3, #0
 8014b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8014b2e:	4b13      	ldr	r3, [pc, #76]	@ (8014b7c <tcp_slowtmr+0x5a8>)
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	f47f ad60 	bne.w	80145f8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014b38:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d102      	bne.n	8014b46 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8014b40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014b42:	f004 f875 	bl	8018c30 <tcp_output>
  while (pcb != NULL) {
 8014b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	f47f ad5c 	bne.w	8014606 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8014b52:	4b0b      	ldr	r3, [pc, #44]	@ (8014b80 <tcp_slowtmr+0x5ac>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014b58:	e067      	b.n	8014c2a <tcp_slowtmr+0x656>
 8014b5a:	bf00      	nop
 8014b5c:	2000c9b0 	.word	0x2000c9b0
 8014b60:	10624dd3 	.word	0x10624dd3
 8014b64:	000124f8 	.word	0x000124f8
 8014b68:	2000c9bc 	.word	0x2000c9bc
 8014b6c:	080210dc 	.word	0x080210dc
 8014b70:	08021514 	.word	0x08021514
 8014b74:	08021120 	.word	0x08021120
 8014b78:	08021540 	.word	0x08021540
 8014b7c:	2000c9c4 	.word	0x2000c9c4
 8014b80:	2000c9c0 	.word	0x2000c9c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b86:	7d1b      	ldrb	r3, [r3, #20]
 8014b88:	2b0a      	cmp	r3, #10
 8014b8a:	d006      	beq.n	8014b9a <tcp_slowtmr+0x5c6>
 8014b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8014c3c <tcp_slowtmr+0x668>)
 8014b8e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8014b92:	492b      	ldr	r1, [pc, #172]	@ (8014c40 <tcp_slowtmr+0x66c>)
 8014b94:	482b      	ldr	r0, [pc, #172]	@ (8014c44 <tcp_slowtmr+0x670>)
 8014b96:	f008 fdd1 	bl	801d73c <iprintf>
    pcb_remove = 0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014ba0:	4b29      	ldr	r3, [pc, #164]	@ (8014c48 <tcp_slowtmr+0x674>)
 8014ba2:	681a      	ldr	r2, [r3, #0]
 8014ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba6:	6a1b      	ldr	r3, [r3, #32]
 8014ba8:	1ad3      	subs	r3, r2, r3
 8014baa:	2bf0      	cmp	r3, #240	@ 0xf0
 8014bac:	d904      	bls.n	8014bb8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8014bae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d02f      	beq.n	8014c20 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014bc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014bc2:	f000 fbcf 	bl	8015364 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d010      	beq.n	8014bee <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8014c4c <tcp_slowtmr+0x678>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d106      	bne.n	8014be4 <tcp_slowtmr+0x610>
 8014bd6:	4b19      	ldr	r3, [pc, #100]	@ (8014c3c <tcp_slowtmr+0x668>)
 8014bd8:	f240 52af 	movw	r2, #1455	@ 0x5af
 8014bdc:	491c      	ldr	r1, [pc, #112]	@ (8014c50 <tcp_slowtmr+0x67c>)
 8014bde:	4819      	ldr	r0, [pc, #100]	@ (8014c44 <tcp_slowtmr+0x670>)
 8014be0:	f008 fdac 	bl	801d73c <iprintf>
        prev->next = pcb->next;
 8014be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be6:	68da      	ldr	r2, [r3, #12]
 8014be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bea:	60da      	str	r2, [r3, #12]
 8014bec:	e00f      	b.n	8014c0e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014bee:	4b17      	ldr	r3, [pc, #92]	@ (8014c4c <tcp_slowtmr+0x678>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d006      	beq.n	8014c06 <tcp_slowtmr+0x632>
 8014bf8:	4b10      	ldr	r3, [pc, #64]	@ (8014c3c <tcp_slowtmr+0x668>)
 8014bfa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8014bfe:	4915      	ldr	r1, [pc, #84]	@ (8014c54 <tcp_slowtmr+0x680>)
 8014c00:	4810      	ldr	r0, [pc, #64]	@ (8014c44 <tcp_slowtmr+0x670>)
 8014c02:	f008 fd9b 	bl	801d73c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c08:	68db      	ldr	r3, [r3, #12]
 8014c0a:	4a10      	ldr	r2, [pc, #64]	@ (8014c4c <tcp_slowtmr+0x678>)
 8014c0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8014c18:	69f8      	ldr	r0, [r7, #28]
 8014c1a:	f7fe ff83 	bl	8013b24 <tcp_free>
 8014c1e:	e004      	b.n	8014c2a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8014c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c22:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8014c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c26:	68db      	ldr	r3, [r3, #12]
 8014c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8014c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d1a9      	bne.n	8014b84 <tcp_slowtmr+0x5b0>
    }
  }
}
 8014c30:	bf00      	nop
 8014c32:	bf00      	nop
 8014c34:	3730      	adds	r7, #48	@ 0x30
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bdb0      	pop	{r4, r5, r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	080210dc 	.word	0x080210dc
 8014c40:	0802156c 	.word	0x0802156c
 8014c44:	08021120 	.word	0x08021120
 8014c48:	2000c9b0 	.word	0x2000c9b0
 8014c4c:	2000c9c0 	.word	0x2000c9c0
 8014c50:	0802159c 	.word	0x0802159c
 8014c54:	080215c4 	.word	0x080215c4

08014c58 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b082      	sub	sp, #8
 8014c5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8014d14 <tcp_fasttmr+0xbc>)
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	3301      	adds	r3, #1
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	4b2b      	ldr	r3, [pc, #172]	@ (8014d14 <tcp_fasttmr+0xbc>)
 8014c68:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8014d18 <tcp_fasttmr+0xc0>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014c70:	e048      	b.n	8014d04 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	7f9a      	ldrb	r2, [r3, #30]
 8014c76:	4b27      	ldr	r3, [pc, #156]	@ (8014d14 <tcp_fasttmr+0xbc>)
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d03f      	beq.n	8014cfe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014c7e:	4b25      	ldr	r3, [pc, #148]	@ (8014d14 <tcp_fasttmr+0xbc>)
 8014c80:	781a      	ldrb	r2, [r3, #0]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	8b5b      	ldrh	r3, [r3, #26]
 8014c8a:	f003 0301 	and.w	r3, r3, #1
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d010      	beq.n	8014cb4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	8b5b      	ldrh	r3, [r3, #26]
 8014c96:	f043 0302 	orr.w	r3, r3, #2
 8014c9a:	b29a      	uxth	r2, r3
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f003 ffc5 	bl	8018c30 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	8b5b      	ldrh	r3, [r3, #26]
 8014caa:	f023 0303 	bic.w	r3, r3, #3
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	8b5b      	ldrh	r3, [r3, #26]
 8014cb8:	f003 0308 	and.w	r3, r3, #8
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d009      	beq.n	8014cd4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	8b5b      	ldrh	r3, [r3, #26]
 8014cc4:	f023 0308 	bic.w	r3, r3, #8
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff f8bc 	bl	8013e4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00a      	beq.n	8014cf8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8014d1c <tcp_fasttmr+0xc4>)
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f000 f819 	bl	8014d20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014cee:	4b0b      	ldr	r3, [pc, #44]	@ (8014d1c <tcp_fasttmr+0xc4>)
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d000      	beq.n	8014cf8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014cf6:	e7b8      	b.n	8014c6a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	607b      	str	r3, [r7, #4]
 8014cfc:	e002      	b.n	8014d04 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d1b3      	bne.n	8014c72 <tcp_fasttmr+0x1a>
    }
  }
}
 8014d0a:	bf00      	nop
 8014d0c:	bf00      	nop
 8014d0e:	3708      	adds	r7, #8
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	2000c9c6 	.word	0x2000c9c6
 8014d18:	2000c9bc 	.word	0x2000c9bc
 8014d1c:	2000c9c4 	.word	0x2000c9c4

08014d20 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014d20:	b590      	push	{r4, r7, lr}
 8014d22:	b085      	sub	sp, #20
 8014d24:	af00      	add	r7, sp, #0
 8014d26:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d109      	bne.n	8014d42 <tcp_process_refused_data+0x22>
 8014d2e:	4b37      	ldr	r3, [pc, #220]	@ (8014e0c <tcp_process_refused_data+0xec>)
 8014d30:	f240 6209 	movw	r2, #1545	@ 0x609
 8014d34:	4936      	ldr	r1, [pc, #216]	@ (8014e10 <tcp_process_refused_data+0xf0>)
 8014d36:	4837      	ldr	r0, [pc, #220]	@ (8014e14 <tcp_process_refused_data+0xf4>)
 8014d38:	f008 fd00 	bl	801d73c <iprintf>
 8014d3c:	f06f 030f 	mvn.w	r3, #15
 8014d40:	e060      	b.n	8014e04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014d46:	7b5b      	ldrb	r3, [r3, #13]
 8014d48:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014d4e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2200      	movs	r2, #0
 8014d54:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d00b      	beq.n	8014d78 <tcp_process_refused_data+0x58>
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6918      	ldr	r0, [r3, #16]
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	68ba      	ldr	r2, [r7, #8]
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	47a0      	blx	r4
 8014d72:	4603      	mov	r3, r0
 8014d74:	73fb      	strb	r3, [r7, #15]
 8014d76:	e007      	b.n	8014d88 <tcp_process_refused_data+0x68>
 8014d78:	2300      	movs	r3, #0
 8014d7a:	68ba      	ldr	r2, [r7, #8]
 8014d7c:	6879      	ldr	r1, [r7, #4]
 8014d7e:	2000      	movs	r0, #0
 8014d80:	f000 f8c2 	bl	8014f08 <tcp_recv_null>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d12a      	bne.n	8014de6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014d90:	7bbb      	ldrb	r3, [r7, #14]
 8014d92:	f003 0320 	and.w	r3, r3, #32
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d033      	beq.n	8014e02 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014d9e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014da2:	d005      	beq.n	8014db0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014da8:	3301      	adds	r3, #1
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d00b      	beq.n	8014dd2 <tcp_process_refused_data+0xb2>
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6918      	ldr	r0, [r3, #16]
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	6879      	ldr	r1, [r7, #4]
 8014dca:	47a0      	blx	r4
 8014dcc:	4603      	mov	r3, r0
 8014dce:	73fb      	strb	r3, [r7, #15]
 8014dd0:	e001      	b.n	8014dd6 <tcp_process_refused_data+0xb6>
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dda:	f113 0f0d 	cmn.w	r3, #13
 8014dde:	d110      	bne.n	8014e02 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014de0:	f06f 030c 	mvn.w	r3, #12
 8014de4:	e00e      	b.n	8014e04 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dea:	f113 0f0d 	cmn.w	r3, #13
 8014dee:	d102      	bne.n	8014df6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014df0:	f06f 030c 	mvn.w	r3, #12
 8014df4:	e006      	b.n	8014e04 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	68ba      	ldr	r2, [r7, #8]
 8014dfa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8014dfc:	f06f 0304 	mvn.w	r3, #4
 8014e00:	e000      	b.n	8014e04 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014e02:	2300      	movs	r3, #0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3714      	adds	r7, #20
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd90      	pop	{r4, r7, pc}
 8014e0c:	080210dc 	.word	0x080210dc
 8014e10:	080215ec 	.word	0x080215ec
 8014e14:	08021120 	.word	0x08021120

08014e18 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014e20:	e007      	b.n	8014e32 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 f80a 	bl	8014e42 <tcp_seg_free>
    seg = next;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d1f4      	bne.n	8014e22 <tcp_segs_free+0xa>
  }
}
 8014e38:	bf00      	nop
 8014e3a:	bf00      	nop
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b082      	sub	sp, #8
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d00c      	beq.n	8014e6a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d004      	beq.n	8014e62 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f7fe fbb5 	bl	80135cc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014e62:	6879      	ldr	r1, [r7, #4]
 8014e64:	2003      	movs	r0, #3
 8014e66:	f7fd fd3f 	bl	80128e8 <memp_free>
  }
}
 8014e6a:	bf00      	nop
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}
	...

08014e74 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d107      	bne.n	8014e96 <tcp_setprio+0x22>
 8014e86:	4b07      	ldr	r3, [pc, #28]	@ (8014ea4 <tcp_setprio+0x30>)
 8014e88:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8014e8c:	4906      	ldr	r1, [pc, #24]	@ (8014ea8 <tcp_setprio+0x34>)
 8014e8e:	4807      	ldr	r0, [pc, #28]	@ (8014eac <tcp_setprio+0x38>)
 8014e90:	f008 fc54 	bl	801d73c <iprintf>
 8014e94:	e002      	b.n	8014e9c <tcp_setprio+0x28>

  pcb->prio = prio;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	78fa      	ldrb	r2, [r7, #3]
 8014e9a:	755a      	strb	r2, [r3, #21]
}
 8014e9c:	3708      	adds	r7, #8
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	080210dc 	.word	0x080210dc
 8014ea8:	08021614 	.word	0x08021614
 8014eac:	08021120 	.word	0x08021120

08014eb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d106      	bne.n	8014ecc <tcp_seg_copy+0x1c>
 8014ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8014efc <tcp_seg_copy+0x4c>)
 8014ec0:	f240 6282 	movw	r2, #1666	@ 0x682
 8014ec4:	490e      	ldr	r1, [pc, #56]	@ (8014f00 <tcp_seg_copy+0x50>)
 8014ec6:	480f      	ldr	r0, [pc, #60]	@ (8014f04 <tcp_seg_copy+0x54>)
 8014ec8:	f008 fc38 	bl	801d73c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014ecc:	2003      	movs	r0, #3
 8014ece:	f7fd fc95 	bl	80127fc <memp_malloc>
 8014ed2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <tcp_seg_copy+0x2e>
    return NULL;
 8014eda:	2300      	movs	r3, #0
 8014edc:	e00a      	b.n	8014ef4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014ede:	2210      	movs	r2, #16
 8014ee0:	6879      	ldr	r1, [r7, #4]
 8014ee2:	68f8      	ldr	r0, [r7, #12]
 8014ee4:	f008 fddd 	bl	801daa2 <memcpy>
  pbuf_ref(cseg->p);
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	685b      	ldr	r3, [r3, #4]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7fe fc13 	bl	8013718 <pbuf_ref>
  return cseg;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	3710      	adds	r7, #16
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	080210dc 	.word	0x080210dc
 8014f00:	08021630 	.word	0x08021630
 8014f04:	08021120 	.word	0x08021120

08014f08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b084      	sub	sp, #16
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d109      	bne.n	8014f30 <tcp_recv_null+0x28>
 8014f1c:	4b12      	ldr	r3, [pc, #72]	@ (8014f68 <tcp_recv_null+0x60>)
 8014f1e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014f22:	4912      	ldr	r1, [pc, #72]	@ (8014f6c <tcp_recv_null+0x64>)
 8014f24:	4812      	ldr	r0, [pc, #72]	@ (8014f70 <tcp_recv_null+0x68>)
 8014f26:	f008 fc09 	bl	801d73c <iprintf>
 8014f2a:	f06f 030f 	mvn.w	r3, #15
 8014f2e:	e016      	b.n	8014f5e <tcp_recv_null+0x56>

  if (p != NULL) {
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d009      	beq.n	8014f4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	891b      	ldrh	r3, [r3, #8]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	68b8      	ldr	r0, [r7, #8]
 8014f3e:	f7ff fab3 	bl	80144a8 <tcp_recved>
    pbuf_free(p);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7fe fb42 	bl	80135cc <pbuf_free>
 8014f48:	e008      	b.n	8014f5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d104      	bne.n	8014f5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014f52:	68b8      	ldr	r0, [r7, #8]
 8014f54:	f7fe ffe4 	bl	8013f20 <tcp_close>
 8014f58:	4603      	mov	r3, r0
 8014f5a:	e000      	b.n	8014f5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014f5c:	2300      	movs	r3, #0
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3710      	adds	r7, #16
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	080210dc 	.word	0x080210dc
 8014f6c:	0802164c 	.word	0x0802164c
 8014f70:	08021120 	.word	0x08021120

08014f74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b086      	sub	sp, #24
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	db01      	blt.n	8014f8a <tcp_kill_prio+0x16>
 8014f86:	79fb      	ldrb	r3, [r7, #7]
 8014f88:	e000      	b.n	8014f8c <tcp_kill_prio+0x18>
 8014f8a:	237f      	movs	r3, #127	@ 0x7f
 8014f8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014f8e:	7afb      	ldrb	r3, [r7, #11]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d034      	beq.n	8014ffe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014f94:	7afb      	ldrb	r3, [r7, #11]
 8014f96:	3b01      	subs	r3, #1
 8014f98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fa2:	4b19      	ldr	r3, [pc, #100]	@ (8015008 <tcp_kill_prio+0x94>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	617b      	str	r3, [r7, #20]
 8014fa8:	e01f      	b.n	8014fea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	7d5b      	ldrb	r3, [r3, #21]
 8014fae:	7afa      	ldrb	r2, [r7, #11]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d80c      	bhi.n	8014fce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014fb8:	7afa      	ldrb	r2, [r7, #11]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d112      	bne.n	8014fe4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014fbe:	4b13      	ldr	r3, [pc, #76]	@ (801500c <tcp_kill_prio+0x98>)
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	68fa      	ldr	r2, [r7, #12]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d80a      	bhi.n	8014fe4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014fce:	4b0f      	ldr	r3, [pc, #60]	@ (801500c <tcp_kill_prio+0x98>)
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	6a1b      	ldr	r3, [r3, #32]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	7d5b      	ldrb	r3, [r3, #21]
 8014fe2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	68db      	ldr	r3, [r3, #12]
 8014fe8:	617b      	str	r3, [r7, #20]
 8014fea:	697b      	ldr	r3, [r7, #20]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d1dc      	bne.n	8014faa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d004      	beq.n	8015000 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014ff6:	6938      	ldr	r0, [r7, #16]
 8014ff8:	f7ff f87c 	bl	80140f4 <tcp_abort>
 8014ffc:	e000      	b.n	8015000 <tcp_kill_prio+0x8c>
    return;
 8014ffe:	bf00      	nop
  }
}
 8015000:	3718      	adds	r7, #24
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	2000c9bc 	.word	0x2000c9bc
 801500c:	2000c9b0 	.word	0x2000c9b0

08015010 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b086      	sub	sp, #24
 8015014:	af00      	add	r7, sp, #0
 8015016:	4603      	mov	r3, r0
 8015018:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801501a:	79fb      	ldrb	r3, [r7, #7]
 801501c:	2b08      	cmp	r3, #8
 801501e:	d009      	beq.n	8015034 <tcp_kill_state+0x24>
 8015020:	79fb      	ldrb	r3, [r7, #7]
 8015022:	2b09      	cmp	r3, #9
 8015024:	d006      	beq.n	8015034 <tcp_kill_state+0x24>
 8015026:	4b1a      	ldr	r3, [pc, #104]	@ (8015090 <tcp_kill_state+0x80>)
 8015028:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 801502c:	4919      	ldr	r1, [pc, #100]	@ (8015094 <tcp_kill_state+0x84>)
 801502e:	481a      	ldr	r0, [pc, #104]	@ (8015098 <tcp_kill_state+0x88>)
 8015030:	f008 fb84 	bl	801d73c <iprintf>

  inactivity = 0;
 8015034:	2300      	movs	r3, #0
 8015036:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015038:	2300      	movs	r3, #0
 801503a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801503c:	4b17      	ldr	r3, [pc, #92]	@ (801509c <tcp_kill_state+0x8c>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	617b      	str	r3, [r7, #20]
 8015042:	e017      	b.n	8015074 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	7d1b      	ldrb	r3, [r3, #20]
 8015048:	79fa      	ldrb	r2, [r7, #7]
 801504a:	429a      	cmp	r2, r3
 801504c:	d10f      	bne.n	801506e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801504e:	4b14      	ldr	r3, [pc, #80]	@ (80150a0 <tcp_kill_state+0x90>)
 8015050:	681a      	ldr	r2, [r3, #0]
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	6a1b      	ldr	r3, [r3, #32]
 8015056:	1ad3      	subs	r3, r2, r3
 8015058:	68fa      	ldr	r2, [r7, #12]
 801505a:	429a      	cmp	r2, r3
 801505c:	d807      	bhi.n	801506e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801505e:	4b10      	ldr	r3, [pc, #64]	@ (80150a0 <tcp_kill_state+0x90>)
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	697b      	ldr	r3, [r7, #20]
 8015064:	6a1b      	ldr	r3, [r3, #32]
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801506a:	697b      	ldr	r3, [r7, #20]
 801506c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	617b      	str	r3, [r7, #20]
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d1e4      	bne.n	8015044 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801507a:	693b      	ldr	r3, [r7, #16]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d003      	beq.n	8015088 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015080:	2100      	movs	r1, #0
 8015082:	6938      	ldr	r0, [r7, #16]
 8015084:	f7fe ff78 	bl	8013f78 <tcp_abandon>
  }
}
 8015088:	bf00      	nop
 801508a:	3718      	adds	r7, #24
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}
 8015090:	080210dc 	.word	0x080210dc
 8015094:	08021668 	.word	0x08021668
 8015098:	08021120 	.word	0x08021120
 801509c:	2000c9bc 	.word	0x2000c9bc
 80150a0:	2000c9b0 	.word	0x2000c9b0

080150a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b084      	sub	sp, #16
 80150a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80150aa:	2300      	movs	r3, #0
 80150ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80150ae:	2300      	movs	r3, #0
 80150b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80150b2:	4b12      	ldr	r3, [pc, #72]	@ (80150fc <tcp_kill_timewait+0x58>)
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	60fb      	str	r3, [r7, #12]
 80150b8:	e012      	b.n	80150e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80150ba:	4b11      	ldr	r3, [pc, #68]	@ (8015100 <tcp_kill_timewait+0x5c>)
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	6a1b      	ldr	r3, [r3, #32]
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	687a      	ldr	r2, [r7, #4]
 80150c6:	429a      	cmp	r2, r3
 80150c8:	d807      	bhi.n	80150da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80150ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015100 <tcp_kill_timewait+0x5c>)
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6a1b      	ldr	r3, [r3, #32]
 80150d2:	1ad3      	subs	r3, r2, r3
 80150d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	60fb      	str	r3, [r7, #12]
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d1e9      	bne.n	80150ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d002      	beq.n	80150f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80150ec:	68b8      	ldr	r0, [r7, #8]
 80150ee:	f7ff f801 	bl	80140f4 <tcp_abort>
  }
}
 80150f2:	bf00      	nop
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	2000c9c0 	.word	0x2000c9c0
 8015100:	2000c9b0 	.word	0x2000c9b0

08015104 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801510a:	4b10      	ldr	r3, [pc, #64]	@ (801514c <tcp_handle_closepend+0x48>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015110:	e014      	b.n	801513c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	68db      	ldr	r3, [r3, #12]
 8015116:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	8b5b      	ldrh	r3, [r3, #26]
 801511c:	f003 0308 	and.w	r3, r3, #8
 8015120:	2b00      	cmp	r3, #0
 8015122:	d009      	beq.n	8015138 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	8b5b      	ldrh	r3, [r3, #26]
 8015128:	f023 0308 	bic.w	r3, r3, #8
 801512c:	b29a      	uxth	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7fe fe8a 	bl	8013e4c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d1e7      	bne.n	8015112 <tcp_handle_closepend+0xe>
  }
}
 8015142:	bf00      	nop
 8015144:	bf00      	nop
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	2000c9bc 	.word	0x2000c9bc

08015150 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b084      	sub	sp, #16
 8015154:	af00      	add	r7, sp, #0
 8015156:	4603      	mov	r3, r0
 8015158:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801515a:	2001      	movs	r0, #1
 801515c:	f7fd fb4e 	bl	80127fc <memp_malloc>
 8015160:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d126      	bne.n	80151b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015168:	f7ff ffcc 	bl	8015104 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801516c:	f7ff ff9a 	bl	80150a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015170:	2001      	movs	r0, #1
 8015172:	f7fd fb43 	bl	80127fc <memp_malloc>
 8015176:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d11b      	bne.n	80151b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801517e:	2009      	movs	r0, #9
 8015180:	f7ff ff46 	bl	8015010 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015184:	2001      	movs	r0, #1
 8015186:	f7fd fb39 	bl	80127fc <memp_malloc>
 801518a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d111      	bne.n	80151b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015192:	2008      	movs	r0, #8
 8015194:	f7ff ff3c 	bl	8015010 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015198:	2001      	movs	r0, #1
 801519a:	f7fd fb2f 	bl	80127fc <memp_malloc>
 801519e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d107      	bne.n	80151b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80151a6:	79fb      	ldrb	r3, [r7, #7]
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7ff fee3 	bl	8014f74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80151ae:	2001      	movs	r0, #1
 80151b0:	f7fd fb24 	bl	80127fc <memp_malloc>
 80151b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d03f      	beq.n	801523c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80151bc:	229c      	movs	r2, #156	@ 0x9c
 80151be:	2100      	movs	r1, #0
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f008 fb70 	bl	801d8a6 <memset>
    pcb->prio = prio;
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	79fa      	ldrb	r2, [r7, #7]
 80151ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80151d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80151dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	22ff      	movs	r2, #255	@ 0xff
 80151ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80151f2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	2206      	movs	r2, #6
 80151f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2206      	movs	r2, #6
 8015200:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015208:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2201      	movs	r2, #1
 801520e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015212:	4b0d      	ldr	r3, [pc, #52]	@ (8015248 <tcp_alloc+0xf8>)
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801521a:	4b0c      	ldr	r3, [pc, #48]	@ (801524c <tcp_alloc+0xfc>)
 801521c:	781a      	ldrb	r2, [r3, #0]
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015228:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	4a08      	ldr	r2, [pc, #32]	@ (8015250 <tcp_alloc+0x100>)
 8015230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	4a07      	ldr	r2, [pc, #28]	@ (8015254 <tcp_alloc+0x104>)
 8015238:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801523c:	68fb      	ldr	r3, [r7, #12]
}
 801523e:	4618      	mov	r0, r3
 8015240:	3710      	adds	r7, #16
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	2000c9b0 	.word	0x2000c9b0
 801524c:	2000c9c6 	.word	0x2000c9c6
 8015250:	08014f09 	.word	0x08014f09
 8015254:	006ddd00 	.word	0x006ddd00

08015258 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 801525c:	2040      	movs	r0, #64	@ 0x40
 801525e:	f7ff ff77 	bl	8015150 <tcp_alloc>
 8015262:	4603      	mov	r3, r0
}
 8015264:	4618      	mov	r0, r3
 8015266:	bd80      	pop	{r7, pc}

08015268 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
 8015270:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00e      	beq.n	8015296 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	7d1b      	ldrb	r3, [r3, #20]
 801527c:	2b01      	cmp	r3, #1
 801527e:	d106      	bne.n	801528e <tcp_recv+0x26>
 8015280:	4b07      	ldr	r3, [pc, #28]	@ (80152a0 <tcp_recv+0x38>)
 8015282:	f240 72df 	movw	r2, #2015	@ 0x7df
 8015286:	4907      	ldr	r1, [pc, #28]	@ (80152a4 <tcp_recv+0x3c>)
 8015288:	4807      	ldr	r0, [pc, #28]	@ (80152a8 <tcp_recv+0x40>)
 801528a:	f008 fa57 	bl	801d73c <iprintf>
    pcb->recv = recv;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	683a      	ldr	r2, [r7, #0]
 8015292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8015296:	bf00      	nop
 8015298:	3708      	adds	r7, #8
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	080210dc 	.word	0x080210dc
 80152a4:	08021678 	.word	0x08021678
 80152a8:	08021120 	.word	0x08021120

080152ac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d00e      	beq.n	80152da <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	7d1b      	ldrb	r3, [r3, #20]
 80152c0:	2b01      	cmp	r3, #1
 80152c2:	d106      	bne.n	80152d2 <tcp_sent+0x26>
 80152c4:	4b07      	ldr	r3, [pc, #28]	@ (80152e4 <tcp_sent+0x38>)
 80152c6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80152ca:	4907      	ldr	r1, [pc, #28]	@ (80152e8 <tcp_sent+0x3c>)
 80152cc:	4807      	ldr	r0, [pc, #28]	@ (80152ec <tcp_sent+0x40>)
 80152ce:	f008 fa35 	bl	801d73c <iprintf>
    pcb->sent = sent;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	683a      	ldr	r2, [r7, #0]
 80152d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80152da:	bf00      	nop
 80152dc:	3708      	adds	r7, #8
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}
 80152e2:	bf00      	nop
 80152e4:	080210dc 	.word	0x080210dc
 80152e8:	080216a0 	.word	0x080216a0
 80152ec:	08021120 	.word	0x08021120

080152f0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d00e      	beq.n	801531e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	7d1b      	ldrb	r3, [r3, #20]
 8015304:	2b01      	cmp	r3, #1
 8015306:	d106      	bne.n	8015316 <tcp_err+0x26>
 8015308:	4b07      	ldr	r3, [pc, #28]	@ (8015328 <tcp_err+0x38>)
 801530a:	f640 020d 	movw	r2, #2061	@ 0x80d
 801530e:	4907      	ldr	r1, [pc, #28]	@ (801532c <tcp_err+0x3c>)
 8015310:	4807      	ldr	r0, [pc, #28]	@ (8015330 <tcp_err+0x40>)
 8015312:	f008 fa13 	bl	801d73c <iprintf>
    pcb->errf = err;
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	683a      	ldr	r2, [r7, #0]
 801531a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 801531e:	bf00      	nop
 8015320:	3708      	adds	r7, #8
 8015322:	46bd      	mov	sp, r7
 8015324:	bd80      	pop	{r7, pc}
 8015326:	bf00      	nop
 8015328:	080210dc 	.word	0x080210dc
 801532c:	080216c8 	.word	0x080216c8
 8015330:	08021120 	.word	0x08021120

08015334 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d008      	beq.n	8015356 <tcp_accept+0x22>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	7d1b      	ldrb	r3, [r3, #20]
 8015348:	2b01      	cmp	r3, #1
 801534a:	d104      	bne.n	8015356 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	683a      	ldr	r2, [r7, #0]
 8015354:	619a      	str	r2, [r3, #24]
  }
}
 8015356:	bf00      	nop
 8015358:	3714      	adds	r7, #20
 801535a:	46bd      	mov	sp, r7
 801535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015360:	4770      	bx	lr
	...

08015364 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d107      	bne.n	8015382 <tcp_pcb_purge+0x1e>
 8015372:	4b21      	ldr	r3, [pc, #132]	@ (80153f8 <tcp_pcb_purge+0x94>)
 8015374:	f640 0251 	movw	r2, #2129	@ 0x851
 8015378:	4920      	ldr	r1, [pc, #128]	@ (80153fc <tcp_pcb_purge+0x98>)
 801537a:	4821      	ldr	r0, [pc, #132]	@ (8015400 <tcp_pcb_purge+0x9c>)
 801537c:	f008 f9de 	bl	801d73c <iprintf>
 8015380:	e037      	b.n	80153f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	7d1b      	ldrb	r3, [r3, #20]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d033      	beq.n	80153f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801538e:	2b0a      	cmp	r3, #10
 8015390:	d02f      	beq.n	80153f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015396:	2b01      	cmp	r3, #1
 8015398:	d02b      	beq.n	80153f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d007      	beq.n	80153b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fe f910 	bl	80135cc <pbuf_free>
      pcb->refused_data = NULL;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2200      	movs	r2, #0
 80153b0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d002      	beq.n	80153c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 f986 	bl	80156cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80153c6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7ff fd23 	bl	8014e18 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7ff fd1e 	bl	8014e18 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2200      	movs	r2, #0
 80153e0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	080210dc 	.word	0x080210dc
 80153fc:	08021728 	.word	0x08021728
 8015400:	08021120 	.word	0x08021120

08015404 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d106      	bne.n	8015422 <tcp_pcb_remove+0x1e>
 8015414:	4b3e      	ldr	r3, [pc, #248]	@ (8015510 <tcp_pcb_remove+0x10c>)
 8015416:	f640 0283 	movw	r2, #2179	@ 0x883
 801541a:	493e      	ldr	r1, [pc, #248]	@ (8015514 <tcp_pcb_remove+0x110>)
 801541c:	483e      	ldr	r0, [pc, #248]	@ (8015518 <tcp_pcb_remove+0x114>)
 801541e:	f008 f98d 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d106      	bne.n	8015436 <tcp_pcb_remove+0x32>
 8015428:	4b39      	ldr	r3, [pc, #228]	@ (8015510 <tcp_pcb_remove+0x10c>)
 801542a:	f640 0284 	movw	r2, #2180	@ 0x884
 801542e:	493b      	ldr	r1, [pc, #236]	@ (801551c <tcp_pcb_remove+0x118>)
 8015430:	4839      	ldr	r0, [pc, #228]	@ (8015518 <tcp_pcb_remove+0x114>)
 8015432:	f008 f983 	bl	801d73c <iprintf>

  TCP_RMV(pcblist, pcb);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	429a      	cmp	r2, r3
 801543e:	d105      	bne.n	801544c <tcp_pcb_remove+0x48>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	68da      	ldr	r2, [r3, #12]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	601a      	str	r2, [r3, #0]
 801544a:	e013      	b.n	8015474 <tcp_pcb_remove+0x70>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	60fb      	str	r3, [r7, #12]
 8015452:	e00c      	b.n	801546e <tcp_pcb_remove+0x6a>
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	683a      	ldr	r2, [r7, #0]
 801545a:	429a      	cmp	r2, r3
 801545c:	d104      	bne.n	8015468 <tcp_pcb_remove+0x64>
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	68da      	ldr	r2, [r3, #12]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	60da      	str	r2, [r3, #12]
 8015466:	e005      	b.n	8015474 <tcp_pcb_remove+0x70>
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	60fb      	str	r3, [r7, #12]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d1ef      	bne.n	8015454 <tcp_pcb_remove+0x50>
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	2200      	movs	r2, #0
 8015478:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801547a:	6838      	ldr	r0, [r7, #0]
 801547c:	f7ff ff72 	bl	8015364 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	7d1b      	ldrb	r3, [r3, #20]
 8015484:	2b0a      	cmp	r3, #10
 8015486:	d013      	beq.n	80154b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015488:	683b      	ldr	r3, [r7, #0]
 801548a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801548c:	2b01      	cmp	r3, #1
 801548e:	d00f      	beq.n	80154b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	8b5b      	ldrh	r3, [r3, #26]
 8015494:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015498:	2b00      	cmp	r3, #0
 801549a:	d009      	beq.n	80154b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	8b5b      	ldrh	r3, [r3, #26]
 80154a0:	f043 0302 	orr.w	r3, r3, #2
 80154a4:	b29a      	uxth	r2, r3
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80154aa:	6838      	ldr	r0, [r7, #0]
 80154ac:	f003 fbc0 	bl	8018c30 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	7d1b      	ldrb	r3, [r3, #20]
 80154b4:	2b01      	cmp	r3, #1
 80154b6:	d020      	beq.n	80154fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d006      	beq.n	80154ce <tcp_pcb_remove+0xca>
 80154c0:	4b13      	ldr	r3, [pc, #76]	@ (8015510 <tcp_pcb_remove+0x10c>)
 80154c2:	f640 0293 	movw	r2, #2195	@ 0x893
 80154c6:	4916      	ldr	r1, [pc, #88]	@ (8015520 <tcp_pcb_remove+0x11c>)
 80154c8:	4813      	ldr	r0, [pc, #76]	@ (8015518 <tcp_pcb_remove+0x114>)
 80154ca:	f008 f937 	bl	801d73c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d006      	beq.n	80154e4 <tcp_pcb_remove+0xe0>
 80154d6:	4b0e      	ldr	r3, [pc, #56]	@ (8015510 <tcp_pcb_remove+0x10c>)
 80154d8:	f640 0294 	movw	r2, #2196	@ 0x894
 80154dc:	4911      	ldr	r1, [pc, #68]	@ (8015524 <tcp_pcb_remove+0x120>)
 80154de:	480e      	ldr	r0, [pc, #56]	@ (8015518 <tcp_pcb_remove+0x114>)
 80154e0:	f008 f92c 	bl	801d73c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d006      	beq.n	80154fa <tcp_pcb_remove+0xf6>
 80154ec:	4b08      	ldr	r3, [pc, #32]	@ (8015510 <tcp_pcb_remove+0x10c>)
 80154ee:	f640 0296 	movw	r2, #2198	@ 0x896
 80154f2:	490d      	ldr	r1, [pc, #52]	@ (8015528 <tcp_pcb_remove+0x124>)
 80154f4:	4808      	ldr	r0, [pc, #32]	@ (8015518 <tcp_pcb_remove+0x114>)
 80154f6:	f008 f921 	bl	801d73c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	2200      	movs	r2, #0
 80154fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2200      	movs	r2, #0
 8015504:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015506:	bf00      	nop
 8015508:	3710      	adds	r7, #16
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	080210dc 	.word	0x080210dc
 8015514:	08021744 	.word	0x08021744
 8015518:	08021120 	.word	0x08021120
 801551c:	08021760 	.word	0x08021760
 8015520:	08021780 	.word	0x08021780
 8015524:	08021798 	.word	0x08021798
 8015528:	080217b4 	.word	0x080217b4

0801552c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d106      	bne.n	8015548 <tcp_next_iss+0x1c>
 801553a:	4b0a      	ldr	r3, [pc, #40]	@ (8015564 <tcp_next_iss+0x38>)
 801553c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015540:	4909      	ldr	r1, [pc, #36]	@ (8015568 <tcp_next_iss+0x3c>)
 8015542:	480a      	ldr	r0, [pc, #40]	@ (801556c <tcp_next_iss+0x40>)
 8015544:	f008 f8fa 	bl	801d73c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015548:	4b09      	ldr	r3, [pc, #36]	@ (8015570 <tcp_next_iss+0x44>)
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	4b09      	ldr	r3, [pc, #36]	@ (8015574 <tcp_next_iss+0x48>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	4413      	add	r3, r2
 8015552:	4a07      	ldr	r2, [pc, #28]	@ (8015570 <tcp_next_iss+0x44>)
 8015554:	6013      	str	r3, [r2, #0]
  return iss;
 8015556:	4b06      	ldr	r3, [pc, #24]	@ (8015570 <tcp_next_iss+0x44>)
 8015558:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801555a:	4618      	mov	r0, r3
 801555c:	3708      	adds	r7, #8
 801555e:	46bd      	mov	sp, r7
 8015560:	bd80      	pop	{r7, pc}
 8015562:	bf00      	nop
 8015564:	080210dc 	.word	0x080210dc
 8015568:	080217cc 	.word	0x080217cc
 801556c:	08021120 	.word	0x08021120
 8015570:	200000a0 	.word	0x200000a0
 8015574:	2000c9b0 	.word	0x2000c9b0

08015578 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b086      	sub	sp, #24
 801557c:	af00      	add	r7, sp, #0
 801557e:	4603      	mov	r3, r0
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
 8015584:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d106      	bne.n	801559a <tcp_eff_send_mss_netif+0x22>
 801558c:	4b14      	ldr	r3, [pc, #80]	@ (80155e0 <tcp_eff_send_mss_netif+0x68>)
 801558e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015592:	4914      	ldr	r1, [pc, #80]	@ (80155e4 <tcp_eff_send_mss_netif+0x6c>)
 8015594:	4814      	ldr	r0, [pc, #80]	@ (80155e8 <tcp_eff_send_mss_netif+0x70>)
 8015596:	f008 f8d1 	bl	801d73c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d101      	bne.n	80155a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80155a0:	89fb      	ldrh	r3, [r7, #14]
 80155a2:	e019      	b.n	80155d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80155a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80155aa:	8afb      	ldrh	r3, [r7, #22]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d012      	beq.n	80155d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80155b0:	2328      	movs	r3, #40	@ 0x28
 80155b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80155b4:	8afa      	ldrh	r2, [r7, #22]
 80155b6:	8abb      	ldrh	r3, [r7, #20]
 80155b8:	429a      	cmp	r2, r3
 80155ba:	d904      	bls.n	80155c6 <tcp_eff_send_mss_netif+0x4e>
 80155bc:	8afa      	ldrh	r2, [r7, #22]
 80155be:	8abb      	ldrh	r3, [r7, #20]
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	e000      	b.n	80155c8 <tcp_eff_send_mss_netif+0x50>
 80155c6:	2300      	movs	r3, #0
 80155c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80155ca:	8a7a      	ldrh	r2, [r7, #18]
 80155cc:	89fb      	ldrh	r3, [r7, #14]
 80155ce:	4293      	cmp	r3, r2
 80155d0:	bf28      	it	cs
 80155d2:	4613      	movcs	r3, r2
 80155d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80155d6:	89fb      	ldrh	r3, [r7, #14]
}
 80155d8:	4618      	mov	r0, r3
 80155da:	3718      	adds	r7, #24
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	080210dc 	.word	0x080210dc
 80155e4:	080217e8 	.word	0x080217e8
 80155e8:	08021120 	.word	0x08021120

080155ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d119      	bne.n	8015634 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015600:	4b10      	ldr	r3, [pc, #64]	@ (8015644 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015602:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8015606:	4910      	ldr	r1, [pc, #64]	@ (8015648 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015608:	4810      	ldr	r0, [pc, #64]	@ (801564c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801560a:	f008 f897 	bl	801d73c <iprintf>

  while (pcb != NULL) {
 801560e:	e011      	b.n	8015634 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	681a      	ldr	r2, [r3, #0]
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	429a      	cmp	r2, r3
 801561a:	d108      	bne.n	801562e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015622:	68f8      	ldr	r0, [r7, #12]
 8015624:	f7fe fd66 	bl	80140f4 <tcp_abort>
      pcb = next;
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	60fb      	str	r3, [r7, #12]
 801562c:	e002      	b.n	8015634 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	68db      	ldr	r3, [r3, #12]
 8015632:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d1ea      	bne.n	8015610 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801563a:	bf00      	nop
 801563c:	bf00      	nop
 801563e:	3710      	adds	r7, #16
 8015640:	46bd      	mov	sp, r7
 8015642:	bd80      	pop	{r7, pc}
 8015644:	080210dc 	.word	0x080210dc
 8015648:	08021810 	.word	0x08021810
 801564c:	08021120 	.word	0x08021120

08015650 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d02a      	beq.n	80156b6 <tcp_netif_ip_addr_changed+0x66>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d026      	beq.n	80156b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015668:	4b15      	ldr	r3, [pc, #84]	@ (80156c0 <tcp_netif_ip_addr_changed+0x70>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4619      	mov	r1, r3
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f7ff ffbc 	bl	80155ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015674:	4b13      	ldr	r3, [pc, #76]	@ (80156c4 <tcp_netif_ip_addr_changed+0x74>)
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	4619      	mov	r1, r3
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7ff ffb6 	bl	80155ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d017      	beq.n	80156b6 <tcp_netif_ip_addr_changed+0x66>
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d013      	beq.n	80156b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801568e:	4b0e      	ldr	r3, [pc, #56]	@ (80156c8 <tcp_netif_ip_addr_changed+0x78>)
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	60fb      	str	r3, [r7, #12]
 8015694:	e00c      	b.n	80156b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	429a      	cmp	r2, r3
 80156a0:	d103      	bne.n	80156aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	68db      	ldr	r3, [r3, #12]
 80156ae:	60fb      	str	r3, [r7, #12]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d1ef      	bne.n	8015696 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80156b6:	bf00      	nop
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	2000c9bc 	.word	0x2000c9bc
 80156c4:	2000c9b4 	.word	0x2000c9b4
 80156c8:	2000c9b8 	.word	0x2000c9b8

080156cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d007      	beq.n	80156ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7ff fb99 	bl	8014e18 <tcp_segs_free>
    pcb->ooseq = NULL;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2200      	movs	r2, #0
 80156ea:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80156ec:	bf00      	nop
 80156ee:	3708      	adds	r7, #8
 80156f0:	46bd      	mov	sp, r7
 80156f2:	bd80      	pop	{r7, pc}

080156f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80156f4:	b590      	push	{r4, r7, lr}
 80156f6:	b08d      	sub	sp, #52	@ 0x34
 80156f8:	af04      	add	r7, sp, #16
 80156fa:	6078      	str	r0, [r7, #4]
 80156fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d105      	bne.n	8015710 <tcp_input+0x1c>
 8015704:	4b9b      	ldr	r3, [pc, #620]	@ (8015974 <tcp_input+0x280>)
 8015706:	2283      	movs	r2, #131	@ 0x83
 8015708:	499b      	ldr	r1, [pc, #620]	@ (8015978 <tcp_input+0x284>)
 801570a:	489c      	ldr	r0, [pc, #624]	@ (801597c <tcp_input+0x288>)
 801570c:	f008 f816 	bl	801d73c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	4a9a      	ldr	r2, [pc, #616]	@ (8015980 <tcp_input+0x28c>)
 8015716:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	895b      	ldrh	r3, [r3, #10]
 801571c:	2b13      	cmp	r3, #19
 801571e:	f240 83d1 	bls.w	8015ec4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015722:	4b98      	ldr	r3, [pc, #608]	@ (8015984 <tcp_input+0x290>)
 8015724:	695b      	ldr	r3, [r3, #20]
 8015726:	4a97      	ldr	r2, [pc, #604]	@ (8015984 <tcp_input+0x290>)
 8015728:	6812      	ldr	r2, [r2, #0]
 801572a:	4611      	mov	r1, r2
 801572c:	4618      	mov	r0, r3
 801572e:	f006 f867 	bl	801b800 <ip4_addr_isbroadcast_u32>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	f040 83c7 	bne.w	8015ec8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801573a:	4b92      	ldr	r3, [pc, #584]	@ (8015984 <tcp_input+0x290>)
 801573c:	695b      	ldr	r3, [r3, #20]
 801573e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015742:	2be0      	cmp	r3, #224	@ 0xe0
 8015744:	f000 83c0 	beq.w	8015ec8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015748:	4b8d      	ldr	r3, [pc, #564]	@ (8015980 <tcp_input+0x28c>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	899b      	ldrh	r3, [r3, #12]
 801574e:	b29b      	uxth	r3, r3
 8015750:	4618      	mov	r0, r3
 8015752:	f7fc fb7b 	bl	8011e4c <lwip_htons>
 8015756:	4603      	mov	r3, r0
 8015758:	0b1b      	lsrs	r3, r3, #12
 801575a:	b29b      	uxth	r3, r3
 801575c:	b2db      	uxtb	r3, r3
 801575e:	009b      	lsls	r3, r3, #2
 8015760:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015762:	7cbb      	ldrb	r3, [r7, #18]
 8015764:	2b13      	cmp	r3, #19
 8015766:	f240 83b1 	bls.w	8015ecc <tcp_input+0x7d8>
 801576a:	7cbb      	ldrb	r3, [r7, #18]
 801576c:	b29a      	uxth	r2, r3
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	891b      	ldrh	r3, [r3, #8]
 8015772:	429a      	cmp	r2, r3
 8015774:	f200 83aa 	bhi.w	8015ecc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015778:	7cbb      	ldrb	r3, [r7, #18]
 801577a:	b29b      	uxth	r3, r3
 801577c:	3b14      	subs	r3, #20
 801577e:	b29a      	uxth	r2, r3
 8015780:	4b81      	ldr	r3, [pc, #516]	@ (8015988 <tcp_input+0x294>)
 8015782:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015784:	4b81      	ldr	r3, [pc, #516]	@ (801598c <tcp_input+0x298>)
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	895a      	ldrh	r2, [r3, #10]
 801578e:	7cbb      	ldrb	r3, [r7, #18]
 8015790:	b29b      	uxth	r3, r3
 8015792:	429a      	cmp	r2, r3
 8015794:	d309      	bcc.n	80157aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015796:	4b7c      	ldr	r3, [pc, #496]	@ (8015988 <tcp_input+0x294>)
 8015798:	881a      	ldrh	r2, [r3, #0]
 801579a:	4b7d      	ldr	r3, [pc, #500]	@ (8015990 <tcp_input+0x29c>)
 801579c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801579e:	7cbb      	ldrb	r3, [r7, #18]
 80157a0:	4619      	mov	r1, r3
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7fd fe8c 	bl	80134c0 <pbuf_remove_header>
 80157a8:	e04e      	b.n	8015848 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d105      	bne.n	80157be <tcp_input+0xca>
 80157b2:	4b70      	ldr	r3, [pc, #448]	@ (8015974 <tcp_input+0x280>)
 80157b4:	22c2      	movs	r2, #194	@ 0xc2
 80157b6:	4977      	ldr	r1, [pc, #476]	@ (8015994 <tcp_input+0x2a0>)
 80157b8:	4870      	ldr	r0, [pc, #448]	@ (801597c <tcp_input+0x288>)
 80157ba:	f007 ffbf 	bl	801d73c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80157be:	2114      	movs	r1, #20
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f7fd fe7d 	bl	80134c0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	895a      	ldrh	r2, [r3, #10]
 80157ca:	4b71      	ldr	r3, [pc, #452]	@ (8015990 <tcp_input+0x29c>)
 80157cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80157ce:	4b6e      	ldr	r3, [pc, #440]	@ (8015988 <tcp_input+0x294>)
 80157d0:	881a      	ldrh	r2, [r3, #0]
 80157d2:	4b6f      	ldr	r3, [pc, #444]	@ (8015990 <tcp_input+0x29c>)
 80157d4:	881b      	ldrh	r3, [r3, #0]
 80157d6:	1ad3      	subs	r3, r2, r3
 80157d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80157da:	4b6d      	ldr	r3, [pc, #436]	@ (8015990 <tcp_input+0x29c>)
 80157dc:	881b      	ldrh	r3, [r3, #0]
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f7fd fe6d 	bl	80134c0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	895b      	ldrh	r3, [r3, #10]
 80157ec:	8a3a      	ldrh	r2, [r7, #16]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	f200 836e 	bhi.w	8015ed0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	681b      	ldr	r3, [r3, #0]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	4a64      	ldr	r2, [pc, #400]	@ (801598c <tcp_input+0x298>)
 80157fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	8a3a      	ldrh	r2, [r7, #16]
 8015804:	4611      	mov	r1, r2
 8015806:	4618      	mov	r0, r3
 8015808:	f7fd fe5a 	bl	80134c0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	891a      	ldrh	r2, [r3, #8]
 8015810:	8a3b      	ldrh	r3, [r7, #16]
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	b29a      	uxth	r2, r3
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	895b      	ldrh	r3, [r3, #10]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d005      	beq.n	801582e <tcp_input+0x13a>
 8015822:	4b54      	ldr	r3, [pc, #336]	@ (8015974 <tcp_input+0x280>)
 8015824:	22df      	movs	r2, #223	@ 0xdf
 8015826:	495c      	ldr	r1, [pc, #368]	@ (8015998 <tcp_input+0x2a4>)
 8015828:	4854      	ldr	r0, [pc, #336]	@ (801597c <tcp_input+0x288>)
 801582a:	f007 ff87 	bl	801d73c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	891a      	ldrh	r2, [r3, #8]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	891b      	ldrh	r3, [r3, #8]
 8015838:	429a      	cmp	r2, r3
 801583a:	d005      	beq.n	8015848 <tcp_input+0x154>
 801583c:	4b4d      	ldr	r3, [pc, #308]	@ (8015974 <tcp_input+0x280>)
 801583e:	22e0      	movs	r2, #224	@ 0xe0
 8015840:	4956      	ldr	r1, [pc, #344]	@ (801599c <tcp_input+0x2a8>)
 8015842:	484e      	ldr	r0, [pc, #312]	@ (801597c <tcp_input+0x288>)
 8015844:	f007 ff7a 	bl	801d73c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015848:	4b4d      	ldr	r3, [pc, #308]	@ (8015980 <tcp_input+0x28c>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	881b      	ldrh	r3, [r3, #0]
 801584e:	b29b      	uxth	r3, r3
 8015850:	4a4b      	ldr	r2, [pc, #300]	@ (8015980 <tcp_input+0x28c>)
 8015852:	6814      	ldr	r4, [r2, #0]
 8015854:	4618      	mov	r0, r3
 8015856:	f7fc faf9 	bl	8011e4c <lwip_htons>
 801585a:	4603      	mov	r3, r0
 801585c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801585e:	4b48      	ldr	r3, [pc, #288]	@ (8015980 <tcp_input+0x28c>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	885b      	ldrh	r3, [r3, #2]
 8015864:	b29b      	uxth	r3, r3
 8015866:	4a46      	ldr	r2, [pc, #280]	@ (8015980 <tcp_input+0x28c>)
 8015868:	6814      	ldr	r4, [r2, #0]
 801586a:	4618      	mov	r0, r3
 801586c:	f7fc faee 	bl	8011e4c <lwip_htons>
 8015870:	4603      	mov	r3, r0
 8015872:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015874:	4b42      	ldr	r3, [pc, #264]	@ (8015980 <tcp_input+0x28c>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	4a41      	ldr	r2, [pc, #260]	@ (8015980 <tcp_input+0x28c>)
 801587c:	6814      	ldr	r4, [r2, #0]
 801587e:	4618      	mov	r0, r3
 8015880:	f7fc fafa 	bl	8011e78 <lwip_htonl>
 8015884:	4603      	mov	r3, r0
 8015886:	6063      	str	r3, [r4, #4]
 8015888:	6863      	ldr	r3, [r4, #4]
 801588a:	4a45      	ldr	r2, [pc, #276]	@ (80159a0 <tcp_input+0x2ac>)
 801588c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801588e:	4b3c      	ldr	r3, [pc, #240]	@ (8015980 <tcp_input+0x28c>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	4a3a      	ldr	r2, [pc, #232]	@ (8015980 <tcp_input+0x28c>)
 8015896:	6814      	ldr	r4, [r2, #0]
 8015898:	4618      	mov	r0, r3
 801589a:	f7fc faed 	bl	8011e78 <lwip_htonl>
 801589e:	4603      	mov	r3, r0
 80158a0:	60a3      	str	r3, [r4, #8]
 80158a2:	68a3      	ldr	r3, [r4, #8]
 80158a4:	4a3f      	ldr	r2, [pc, #252]	@ (80159a4 <tcp_input+0x2b0>)
 80158a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80158a8:	4b35      	ldr	r3, [pc, #212]	@ (8015980 <tcp_input+0x28c>)
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	89db      	ldrh	r3, [r3, #14]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	4a33      	ldr	r2, [pc, #204]	@ (8015980 <tcp_input+0x28c>)
 80158b2:	6814      	ldr	r4, [r2, #0]
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7fc fac9 	bl	8011e4c <lwip_htons>
 80158ba:	4603      	mov	r3, r0
 80158bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80158be:	4b30      	ldr	r3, [pc, #192]	@ (8015980 <tcp_input+0x28c>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	899b      	ldrh	r3, [r3, #12]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fc fac0 	bl	8011e4c <lwip_htons>
 80158cc:	4603      	mov	r3, r0
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80158d4:	b2da      	uxtb	r2, r3
 80158d6:	4b34      	ldr	r3, [pc, #208]	@ (80159a8 <tcp_input+0x2b4>)
 80158d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	891a      	ldrh	r2, [r3, #8]
 80158de:	4b33      	ldr	r3, [pc, #204]	@ (80159ac <tcp_input+0x2b8>)
 80158e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80158e2:	4b31      	ldr	r3, [pc, #196]	@ (80159a8 <tcp_input+0x2b4>)
 80158e4:	781b      	ldrb	r3, [r3, #0]
 80158e6:	f003 0303 	and.w	r3, r3, #3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d00c      	beq.n	8015908 <tcp_input+0x214>
    tcplen++;
 80158ee:	4b2f      	ldr	r3, [pc, #188]	@ (80159ac <tcp_input+0x2b8>)
 80158f0:	881b      	ldrh	r3, [r3, #0]
 80158f2:	3301      	adds	r3, #1
 80158f4:	b29a      	uxth	r2, r3
 80158f6:	4b2d      	ldr	r3, [pc, #180]	@ (80159ac <tcp_input+0x2b8>)
 80158f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	891a      	ldrh	r2, [r3, #8]
 80158fe:	4b2b      	ldr	r3, [pc, #172]	@ (80159ac <tcp_input+0x2b8>)
 8015900:	881b      	ldrh	r3, [r3, #0]
 8015902:	429a      	cmp	r2, r3
 8015904:	f200 82e6 	bhi.w	8015ed4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015908:	2300      	movs	r3, #0
 801590a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801590c:	4b28      	ldr	r3, [pc, #160]	@ (80159b0 <tcp_input+0x2bc>)
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	61fb      	str	r3, [r7, #28]
 8015912:	e09d      	b.n	8015a50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	7d1b      	ldrb	r3, [r3, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d105      	bne.n	8015928 <tcp_input+0x234>
 801591c:	4b15      	ldr	r3, [pc, #84]	@ (8015974 <tcp_input+0x280>)
 801591e:	22fb      	movs	r2, #251	@ 0xfb
 8015920:	4924      	ldr	r1, [pc, #144]	@ (80159b4 <tcp_input+0x2c0>)
 8015922:	4816      	ldr	r0, [pc, #88]	@ (801597c <tcp_input+0x288>)
 8015924:	f007 ff0a 	bl	801d73c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	7d1b      	ldrb	r3, [r3, #20]
 801592c:	2b0a      	cmp	r3, #10
 801592e:	d105      	bne.n	801593c <tcp_input+0x248>
 8015930:	4b10      	ldr	r3, [pc, #64]	@ (8015974 <tcp_input+0x280>)
 8015932:	22fc      	movs	r2, #252	@ 0xfc
 8015934:	4920      	ldr	r1, [pc, #128]	@ (80159b8 <tcp_input+0x2c4>)
 8015936:	4811      	ldr	r0, [pc, #68]	@ (801597c <tcp_input+0x288>)
 8015938:	f007 ff00 	bl	801d73c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	7d1b      	ldrb	r3, [r3, #20]
 8015940:	2b01      	cmp	r3, #1
 8015942:	d105      	bne.n	8015950 <tcp_input+0x25c>
 8015944:	4b0b      	ldr	r3, [pc, #44]	@ (8015974 <tcp_input+0x280>)
 8015946:	22fd      	movs	r2, #253	@ 0xfd
 8015948:	491c      	ldr	r1, [pc, #112]	@ (80159bc <tcp_input+0x2c8>)
 801594a:	480c      	ldr	r0, [pc, #48]	@ (801597c <tcp_input+0x288>)
 801594c:	f007 fef6 	bl	801d73c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	7a1b      	ldrb	r3, [r3, #8]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d033      	beq.n	80159c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015958:	69fb      	ldr	r3, [r7, #28]
 801595a:	7a1a      	ldrb	r2, [r3, #8]
 801595c:	4b09      	ldr	r3, [pc, #36]	@ (8015984 <tcp_input+0x290>)
 801595e:	685b      	ldr	r3, [r3, #4]
 8015960:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015964:	3301      	adds	r3, #1
 8015966:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015968:	429a      	cmp	r2, r3
 801596a:	d029      	beq.n	80159c0 <tcp_input+0x2cc>
      prev = pcb;
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	61bb      	str	r3, [r7, #24]
      continue;
 8015970:	e06b      	b.n	8015a4a <tcp_input+0x356>
 8015972:	bf00      	nop
 8015974:	08021844 	.word	0x08021844
 8015978:	08021878 	.word	0x08021878
 801597c:	08021890 	.word	0x08021890
 8015980:	2000c9d8 	.word	0x2000c9d8
 8015984:	2000925c 	.word	0x2000925c
 8015988:	2000c9dc 	.word	0x2000c9dc
 801598c:	2000c9e0 	.word	0x2000c9e0
 8015990:	2000c9de 	.word	0x2000c9de
 8015994:	080218b8 	.word	0x080218b8
 8015998:	080218c8 	.word	0x080218c8
 801599c:	080218d4 	.word	0x080218d4
 80159a0:	2000c9e8 	.word	0x2000c9e8
 80159a4:	2000c9ec 	.word	0x2000c9ec
 80159a8:	2000c9f4 	.word	0x2000c9f4
 80159ac:	2000c9f2 	.word	0x2000c9f2
 80159b0:	2000c9bc 	.word	0x2000c9bc
 80159b4:	080218f4 	.word	0x080218f4
 80159b8:	0802191c 	.word	0x0802191c
 80159bc:	08021948 	.word	0x08021948
    }

    if (pcb->remote_port == tcphdr->src &&
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	8b1a      	ldrh	r2, [r3, #24]
 80159c4:	4b72      	ldr	r3, [pc, #456]	@ (8015b90 <tcp_input+0x49c>)
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	429a      	cmp	r2, r3
 80159ce:	d13a      	bne.n	8015a46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80159d0:	69fb      	ldr	r3, [r7, #28]
 80159d2:	8ada      	ldrh	r2, [r3, #22]
 80159d4:	4b6e      	ldr	r3, [pc, #440]	@ (8015b90 <tcp_input+0x49c>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	885b      	ldrh	r3, [r3, #2]
 80159da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80159dc:	429a      	cmp	r2, r3
 80159de:	d132      	bne.n	8015a46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80159e0:	69fb      	ldr	r3, [r7, #28]
 80159e2:	685a      	ldr	r2, [r3, #4]
 80159e4:	4b6b      	ldr	r3, [pc, #428]	@ (8015b94 <tcp_input+0x4a0>)
 80159e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d12c      	bne.n	8015a46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	681a      	ldr	r2, [r3, #0]
 80159f0:	4b68      	ldr	r3, [pc, #416]	@ (8015b94 <tcp_input+0x4a0>)
 80159f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80159f4:	429a      	cmp	r2, r3
 80159f6:	d126      	bne.n	8015a46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	69fa      	ldr	r2, [r7, #28]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d106      	bne.n	8015a10 <tcp_input+0x31c>
 8015a02:	4b65      	ldr	r3, [pc, #404]	@ (8015b98 <tcp_input+0x4a4>)
 8015a04:	f240 120d 	movw	r2, #269	@ 0x10d
 8015a08:	4964      	ldr	r1, [pc, #400]	@ (8015b9c <tcp_input+0x4a8>)
 8015a0a:	4865      	ldr	r0, [pc, #404]	@ (8015ba0 <tcp_input+0x4ac>)
 8015a0c:	f007 fe96 	bl	801d73c <iprintf>
      if (prev != NULL) {
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d00a      	beq.n	8015a2c <tcp_input+0x338>
        prev->next = pcb->next;
 8015a16:	69fb      	ldr	r3, [r7, #28]
 8015a18:	68da      	ldr	r2, [r3, #12]
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015a1e:	4b61      	ldr	r3, [pc, #388]	@ (8015ba4 <tcp_input+0x4b0>)
 8015a20:	681a      	ldr	r2, [r3, #0]
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015a26:	4a5f      	ldr	r2, [pc, #380]	@ (8015ba4 <tcp_input+0x4b0>)
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	68db      	ldr	r3, [r3, #12]
 8015a30:	69fa      	ldr	r2, [r7, #28]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d111      	bne.n	8015a5a <tcp_input+0x366>
 8015a36:	4b58      	ldr	r3, [pc, #352]	@ (8015b98 <tcp_input+0x4a4>)
 8015a38:	f240 1215 	movw	r2, #277	@ 0x115
 8015a3c:	495a      	ldr	r1, [pc, #360]	@ (8015ba8 <tcp_input+0x4b4>)
 8015a3e:	4858      	ldr	r0, [pc, #352]	@ (8015ba0 <tcp_input+0x4ac>)
 8015a40:	f007 fe7c 	bl	801d73c <iprintf>
      break;
 8015a44:	e009      	b.n	8015a5a <tcp_input+0x366>
    }
    prev = pcb;
 8015a46:	69fb      	ldr	r3, [r7, #28]
 8015a48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	61fb      	str	r3, [r7, #28]
 8015a50:	69fb      	ldr	r3, [r7, #28]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	f47f af5e 	bne.w	8015914 <tcp_input+0x220>
 8015a58:	e000      	b.n	8015a5c <tcp_input+0x368>
      break;
 8015a5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	f040 80aa 	bne.w	8015bb8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015a64:	4b51      	ldr	r3, [pc, #324]	@ (8015bac <tcp_input+0x4b8>)
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	61fb      	str	r3, [r7, #28]
 8015a6a:	e03f      	b.n	8015aec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	7d1b      	ldrb	r3, [r3, #20]
 8015a70:	2b0a      	cmp	r3, #10
 8015a72:	d006      	beq.n	8015a82 <tcp_input+0x38e>
 8015a74:	4b48      	ldr	r3, [pc, #288]	@ (8015b98 <tcp_input+0x4a4>)
 8015a76:	f240 121f 	movw	r2, #287	@ 0x11f
 8015a7a:	494d      	ldr	r1, [pc, #308]	@ (8015bb0 <tcp_input+0x4bc>)
 8015a7c:	4848      	ldr	r0, [pc, #288]	@ (8015ba0 <tcp_input+0x4ac>)
 8015a7e:	f007 fe5d 	bl	801d73c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	7a1b      	ldrb	r3, [r3, #8]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d009      	beq.n	8015a9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	7a1a      	ldrb	r2, [r3, #8]
 8015a8e:	4b41      	ldr	r3, [pc, #260]	@ (8015b94 <tcp_input+0x4a0>)
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015a96:	3301      	adds	r3, #1
 8015a98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d122      	bne.n	8015ae4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015a9e:	69fb      	ldr	r3, [r7, #28]
 8015aa0:	8b1a      	ldrh	r2, [r3, #24]
 8015aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8015b90 <tcp_input+0x49c>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d11b      	bne.n	8015ae6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	8ada      	ldrh	r2, [r3, #22]
 8015ab2:	4b37      	ldr	r3, [pc, #220]	@ (8015b90 <tcp_input+0x49c>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	885b      	ldrh	r3, [r3, #2]
 8015ab8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d113      	bne.n	8015ae6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	685a      	ldr	r2, [r3, #4]
 8015ac2:	4b34      	ldr	r3, [pc, #208]	@ (8015b94 <tcp_input+0x4a0>)
 8015ac4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015ac6:	429a      	cmp	r2, r3
 8015ac8:	d10d      	bne.n	8015ae6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	681a      	ldr	r2, [r3, #0]
 8015ace:	4b31      	ldr	r3, [pc, #196]	@ (8015b94 <tcp_input+0x4a0>)
 8015ad0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d107      	bne.n	8015ae6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015ad6:	69f8      	ldr	r0, [r7, #28]
 8015ad8:	f000 fb56 	bl	8016188 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7fd fd75 	bl	80135cc <pbuf_free>
        return;
 8015ae2:	e1fd      	b.n	8015ee0 <tcp_input+0x7ec>
        continue;
 8015ae4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	68db      	ldr	r3, [r3, #12]
 8015aea:	61fb      	str	r3, [r7, #28]
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d1bc      	bne.n	8015a6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015af2:	2300      	movs	r3, #0
 8015af4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015af6:	4b2f      	ldr	r3, [pc, #188]	@ (8015bb4 <tcp_input+0x4c0>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	617b      	str	r3, [r7, #20]
 8015afc:	e02a      	b.n	8015b54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015afe:	697b      	ldr	r3, [r7, #20]
 8015b00:	7a1b      	ldrb	r3, [r3, #8]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00c      	beq.n	8015b20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	7a1a      	ldrb	r2, [r3, #8]
 8015b0a:	4b22      	ldr	r3, [pc, #136]	@ (8015b94 <tcp_input+0x4a0>)
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015b12:	3301      	adds	r3, #1
 8015b14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d002      	beq.n	8015b20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	61bb      	str	r3, [r7, #24]
        continue;
 8015b1e:	e016      	b.n	8015b4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	8ada      	ldrh	r2, [r3, #22]
 8015b24:	4b1a      	ldr	r3, [pc, #104]	@ (8015b90 <tcp_input+0x49c>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	885b      	ldrh	r3, [r3, #2]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d10c      	bne.n	8015b4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	681a      	ldr	r2, [r3, #0]
 8015b34:	4b17      	ldr	r3, [pc, #92]	@ (8015b94 <tcp_input+0x4a0>)
 8015b36:	695b      	ldr	r3, [r3, #20]
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d00f      	beq.n	8015b5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015b3c:	697b      	ldr	r3, [r7, #20]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00d      	beq.n	8015b5e <tcp_input+0x46a>
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d009      	beq.n	8015b5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	68db      	ldr	r3, [r3, #12]
 8015b52:	617b      	str	r3, [r7, #20]
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d1d1      	bne.n	8015afe <tcp_input+0x40a>
 8015b5a:	e000      	b.n	8015b5e <tcp_input+0x46a>
            break;
 8015b5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d029      	beq.n	8015bb8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015b64:	69bb      	ldr	r3, [r7, #24]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d00a      	beq.n	8015b80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	68da      	ldr	r2, [r3, #12]
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015b72:	4b10      	ldr	r3, [pc, #64]	@ (8015bb4 <tcp_input+0x4c0>)
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8015bb4 <tcp_input+0x4c0>)
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015b80:	6978      	ldr	r0, [r7, #20]
 8015b82:	f000 fa03 	bl	8015f8c <tcp_listen_input>
      }
      pbuf_free(p);
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7fd fd20 	bl	80135cc <pbuf_free>
      return;
 8015b8c:	e1a8      	b.n	8015ee0 <tcp_input+0x7ec>
 8015b8e:	bf00      	nop
 8015b90:	2000c9d8 	.word	0x2000c9d8
 8015b94:	2000925c 	.word	0x2000925c
 8015b98:	08021844 	.word	0x08021844
 8015b9c:	08021970 	.word	0x08021970
 8015ba0:	08021890 	.word	0x08021890
 8015ba4:	2000c9bc 	.word	0x2000c9bc
 8015ba8:	0802199c 	.word	0x0802199c
 8015bac:	2000c9c0 	.word	0x2000c9c0
 8015bb0:	080219c8 	.word	0x080219c8
 8015bb4:	2000c9b8 	.word	0x2000c9b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	f000 8158 	beq.w	8015e70 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015bc0:	4b95      	ldr	r3, [pc, #596]	@ (8015e18 <tcp_input+0x724>)
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	891a      	ldrh	r2, [r3, #8]
 8015bca:	4b93      	ldr	r3, [pc, #588]	@ (8015e18 <tcp_input+0x724>)
 8015bcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015bce:	4a92      	ldr	r2, [pc, #584]	@ (8015e18 <tcp_input+0x724>)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015bd4:	4b91      	ldr	r3, [pc, #580]	@ (8015e1c <tcp_input+0x728>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	4a8f      	ldr	r2, [pc, #572]	@ (8015e18 <tcp_input+0x724>)
 8015bda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015bdc:	4b90      	ldr	r3, [pc, #576]	@ (8015e20 <tcp_input+0x72c>)
 8015bde:	2200      	movs	r2, #0
 8015be0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015be2:	4b90      	ldr	r3, [pc, #576]	@ (8015e24 <tcp_input+0x730>)
 8015be4:	2200      	movs	r2, #0
 8015be6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015be8:	4b8f      	ldr	r3, [pc, #572]	@ (8015e28 <tcp_input+0x734>)
 8015bea:	2200      	movs	r2, #0
 8015bec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015bee:	4b8f      	ldr	r3, [pc, #572]	@ (8015e2c <tcp_input+0x738>)
 8015bf0:	781b      	ldrb	r3, [r3, #0]
 8015bf2:	f003 0308 	and.w	r3, r3, #8
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d006      	beq.n	8015c08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	7b5b      	ldrb	r3, [r3, #13]
 8015bfe:	f043 0301 	orr.w	r3, r3, #1
 8015c02:	b2da      	uxtb	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d017      	beq.n	8015c40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015c10:	69f8      	ldr	r0, [r7, #28]
 8015c12:	f7ff f885 	bl	8014d20 <tcp_process_refused_data>
 8015c16:	4603      	mov	r3, r0
 8015c18:	f113 0f0d 	cmn.w	r3, #13
 8015c1c:	d007      	beq.n	8015c2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015c1e:	69fb      	ldr	r3, [r7, #28]
 8015c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d00c      	beq.n	8015c40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015c26:	4b82      	ldr	r3, [pc, #520]	@ (8015e30 <tcp_input+0x73c>)
 8015c28:	881b      	ldrh	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d008      	beq.n	8015c40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f040 80e3 	bne.w	8015dfe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015c38:	69f8      	ldr	r0, [r7, #28]
 8015c3a:	f003 fdff 	bl	801983c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015c3e:	e0de      	b.n	8015dfe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015c40:	4a7c      	ldr	r2, [pc, #496]	@ (8015e34 <tcp_input+0x740>)
 8015c42:	69fb      	ldr	r3, [r7, #28]
 8015c44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015c46:	69f8      	ldr	r0, [r7, #28]
 8015c48:	f000 fb18 	bl	801627c <tcp_process>
 8015c4c:	4603      	mov	r3, r0
 8015c4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015c50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015c54:	f113 0f0d 	cmn.w	r3, #13
 8015c58:	f000 80d3 	beq.w	8015e02 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015c5c:	4b71      	ldr	r3, [pc, #452]	@ (8015e24 <tcp_input+0x730>)
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	f003 0308 	and.w	r3, r3, #8
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d015      	beq.n	8015c94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d008      	beq.n	8015c84 <tcp_input+0x590>
 8015c72:	69fb      	ldr	r3, [r7, #28]
 8015c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015c78:	69fa      	ldr	r2, [r7, #28]
 8015c7a:	6912      	ldr	r2, [r2, #16]
 8015c7c:	f06f 010d 	mvn.w	r1, #13
 8015c80:	4610      	mov	r0, r2
 8015c82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015c84:	69f9      	ldr	r1, [r7, #28]
 8015c86:	486c      	ldr	r0, [pc, #432]	@ (8015e38 <tcp_input+0x744>)
 8015c88:	f7ff fbbc 	bl	8015404 <tcp_pcb_remove>
        tcp_free(pcb);
 8015c8c:	69f8      	ldr	r0, [r7, #28]
 8015c8e:	f7fd ff49 	bl	8013b24 <tcp_free>
 8015c92:	e0da      	b.n	8015e4a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015c94:	2300      	movs	r3, #0
 8015c96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015c98:	4b63      	ldr	r3, [pc, #396]	@ (8015e28 <tcp_input+0x734>)
 8015c9a:	881b      	ldrh	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d01d      	beq.n	8015cdc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015ca0:	4b61      	ldr	r3, [pc, #388]	@ (8015e28 <tcp_input+0x734>)
 8015ca2:	881b      	ldrh	r3, [r3, #0]
 8015ca4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015ca6:	69fb      	ldr	r3, [r7, #28]
 8015ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d00a      	beq.n	8015cc6 <tcp_input+0x5d2>
 8015cb0:	69fb      	ldr	r3, [r7, #28]
 8015cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015cb6:	69fa      	ldr	r2, [r7, #28]
 8015cb8:	6910      	ldr	r0, [r2, #16]
 8015cba:	89fa      	ldrh	r2, [r7, #14]
 8015cbc:	69f9      	ldr	r1, [r7, #28]
 8015cbe:	4798      	blx	r3
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	74fb      	strb	r3, [r7, #19]
 8015cc4:	e001      	b.n	8015cca <tcp_input+0x5d6>
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015cca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015cce:	f113 0f0d 	cmn.w	r3, #13
 8015cd2:	f000 8098 	beq.w	8015e06 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015cd6:	4b54      	ldr	r3, [pc, #336]	@ (8015e28 <tcp_input+0x734>)
 8015cd8:	2200      	movs	r2, #0
 8015cda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015cdc:	69f8      	ldr	r0, [r7, #28]
 8015cde:	f000 f915 	bl	8015f0c <tcp_input_delayed_close>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f040 8090 	bne.w	8015e0a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015cea:	4b4d      	ldr	r3, [pc, #308]	@ (8015e20 <tcp_input+0x72c>)
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d041      	beq.n	8015d76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015cf2:	69fb      	ldr	r3, [r7, #28]
 8015cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d006      	beq.n	8015d08 <tcp_input+0x614>
 8015cfa:	4b50      	ldr	r3, [pc, #320]	@ (8015e3c <tcp_input+0x748>)
 8015cfc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015d00:	494f      	ldr	r1, [pc, #316]	@ (8015e40 <tcp_input+0x74c>)
 8015d02:	4850      	ldr	r0, [pc, #320]	@ (8015e44 <tcp_input+0x750>)
 8015d04:	f007 fd1a 	bl	801d73c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015d08:	69fb      	ldr	r3, [r7, #28]
 8015d0a:	8b5b      	ldrh	r3, [r3, #26]
 8015d0c:	f003 0310 	and.w	r3, r3, #16
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d008      	beq.n	8015d26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015d14:	4b42      	ldr	r3, [pc, #264]	@ (8015e20 <tcp_input+0x72c>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fd fc57 	bl	80135cc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015d1e:	69f8      	ldr	r0, [r7, #28]
 8015d20:	f7fe f9e8 	bl	80140f4 <tcp_abort>
            goto aborted;
 8015d24:	e091      	b.n	8015e4a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015d26:	69fb      	ldr	r3, [r7, #28]
 8015d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d00c      	beq.n	8015d4a <tcp_input+0x656>
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	6918      	ldr	r0, [r3, #16]
 8015d3a:	4b39      	ldr	r3, [pc, #228]	@ (8015e20 <tcp_input+0x72c>)
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	2300      	movs	r3, #0
 8015d40:	69f9      	ldr	r1, [r7, #28]
 8015d42:	47a0      	blx	r4
 8015d44:	4603      	mov	r3, r0
 8015d46:	74fb      	strb	r3, [r7, #19]
 8015d48:	e008      	b.n	8015d5c <tcp_input+0x668>
 8015d4a:	4b35      	ldr	r3, [pc, #212]	@ (8015e20 <tcp_input+0x72c>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	2300      	movs	r3, #0
 8015d50:	69f9      	ldr	r1, [r7, #28]
 8015d52:	2000      	movs	r0, #0
 8015d54:	f7ff f8d8 	bl	8014f08 <tcp_recv_null>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015d60:	f113 0f0d 	cmn.w	r3, #13
 8015d64:	d053      	beq.n	8015e0e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015d66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d003      	beq.n	8015d76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8015e20 <tcp_input+0x72c>)
 8015d70:	681a      	ldr	r2, [r3, #0]
 8015d72:	69fb      	ldr	r3, [r7, #28]
 8015d74:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015d76:	4b2b      	ldr	r3, [pc, #172]	@ (8015e24 <tcp_input+0x730>)
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	f003 0320 	and.w	r3, r3, #32
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d030      	beq.n	8015de4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d009      	beq.n	8015d9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015d8a:	69fb      	ldr	r3, [r7, #28]
 8015d8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d8e:	7b5a      	ldrb	r2, [r3, #13]
 8015d90:	69fb      	ldr	r3, [r7, #28]
 8015d92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015d94:	f042 0220 	orr.w	r2, r2, #32
 8015d98:	b2d2      	uxtb	r2, r2
 8015d9a:	735a      	strb	r2, [r3, #13]
 8015d9c:	e022      	b.n	8015de4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015da2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015da6:	d005      	beq.n	8015db4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015da8:	69fb      	ldr	r3, [r7, #28]
 8015daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dac:	3301      	adds	r3, #1
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	69fb      	ldr	r3, [r7, #28]
 8015db2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015db4:	69fb      	ldr	r3, [r7, #28]
 8015db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d00b      	beq.n	8015dd6 <tcp_input+0x6e2>
 8015dbe:	69fb      	ldr	r3, [r7, #28]
 8015dc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015dc4:	69fb      	ldr	r3, [r7, #28]
 8015dc6:	6918      	ldr	r0, [r3, #16]
 8015dc8:	2300      	movs	r3, #0
 8015dca:	2200      	movs	r2, #0
 8015dcc:	69f9      	ldr	r1, [r7, #28]
 8015dce:	47a0      	blx	r4
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	74fb      	strb	r3, [r7, #19]
 8015dd4:	e001      	b.n	8015dda <tcp_input+0x6e6>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015dda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015dde:	f113 0f0d 	cmn.w	r3, #13
 8015de2:	d016      	beq.n	8015e12 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015de4:	4b13      	ldr	r3, [pc, #76]	@ (8015e34 <tcp_input+0x740>)
 8015de6:	2200      	movs	r2, #0
 8015de8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015dea:	69f8      	ldr	r0, [r7, #28]
 8015dec:	f000 f88e 	bl	8015f0c <tcp_input_delayed_close>
 8015df0:	4603      	mov	r3, r0
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d128      	bne.n	8015e48 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015df6:	69f8      	ldr	r0, [r7, #28]
 8015df8:	f002 ff1a 	bl	8018c30 <tcp_output>
 8015dfc:	e025      	b.n	8015e4a <tcp_input+0x756>
        goto aborted;
 8015dfe:	bf00      	nop
 8015e00:	e023      	b.n	8015e4a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015e02:	bf00      	nop
 8015e04:	e021      	b.n	8015e4a <tcp_input+0x756>
              goto aborted;
 8015e06:	bf00      	nop
 8015e08:	e01f      	b.n	8015e4a <tcp_input+0x756>
          goto aborted;
 8015e0a:	bf00      	nop
 8015e0c:	e01d      	b.n	8015e4a <tcp_input+0x756>
            goto aborted;
 8015e0e:	bf00      	nop
 8015e10:	e01b      	b.n	8015e4a <tcp_input+0x756>
              goto aborted;
 8015e12:	bf00      	nop
 8015e14:	e019      	b.n	8015e4a <tcp_input+0x756>
 8015e16:	bf00      	nop
 8015e18:	2000c9c8 	.word	0x2000c9c8
 8015e1c:	2000c9d8 	.word	0x2000c9d8
 8015e20:	2000c9f8 	.word	0x2000c9f8
 8015e24:	2000c9f5 	.word	0x2000c9f5
 8015e28:	2000c9f0 	.word	0x2000c9f0
 8015e2c:	2000c9f4 	.word	0x2000c9f4
 8015e30:	2000c9f2 	.word	0x2000c9f2
 8015e34:	2000c9fc 	.word	0x2000c9fc
 8015e38:	2000c9bc 	.word	0x2000c9bc
 8015e3c:	08021844 	.word	0x08021844
 8015e40:	080219f8 	.word	0x080219f8
 8015e44:	08021890 	.word	0x08021890
          goto aborted;
 8015e48:	bf00      	nop
    tcp_input_pcb = NULL;
 8015e4a:	4b27      	ldr	r3, [pc, #156]	@ (8015ee8 <tcp_input+0x7f4>)
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015e50:	4b26      	ldr	r3, [pc, #152]	@ (8015eec <tcp_input+0x7f8>)
 8015e52:	2200      	movs	r2, #0
 8015e54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015e56:	4b26      	ldr	r3, [pc, #152]	@ (8015ef0 <tcp_input+0x7fc>)
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d03f      	beq.n	8015ede <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8015e5e:	4b24      	ldr	r3, [pc, #144]	@ (8015ef0 <tcp_input+0x7fc>)
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f7fd fbb2 	bl	80135cc <pbuf_free>
      inseg.p = NULL;
 8015e68:	4b21      	ldr	r3, [pc, #132]	@ (8015ef0 <tcp_input+0x7fc>)
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015e6e:	e036      	b.n	8015ede <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015e70:	4b20      	ldr	r3, [pc, #128]	@ (8015ef4 <tcp_input+0x800>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	899b      	ldrh	r3, [r3, #12]
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7fb ffe7 	bl	8011e4c <lwip_htons>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	b2db      	uxtb	r3, r3
 8015e82:	f003 0304 	and.w	r3, r3, #4
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d118      	bne.n	8015ebc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8015ef8 <tcp_input+0x804>)
 8015e8c:	6819      	ldr	r1, [r3, #0]
 8015e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8015efc <tcp_input+0x808>)
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	461a      	mov	r2, r3
 8015e94:	4b1a      	ldr	r3, [pc, #104]	@ (8015f00 <tcp_input+0x80c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e9a:	4b16      	ldr	r3, [pc, #88]	@ (8015ef4 <tcp_input+0x800>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e9e:	885b      	ldrh	r3, [r3, #2]
 8015ea0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ea2:	4a14      	ldr	r2, [pc, #80]	@ (8015ef4 <tcp_input+0x800>)
 8015ea4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ea6:	8812      	ldrh	r2, [r2, #0]
 8015ea8:	b292      	uxth	r2, r2
 8015eaa:	9202      	str	r2, [sp, #8]
 8015eac:	9301      	str	r3, [sp, #4]
 8015eae:	4b15      	ldr	r3, [pc, #84]	@ (8015f04 <tcp_input+0x810>)
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	4b15      	ldr	r3, [pc, #84]	@ (8015f08 <tcp_input+0x814>)
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	2000      	movs	r0, #0
 8015eb8:	f003 fc6e 	bl	8019798 <tcp_rst>
    pbuf_free(p);
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f7fd fb85 	bl	80135cc <pbuf_free>
  return;
 8015ec2:	e00c      	b.n	8015ede <tcp_input+0x7ea>
    goto dropped;
 8015ec4:	bf00      	nop
 8015ec6:	e006      	b.n	8015ed6 <tcp_input+0x7e2>
    goto dropped;
 8015ec8:	bf00      	nop
 8015eca:	e004      	b.n	8015ed6 <tcp_input+0x7e2>
    goto dropped;
 8015ecc:	bf00      	nop
 8015ece:	e002      	b.n	8015ed6 <tcp_input+0x7e2>
      goto dropped;
 8015ed0:	bf00      	nop
 8015ed2:	e000      	b.n	8015ed6 <tcp_input+0x7e2>
      goto dropped;
 8015ed4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f7fd fb78 	bl	80135cc <pbuf_free>
 8015edc:	e000      	b.n	8015ee0 <tcp_input+0x7ec>
  return;
 8015ede:	bf00      	nop
}
 8015ee0:	3724      	adds	r7, #36	@ 0x24
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd90      	pop	{r4, r7, pc}
 8015ee6:	bf00      	nop
 8015ee8:	2000c9fc 	.word	0x2000c9fc
 8015eec:	2000c9f8 	.word	0x2000c9f8
 8015ef0:	2000c9c8 	.word	0x2000c9c8
 8015ef4:	2000c9d8 	.word	0x2000c9d8
 8015ef8:	2000c9ec 	.word	0x2000c9ec
 8015efc:	2000c9f2 	.word	0x2000c9f2
 8015f00:	2000c9e8 	.word	0x2000c9e8
 8015f04:	2000926c 	.word	0x2000926c
 8015f08:	20009270 	.word	0x20009270

08015f0c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d106      	bne.n	8015f28 <tcp_input_delayed_close+0x1c>
 8015f1a:	4b17      	ldr	r3, [pc, #92]	@ (8015f78 <tcp_input_delayed_close+0x6c>)
 8015f1c:	f240 225a 	movw	r2, #602	@ 0x25a
 8015f20:	4916      	ldr	r1, [pc, #88]	@ (8015f7c <tcp_input_delayed_close+0x70>)
 8015f22:	4817      	ldr	r0, [pc, #92]	@ (8015f80 <tcp_input_delayed_close+0x74>)
 8015f24:	f007 fc0a 	bl	801d73c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015f28:	4b16      	ldr	r3, [pc, #88]	@ (8015f84 <tcp_input_delayed_close+0x78>)
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	f003 0310 	and.w	r3, r3, #16
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d01c      	beq.n	8015f6e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	8b5b      	ldrh	r3, [r3, #26]
 8015f38:	f003 0310 	and.w	r3, r3, #16
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d10d      	bne.n	8015f5c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d008      	beq.n	8015f5c <tcp_input_delayed_close+0x50>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	6912      	ldr	r2, [r2, #16]
 8015f54:	f06f 010e 	mvn.w	r1, #14
 8015f58:	4610      	mov	r0, r2
 8015f5a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015f5c:	6879      	ldr	r1, [r7, #4]
 8015f5e:	480a      	ldr	r0, [pc, #40]	@ (8015f88 <tcp_input_delayed_close+0x7c>)
 8015f60:	f7ff fa50 	bl	8015404 <tcp_pcb_remove>
    tcp_free(pcb);
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f7fd fddd 	bl	8013b24 <tcp_free>
    return 1;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	e000      	b.n	8015f70 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015f6e:	2300      	movs	r3, #0
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	3708      	adds	r7, #8
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	08021844 	.word	0x08021844
 8015f7c:	08021a14 	.word	0x08021a14
 8015f80:	08021890 	.word	0x08021890
 8015f84:	2000c9f5 	.word	0x2000c9f5
 8015f88:	2000c9bc 	.word	0x2000c9bc

08015f8c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015f8c:	b590      	push	{r4, r7, lr}
 8015f8e:	b08b      	sub	sp, #44	@ 0x2c
 8015f90:	af04      	add	r7, sp, #16
 8015f92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015f94:	4b6f      	ldr	r3, [pc, #444]	@ (8016154 <tcp_listen_input+0x1c8>)
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	f003 0304 	and.w	r3, r3, #4
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	f040 80d2 	bne.w	8016146 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d106      	bne.n	8015fb6 <tcp_listen_input+0x2a>
 8015fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8016158 <tcp_listen_input+0x1cc>)
 8015faa:	f240 2281 	movw	r2, #641	@ 0x281
 8015fae:	496b      	ldr	r1, [pc, #428]	@ (801615c <tcp_listen_input+0x1d0>)
 8015fb0:	486b      	ldr	r0, [pc, #428]	@ (8016160 <tcp_listen_input+0x1d4>)
 8015fb2:	f007 fbc3 	bl	801d73c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015fb6:	4b67      	ldr	r3, [pc, #412]	@ (8016154 <tcp_listen_input+0x1c8>)
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	f003 0310 	and.w	r3, r3, #16
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d019      	beq.n	8015ff6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fc2:	4b68      	ldr	r3, [pc, #416]	@ (8016164 <tcp_listen_input+0x1d8>)
 8015fc4:	6819      	ldr	r1, [r3, #0]
 8015fc6:	4b68      	ldr	r3, [pc, #416]	@ (8016168 <tcp_listen_input+0x1dc>)
 8015fc8:	881b      	ldrh	r3, [r3, #0]
 8015fca:	461a      	mov	r2, r3
 8015fcc:	4b67      	ldr	r3, [pc, #412]	@ (801616c <tcp_listen_input+0x1e0>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fd2:	4b67      	ldr	r3, [pc, #412]	@ (8016170 <tcp_listen_input+0x1e4>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fd6:	885b      	ldrh	r3, [r3, #2]
 8015fd8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015fda:	4a65      	ldr	r2, [pc, #404]	@ (8016170 <tcp_listen_input+0x1e4>)
 8015fdc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015fde:	8812      	ldrh	r2, [r2, #0]
 8015fe0:	b292      	uxth	r2, r2
 8015fe2:	9202      	str	r2, [sp, #8]
 8015fe4:	9301      	str	r3, [sp, #4]
 8015fe6:	4b63      	ldr	r3, [pc, #396]	@ (8016174 <tcp_listen_input+0x1e8>)
 8015fe8:	9300      	str	r3, [sp, #0]
 8015fea:	4b63      	ldr	r3, [pc, #396]	@ (8016178 <tcp_listen_input+0x1ec>)
 8015fec:	4602      	mov	r2, r0
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f003 fbd2 	bl	8019798 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015ff4:	e0a9      	b.n	801614a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015ff6:	4b57      	ldr	r3, [pc, #348]	@ (8016154 <tcp_listen_input+0x1c8>)
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	f003 0302 	and.w	r3, r3, #2
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	f000 80a3 	beq.w	801614a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	7d5b      	ldrb	r3, [r3, #21]
 8016008:	4618      	mov	r0, r3
 801600a:	f7ff f8a1 	bl	8015150 <tcp_alloc>
 801600e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d111      	bne.n	801603a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	699b      	ldr	r3, [r3, #24]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00a      	beq.n	8016034 <tcp_listen_input+0xa8>
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	699b      	ldr	r3, [r3, #24]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	6910      	ldr	r0, [r2, #16]
 8016026:	f04f 32ff 	mov.w	r2, #4294967295
 801602a:	2100      	movs	r1, #0
 801602c:	4798      	blx	r3
 801602e:	4603      	mov	r3, r0
 8016030:	73bb      	strb	r3, [r7, #14]
      return;
 8016032:	e08b      	b.n	801614c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016034:	23f0      	movs	r3, #240	@ 0xf0
 8016036:	73bb      	strb	r3, [r7, #14]
      return;
 8016038:	e088      	b.n	801614c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801603a:	4b50      	ldr	r3, [pc, #320]	@ (801617c <tcp_listen_input+0x1f0>)
 801603c:	695a      	ldr	r2, [r3, #20]
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016042:	4b4e      	ldr	r3, [pc, #312]	@ (801617c <tcp_listen_input+0x1f0>)
 8016044:	691a      	ldr	r2, [r3, #16]
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	8ada      	ldrh	r2, [r3, #22]
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016052:	4b47      	ldr	r3, [pc, #284]	@ (8016170 <tcp_listen_input+0x1e4>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	881b      	ldrh	r3, [r3, #0]
 8016058:	b29a      	uxth	r2, r3
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	2203      	movs	r2, #3
 8016062:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016064:	4b41      	ldr	r3, [pc, #260]	@ (801616c <tcp_listen_input+0x1e0>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	1c5a      	adds	r2, r3, #1
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016072:	697b      	ldr	r3, [r7, #20]
 8016074:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016076:	6978      	ldr	r0, [r7, #20]
 8016078:	f7ff fa58 	bl	801552c <tcp_next_iss>
 801607c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	693a      	ldr	r2, [r7, #16]
 8016082:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016084:	697b      	ldr	r3, [r7, #20]
 8016086:	693a      	ldr	r2, [r7, #16]
 8016088:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	693a      	ldr	r2, [r7, #16]
 801608e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016090:	697b      	ldr	r3, [r7, #20]
 8016092:	693a      	ldr	r2, [r7, #16]
 8016094:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016096:	4b35      	ldr	r3, [pc, #212]	@ (801616c <tcp_listen_input+0x1e0>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	1e5a      	subs	r2, r3, #1
 801609c:	697b      	ldr	r3, [r7, #20]
 801609e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	691a      	ldr	r2, [r3, #16]
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80160a8:	697b      	ldr	r3, [r7, #20]
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	7a5b      	ldrb	r3, [r3, #9]
 80160b2:	f003 030c 	and.w	r3, r3, #12
 80160b6:	b2da      	uxtb	r2, r3
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	7a1a      	ldrb	r2, [r3, #8]
 80160c0:	697b      	ldr	r3, [r7, #20]
 80160c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80160c4:	4b2e      	ldr	r3, [pc, #184]	@ (8016180 <tcp_listen_input+0x1f4>)
 80160c6:	681a      	ldr	r2, [r3, #0]
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	60da      	str	r2, [r3, #12]
 80160cc:	4a2c      	ldr	r2, [pc, #176]	@ (8016180 <tcp_listen_input+0x1f4>)
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	6013      	str	r3, [r2, #0]
 80160d2:	f003 fd23 	bl	8019b1c <tcp_timer_needed>
 80160d6:	4b2b      	ldr	r3, [pc, #172]	@ (8016184 <tcp_listen_input+0x1f8>)
 80160d8:	2201      	movs	r2, #1
 80160da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80160dc:	6978      	ldr	r0, [r7, #20]
 80160de:	f001 fd8b 	bl	8017bf8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80160e2:	4b23      	ldr	r3, [pc, #140]	@ (8016170 <tcp_listen_input+0x1e4>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	89db      	ldrh	r3, [r3, #14]
 80160e8:	b29a      	uxth	r2, r3
 80160ea:	697b      	ldr	r3, [r7, #20]
 80160ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80160f6:	697b      	ldr	r3, [r7, #20]
 80160f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	3304      	adds	r3, #4
 8016104:	4618      	mov	r0, r3
 8016106:	f005 f8e5 	bl	801b2d4 <ip4_route>
 801610a:	4601      	mov	r1, r0
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	3304      	adds	r3, #4
 8016110:	461a      	mov	r2, r3
 8016112:	4620      	mov	r0, r4
 8016114:	f7ff fa30 	bl	8015578 <tcp_eff_send_mss_netif>
 8016118:	4603      	mov	r3, r0
 801611a:	461a      	mov	r2, r3
 801611c:	697b      	ldr	r3, [r7, #20]
 801611e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016120:	2112      	movs	r1, #18
 8016122:	6978      	ldr	r0, [r7, #20]
 8016124:	f002 fc96 	bl	8018a54 <tcp_enqueue_flags>
 8016128:	4603      	mov	r3, r0
 801612a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801612c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d004      	beq.n	801613e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016134:	2100      	movs	r1, #0
 8016136:	6978      	ldr	r0, [r7, #20]
 8016138:	f7fd ff1e 	bl	8013f78 <tcp_abandon>
      return;
 801613c:	e006      	b.n	801614c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801613e:	6978      	ldr	r0, [r7, #20]
 8016140:	f002 fd76 	bl	8018c30 <tcp_output>
  return;
 8016144:	e001      	b.n	801614a <tcp_listen_input+0x1be>
    return;
 8016146:	bf00      	nop
 8016148:	e000      	b.n	801614c <tcp_listen_input+0x1c0>
  return;
 801614a:	bf00      	nop
}
 801614c:	371c      	adds	r7, #28
 801614e:	46bd      	mov	sp, r7
 8016150:	bd90      	pop	{r4, r7, pc}
 8016152:	bf00      	nop
 8016154:	2000c9f4 	.word	0x2000c9f4
 8016158:	08021844 	.word	0x08021844
 801615c:	08021a3c 	.word	0x08021a3c
 8016160:	08021890 	.word	0x08021890
 8016164:	2000c9ec 	.word	0x2000c9ec
 8016168:	2000c9f2 	.word	0x2000c9f2
 801616c:	2000c9e8 	.word	0x2000c9e8
 8016170:	2000c9d8 	.word	0x2000c9d8
 8016174:	2000926c 	.word	0x2000926c
 8016178:	20009270 	.word	0x20009270
 801617c:	2000925c 	.word	0x2000925c
 8016180:	2000c9bc 	.word	0x2000c9bc
 8016184:	2000c9c4 	.word	0x2000c9c4

08016188 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b086      	sub	sp, #24
 801618c:	af04      	add	r7, sp, #16
 801618e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016190:	4b2f      	ldr	r3, [pc, #188]	@ (8016250 <tcp_timewait_input+0xc8>)
 8016192:	781b      	ldrb	r3, [r3, #0]
 8016194:	f003 0304 	and.w	r3, r3, #4
 8016198:	2b00      	cmp	r3, #0
 801619a:	d153      	bne.n	8016244 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d106      	bne.n	80161b0 <tcp_timewait_input+0x28>
 80161a2:	4b2c      	ldr	r3, [pc, #176]	@ (8016254 <tcp_timewait_input+0xcc>)
 80161a4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80161a8:	492b      	ldr	r1, [pc, #172]	@ (8016258 <tcp_timewait_input+0xd0>)
 80161aa:	482c      	ldr	r0, [pc, #176]	@ (801625c <tcp_timewait_input+0xd4>)
 80161ac:	f007 fac6 	bl	801d73c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80161b0:	4b27      	ldr	r3, [pc, #156]	@ (8016250 <tcp_timewait_input+0xc8>)
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 0302 	and.w	r3, r3, #2
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d02a      	beq.n	8016212 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80161bc:	4b28      	ldr	r3, [pc, #160]	@ (8016260 <tcp_timewait_input+0xd8>)
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161c4:	1ad3      	subs	r3, r2, r3
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	db2d      	blt.n	8016226 <tcp_timewait_input+0x9e>
 80161ca:	4b25      	ldr	r3, [pc, #148]	@ (8016260 <tcp_timewait_input+0xd8>)
 80161cc:	681a      	ldr	r2, [r3, #0]
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161d2:	6879      	ldr	r1, [r7, #4]
 80161d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80161d6:	440b      	add	r3, r1
 80161d8:	1ad3      	subs	r3, r2, r3
 80161da:	2b00      	cmp	r3, #0
 80161dc:	dc23      	bgt.n	8016226 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161de:	4b21      	ldr	r3, [pc, #132]	@ (8016264 <tcp_timewait_input+0xdc>)
 80161e0:	6819      	ldr	r1, [r3, #0]
 80161e2:	4b21      	ldr	r3, [pc, #132]	@ (8016268 <tcp_timewait_input+0xe0>)
 80161e4:	881b      	ldrh	r3, [r3, #0]
 80161e6:	461a      	mov	r2, r3
 80161e8:	4b1d      	ldr	r3, [pc, #116]	@ (8016260 <tcp_timewait_input+0xd8>)
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161ee:	4b1f      	ldr	r3, [pc, #124]	@ (801626c <tcp_timewait_input+0xe4>)
 80161f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161f2:	885b      	ldrh	r3, [r3, #2]
 80161f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80161f6:	4a1d      	ldr	r2, [pc, #116]	@ (801626c <tcp_timewait_input+0xe4>)
 80161f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80161fa:	8812      	ldrh	r2, [r2, #0]
 80161fc:	b292      	uxth	r2, r2
 80161fe:	9202      	str	r2, [sp, #8]
 8016200:	9301      	str	r3, [sp, #4]
 8016202:	4b1b      	ldr	r3, [pc, #108]	@ (8016270 <tcp_timewait_input+0xe8>)
 8016204:	9300      	str	r3, [sp, #0]
 8016206:	4b1b      	ldr	r3, [pc, #108]	@ (8016274 <tcp_timewait_input+0xec>)
 8016208:	4602      	mov	r2, r0
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f003 fac4 	bl	8019798 <tcp_rst>
      return;
 8016210:	e01b      	b.n	801624a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016212:	4b0f      	ldr	r3, [pc, #60]	@ (8016250 <tcp_timewait_input+0xc8>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	f003 0301 	and.w	r3, r3, #1
 801621a:	2b00      	cmp	r3, #0
 801621c:	d003      	beq.n	8016226 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801621e:	4b16      	ldr	r3, [pc, #88]	@ (8016278 <tcp_timewait_input+0xf0>)
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016226:	4b10      	ldr	r3, [pc, #64]	@ (8016268 <tcp_timewait_input+0xe0>)
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d00c      	beq.n	8016248 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	8b5b      	ldrh	r3, [r3, #26]
 8016232:	f043 0302 	orr.w	r3, r3, #2
 8016236:	b29a      	uxth	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f002 fcf7 	bl	8018c30 <tcp_output>
  }
  return;
 8016242:	e001      	b.n	8016248 <tcp_timewait_input+0xc0>
    return;
 8016244:	bf00      	nop
 8016246:	e000      	b.n	801624a <tcp_timewait_input+0xc2>
  return;
 8016248:	bf00      	nop
}
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}
 8016250:	2000c9f4 	.word	0x2000c9f4
 8016254:	08021844 	.word	0x08021844
 8016258:	08021a5c 	.word	0x08021a5c
 801625c:	08021890 	.word	0x08021890
 8016260:	2000c9e8 	.word	0x2000c9e8
 8016264:	2000c9ec 	.word	0x2000c9ec
 8016268:	2000c9f2 	.word	0x2000c9f2
 801626c:	2000c9d8 	.word	0x2000c9d8
 8016270:	2000926c 	.word	0x2000926c
 8016274:	20009270 	.word	0x20009270
 8016278:	2000c9b0 	.word	0x2000c9b0

0801627c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801627c:	b590      	push	{r4, r7, lr}
 801627e:	b08d      	sub	sp, #52	@ 0x34
 8016280:	af04      	add	r7, sp, #16
 8016282:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016284:	2300      	movs	r3, #0
 8016286:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016288:	2300      	movs	r3, #0
 801628a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d106      	bne.n	80162a0 <tcp_process+0x24>
 8016292:	4b9d      	ldr	r3, [pc, #628]	@ (8016508 <tcp_process+0x28c>)
 8016294:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016298:	499c      	ldr	r1, [pc, #624]	@ (801650c <tcp_process+0x290>)
 801629a:	489d      	ldr	r0, [pc, #628]	@ (8016510 <tcp_process+0x294>)
 801629c:	f007 fa4e 	bl	801d73c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80162a0:	4b9c      	ldr	r3, [pc, #624]	@ (8016514 <tcp_process+0x298>)
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	f003 0304 	and.w	r3, r3, #4
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d04e      	beq.n	801634a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7d1b      	ldrb	r3, [r3, #20]
 80162b0:	2b02      	cmp	r3, #2
 80162b2:	d108      	bne.n	80162c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80162b8:	4b97      	ldr	r3, [pc, #604]	@ (8016518 <tcp_process+0x29c>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d123      	bne.n	8016308 <tcp_process+0x8c>
        acceptable = 1;
 80162c0:	2301      	movs	r3, #1
 80162c2:	76fb      	strb	r3, [r7, #27]
 80162c4:	e020      	b.n	8016308 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80162ca:	4b94      	ldr	r3, [pc, #592]	@ (801651c <tcp_process+0x2a0>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d102      	bne.n	80162d8 <tcp_process+0x5c>
        acceptable = 1;
 80162d2:	2301      	movs	r3, #1
 80162d4:	76fb      	strb	r3, [r7, #27]
 80162d6:	e017      	b.n	8016308 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80162d8:	4b90      	ldr	r3, [pc, #576]	@ (801651c <tcp_process+0x2a0>)
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162e0:	1ad3      	subs	r3, r2, r3
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	db10      	blt.n	8016308 <tcp_process+0x8c>
 80162e6:	4b8d      	ldr	r3, [pc, #564]	@ (801651c <tcp_process+0x2a0>)
 80162e8:	681a      	ldr	r2, [r3, #0]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162ee:	6879      	ldr	r1, [r7, #4]
 80162f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80162f2:	440b      	add	r3, r1
 80162f4:	1ad3      	subs	r3, r2, r3
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	dc06      	bgt.n	8016308 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	8b5b      	ldrh	r3, [r3, #26]
 80162fe:	f043 0302 	orr.w	r3, r3, #2
 8016302:	b29a      	uxth	r2, r3
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016308:	7efb      	ldrb	r3, [r7, #27]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d01b      	beq.n	8016346 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	7d1b      	ldrb	r3, [r3, #20]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d106      	bne.n	8016324 <tcp_process+0xa8>
 8016316:	4b7c      	ldr	r3, [pc, #496]	@ (8016508 <tcp_process+0x28c>)
 8016318:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801631c:	4980      	ldr	r1, [pc, #512]	@ (8016520 <tcp_process+0x2a4>)
 801631e:	487c      	ldr	r0, [pc, #496]	@ (8016510 <tcp_process+0x294>)
 8016320:	f007 fa0c 	bl	801d73c <iprintf>
      recv_flags |= TF_RESET;
 8016324:	4b7f      	ldr	r3, [pc, #508]	@ (8016524 <tcp_process+0x2a8>)
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	f043 0308 	orr.w	r3, r3, #8
 801632c:	b2da      	uxtb	r2, r3
 801632e:	4b7d      	ldr	r3, [pc, #500]	@ (8016524 <tcp_process+0x2a8>)
 8016330:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	8b5b      	ldrh	r3, [r3, #26]
 8016336:	f023 0301 	bic.w	r3, r3, #1
 801633a:	b29a      	uxth	r2, r3
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016340:	f06f 030d 	mvn.w	r3, #13
 8016344:	e37a      	b.n	8016a3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016346:	2300      	movs	r3, #0
 8016348:	e378      	b.n	8016a3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801634a:	4b72      	ldr	r3, [pc, #456]	@ (8016514 <tcp_process+0x298>)
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	f003 0302 	and.w	r3, r3, #2
 8016352:	2b00      	cmp	r3, #0
 8016354:	d010      	beq.n	8016378 <tcp_process+0xfc>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	7d1b      	ldrb	r3, [r3, #20]
 801635a:	2b02      	cmp	r3, #2
 801635c:	d00c      	beq.n	8016378 <tcp_process+0xfc>
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	7d1b      	ldrb	r3, [r3, #20]
 8016362:	2b03      	cmp	r3, #3
 8016364:	d008      	beq.n	8016378 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	8b5b      	ldrh	r3, [r3, #26]
 801636a:	f043 0302 	orr.w	r3, r3, #2
 801636e:	b29a      	uxth	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016374:	2300      	movs	r3, #0
 8016376:	e361      	b.n	8016a3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	8b5b      	ldrh	r3, [r3, #26]
 801637c:	f003 0310 	and.w	r3, r3, #16
 8016380:	2b00      	cmp	r3, #0
 8016382:	d103      	bne.n	801638c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016384:	4b68      	ldr	r3, [pc, #416]	@ (8016528 <tcp_process+0x2ac>)
 8016386:	681a      	ldr	r2, [r3, #0]
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2200      	movs	r2, #0
 8016390:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2200      	movs	r2, #0
 8016398:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801639c:	6878      	ldr	r0, [r7, #4]
 801639e:	f001 fc2b 	bl	8017bf8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	7d1b      	ldrb	r3, [r3, #20]
 80163a6:	3b02      	subs	r3, #2
 80163a8:	2b07      	cmp	r3, #7
 80163aa:	f200 8337 	bhi.w	8016a1c <tcp_process+0x7a0>
 80163ae:	a201      	add	r2, pc, #4	@ (adr r2, 80163b4 <tcp_process+0x138>)
 80163b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163b4:	080163d5 	.word	0x080163d5
 80163b8:	08016605 	.word	0x08016605
 80163bc:	0801677d 	.word	0x0801677d
 80163c0:	080167a7 	.word	0x080167a7
 80163c4:	080168cb 	.word	0x080168cb
 80163c8:	0801677d 	.word	0x0801677d
 80163cc:	08016957 	.word	0x08016957
 80163d0:	080169e7 	.word	0x080169e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80163d4:	4b4f      	ldr	r3, [pc, #316]	@ (8016514 <tcp_process+0x298>)
 80163d6:	781b      	ldrb	r3, [r3, #0]
 80163d8:	f003 0310 	and.w	r3, r3, #16
 80163dc:	2b00      	cmp	r3, #0
 80163de:	f000 80e4 	beq.w	80165aa <tcp_process+0x32e>
 80163e2:	4b4c      	ldr	r3, [pc, #304]	@ (8016514 <tcp_process+0x298>)
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	f003 0302 	and.w	r3, r3, #2
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	f000 80dd 	beq.w	80165aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163f4:	1c5a      	adds	r2, r3, #1
 80163f6:	4b48      	ldr	r3, [pc, #288]	@ (8016518 <tcp_process+0x29c>)
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	f040 80d5 	bne.w	80165aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016400:	4b46      	ldr	r3, [pc, #280]	@ (801651c <tcp_process+0x2a0>)
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	1c5a      	adds	r2, r3, #1
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016412:	4b41      	ldr	r3, [pc, #260]	@ (8016518 <tcp_process+0x29c>)
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801641a:	4b44      	ldr	r3, [pc, #272]	@ (801652c <tcp_process+0x2b0>)
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	89db      	ldrh	r3, [r3, #14]
 8016420:	b29a      	uxth	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016434:	4b39      	ldr	r3, [pc, #228]	@ (801651c <tcp_process+0x2a0>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	1e5a      	subs	r2, r3, #1
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2204      	movs	r2, #4
 8016442:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	3304      	adds	r3, #4
 801644c:	4618      	mov	r0, r3
 801644e:	f004 ff41 	bl	801b2d4 <ip4_route>
 8016452:	4601      	mov	r1, r0
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	3304      	adds	r3, #4
 8016458:	461a      	mov	r2, r3
 801645a:	4620      	mov	r0, r4
 801645c:	f7ff f88c 	bl	8015578 <tcp_eff_send_mss_netif>
 8016460:	4603      	mov	r3, r0
 8016462:	461a      	mov	r2, r3
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801646c:	009a      	lsls	r2, r3, #2
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016472:	005b      	lsls	r3, r3, #1
 8016474:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016478:	428b      	cmp	r3, r1
 801647a:	bf38      	it	cc
 801647c:	460b      	movcc	r3, r1
 801647e:	429a      	cmp	r2, r3
 8016480:	d204      	bcs.n	801648c <tcp_process+0x210>
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016486:	009b      	lsls	r3, r3, #2
 8016488:	b29b      	uxth	r3, r3
 801648a:	e00d      	b.n	80164a8 <tcp_process+0x22c>
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016490:	005b      	lsls	r3, r3, #1
 8016492:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016496:	4293      	cmp	r3, r2
 8016498:	d904      	bls.n	80164a4 <tcp_process+0x228>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801649e:	005b      	lsls	r3, r3, #1
 80164a0:	b29b      	uxth	r3, r3
 80164a2:	e001      	b.n	80164a8 <tcp_process+0x22c>
 80164a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d106      	bne.n	80164c6 <tcp_process+0x24a>
 80164b8:	4b13      	ldr	r3, [pc, #76]	@ (8016508 <tcp_process+0x28c>)
 80164ba:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80164be:	491c      	ldr	r1, [pc, #112]	@ (8016530 <tcp_process+0x2b4>)
 80164c0:	4813      	ldr	r0, [pc, #76]	@ (8016510 <tcp_process+0x294>)
 80164c2:	f007 f93b 	bl	801d73c <iprintf>
        --pcb->snd_queuelen;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80164cc:	3b01      	subs	r3, #1
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80164da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80164dc:	69fb      	ldr	r3, [r7, #28]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d12a      	bne.n	8016538 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d106      	bne.n	80164fc <tcp_process+0x280>
 80164ee:	4b06      	ldr	r3, [pc, #24]	@ (8016508 <tcp_process+0x28c>)
 80164f0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80164f4:	490f      	ldr	r1, [pc, #60]	@ (8016534 <tcp_process+0x2b8>)
 80164f6:	4806      	ldr	r0, [pc, #24]	@ (8016510 <tcp_process+0x294>)
 80164f8:	f007 f920 	bl	801d73c <iprintf>
          pcb->unsent = rseg->next;
 80164fc:	69fb      	ldr	r3, [r7, #28]
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016504:	e01c      	b.n	8016540 <tcp_process+0x2c4>
 8016506:	bf00      	nop
 8016508:	08021844 	.word	0x08021844
 801650c:	08021a7c 	.word	0x08021a7c
 8016510:	08021890 	.word	0x08021890
 8016514:	2000c9f4 	.word	0x2000c9f4
 8016518:	2000c9ec 	.word	0x2000c9ec
 801651c:	2000c9e8 	.word	0x2000c9e8
 8016520:	08021a98 	.word	0x08021a98
 8016524:	2000c9f5 	.word	0x2000c9f5
 8016528:	2000c9b0 	.word	0x2000c9b0
 801652c:	2000c9d8 	.word	0x2000c9d8
 8016530:	08021ab8 	.word	0x08021ab8
 8016534:	08021ad0 	.word	0x08021ad0
        } else {
          pcb->unacked = rseg->next;
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016540:	69f8      	ldr	r0, [r7, #28]
 8016542:	f7fe fc7e 	bl	8014e42 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801654a:	2b00      	cmp	r3, #0
 801654c:	d104      	bne.n	8016558 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016554:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016556:	e006      	b.n	8016566 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	2200      	movs	r2, #0
 801655c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	2200      	movs	r2, #0
 8016562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00a      	beq.n	8016586 <tcp_process+0x30a>
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	6910      	ldr	r0, [r2, #16]
 801657a:	2200      	movs	r2, #0
 801657c:	6879      	ldr	r1, [r7, #4]
 801657e:	4798      	blx	r3
 8016580:	4603      	mov	r3, r0
 8016582:	76bb      	strb	r3, [r7, #26]
 8016584:	e001      	b.n	801658a <tcp_process+0x30e>
 8016586:	2300      	movs	r3, #0
 8016588:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801658a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801658e:	f113 0f0d 	cmn.w	r3, #13
 8016592:	d102      	bne.n	801659a <tcp_process+0x31e>
          return ERR_ABRT;
 8016594:	f06f 030c 	mvn.w	r3, #12
 8016598:	e250      	b.n	8016a3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	8b5b      	ldrh	r3, [r3, #26]
 801659e:	f043 0302 	orr.w	r3, r3, #2
 80165a2:	b29a      	uxth	r2, r3
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80165a8:	e23a      	b.n	8016a20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80165aa:	4b98      	ldr	r3, [pc, #608]	@ (801680c <tcp_process+0x590>)
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	f003 0310 	and.w	r3, r3, #16
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	f000 8234 	beq.w	8016a20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80165b8:	4b95      	ldr	r3, [pc, #596]	@ (8016810 <tcp_process+0x594>)
 80165ba:	6819      	ldr	r1, [r3, #0]
 80165bc:	4b95      	ldr	r3, [pc, #596]	@ (8016814 <tcp_process+0x598>)
 80165be:	881b      	ldrh	r3, [r3, #0]
 80165c0:	461a      	mov	r2, r3
 80165c2:	4b95      	ldr	r3, [pc, #596]	@ (8016818 <tcp_process+0x59c>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80165c8:	4b94      	ldr	r3, [pc, #592]	@ (801681c <tcp_process+0x5a0>)
 80165ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80165cc:	885b      	ldrh	r3, [r3, #2]
 80165ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80165d0:	4a92      	ldr	r2, [pc, #584]	@ (801681c <tcp_process+0x5a0>)
 80165d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80165d4:	8812      	ldrh	r2, [r2, #0]
 80165d6:	b292      	uxth	r2, r2
 80165d8:	9202      	str	r2, [sp, #8]
 80165da:	9301      	str	r3, [sp, #4]
 80165dc:	4b90      	ldr	r3, [pc, #576]	@ (8016820 <tcp_process+0x5a4>)
 80165de:	9300      	str	r3, [sp, #0]
 80165e0:	4b90      	ldr	r3, [pc, #576]	@ (8016824 <tcp_process+0x5a8>)
 80165e2:	4602      	mov	r2, r0
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f003 f8d7 	bl	8019798 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80165f0:	2b05      	cmp	r3, #5
 80165f2:	f200 8215 	bhi.w	8016a20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2200      	movs	r2, #0
 80165fa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f002 fea3 	bl	8019348 <tcp_rexmit_rto>
      break;
 8016602:	e20d      	b.n	8016a20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016604:	4b81      	ldr	r3, [pc, #516]	@ (801680c <tcp_process+0x590>)
 8016606:	781b      	ldrb	r3, [r3, #0]
 8016608:	f003 0310 	and.w	r3, r3, #16
 801660c:	2b00      	cmp	r3, #0
 801660e:	f000 80a1 	beq.w	8016754 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016612:	4b7f      	ldr	r3, [pc, #508]	@ (8016810 <tcp_process+0x594>)
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	3b01      	subs	r3, #1
 801661e:	2b00      	cmp	r3, #0
 8016620:	db7e      	blt.n	8016720 <tcp_process+0x4a4>
 8016622:	4b7b      	ldr	r3, [pc, #492]	@ (8016810 <tcp_process+0x594>)
 8016624:	681a      	ldr	r2, [r3, #0]
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801662a:	1ad3      	subs	r3, r2, r3
 801662c:	2b00      	cmp	r3, #0
 801662e:	dc77      	bgt.n	8016720 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	2204      	movs	r2, #4
 8016634:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801663a:	2b00      	cmp	r3, #0
 801663c:	d102      	bne.n	8016644 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801663e:	23fa      	movs	r3, #250	@ 0xfa
 8016640:	76bb      	strb	r3, [r7, #26]
 8016642:	e01d      	b.n	8016680 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016648:	699b      	ldr	r3, [r3, #24]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d106      	bne.n	801665c <tcp_process+0x3e0>
 801664e:	4b76      	ldr	r3, [pc, #472]	@ (8016828 <tcp_process+0x5ac>)
 8016650:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8016654:	4975      	ldr	r1, [pc, #468]	@ (801682c <tcp_process+0x5b0>)
 8016656:	4876      	ldr	r0, [pc, #472]	@ (8016830 <tcp_process+0x5b4>)
 8016658:	f007 f870 	bl	801d73c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016660:	699b      	ldr	r3, [r3, #24]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d00a      	beq.n	801667c <tcp_process+0x400>
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801666a:	699b      	ldr	r3, [r3, #24]
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	6910      	ldr	r0, [r2, #16]
 8016670:	2200      	movs	r2, #0
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	4798      	blx	r3
 8016676:	4603      	mov	r3, r0
 8016678:	76bb      	strb	r3, [r7, #26]
 801667a:	e001      	b.n	8016680 <tcp_process+0x404>
 801667c:	23f0      	movs	r3, #240	@ 0xf0
 801667e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016680:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d00a      	beq.n	801669e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016688:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801668c:	f113 0f0d 	cmn.w	r3, #13
 8016690:	d002      	beq.n	8016698 <tcp_process+0x41c>
              tcp_abort(pcb);
 8016692:	6878      	ldr	r0, [r7, #4]
 8016694:	f7fd fd2e 	bl	80140f4 <tcp_abort>
            }
            return ERR_ABRT;
 8016698:	f06f 030c 	mvn.w	r3, #12
 801669c:	e1ce      	b.n	8016a3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 fae0 	bl	8016c64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80166a4:	4b63      	ldr	r3, [pc, #396]	@ (8016834 <tcp_process+0x5b8>)
 80166a6:	881b      	ldrh	r3, [r3, #0]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d005      	beq.n	80166b8 <tcp_process+0x43c>
            recv_acked--;
 80166ac:	4b61      	ldr	r3, [pc, #388]	@ (8016834 <tcp_process+0x5b8>)
 80166ae:	881b      	ldrh	r3, [r3, #0]
 80166b0:	3b01      	subs	r3, #1
 80166b2:	b29a      	uxth	r2, r3
 80166b4:	4b5f      	ldr	r3, [pc, #380]	@ (8016834 <tcp_process+0x5b8>)
 80166b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166bc:	009a      	lsls	r2, r3, #2
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166c2:	005b      	lsls	r3, r3, #1
 80166c4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80166c8:	428b      	cmp	r3, r1
 80166ca:	bf38      	it	cc
 80166cc:	460b      	movcc	r3, r1
 80166ce:	429a      	cmp	r2, r3
 80166d0:	d204      	bcs.n	80166dc <tcp_process+0x460>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	b29b      	uxth	r3, r3
 80166da:	e00d      	b.n	80166f8 <tcp_process+0x47c>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166e0:	005b      	lsls	r3, r3, #1
 80166e2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d904      	bls.n	80166f4 <tcp_process+0x478>
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166ee:	005b      	lsls	r3, r3, #1
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	e001      	b.n	80166f8 <tcp_process+0x47c>
 80166f4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80166f8:	687a      	ldr	r2, [r7, #4]
 80166fa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80166fe:	4b4e      	ldr	r3, [pc, #312]	@ (8016838 <tcp_process+0x5bc>)
 8016700:	781b      	ldrb	r3, [r3, #0]
 8016702:	f003 0320 	and.w	r3, r3, #32
 8016706:	2b00      	cmp	r3, #0
 8016708:	d037      	beq.n	801677a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	8b5b      	ldrh	r3, [r3, #26]
 801670e:	f043 0302 	orr.w	r3, r3, #2
 8016712:	b29a      	uxth	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2207      	movs	r2, #7
 801671c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801671e:	e02c      	b.n	801677a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016720:	4b3b      	ldr	r3, [pc, #236]	@ (8016810 <tcp_process+0x594>)
 8016722:	6819      	ldr	r1, [r3, #0]
 8016724:	4b3b      	ldr	r3, [pc, #236]	@ (8016814 <tcp_process+0x598>)
 8016726:	881b      	ldrh	r3, [r3, #0]
 8016728:	461a      	mov	r2, r3
 801672a:	4b3b      	ldr	r3, [pc, #236]	@ (8016818 <tcp_process+0x59c>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016730:	4b3a      	ldr	r3, [pc, #232]	@ (801681c <tcp_process+0x5a0>)
 8016732:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016734:	885b      	ldrh	r3, [r3, #2]
 8016736:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016738:	4a38      	ldr	r2, [pc, #224]	@ (801681c <tcp_process+0x5a0>)
 801673a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801673c:	8812      	ldrh	r2, [r2, #0]
 801673e:	b292      	uxth	r2, r2
 8016740:	9202      	str	r2, [sp, #8]
 8016742:	9301      	str	r3, [sp, #4]
 8016744:	4b36      	ldr	r3, [pc, #216]	@ (8016820 <tcp_process+0x5a4>)
 8016746:	9300      	str	r3, [sp, #0]
 8016748:	4b36      	ldr	r3, [pc, #216]	@ (8016824 <tcp_process+0x5a8>)
 801674a:	4602      	mov	r2, r0
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f003 f823 	bl	8019798 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016752:	e167      	b.n	8016a24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016754:	4b2d      	ldr	r3, [pc, #180]	@ (801680c <tcp_process+0x590>)
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	f003 0302 	and.w	r3, r3, #2
 801675c:	2b00      	cmp	r3, #0
 801675e:	f000 8161 	beq.w	8016a24 <tcp_process+0x7a8>
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016766:	1e5a      	subs	r2, r3, #1
 8016768:	4b2b      	ldr	r3, [pc, #172]	@ (8016818 <tcp_process+0x59c>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	429a      	cmp	r2, r3
 801676e:	f040 8159 	bne.w	8016a24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f002 fe0a 	bl	801938c <tcp_rexmit>
      break;
 8016778:	e154      	b.n	8016a24 <tcp_process+0x7a8>
 801677a:	e153      	b.n	8016a24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f000 fa71 	bl	8016c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016782:	4b2d      	ldr	r3, [pc, #180]	@ (8016838 <tcp_process+0x5bc>)
 8016784:	781b      	ldrb	r3, [r3, #0]
 8016786:	f003 0320 	and.w	r3, r3, #32
 801678a:	2b00      	cmp	r3, #0
 801678c:	f000 814c 	beq.w	8016a28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	8b5b      	ldrh	r3, [r3, #26]
 8016794:	f043 0302 	orr.w	r3, r3, #2
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2207      	movs	r2, #7
 80167a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80167a4:	e140      	b.n	8016a28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f000 fa5c 	bl	8016c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80167ac:	4b22      	ldr	r3, [pc, #136]	@ (8016838 <tcp_process+0x5bc>)
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	f003 0320 	and.w	r3, r3, #32
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d071      	beq.n	801689c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80167b8:	4b14      	ldr	r3, [pc, #80]	@ (801680c <tcp_process+0x590>)
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	f003 0310 	and.w	r3, r3, #16
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d060      	beq.n	8016886 <tcp_process+0x60a>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167c8:	4b11      	ldr	r3, [pc, #68]	@ (8016810 <tcp_process+0x594>)
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d15a      	bne.n	8016886 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d156      	bne.n	8016886 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	8b5b      	ldrh	r3, [r3, #26]
 80167dc:	f043 0302 	orr.w	r3, r3, #2
 80167e0:	b29a      	uxth	r2, r3
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f7fe fdbc 	bl	8015364 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80167ec:	4b13      	ldr	r3, [pc, #76]	@ (801683c <tcp_process+0x5c0>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	429a      	cmp	r2, r3
 80167f4:	d105      	bne.n	8016802 <tcp_process+0x586>
 80167f6:	4b11      	ldr	r3, [pc, #68]	@ (801683c <tcp_process+0x5c0>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	68db      	ldr	r3, [r3, #12]
 80167fc:	4a0f      	ldr	r2, [pc, #60]	@ (801683c <tcp_process+0x5c0>)
 80167fe:	6013      	str	r3, [r2, #0]
 8016800:	e02e      	b.n	8016860 <tcp_process+0x5e4>
 8016802:	4b0e      	ldr	r3, [pc, #56]	@ (801683c <tcp_process+0x5c0>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	617b      	str	r3, [r7, #20]
 8016808:	e027      	b.n	801685a <tcp_process+0x5de>
 801680a:	bf00      	nop
 801680c:	2000c9f4 	.word	0x2000c9f4
 8016810:	2000c9ec 	.word	0x2000c9ec
 8016814:	2000c9f2 	.word	0x2000c9f2
 8016818:	2000c9e8 	.word	0x2000c9e8
 801681c:	2000c9d8 	.word	0x2000c9d8
 8016820:	2000926c 	.word	0x2000926c
 8016824:	20009270 	.word	0x20009270
 8016828:	08021844 	.word	0x08021844
 801682c:	08021ae4 	.word	0x08021ae4
 8016830:	08021890 	.word	0x08021890
 8016834:	2000c9f0 	.word	0x2000c9f0
 8016838:	2000c9f5 	.word	0x2000c9f5
 801683c:	2000c9bc 	.word	0x2000c9bc
 8016840:	697b      	ldr	r3, [r7, #20]
 8016842:	68db      	ldr	r3, [r3, #12]
 8016844:	687a      	ldr	r2, [r7, #4]
 8016846:	429a      	cmp	r2, r3
 8016848:	d104      	bne.n	8016854 <tcp_process+0x5d8>
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	68da      	ldr	r2, [r3, #12]
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	60da      	str	r2, [r3, #12]
 8016852:	e005      	b.n	8016860 <tcp_process+0x5e4>
 8016854:	697b      	ldr	r3, [r7, #20]
 8016856:	68db      	ldr	r3, [r3, #12]
 8016858:	617b      	str	r3, [r7, #20]
 801685a:	697b      	ldr	r3, [r7, #20]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d1ef      	bne.n	8016840 <tcp_process+0x5c4>
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	2200      	movs	r2, #0
 8016864:	60da      	str	r2, [r3, #12]
 8016866:	4b77      	ldr	r3, [pc, #476]	@ (8016a44 <tcp_process+0x7c8>)
 8016868:	2201      	movs	r2, #1
 801686a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	220a      	movs	r2, #10
 8016870:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016872:	4b75      	ldr	r3, [pc, #468]	@ (8016a48 <tcp_process+0x7cc>)
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	60da      	str	r2, [r3, #12]
 801687a:	4a73      	ldr	r2, [pc, #460]	@ (8016a48 <tcp_process+0x7cc>)
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	6013      	str	r3, [r2, #0]
 8016880:	f003 f94c 	bl	8019b1c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016884:	e0d2      	b.n	8016a2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	8b5b      	ldrh	r3, [r3, #26]
 801688a:	f043 0302 	orr.w	r3, r3, #2
 801688e:	b29a      	uxth	r2, r3
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	2208      	movs	r2, #8
 8016898:	751a      	strb	r2, [r3, #20]
      break;
 801689a:	e0c7      	b.n	8016a2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801689c:	4b6b      	ldr	r3, [pc, #428]	@ (8016a4c <tcp_process+0x7d0>)
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	f003 0310 	and.w	r3, r3, #16
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	f000 80c1 	beq.w	8016a2c <tcp_process+0x7b0>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80168ae:	4b68      	ldr	r3, [pc, #416]	@ (8016a50 <tcp_process+0x7d4>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	429a      	cmp	r2, r3
 80168b4:	f040 80ba 	bne.w	8016a2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80168bc:	2b00      	cmp	r3, #0
 80168be:	f040 80b5 	bne.w	8016a2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2206      	movs	r2, #6
 80168c6:	751a      	strb	r2, [r3, #20]
      break;
 80168c8:	e0b0      	b.n	8016a2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 f9ca 	bl	8016c64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80168d0:	4b60      	ldr	r3, [pc, #384]	@ (8016a54 <tcp_process+0x7d8>)
 80168d2:	781b      	ldrb	r3, [r3, #0]
 80168d4:	f003 0320 	and.w	r3, r3, #32
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f000 80a9 	beq.w	8016a30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	8b5b      	ldrh	r3, [r3, #26]
 80168e2:	f043 0302 	orr.w	r3, r3, #2
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	f7fe fd39 	bl	8015364 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80168f2:	4b59      	ldr	r3, [pc, #356]	@ (8016a58 <tcp_process+0x7dc>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d105      	bne.n	8016908 <tcp_process+0x68c>
 80168fc:	4b56      	ldr	r3, [pc, #344]	@ (8016a58 <tcp_process+0x7dc>)
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	68db      	ldr	r3, [r3, #12]
 8016902:	4a55      	ldr	r2, [pc, #340]	@ (8016a58 <tcp_process+0x7dc>)
 8016904:	6013      	str	r3, [r2, #0]
 8016906:	e013      	b.n	8016930 <tcp_process+0x6b4>
 8016908:	4b53      	ldr	r3, [pc, #332]	@ (8016a58 <tcp_process+0x7dc>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	613b      	str	r3, [r7, #16]
 801690e:	e00c      	b.n	801692a <tcp_process+0x6ae>
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	68db      	ldr	r3, [r3, #12]
 8016914:	687a      	ldr	r2, [r7, #4]
 8016916:	429a      	cmp	r2, r3
 8016918:	d104      	bne.n	8016924 <tcp_process+0x6a8>
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	68da      	ldr	r2, [r3, #12]
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	60da      	str	r2, [r3, #12]
 8016922:	e005      	b.n	8016930 <tcp_process+0x6b4>
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	68db      	ldr	r3, [r3, #12]
 8016928:	613b      	str	r3, [r7, #16]
 801692a:	693b      	ldr	r3, [r7, #16]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d1ef      	bne.n	8016910 <tcp_process+0x694>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2200      	movs	r2, #0
 8016934:	60da      	str	r2, [r3, #12]
 8016936:	4b43      	ldr	r3, [pc, #268]	@ (8016a44 <tcp_process+0x7c8>)
 8016938:	2201      	movs	r2, #1
 801693a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	220a      	movs	r2, #10
 8016940:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016942:	4b41      	ldr	r3, [pc, #260]	@ (8016a48 <tcp_process+0x7cc>)
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	60da      	str	r2, [r3, #12]
 801694a:	4a3f      	ldr	r2, [pc, #252]	@ (8016a48 <tcp_process+0x7cc>)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6013      	str	r3, [r2, #0]
 8016950:	f003 f8e4 	bl	8019b1c <tcp_timer_needed>
      }
      break;
 8016954:	e06c      	b.n	8016a30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f000 f984 	bl	8016c64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801695c:	4b3b      	ldr	r3, [pc, #236]	@ (8016a4c <tcp_process+0x7d0>)
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	f003 0310 	and.w	r3, r3, #16
 8016964:	2b00      	cmp	r3, #0
 8016966:	d065      	beq.n	8016a34 <tcp_process+0x7b8>
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801696c:	4b38      	ldr	r3, [pc, #224]	@ (8016a50 <tcp_process+0x7d4>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	429a      	cmp	r2, r3
 8016972:	d15f      	bne.n	8016a34 <tcp_process+0x7b8>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d15b      	bne.n	8016a34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f7fe fcf1 	bl	8015364 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016982:	4b35      	ldr	r3, [pc, #212]	@ (8016a58 <tcp_process+0x7dc>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	429a      	cmp	r2, r3
 801698a:	d105      	bne.n	8016998 <tcp_process+0x71c>
 801698c:	4b32      	ldr	r3, [pc, #200]	@ (8016a58 <tcp_process+0x7dc>)
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	4a31      	ldr	r2, [pc, #196]	@ (8016a58 <tcp_process+0x7dc>)
 8016994:	6013      	str	r3, [r2, #0]
 8016996:	e013      	b.n	80169c0 <tcp_process+0x744>
 8016998:	4b2f      	ldr	r3, [pc, #188]	@ (8016a58 <tcp_process+0x7dc>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	60fb      	str	r3, [r7, #12]
 801699e:	e00c      	b.n	80169ba <tcp_process+0x73e>
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	68db      	ldr	r3, [r3, #12]
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	d104      	bne.n	80169b4 <tcp_process+0x738>
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	68da      	ldr	r2, [r3, #12]
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	60da      	str	r2, [r3, #12]
 80169b2:	e005      	b.n	80169c0 <tcp_process+0x744>
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	68db      	ldr	r3, [r3, #12]
 80169b8:	60fb      	str	r3, [r7, #12]
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d1ef      	bne.n	80169a0 <tcp_process+0x724>
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2200      	movs	r2, #0
 80169c4:	60da      	str	r2, [r3, #12]
 80169c6:	4b1f      	ldr	r3, [pc, #124]	@ (8016a44 <tcp_process+0x7c8>)
 80169c8:	2201      	movs	r2, #1
 80169ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	220a      	movs	r2, #10
 80169d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80169d2:	4b1d      	ldr	r3, [pc, #116]	@ (8016a48 <tcp_process+0x7cc>)
 80169d4:	681a      	ldr	r2, [r3, #0]
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	60da      	str	r2, [r3, #12]
 80169da:	4a1b      	ldr	r2, [pc, #108]	@ (8016a48 <tcp_process+0x7cc>)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	6013      	str	r3, [r2, #0]
 80169e0:	f003 f89c 	bl	8019b1c <tcp_timer_needed>
      }
      break;
 80169e4:	e026      	b.n	8016a34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f000 f93c 	bl	8016c64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80169ec:	4b17      	ldr	r3, [pc, #92]	@ (8016a4c <tcp_process+0x7d0>)
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	f003 0310 	and.w	r3, r3, #16
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d01f      	beq.n	8016a38 <tcp_process+0x7bc>
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80169fc:	4b14      	ldr	r3, [pc, #80]	@ (8016a50 <tcp_process+0x7d4>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d119      	bne.n	8016a38 <tcp_process+0x7bc>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d115      	bne.n	8016a38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016a0c:	4b11      	ldr	r3, [pc, #68]	@ (8016a54 <tcp_process+0x7d8>)
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	f043 0310 	orr.w	r3, r3, #16
 8016a14:	b2da      	uxtb	r2, r3
 8016a16:	4b0f      	ldr	r3, [pc, #60]	@ (8016a54 <tcp_process+0x7d8>)
 8016a18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016a1a:	e00d      	b.n	8016a38 <tcp_process+0x7bc>
    default:
      break;
 8016a1c:	bf00      	nop
 8016a1e:	e00c      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a20:	bf00      	nop
 8016a22:	e00a      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a24:	bf00      	nop
 8016a26:	e008      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a28:	bf00      	nop
 8016a2a:	e006      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a2c:	bf00      	nop
 8016a2e:	e004      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a30:	bf00      	nop
 8016a32:	e002      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a34:	bf00      	nop
 8016a36:	e000      	b.n	8016a3a <tcp_process+0x7be>
      break;
 8016a38:	bf00      	nop
  }
  return ERR_OK;
 8016a3a:	2300      	movs	r3, #0
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3724      	adds	r7, #36	@ 0x24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd90      	pop	{r4, r7, pc}
 8016a44:	2000c9c4 	.word	0x2000c9c4
 8016a48:	2000c9c0 	.word	0x2000c9c0
 8016a4c:	2000c9f4 	.word	0x2000c9f4
 8016a50:	2000c9ec 	.word	0x2000c9ec
 8016a54:	2000c9f5 	.word	0x2000c9f5
 8016a58:	2000c9bc 	.word	0x2000c9bc

08016a5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016a5c:	b590      	push	{r4, r7, lr}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
 8016a64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d106      	bne.n	8016a7a <tcp_oos_insert_segment+0x1e>
 8016a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8016b5c <tcp_oos_insert_segment+0x100>)
 8016a6e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8016a72:	493b      	ldr	r1, [pc, #236]	@ (8016b60 <tcp_oos_insert_segment+0x104>)
 8016a74:	483b      	ldr	r0, [pc, #236]	@ (8016b64 <tcp_oos_insert_segment+0x108>)
 8016a76:	f006 fe61 	bl	801d73c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	68db      	ldr	r3, [r3, #12]
 8016a7e:	899b      	ldrh	r3, [r3, #12]
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7fb f9e2 	bl	8011e4c <lwip_htons>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	b2db      	uxtb	r3, r3
 8016a8c:	f003 0301 	and.w	r3, r3, #1
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d028      	beq.n	8016ae6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016a94:	6838      	ldr	r0, [r7, #0]
 8016a96:	f7fe f9bf 	bl	8014e18 <tcp_segs_free>
    next = NULL;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	603b      	str	r3, [r7, #0]
 8016a9e:	e056      	b.n	8016b4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	899b      	ldrh	r3, [r3, #12]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7fb f9cf 	bl	8011e4c <lwip_htons>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	f003 0301 	and.w	r3, r3, #1
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00d      	beq.n	8016ad6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	68db      	ldr	r3, [r3, #12]
 8016abe:	899b      	ldrh	r3, [r3, #12]
 8016ac0:	b29c      	uxth	r4, r3
 8016ac2:	2001      	movs	r0, #1
 8016ac4:	f7fb f9c2 	bl	8011e4c <lwip_htons>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	461a      	mov	r2, r3
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	68db      	ldr	r3, [r3, #12]
 8016ad0:	4322      	orrs	r2, r4
 8016ad2:	b292      	uxth	r2, r2
 8016ad4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016ada:	683b      	ldr	r3, [r7, #0]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016ae0:	68f8      	ldr	r0, [r7, #12]
 8016ae2:	f7fe f9ae 	bl	8014e42 <tcp_seg_free>
    while (next &&
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d00e      	beq.n	8016b0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	891b      	ldrh	r3, [r3, #8]
 8016af0:	461a      	mov	r2, r3
 8016af2:	4b1d      	ldr	r3, [pc, #116]	@ (8016b68 <tcp_oos_insert_segment+0x10c>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	441a      	add	r2, r3
 8016af8:	683b      	ldr	r3, [r7, #0]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	6839      	ldr	r1, [r7, #0]
 8016b00:	8909      	ldrh	r1, [r1, #8]
 8016b02:	440b      	add	r3, r1
 8016b04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	daca      	bge.n	8016aa0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d01e      	beq.n	8016b4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	891b      	ldrh	r3, [r3, #8]
 8016b14:	461a      	mov	r2, r3
 8016b16:	4b14      	ldr	r3, [pc, #80]	@ (8016b68 <tcp_oos_insert_segment+0x10c>)
 8016b18:	681b      	ldr	r3, [r3, #0]
 8016b1a:	441a      	add	r2, r3
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	685b      	ldr	r3, [r3, #4]
 8016b22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	dd12      	ble.n	8016b4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016b28:	683b      	ldr	r3, [r7, #0]
 8016b2a:	68db      	ldr	r3, [r3, #12]
 8016b2c:	685b      	ldr	r3, [r3, #4]
 8016b2e:	b29a      	uxth	r2, r3
 8016b30:	4b0d      	ldr	r3, [pc, #52]	@ (8016b68 <tcp_oos_insert_segment+0x10c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	1ad3      	subs	r3, r2, r3
 8016b38:	b29a      	uxth	r2, r3
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	685a      	ldr	r2, [r3, #4]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	891b      	ldrh	r3, [r3, #8]
 8016b46:	4619      	mov	r1, r3
 8016b48:	4610      	mov	r0, r2
 8016b4a:	f7fc fbb9 	bl	80132c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	683a      	ldr	r2, [r7, #0]
 8016b52:	601a      	str	r2, [r3, #0]
}
 8016b54:	bf00      	nop
 8016b56:	3714      	adds	r7, #20
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd90      	pop	{r4, r7, pc}
 8016b5c:	08021844 	.word	0x08021844
 8016b60:	08021b04 	.word	0x08021b04
 8016b64:	08021890 	.word	0x08021890
 8016b68:	2000c9e8 	.word	0x2000c9e8

08016b6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016b6c:	b5b0      	push	{r4, r5, r7, lr}
 8016b6e:	b086      	sub	sp, #24
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	60f8      	str	r0, [r7, #12]
 8016b74:	60b9      	str	r1, [r7, #8]
 8016b76:	607a      	str	r2, [r7, #4]
 8016b78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016b7a:	e03e      	b.n	8016bfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016b86:	697b      	ldr	r3, [r7, #20]
 8016b88:	685b      	ldr	r3, [r3, #4]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7fc fdac 	bl	80136e8 <pbuf_clen>
 8016b90:	4603      	mov	r3, r0
 8016b92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b9a:	8a7a      	ldrh	r2, [r7, #18]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d906      	bls.n	8016bae <tcp_free_acked_segments+0x42>
 8016ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8016c4c <tcp_free_acked_segments+0xe0>)
 8016ba2:	f240 4257 	movw	r2, #1111	@ 0x457
 8016ba6:	492a      	ldr	r1, [pc, #168]	@ (8016c50 <tcp_free_acked_segments+0xe4>)
 8016ba8:	482a      	ldr	r0, [pc, #168]	@ (8016c54 <tcp_free_acked_segments+0xe8>)
 8016baa:	f006 fdc7 	bl	801d73c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8016bb4:	8a7b      	ldrh	r3, [r7, #18]
 8016bb6:	1ad3      	subs	r3, r2, r3
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	891a      	ldrh	r2, [r3, #8]
 8016bc4:	4b24      	ldr	r3, [pc, #144]	@ (8016c58 <tcp_free_acked_segments+0xec>)
 8016bc6:	881b      	ldrh	r3, [r3, #0]
 8016bc8:	4413      	add	r3, r2
 8016bca:	b29a      	uxth	r2, r3
 8016bcc:	4b22      	ldr	r3, [pc, #136]	@ (8016c58 <tcp_free_acked_segments+0xec>)
 8016bce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016bd0:	6978      	ldr	r0, [r7, #20]
 8016bd2:	f7fe f936 	bl	8014e42 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d00c      	beq.n	8016bfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d109      	bne.n	8016bfa <tcp_free_acked_segments+0x8e>
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d106      	bne.n	8016bfa <tcp_free_acked_segments+0x8e>
 8016bec:	4b17      	ldr	r3, [pc, #92]	@ (8016c4c <tcp_free_acked_segments+0xe0>)
 8016bee:	f240 4261 	movw	r2, #1121	@ 0x461
 8016bf2:	491a      	ldr	r1, [pc, #104]	@ (8016c5c <tcp_free_acked_segments+0xf0>)
 8016bf4:	4817      	ldr	r0, [pc, #92]	@ (8016c54 <tcp_free_acked_segments+0xe8>)
 8016bf6:	f006 fda1 	bl	801d73c <iprintf>
  while (seg_list != NULL &&
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d020      	beq.n	8016c42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016c00:	68bb      	ldr	r3, [r7, #8]
 8016c02:	68db      	ldr	r3, [r3, #12]
 8016c04:	685b      	ldr	r3, [r3, #4]
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7fb f936 	bl	8011e78 <lwip_htonl>
 8016c0c:	4604      	mov	r4, r0
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	891b      	ldrh	r3, [r3, #8]
 8016c12:	461d      	mov	r5, r3
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	68db      	ldr	r3, [r3, #12]
 8016c18:	899b      	ldrh	r3, [r3, #12]
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7fb f915 	bl	8011e4c <lwip_htons>
 8016c22:	4603      	mov	r3, r0
 8016c24:	b2db      	uxtb	r3, r3
 8016c26:	f003 0303 	and.w	r3, r3, #3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d001      	beq.n	8016c32 <tcp_free_acked_segments+0xc6>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	e000      	b.n	8016c34 <tcp_free_acked_segments+0xc8>
 8016c32:	2300      	movs	r3, #0
 8016c34:	442b      	add	r3, r5
 8016c36:	18e2      	adds	r2, r4, r3
 8016c38:	4b09      	ldr	r3, [pc, #36]	@ (8016c60 <tcp_free_acked_segments+0xf4>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	dd9c      	ble.n	8016b7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016c42:	68bb      	ldr	r3, [r7, #8]
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3718      	adds	r7, #24
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8016c4c:	08021844 	.word	0x08021844
 8016c50:	08021b2c 	.word	0x08021b2c
 8016c54:	08021890 	.word	0x08021890
 8016c58:	2000c9f0 	.word	0x2000c9f0
 8016c5c:	08021b54 	.word	0x08021b54
 8016c60:	2000c9ec 	.word	0x2000c9ec

08016c64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016c64:	b5b0      	push	{r4, r5, r7, lr}
 8016c66:	b094      	sub	sp, #80	@ 0x50
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d106      	bne.n	8016c84 <tcp_receive+0x20>
 8016c76:	4b91      	ldr	r3, [pc, #580]	@ (8016ebc <tcp_receive+0x258>)
 8016c78:	f240 427b 	movw	r2, #1147	@ 0x47b
 8016c7c:	4990      	ldr	r1, [pc, #576]	@ (8016ec0 <tcp_receive+0x25c>)
 8016c7e:	4891      	ldr	r0, [pc, #580]	@ (8016ec4 <tcp_receive+0x260>)
 8016c80:	f006 fd5c 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	7d1b      	ldrb	r3, [r3, #20]
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	d806      	bhi.n	8016c9a <tcp_receive+0x36>
 8016c8c:	4b8b      	ldr	r3, [pc, #556]	@ (8016ebc <tcp_receive+0x258>)
 8016c8e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8016c92:	498d      	ldr	r1, [pc, #564]	@ (8016ec8 <tcp_receive+0x264>)
 8016c94:	488b      	ldr	r0, [pc, #556]	@ (8016ec4 <tcp_receive+0x260>)
 8016c96:	f006 fd51 	bl	801d73c <iprintf>

  if (flags & TCP_ACK) {
 8016c9a:	4b8c      	ldr	r3, [pc, #560]	@ (8016ecc <tcp_receive+0x268>)
 8016c9c:	781b      	ldrb	r3, [r3, #0]
 8016c9e:	f003 0310 	and.w	r3, r3, #16
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	f000 8264 	beq.w	8017170 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016cae:	461a      	mov	r2, r3
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016cb4:	4413      	add	r3, r2
 8016cb6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016cbc:	4b84      	ldr	r3, [pc, #528]	@ (8016ed0 <tcp_receive+0x26c>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	1ad3      	subs	r3, r2, r3
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	db1b      	blt.n	8016cfe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8016cca:	4b81      	ldr	r3, [pc, #516]	@ (8016ed0 <tcp_receive+0x26c>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d106      	bne.n	8016ce0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8016ed4 <tcp_receive+0x270>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	1ad3      	subs	r3, r2, r3
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	db0e      	blt.n	8016cfe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8016ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8016ed4 <tcp_receive+0x270>)
 8016ce6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d125      	bne.n	8016d38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016cec:	4b7a      	ldr	r3, [pc, #488]	@ (8016ed8 <tcp_receive+0x274>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	89db      	ldrh	r3, [r3, #14]
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d91c      	bls.n	8016d38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016cfe:	4b76      	ldr	r3, [pc, #472]	@ (8016ed8 <tcp_receive+0x274>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	89db      	ldrh	r3, [r3, #14]
 8016d04:	b29a      	uxth	r2, r3
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016d18:	429a      	cmp	r2, r3
 8016d1a:	d205      	bcs.n	8016d28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8016d28:	4b69      	ldr	r3, [pc, #420]	@ (8016ed0 <tcp_receive+0x26c>)
 8016d2a:	681a      	ldr	r2, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8016d30:	4b68      	ldr	r3, [pc, #416]	@ (8016ed4 <tcp_receive+0x270>)
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016d38:	4b66      	ldr	r3, [pc, #408]	@ (8016ed4 <tcp_receive+0x270>)
 8016d3a:	681a      	ldr	r2, [r3, #0]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016d40:	1ad3      	subs	r3, r2, r3
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	dc58      	bgt.n	8016df8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016d46:	4b65      	ldr	r3, [pc, #404]	@ (8016edc <tcp_receive+0x278>)
 8016d48:	881b      	ldrh	r3, [r3, #0]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d14b      	bne.n	8016de6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016d52:	687a      	ldr	r2, [r7, #4]
 8016d54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8016d58:	4413      	add	r3, r2
 8016d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d142      	bne.n	8016de6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	db3d      	blt.n	8016de6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016d6e:	4b59      	ldr	r3, [pc, #356]	@ (8016ed4 <tcp_receive+0x270>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d137      	bne.n	8016de6 <tcp_receive+0x182>
              found_dupack = 1;
 8016d76:	2301      	movs	r3, #1
 8016d78:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016d80:	2bff      	cmp	r3, #255	@ 0xff
 8016d82:	d007      	beq.n	8016d94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016d8a:	3301      	adds	r3, #1
 8016d8c:	b2da      	uxtb	r2, r3
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016d9a:	2b03      	cmp	r3, #3
 8016d9c:	d91b      	bls.n	8016dd6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016da8:	4413      	add	r3, r2
 8016daa:	b29a      	uxth	r2, r3
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d30a      	bcc.n	8016dcc <tcp_receive+0x168>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016dc0:	4413      	add	r3, r2
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016dca:	e004      	b.n	8016dd6 <tcp_receive+0x172>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016dd2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8016ddc:	2b02      	cmp	r3, #2
 8016dde:	d902      	bls.n	8016de6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f002 fb3f 	bl	8019464 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	f040 8161 	bne.w	80170b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	2200      	movs	r2, #0
 8016df2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016df6:	e15b      	b.n	80170b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016df8:	4b36      	ldr	r3, [pc, #216]	@ (8016ed4 <tcp_receive+0x270>)
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e00:	1ad3      	subs	r3, r2, r3
 8016e02:	3b01      	subs	r3, #1
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f2c0 814e 	blt.w	80170a6 <tcp_receive+0x442>
 8016e0a:	4b32      	ldr	r3, [pc, #200]	@ (8016ed4 <tcp_receive+0x270>)
 8016e0c:	681a      	ldr	r2, [r3, #0]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	f300 8146 	bgt.w	80170a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	8b5b      	ldrh	r3, [r3, #26]
 8016e1e:	f003 0304 	and.w	r3, r3, #4
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d010      	beq.n	8016e48 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	8b5b      	ldrh	r3, [r3, #26]
 8016e2a:	f023 0304 	bic.w	r3, r3, #4
 8016e2e:	b29a      	uxth	r2, r3
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2200      	movs	r2, #0
 8016e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	2200      	movs	r2, #0
 8016e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016e56:	10db      	asrs	r3, r3, #3
 8016e58:	b21b      	sxth	r3, r3
 8016e5a:	b29a      	uxth	r2, r3
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016e62:	b29b      	uxth	r3, r3
 8016e64:	4413      	add	r3, r2
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	b21a      	sxth	r2, r3
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016e70:	4b18      	ldr	r3, [pc, #96]	@ (8016ed4 <tcp_receive+0x270>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	1ad3      	subs	r3, r2, r3
 8016e7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2200      	movs	r2, #0
 8016e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8016e88:	4b12      	ldr	r3, [pc, #72]	@ (8016ed4 <tcp_receive+0x270>)
 8016e8a:	681a      	ldr	r2, [r3, #0]
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	7d1b      	ldrb	r3, [r3, #20]
 8016e94:	2b03      	cmp	r3, #3
 8016e96:	f240 8097 	bls.w	8016fc8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d245      	bcs.n	8016f36 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	8b5b      	ldrh	r3, [r3, #26]
 8016eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d014      	beq.n	8016ee0 <tcp_receive+0x27c>
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e013      	b.n	8016ee2 <tcp_receive+0x27e>
 8016eba:	bf00      	nop
 8016ebc:	08021844 	.word	0x08021844
 8016ec0:	08021b74 	.word	0x08021b74
 8016ec4:	08021890 	.word	0x08021890
 8016ec8:	08021b90 	.word	0x08021b90
 8016ecc:	2000c9f4 	.word	0x2000c9f4
 8016ed0:	2000c9e8 	.word	0x2000c9e8
 8016ed4:	2000c9ec 	.word	0x2000c9ec
 8016ed8:	2000c9d8 	.word	0x2000c9d8
 8016edc:	2000c9f2 	.word	0x2000c9f2
 8016ee0:	2302      	movs	r3, #2
 8016ee2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016ee6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8016eea:	b29a      	uxth	r2, r3
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ef0:	fb12 f303 	smulbb	r3, r2, r3
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8016ef8:	4293      	cmp	r3, r2
 8016efa:	bf28      	it	cs
 8016efc:	4613      	movcs	r3, r2
 8016efe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016f06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016f08:	4413      	add	r3, r2
 8016f0a:	b29a      	uxth	r2, r3
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d309      	bcc.n	8016f2a <tcp_receive+0x2c6>
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016f1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016f1e:	4413      	add	r3, r2
 8016f20:	b29a      	uxth	r2, r3
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016f28:	e04e      	b.n	8016fc8 <tcp_receive+0x364>
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016f34:	e048      	b.n	8016fc8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016f3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016f3e:	4413      	add	r3, r2
 8016f40:	b29a      	uxth	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d309      	bcc.n	8016f60 <tcp_receive+0x2fc>
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016f52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8016f54:	4413      	add	r3, r2
 8016f56:	b29a      	uxth	r2, r3
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8016f5e:	e004      	b.n	8016f6a <tcp_receive+0x306>
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d326      	bcc.n	8016fc8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016f86:	1ad3      	subs	r3, r2, r3
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f9a:	4413      	add	r3, r2
 8016f9c:	b29a      	uxth	r2, r3
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8016fa4:	429a      	cmp	r2, r3
 8016fa6:	d30a      	bcc.n	8016fbe <tcp_receive+0x35a>
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016fb2:	4413      	add	r3, r2
 8016fb4:	b29a      	uxth	r2, r3
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8016fbc:	e004      	b.n	8016fc8 <tcp_receive+0x364>
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016fc4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fd0:	4a98      	ldr	r2, [pc, #608]	@ (8017234 <tcp_receive+0x5d0>)
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7ff fdca 	bl	8016b6c <tcp_free_acked_segments>
 8016fd8:	4602      	mov	r2, r0
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fe6:	4a94      	ldr	r2, [pc, #592]	@ (8017238 <tcp_receive+0x5d4>)
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f7ff fdbf 	bl	8016b6c <tcp_free_acked_segments>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d104      	bne.n	8017006 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017002:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017004:	e002      	b.n	801700c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2200      	movs	r2, #0
 801700a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2200      	movs	r2, #0
 8017010:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017016:	2b00      	cmp	r3, #0
 8017018:	d103      	bne.n	8017022 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	2200      	movs	r2, #0
 801701e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017028:	4b84      	ldr	r3, [pc, #528]	@ (801723c <tcp_receive+0x5d8>)
 801702a:	881b      	ldrh	r3, [r3, #0]
 801702c:	4413      	add	r3, r2
 801702e:	b29a      	uxth	r2, r3
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	8b5b      	ldrh	r3, [r3, #26]
 801703a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801703e:	2b00      	cmp	r3, #0
 8017040:	d035      	beq.n	80170ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017046:	2b00      	cmp	r3, #0
 8017048:	d118      	bne.n	801707c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00c      	beq.n	801706c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801705a:	68db      	ldr	r3, [r3, #12]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	4618      	mov	r0, r3
 8017060:	f7fa ff0a 	bl	8011e78 <lwip_htonl>
 8017064:	4603      	mov	r3, r0
 8017066:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017068:	2b00      	cmp	r3, #0
 801706a:	dc20      	bgt.n	80170ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	8b5b      	ldrh	r3, [r3, #26]
 8017070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017074:	b29a      	uxth	r2, r3
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801707a:	e018      	b.n	80170ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017084:	68db      	ldr	r3, [r3, #12]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	4618      	mov	r0, r3
 801708a:	f7fa fef5 	bl	8011e78 <lwip_htonl>
 801708e:	4603      	mov	r3, r0
 8017090:	1ae3      	subs	r3, r4, r3
 8017092:	2b00      	cmp	r3, #0
 8017094:	dc0b      	bgt.n	80170ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	8b5b      	ldrh	r3, [r3, #26]
 801709a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801709e:	b29a      	uxth	r2, r3
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80170a4:	e003      	b.n	80170ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f002 fbc8 	bl	801983c <tcp_send_empty_ack>
 80170ac:	e000      	b.n	80170b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80170ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d05b      	beq.n	8017170 <tcp_receive+0x50c>
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80170bc:	4b60      	ldr	r3, [pc, #384]	@ (8017240 <tcp_receive+0x5dc>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	1ad3      	subs	r3, r2, r3
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	da54      	bge.n	8017170 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80170c6:	4b5f      	ldr	r3, [pc, #380]	@ (8017244 <tcp_receive+0x5e0>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	b29a      	uxth	r2, r3
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	1ad3      	subs	r3, r2, r3
 80170d4:	b29b      	uxth	r3, r3
 80170d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80170da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80170e4:	10db      	asrs	r3, r3, #3
 80170e6:	b21b      	sxth	r3, r3
 80170e8:	b29b      	uxth	r3, r3
 80170ea:	1ad3      	subs	r3, r2, r3
 80170ec:	b29b      	uxth	r3, r3
 80170ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80170fe:	4413      	add	r3, r2
 8017100:	b29b      	uxth	r3, r3
 8017102:	b21a      	sxth	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017108:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801710c:	2b00      	cmp	r3, #0
 801710e:	da05      	bge.n	801711c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017110:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017114:	425b      	negs	r3, r3
 8017116:	b29b      	uxth	r3, r3
 8017118:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801711c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017126:	109b      	asrs	r3, r3, #2
 8017128:	b21b      	sxth	r3, r3
 801712a:	b29b      	uxth	r3, r3
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	b29b      	uxth	r3, r3
 8017130:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801713a:	b29a      	uxth	r2, r3
 801713c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017140:	4413      	add	r3, r2
 8017142:	b29b      	uxth	r3, r3
 8017144:	b21a      	sxth	r2, r3
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017150:	10db      	asrs	r3, r3, #3
 8017152:	b21b      	sxth	r3, r3
 8017154:	b29a      	uxth	r2, r3
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801715c:	b29b      	uxth	r3, r3
 801715e:	4413      	add	r3, r2
 8017160:	b29b      	uxth	r3, r3
 8017162:	b21a      	sxth	r2, r3
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	2200      	movs	r2, #0
 801716e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017170:	4b35      	ldr	r3, [pc, #212]	@ (8017248 <tcp_receive+0x5e4>)
 8017172:	881b      	ldrh	r3, [r3, #0]
 8017174:	2b00      	cmp	r3, #0
 8017176:	f000 84df 	beq.w	8017b38 <tcp_receive+0xed4>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	7d1b      	ldrb	r3, [r3, #20]
 801717e:	2b06      	cmp	r3, #6
 8017180:	f200 84da 	bhi.w	8017b38 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017188:	4b30      	ldr	r3, [pc, #192]	@ (801724c <tcp_receive+0x5e8>)
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	1ad3      	subs	r3, r2, r3
 801718e:	3b01      	subs	r3, #1
 8017190:	2b00      	cmp	r3, #0
 8017192:	f2c0 808f 	blt.w	80172b4 <tcp_receive+0x650>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801719a:	4b2b      	ldr	r3, [pc, #172]	@ (8017248 <tcp_receive+0x5e4>)
 801719c:	881b      	ldrh	r3, [r3, #0]
 801719e:	4619      	mov	r1, r3
 80171a0:	4b2a      	ldr	r3, [pc, #168]	@ (801724c <tcp_receive+0x5e8>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	440b      	add	r3, r1
 80171a6:	1ad3      	subs	r3, r2, r3
 80171a8:	3301      	adds	r3, #1
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	f300 8082 	bgt.w	80172b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80171b0:	4b27      	ldr	r3, [pc, #156]	@ (8017250 <tcp_receive+0x5ec>)
 80171b2:	685b      	ldr	r3, [r3, #4]
 80171b4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80171ba:	4b24      	ldr	r3, [pc, #144]	@ (801724c <tcp_receive+0x5e8>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	1ad3      	subs	r3, r2, r3
 80171c0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80171c2:	4b23      	ldr	r3, [pc, #140]	@ (8017250 <tcp_receive+0x5ec>)
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d106      	bne.n	80171d8 <tcp_receive+0x574>
 80171ca:	4b22      	ldr	r3, [pc, #136]	@ (8017254 <tcp_receive+0x5f0>)
 80171cc:	f240 5294 	movw	r2, #1428	@ 0x594
 80171d0:	4921      	ldr	r1, [pc, #132]	@ (8017258 <tcp_receive+0x5f4>)
 80171d2:	4822      	ldr	r0, [pc, #136]	@ (801725c <tcp_receive+0x5f8>)
 80171d4:	f006 fab2 	bl	801d73c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80171d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80171de:	4293      	cmp	r3, r2
 80171e0:	d906      	bls.n	80171f0 <tcp_receive+0x58c>
 80171e2:	4b1c      	ldr	r3, [pc, #112]	@ (8017254 <tcp_receive+0x5f0>)
 80171e4:	f240 5295 	movw	r2, #1429	@ 0x595
 80171e8:	491d      	ldr	r1, [pc, #116]	@ (8017260 <tcp_receive+0x5fc>)
 80171ea:	481c      	ldr	r0, [pc, #112]	@ (801725c <tcp_receive+0x5f8>)
 80171ec:	f006 faa6 	bl	801d73c <iprintf>
      off = (u16_t)off32;
 80171f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80171f6:	4b16      	ldr	r3, [pc, #88]	@ (8017250 <tcp_receive+0x5ec>)
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	891b      	ldrh	r3, [r3, #8]
 80171fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017200:	429a      	cmp	r2, r3
 8017202:	d906      	bls.n	8017212 <tcp_receive+0x5ae>
 8017204:	4b13      	ldr	r3, [pc, #76]	@ (8017254 <tcp_receive+0x5f0>)
 8017206:	f240 5297 	movw	r2, #1431	@ 0x597
 801720a:	4916      	ldr	r1, [pc, #88]	@ (8017264 <tcp_receive+0x600>)
 801720c:	4813      	ldr	r0, [pc, #76]	@ (801725c <tcp_receive+0x5f8>)
 801720e:	f006 fa95 	bl	801d73c <iprintf>
      inseg.len -= off;
 8017212:	4b0f      	ldr	r3, [pc, #60]	@ (8017250 <tcp_receive+0x5ec>)
 8017214:	891a      	ldrh	r2, [r3, #8]
 8017216:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801721a:	1ad3      	subs	r3, r2, r3
 801721c:	b29a      	uxth	r2, r3
 801721e:	4b0c      	ldr	r3, [pc, #48]	@ (8017250 <tcp_receive+0x5ec>)
 8017220:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017222:	4b0b      	ldr	r3, [pc, #44]	@ (8017250 <tcp_receive+0x5ec>)
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	891a      	ldrh	r2, [r3, #8]
 8017228:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017230:	e02a      	b.n	8017288 <tcp_receive+0x624>
 8017232:	bf00      	nop
 8017234:	08021bac 	.word	0x08021bac
 8017238:	08021bb4 	.word	0x08021bb4
 801723c:	2000c9f0 	.word	0x2000c9f0
 8017240:	2000c9ec 	.word	0x2000c9ec
 8017244:	2000c9b0 	.word	0x2000c9b0
 8017248:	2000c9f2 	.word	0x2000c9f2
 801724c:	2000c9e8 	.word	0x2000c9e8
 8017250:	2000c9c8 	.word	0x2000c9c8
 8017254:	08021844 	.word	0x08021844
 8017258:	08021bbc 	.word	0x08021bbc
 801725c:	08021890 	.word	0x08021890
 8017260:	08021bcc 	.word	0x08021bcc
 8017264:	08021bdc 	.word	0x08021bdc
        off -= p->len;
 8017268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801726a:	895b      	ldrh	r3, [r3, #10]
 801726c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017270:	1ad3      	subs	r3, r2, r3
 8017272:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017278:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801727a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801727c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801727e:	2200      	movs	r2, #0
 8017280:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801728a:	895b      	ldrh	r3, [r3, #10]
 801728c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017290:	429a      	cmp	r2, r3
 8017292:	d8e9      	bhi.n	8017268 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017298:	4619      	mov	r1, r3
 801729a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801729c:	f7fc f910 	bl	80134c0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172a4:	4a90      	ldr	r2, [pc, #576]	@ (80174e8 <tcp_receive+0x884>)
 80172a6:	6013      	str	r3, [r2, #0]
 80172a8:	4b90      	ldr	r3, [pc, #576]	@ (80174ec <tcp_receive+0x888>)
 80172aa:	68db      	ldr	r3, [r3, #12]
 80172ac:	4a8e      	ldr	r2, [pc, #568]	@ (80174e8 <tcp_receive+0x884>)
 80172ae:	6812      	ldr	r2, [r2, #0]
 80172b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80172b2:	e00d      	b.n	80172d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80172b4:	4b8c      	ldr	r3, [pc, #560]	@ (80174e8 <tcp_receive+0x884>)
 80172b6:	681a      	ldr	r2, [r3, #0]
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172bc:	1ad3      	subs	r3, r2, r3
 80172be:	2b00      	cmp	r3, #0
 80172c0:	da06      	bge.n	80172d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	8b5b      	ldrh	r3, [r3, #26]
 80172c6:	f043 0302 	orr.w	r3, r3, #2
 80172ca:	b29a      	uxth	r2, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80172d0:	4b85      	ldr	r3, [pc, #532]	@ (80174e8 <tcp_receive+0x884>)
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172d8:	1ad3      	subs	r3, r2, r3
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f2c0 8427 	blt.w	8017b2e <tcp_receive+0xeca>
 80172e0:	4b81      	ldr	r3, [pc, #516]	@ (80174e8 <tcp_receive+0x884>)
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172e8:	6879      	ldr	r1, [r7, #4]
 80172ea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80172ec:	440b      	add	r3, r1
 80172ee:	1ad3      	subs	r3, r2, r3
 80172f0:	3301      	adds	r3, #1
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	f300 841b 	bgt.w	8017b2e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80172fc:	4b7a      	ldr	r3, [pc, #488]	@ (80174e8 <tcp_receive+0x884>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	429a      	cmp	r2, r3
 8017302:	f040 8298 	bne.w	8017836 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017306:	4b79      	ldr	r3, [pc, #484]	@ (80174ec <tcp_receive+0x888>)
 8017308:	891c      	ldrh	r4, [r3, #8]
 801730a:	4b78      	ldr	r3, [pc, #480]	@ (80174ec <tcp_receive+0x888>)
 801730c:	68db      	ldr	r3, [r3, #12]
 801730e:	899b      	ldrh	r3, [r3, #12]
 8017310:	b29b      	uxth	r3, r3
 8017312:	4618      	mov	r0, r3
 8017314:	f7fa fd9a 	bl	8011e4c <lwip_htons>
 8017318:	4603      	mov	r3, r0
 801731a:	b2db      	uxtb	r3, r3
 801731c:	f003 0303 	and.w	r3, r3, #3
 8017320:	2b00      	cmp	r3, #0
 8017322:	d001      	beq.n	8017328 <tcp_receive+0x6c4>
 8017324:	2301      	movs	r3, #1
 8017326:	e000      	b.n	801732a <tcp_receive+0x6c6>
 8017328:	2300      	movs	r3, #0
 801732a:	4423      	add	r3, r4
 801732c:	b29a      	uxth	r2, r3
 801732e:	4b70      	ldr	r3, [pc, #448]	@ (80174f0 <tcp_receive+0x88c>)
 8017330:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017336:	4b6e      	ldr	r3, [pc, #440]	@ (80174f0 <tcp_receive+0x88c>)
 8017338:	881b      	ldrh	r3, [r3, #0]
 801733a:	429a      	cmp	r2, r3
 801733c:	d274      	bcs.n	8017428 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801733e:	4b6b      	ldr	r3, [pc, #428]	@ (80174ec <tcp_receive+0x888>)
 8017340:	68db      	ldr	r3, [r3, #12]
 8017342:	899b      	ldrh	r3, [r3, #12]
 8017344:	b29b      	uxth	r3, r3
 8017346:	4618      	mov	r0, r3
 8017348:	f7fa fd80 	bl	8011e4c <lwip_htons>
 801734c:	4603      	mov	r3, r0
 801734e:	b2db      	uxtb	r3, r3
 8017350:	f003 0301 	and.w	r3, r3, #1
 8017354:	2b00      	cmp	r3, #0
 8017356:	d01e      	beq.n	8017396 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017358:	4b64      	ldr	r3, [pc, #400]	@ (80174ec <tcp_receive+0x888>)
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	899b      	ldrh	r3, [r3, #12]
 801735e:	b29b      	uxth	r3, r3
 8017360:	b21b      	sxth	r3, r3
 8017362:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017366:	b21c      	sxth	r4, r3
 8017368:	4b60      	ldr	r3, [pc, #384]	@ (80174ec <tcp_receive+0x888>)
 801736a:	68db      	ldr	r3, [r3, #12]
 801736c:	899b      	ldrh	r3, [r3, #12]
 801736e:	b29b      	uxth	r3, r3
 8017370:	4618      	mov	r0, r3
 8017372:	f7fa fd6b 	bl	8011e4c <lwip_htons>
 8017376:	4603      	mov	r3, r0
 8017378:	b2db      	uxtb	r3, r3
 801737a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801737e:	b29b      	uxth	r3, r3
 8017380:	4618      	mov	r0, r3
 8017382:	f7fa fd63 	bl	8011e4c <lwip_htons>
 8017386:	4603      	mov	r3, r0
 8017388:	b21b      	sxth	r3, r3
 801738a:	4323      	orrs	r3, r4
 801738c:	b21a      	sxth	r2, r3
 801738e:	4b57      	ldr	r3, [pc, #348]	@ (80174ec <tcp_receive+0x888>)
 8017390:	68db      	ldr	r3, [r3, #12]
 8017392:	b292      	uxth	r2, r2
 8017394:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801739a:	4b54      	ldr	r3, [pc, #336]	@ (80174ec <tcp_receive+0x888>)
 801739c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801739e:	4b53      	ldr	r3, [pc, #332]	@ (80174ec <tcp_receive+0x888>)
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	899b      	ldrh	r3, [r3, #12]
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7fa fd50 	bl	8011e4c <lwip_htons>
 80173ac:	4603      	mov	r3, r0
 80173ae:	b2db      	uxtb	r3, r3
 80173b0:	f003 0302 	and.w	r3, r3, #2
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d005      	beq.n	80173c4 <tcp_receive+0x760>
            inseg.len -= 1;
 80173b8:	4b4c      	ldr	r3, [pc, #304]	@ (80174ec <tcp_receive+0x888>)
 80173ba:	891b      	ldrh	r3, [r3, #8]
 80173bc:	3b01      	subs	r3, #1
 80173be:	b29a      	uxth	r2, r3
 80173c0:	4b4a      	ldr	r3, [pc, #296]	@ (80174ec <tcp_receive+0x888>)
 80173c2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80173c4:	4b49      	ldr	r3, [pc, #292]	@ (80174ec <tcp_receive+0x888>)
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	4a48      	ldr	r2, [pc, #288]	@ (80174ec <tcp_receive+0x888>)
 80173ca:	8912      	ldrh	r2, [r2, #8]
 80173cc:	4611      	mov	r1, r2
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fb ff76 	bl	80132c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80173d4:	4b45      	ldr	r3, [pc, #276]	@ (80174ec <tcp_receive+0x888>)
 80173d6:	891c      	ldrh	r4, [r3, #8]
 80173d8:	4b44      	ldr	r3, [pc, #272]	@ (80174ec <tcp_receive+0x888>)
 80173da:	68db      	ldr	r3, [r3, #12]
 80173dc:	899b      	ldrh	r3, [r3, #12]
 80173de:	b29b      	uxth	r3, r3
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7fa fd33 	bl	8011e4c <lwip_htons>
 80173e6:	4603      	mov	r3, r0
 80173e8:	b2db      	uxtb	r3, r3
 80173ea:	f003 0303 	and.w	r3, r3, #3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d001      	beq.n	80173f6 <tcp_receive+0x792>
 80173f2:	2301      	movs	r3, #1
 80173f4:	e000      	b.n	80173f8 <tcp_receive+0x794>
 80173f6:	2300      	movs	r3, #0
 80173f8:	4423      	add	r3, r4
 80173fa:	b29a      	uxth	r2, r3
 80173fc:	4b3c      	ldr	r3, [pc, #240]	@ (80174f0 <tcp_receive+0x88c>)
 80173fe:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017400:	4b3b      	ldr	r3, [pc, #236]	@ (80174f0 <tcp_receive+0x88c>)
 8017402:	881b      	ldrh	r3, [r3, #0]
 8017404:	461a      	mov	r2, r3
 8017406:	4b38      	ldr	r3, [pc, #224]	@ (80174e8 <tcp_receive+0x884>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	441a      	add	r2, r3
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017410:	6879      	ldr	r1, [r7, #4]
 8017412:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017414:	440b      	add	r3, r1
 8017416:	429a      	cmp	r2, r3
 8017418:	d006      	beq.n	8017428 <tcp_receive+0x7c4>
 801741a:	4b36      	ldr	r3, [pc, #216]	@ (80174f4 <tcp_receive+0x890>)
 801741c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017420:	4935      	ldr	r1, [pc, #212]	@ (80174f8 <tcp_receive+0x894>)
 8017422:	4836      	ldr	r0, [pc, #216]	@ (80174fc <tcp_receive+0x898>)
 8017424:	f006 f98a 	bl	801d73c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801742c:	2b00      	cmp	r3, #0
 801742e:	f000 80e6 	beq.w	80175fe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017432:	4b2e      	ldr	r3, [pc, #184]	@ (80174ec <tcp_receive+0x888>)
 8017434:	68db      	ldr	r3, [r3, #12]
 8017436:	899b      	ldrh	r3, [r3, #12]
 8017438:	b29b      	uxth	r3, r3
 801743a:	4618      	mov	r0, r3
 801743c:	f7fa fd06 	bl	8011e4c <lwip_htons>
 8017440:	4603      	mov	r3, r0
 8017442:	b2db      	uxtb	r3, r3
 8017444:	f003 0301 	and.w	r3, r3, #1
 8017448:	2b00      	cmp	r3, #0
 801744a:	d010      	beq.n	801746e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801744c:	e00a      	b.n	8017464 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017452:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017458:	681a      	ldr	r2, [r3, #0]
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801745e:	68f8      	ldr	r0, [r7, #12]
 8017460:	f7fd fcef 	bl	8014e42 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017468:	2b00      	cmp	r3, #0
 801746a:	d1f0      	bne.n	801744e <tcp_receive+0x7ea>
 801746c:	e0c7      	b.n	80175fe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017472:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017474:	e051      	b.n	801751a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	899b      	ldrh	r3, [r3, #12]
 801747c:	b29b      	uxth	r3, r3
 801747e:	4618      	mov	r0, r3
 8017480:	f7fa fce4 	bl	8011e4c <lwip_htons>
 8017484:	4603      	mov	r3, r0
 8017486:	b2db      	uxtb	r3, r3
 8017488:	f003 0301 	and.w	r3, r3, #1
 801748c:	2b00      	cmp	r3, #0
 801748e:	d03c      	beq.n	801750a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017490:	4b16      	ldr	r3, [pc, #88]	@ (80174ec <tcp_receive+0x888>)
 8017492:	68db      	ldr	r3, [r3, #12]
 8017494:	899b      	ldrh	r3, [r3, #12]
 8017496:	b29b      	uxth	r3, r3
 8017498:	4618      	mov	r0, r3
 801749a:	f7fa fcd7 	bl	8011e4c <lwip_htons>
 801749e:	4603      	mov	r3, r0
 80174a0:	b2db      	uxtb	r3, r3
 80174a2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d12f      	bne.n	801750a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80174aa:	4b10      	ldr	r3, [pc, #64]	@ (80174ec <tcp_receive+0x888>)
 80174ac:	68db      	ldr	r3, [r3, #12]
 80174ae:	899b      	ldrh	r3, [r3, #12]
 80174b0:	b29c      	uxth	r4, r3
 80174b2:	2001      	movs	r0, #1
 80174b4:	f7fa fcca 	bl	8011e4c <lwip_htons>
 80174b8:	4603      	mov	r3, r0
 80174ba:	461a      	mov	r2, r3
 80174bc:	4b0b      	ldr	r3, [pc, #44]	@ (80174ec <tcp_receive+0x888>)
 80174be:	68db      	ldr	r3, [r3, #12]
 80174c0:	4322      	orrs	r2, r4
 80174c2:	b292      	uxth	r2, r2
 80174c4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80174c6:	4b09      	ldr	r3, [pc, #36]	@ (80174ec <tcp_receive+0x888>)
 80174c8:	891c      	ldrh	r4, [r3, #8]
 80174ca:	4b08      	ldr	r3, [pc, #32]	@ (80174ec <tcp_receive+0x888>)
 80174cc:	68db      	ldr	r3, [r3, #12]
 80174ce:	899b      	ldrh	r3, [r3, #12]
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	4618      	mov	r0, r3
 80174d4:	f7fa fcba 	bl	8011e4c <lwip_htons>
 80174d8:	4603      	mov	r3, r0
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	f003 0303 	and.w	r3, r3, #3
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d00d      	beq.n	8017500 <tcp_receive+0x89c>
 80174e4:	2301      	movs	r3, #1
 80174e6:	e00c      	b.n	8017502 <tcp_receive+0x89e>
 80174e8:	2000c9e8 	.word	0x2000c9e8
 80174ec:	2000c9c8 	.word	0x2000c9c8
 80174f0:	2000c9f2 	.word	0x2000c9f2
 80174f4:	08021844 	.word	0x08021844
 80174f8:	08021bec 	.word	0x08021bec
 80174fc:	08021890 	.word	0x08021890
 8017500:	2300      	movs	r3, #0
 8017502:	4423      	add	r3, r4
 8017504:	b29a      	uxth	r2, r3
 8017506:	4b98      	ldr	r3, [pc, #608]	@ (8017768 <tcp_receive+0xb04>)
 8017508:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801750a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801750c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801750e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017514:	6938      	ldr	r0, [r7, #16]
 8017516:	f7fd fc94 	bl	8014e42 <tcp_seg_free>
            while (next &&
 801751a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801751c:	2b00      	cmp	r3, #0
 801751e:	d00e      	beq.n	801753e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017520:	4b91      	ldr	r3, [pc, #580]	@ (8017768 <tcp_receive+0xb04>)
 8017522:	881b      	ldrh	r3, [r3, #0]
 8017524:	461a      	mov	r2, r3
 8017526:	4b91      	ldr	r3, [pc, #580]	@ (801776c <tcp_receive+0xb08>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	441a      	add	r2, r3
 801752c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	685b      	ldr	r3, [r3, #4]
 8017532:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017534:	8909      	ldrh	r1, [r1, #8]
 8017536:	440b      	add	r3, r1
 8017538:	1ad3      	subs	r3, r2, r3
            while (next &&
 801753a:	2b00      	cmp	r3, #0
 801753c:	da9b      	bge.n	8017476 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801753e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017540:	2b00      	cmp	r3, #0
 8017542:	d059      	beq.n	80175f8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017544:	4b88      	ldr	r3, [pc, #544]	@ (8017768 <tcp_receive+0xb04>)
 8017546:	881b      	ldrh	r3, [r3, #0]
 8017548:	461a      	mov	r2, r3
 801754a:	4b88      	ldr	r3, [pc, #544]	@ (801776c <tcp_receive+0xb08>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	441a      	add	r2, r3
 8017550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017558:	2b00      	cmp	r3, #0
 801755a:	dd4d      	ble.n	80175f8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801755c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801755e:	68db      	ldr	r3, [r3, #12]
 8017560:	685b      	ldr	r3, [r3, #4]
 8017562:	b29a      	uxth	r2, r3
 8017564:	4b81      	ldr	r3, [pc, #516]	@ (801776c <tcp_receive+0xb08>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	b29b      	uxth	r3, r3
 801756a:	1ad3      	subs	r3, r2, r3
 801756c:	b29a      	uxth	r2, r3
 801756e:	4b80      	ldr	r3, [pc, #512]	@ (8017770 <tcp_receive+0xb0c>)
 8017570:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017572:	4b7f      	ldr	r3, [pc, #508]	@ (8017770 <tcp_receive+0xb0c>)
 8017574:	68db      	ldr	r3, [r3, #12]
 8017576:	899b      	ldrh	r3, [r3, #12]
 8017578:	b29b      	uxth	r3, r3
 801757a:	4618      	mov	r0, r3
 801757c:	f7fa fc66 	bl	8011e4c <lwip_htons>
 8017580:	4603      	mov	r3, r0
 8017582:	b2db      	uxtb	r3, r3
 8017584:	f003 0302 	and.w	r3, r3, #2
 8017588:	2b00      	cmp	r3, #0
 801758a:	d005      	beq.n	8017598 <tcp_receive+0x934>
                inseg.len -= 1;
 801758c:	4b78      	ldr	r3, [pc, #480]	@ (8017770 <tcp_receive+0xb0c>)
 801758e:	891b      	ldrh	r3, [r3, #8]
 8017590:	3b01      	subs	r3, #1
 8017592:	b29a      	uxth	r2, r3
 8017594:	4b76      	ldr	r3, [pc, #472]	@ (8017770 <tcp_receive+0xb0c>)
 8017596:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017598:	4b75      	ldr	r3, [pc, #468]	@ (8017770 <tcp_receive+0xb0c>)
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	4a74      	ldr	r2, [pc, #464]	@ (8017770 <tcp_receive+0xb0c>)
 801759e:	8912      	ldrh	r2, [r2, #8]
 80175a0:	4611      	mov	r1, r2
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7fb fe8c 	bl	80132c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80175a8:	4b71      	ldr	r3, [pc, #452]	@ (8017770 <tcp_receive+0xb0c>)
 80175aa:	891c      	ldrh	r4, [r3, #8]
 80175ac:	4b70      	ldr	r3, [pc, #448]	@ (8017770 <tcp_receive+0xb0c>)
 80175ae:	68db      	ldr	r3, [r3, #12]
 80175b0:	899b      	ldrh	r3, [r3, #12]
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	4618      	mov	r0, r3
 80175b6:	f7fa fc49 	bl	8011e4c <lwip_htons>
 80175ba:	4603      	mov	r3, r0
 80175bc:	b2db      	uxtb	r3, r3
 80175be:	f003 0303 	and.w	r3, r3, #3
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d001      	beq.n	80175ca <tcp_receive+0x966>
 80175c6:	2301      	movs	r3, #1
 80175c8:	e000      	b.n	80175cc <tcp_receive+0x968>
 80175ca:	2300      	movs	r3, #0
 80175cc:	4423      	add	r3, r4
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	4b65      	ldr	r3, [pc, #404]	@ (8017768 <tcp_receive+0xb04>)
 80175d2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80175d4:	4b64      	ldr	r3, [pc, #400]	@ (8017768 <tcp_receive+0xb04>)
 80175d6:	881b      	ldrh	r3, [r3, #0]
 80175d8:	461a      	mov	r2, r3
 80175da:	4b64      	ldr	r3, [pc, #400]	@ (801776c <tcp_receive+0xb08>)
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	441a      	add	r2, r3
 80175e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175e2:	68db      	ldr	r3, [r3, #12]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	429a      	cmp	r2, r3
 80175e8:	d006      	beq.n	80175f8 <tcp_receive+0x994>
 80175ea:	4b62      	ldr	r3, [pc, #392]	@ (8017774 <tcp_receive+0xb10>)
 80175ec:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80175f0:	4961      	ldr	r1, [pc, #388]	@ (8017778 <tcp_receive+0xb14>)
 80175f2:	4862      	ldr	r0, [pc, #392]	@ (801777c <tcp_receive+0xb18>)
 80175f4:	f006 f8a2 	bl	801d73c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80175fc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80175fe:	4b5a      	ldr	r3, [pc, #360]	@ (8017768 <tcp_receive+0xb04>)
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	461a      	mov	r2, r3
 8017604:	4b59      	ldr	r3, [pc, #356]	@ (801776c <tcp_receive+0xb08>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	441a      	add	r2, r3
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017612:	4b55      	ldr	r3, [pc, #340]	@ (8017768 <tcp_receive+0xb04>)
 8017614:	881b      	ldrh	r3, [r3, #0]
 8017616:	429a      	cmp	r2, r3
 8017618:	d206      	bcs.n	8017628 <tcp_receive+0x9c4>
 801761a:	4b56      	ldr	r3, [pc, #344]	@ (8017774 <tcp_receive+0xb10>)
 801761c:	f240 6207 	movw	r2, #1543	@ 0x607
 8017620:	4957      	ldr	r1, [pc, #348]	@ (8017780 <tcp_receive+0xb1c>)
 8017622:	4856      	ldr	r0, [pc, #344]	@ (801777c <tcp_receive+0xb18>)
 8017624:	f006 f88a 	bl	801d73c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801762c:	4b4e      	ldr	r3, [pc, #312]	@ (8017768 <tcp_receive+0xb04>)
 801762e:	881b      	ldrh	r3, [r3, #0]
 8017630:	1ad3      	subs	r3, r2, r3
 8017632:	b29a      	uxth	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7fc fedb 	bl	80143f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801763e:	4b4c      	ldr	r3, [pc, #304]	@ (8017770 <tcp_receive+0xb0c>)
 8017640:	685b      	ldr	r3, [r3, #4]
 8017642:	891b      	ldrh	r3, [r3, #8]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d006      	beq.n	8017656 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8017648:	4b49      	ldr	r3, [pc, #292]	@ (8017770 <tcp_receive+0xb0c>)
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	4a4d      	ldr	r2, [pc, #308]	@ (8017784 <tcp_receive+0xb20>)
 801764e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017650:	4b47      	ldr	r3, [pc, #284]	@ (8017770 <tcp_receive+0xb0c>)
 8017652:	2200      	movs	r2, #0
 8017654:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017656:	4b46      	ldr	r3, [pc, #280]	@ (8017770 <tcp_receive+0xb0c>)
 8017658:	68db      	ldr	r3, [r3, #12]
 801765a:	899b      	ldrh	r3, [r3, #12]
 801765c:	b29b      	uxth	r3, r3
 801765e:	4618      	mov	r0, r3
 8017660:	f7fa fbf4 	bl	8011e4c <lwip_htons>
 8017664:	4603      	mov	r3, r0
 8017666:	b2db      	uxtb	r3, r3
 8017668:	f003 0301 	and.w	r3, r3, #1
 801766c:	2b00      	cmp	r3, #0
 801766e:	f000 80b8 	beq.w	80177e2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017672:	4b45      	ldr	r3, [pc, #276]	@ (8017788 <tcp_receive+0xb24>)
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	f043 0320 	orr.w	r3, r3, #32
 801767a:	b2da      	uxtb	r2, r3
 801767c:	4b42      	ldr	r3, [pc, #264]	@ (8017788 <tcp_receive+0xb24>)
 801767e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017680:	e0af      	b.n	80177e2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017686:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801768c:	68db      	ldr	r3, [r3, #12]
 801768e:	685b      	ldr	r3, [r3, #4]
 8017690:	4a36      	ldr	r2, [pc, #216]	@ (801776c <tcp_receive+0xb08>)
 8017692:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017694:	68bb      	ldr	r3, [r7, #8]
 8017696:	891b      	ldrh	r3, [r3, #8]
 8017698:	461c      	mov	r4, r3
 801769a:	68bb      	ldr	r3, [r7, #8]
 801769c:	68db      	ldr	r3, [r3, #12]
 801769e:	899b      	ldrh	r3, [r3, #12]
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fa fbd2 	bl	8011e4c <lwip_htons>
 80176a8:	4603      	mov	r3, r0
 80176aa:	b2db      	uxtb	r3, r3
 80176ac:	f003 0303 	and.w	r3, r3, #3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d001      	beq.n	80176b8 <tcp_receive+0xa54>
 80176b4:	2301      	movs	r3, #1
 80176b6:	e000      	b.n	80176ba <tcp_receive+0xa56>
 80176b8:	2300      	movs	r3, #0
 80176ba:	191a      	adds	r2, r3, r4
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176c0:	441a      	add	r2, r3
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80176ca:	461c      	mov	r4, r3
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	891b      	ldrh	r3, [r3, #8]
 80176d0:	461d      	mov	r5, r3
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	68db      	ldr	r3, [r3, #12]
 80176d6:	899b      	ldrh	r3, [r3, #12]
 80176d8:	b29b      	uxth	r3, r3
 80176da:	4618      	mov	r0, r3
 80176dc:	f7fa fbb6 	bl	8011e4c <lwip_htons>
 80176e0:	4603      	mov	r3, r0
 80176e2:	b2db      	uxtb	r3, r3
 80176e4:	f003 0303 	and.w	r3, r3, #3
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d001      	beq.n	80176f0 <tcp_receive+0xa8c>
 80176ec:	2301      	movs	r3, #1
 80176ee:	e000      	b.n	80176f2 <tcp_receive+0xa8e>
 80176f0:	2300      	movs	r3, #0
 80176f2:	442b      	add	r3, r5
 80176f4:	429c      	cmp	r4, r3
 80176f6:	d206      	bcs.n	8017706 <tcp_receive+0xaa2>
 80176f8:	4b1e      	ldr	r3, [pc, #120]	@ (8017774 <tcp_receive+0xb10>)
 80176fa:	f240 622b 	movw	r2, #1579	@ 0x62b
 80176fe:	4923      	ldr	r1, [pc, #140]	@ (801778c <tcp_receive+0xb28>)
 8017700:	481e      	ldr	r0, [pc, #120]	@ (801777c <tcp_receive+0xb18>)
 8017702:	f006 f81b 	bl	801d73c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	891b      	ldrh	r3, [r3, #8]
 801770a:	461c      	mov	r4, r3
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	68db      	ldr	r3, [r3, #12]
 8017710:	899b      	ldrh	r3, [r3, #12]
 8017712:	b29b      	uxth	r3, r3
 8017714:	4618      	mov	r0, r3
 8017716:	f7fa fb99 	bl	8011e4c <lwip_htons>
 801771a:	4603      	mov	r3, r0
 801771c:	b2db      	uxtb	r3, r3
 801771e:	f003 0303 	and.w	r3, r3, #3
 8017722:	2b00      	cmp	r3, #0
 8017724:	d001      	beq.n	801772a <tcp_receive+0xac6>
 8017726:	2301      	movs	r3, #1
 8017728:	e000      	b.n	801772c <tcp_receive+0xac8>
 801772a:	2300      	movs	r3, #0
 801772c:	1919      	adds	r1, r3, r4
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017732:	b28b      	uxth	r3, r1
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	b29a      	uxth	r2, r3
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f7fc fe59 	bl	80143f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	891b      	ldrh	r3, [r3, #8]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d028      	beq.n	801779e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801774c:	4b0d      	ldr	r3, [pc, #52]	@ (8017784 <tcp_receive+0xb20>)
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d01d      	beq.n	8017790 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8017754:	4b0b      	ldr	r3, [pc, #44]	@ (8017784 <tcp_receive+0xb20>)
 8017756:	681a      	ldr	r2, [r3, #0]
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	685b      	ldr	r3, [r3, #4]
 801775c:	4619      	mov	r1, r3
 801775e:	4610      	mov	r0, r2
 8017760:	f7fc f802 	bl	8013768 <pbuf_cat>
 8017764:	e018      	b.n	8017798 <tcp_receive+0xb34>
 8017766:	bf00      	nop
 8017768:	2000c9f2 	.word	0x2000c9f2
 801776c:	2000c9e8 	.word	0x2000c9e8
 8017770:	2000c9c8 	.word	0x2000c9c8
 8017774:	08021844 	.word	0x08021844
 8017778:	08021c24 	.word	0x08021c24
 801777c:	08021890 	.word	0x08021890
 8017780:	08021c60 	.word	0x08021c60
 8017784:	2000c9f8 	.word	0x2000c9f8
 8017788:	2000c9f5 	.word	0x2000c9f5
 801778c:	08021c80 	.word	0x08021c80
            } else {
              recv_data = cseg->p;
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	4a70      	ldr	r2, [pc, #448]	@ (8017958 <tcp_receive+0xcf4>)
 8017796:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2200      	movs	r2, #0
 801779c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	68db      	ldr	r3, [r3, #12]
 80177a2:	899b      	ldrh	r3, [r3, #12]
 80177a4:	b29b      	uxth	r3, r3
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7fa fb50 	bl	8011e4c <lwip_htons>
 80177ac:	4603      	mov	r3, r0
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	f003 0301 	and.w	r3, r3, #1
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d00d      	beq.n	80177d4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80177b8:	4b68      	ldr	r3, [pc, #416]	@ (801795c <tcp_receive+0xcf8>)
 80177ba:	781b      	ldrb	r3, [r3, #0]
 80177bc:	f043 0320 	orr.w	r3, r3, #32
 80177c0:	b2da      	uxtb	r2, r3
 80177c2:	4b66      	ldr	r3, [pc, #408]	@ (801795c <tcp_receive+0xcf8>)
 80177c4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	7d1b      	ldrb	r3, [r3, #20]
 80177ca:	2b04      	cmp	r3, #4
 80177cc:	d102      	bne.n	80177d4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	2207      	movs	r2, #7
 80177d2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	681a      	ldr	r2, [r3, #0]
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80177dc:	68b8      	ldr	r0, [r7, #8]
 80177de:	f7fd fb30 	bl	8014e42 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d008      	beq.n	80177fc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177ee:	68db      	ldr	r3, [r3, #12]
 80177f0:	685a      	ldr	r2, [r3, #4]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80177f6:	429a      	cmp	r2, r3
 80177f8:	f43f af43 	beq.w	8017682 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	8b5b      	ldrh	r3, [r3, #26]
 8017800:	f003 0301 	and.w	r3, r3, #1
 8017804:	2b00      	cmp	r3, #0
 8017806:	d00e      	beq.n	8017826 <tcp_receive+0xbc2>
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	8b5b      	ldrh	r3, [r3, #26]
 801780c:	f023 0301 	bic.w	r3, r3, #1
 8017810:	b29a      	uxth	r2, r3
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	835a      	strh	r2, [r3, #26]
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	8b5b      	ldrh	r3, [r3, #26]
 801781a:	f043 0302 	orr.w	r3, r3, #2
 801781e:	b29a      	uxth	r2, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017824:	e187      	b.n	8017b36 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	8b5b      	ldrh	r3, [r3, #26]
 801782a:	f043 0301 	orr.w	r3, r3, #1
 801782e:	b29a      	uxth	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017834:	e17f      	b.n	8017b36 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801783a:	2b00      	cmp	r3, #0
 801783c:	d106      	bne.n	801784c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801783e:	4848      	ldr	r0, [pc, #288]	@ (8017960 <tcp_receive+0xcfc>)
 8017840:	f7fd fb36 	bl	8014eb0 <tcp_seg_copy>
 8017844:	4602      	mov	r2, r0
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	675a      	str	r2, [r3, #116]	@ 0x74
 801784a:	e16c      	b.n	8017b26 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801784c:	2300      	movs	r3, #0
 801784e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017854:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017856:	e156      	b.n	8017b06 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8017858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801785a:	68db      	ldr	r3, [r3, #12]
 801785c:	685a      	ldr	r2, [r3, #4]
 801785e:	4b41      	ldr	r3, [pc, #260]	@ (8017964 <tcp_receive+0xd00>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	429a      	cmp	r2, r3
 8017864:	d11d      	bne.n	80178a2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017866:	4b3e      	ldr	r3, [pc, #248]	@ (8017960 <tcp_receive+0xcfc>)
 8017868:	891a      	ldrh	r2, [r3, #8]
 801786a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801786c:	891b      	ldrh	r3, [r3, #8]
 801786e:	429a      	cmp	r2, r3
 8017870:	f240 814e 	bls.w	8017b10 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017874:	483a      	ldr	r0, [pc, #232]	@ (8017960 <tcp_receive+0xcfc>)
 8017876:	f7fd fb1b 	bl	8014eb0 <tcp_seg_copy>
 801787a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801787c:	697b      	ldr	r3, [r7, #20]
 801787e:	2b00      	cmp	r3, #0
 8017880:	f000 8148 	beq.w	8017b14 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8017884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017886:	2b00      	cmp	r3, #0
 8017888:	d003      	beq.n	8017892 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801788a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801788c:	697a      	ldr	r2, [r7, #20]
 801788e:	601a      	str	r2, [r3, #0]
 8017890:	e002      	b.n	8017898 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	697a      	ldr	r2, [r7, #20]
 8017896:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017898:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801789a:	6978      	ldr	r0, [r7, #20]
 801789c:	f7ff f8de 	bl	8016a5c <tcp_oos_insert_segment>
                }
                break;
 80178a0:	e138      	b.n	8017b14 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80178a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d117      	bne.n	80178d8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80178a8:	4b2e      	ldr	r3, [pc, #184]	@ (8017964 <tcp_receive+0xd00>)
 80178aa:	681a      	ldr	r2, [r3, #0]
 80178ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178ae:	68db      	ldr	r3, [r3, #12]
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	1ad3      	subs	r3, r2, r3
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	da57      	bge.n	8017968 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80178b8:	4829      	ldr	r0, [pc, #164]	@ (8017960 <tcp_receive+0xcfc>)
 80178ba:	f7fd faf9 	bl	8014eb0 <tcp_seg_copy>
 80178be:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80178c0:	69bb      	ldr	r3, [r7, #24]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	f000 8128 	beq.w	8017b18 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	69ba      	ldr	r2, [r7, #24]
 80178cc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80178ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80178d0:	69b8      	ldr	r0, [r7, #24]
 80178d2:	f7ff f8c3 	bl	8016a5c <tcp_oos_insert_segment>
                  }
                  break;
 80178d6:	e11f      	b.n	8017b18 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80178d8:	4b22      	ldr	r3, [pc, #136]	@ (8017964 <tcp_receive+0xd00>)
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	685b      	ldr	r3, [r3, #4]
 80178e2:	1ad3      	subs	r3, r2, r3
 80178e4:	3b01      	subs	r3, #1
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	db3e      	blt.n	8017968 <tcp_receive+0xd04>
 80178ea:	4b1e      	ldr	r3, [pc, #120]	@ (8017964 <tcp_receive+0xd00>)
 80178ec:	681a      	ldr	r2, [r3, #0]
 80178ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80178f0:	68db      	ldr	r3, [r3, #12]
 80178f2:	685b      	ldr	r3, [r3, #4]
 80178f4:	1ad3      	subs	r3, r2, r3
 80178f6:	3301      	adds	r3, #1
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	dc35      	bgt.n	8017968 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80178fc:	4818      	ldr	r0, [pc, #96]	@ (8017960 <tcp_receive+0xcfc>)
 80178fe:	f7fd fad7 	bl	8014eb0 <tcp_seg_copy>
 8017902:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017904:	69fb      	ldr	r3, [r7, #28]
 8017906:	2b00      	cmp	r3, #0
 8017908:	f000 8108 	beq.w	8017b1c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801790c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801790e:	68db      	ldr	r3, [r3, #12]
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017914:	8912      	ldrh	r2, [r2, #8]
 8017916:	441a      	add	r2, r3
 8017918:	4b12      	ldr	r3, [pc, #72]	@ (8017964 <tcp_receive+0xd00>)
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	1ad3      	subs	r3, r2, r3
 801791e:	2b00      	cmp	r3, #0
 8017920:	dd12      	ble.n	8017948 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017922:	4b10      	ldr	r3, [pc, #64]	@ (8017964 <tcp_receive+0xd00>)
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	b29a      	uxth	r2, r3
 8017928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801792a:	68db      	ldr	r3, [r3, #12]
 801792c:	685b      	ldr	r3, [r3, #4]
 801792e:	b29b      	uxth	r3, r3
 8017930:	1ad3      	subs	r3, r2, r3
 8017932:	b29a      	uxth	r2, r3
 8017934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017936:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801793a:	685a      	ldr	r2, [r3, #4]
 801793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801793e:	891b      	ldrh	r3, [r3, #8]
 8017940:	4619      	mov	r1, r3
 8017942:	4610      	mov	r0, r2
 8017944:	f7fb fcbc 	bl	80132c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801794a:	69fa      	ldr	r2, [r7, #28]
 801794c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801794e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8017950:	69f8      	ldr	r0, [r7, #28]
 8017952:	f7ff f883 	bl	8016a5c <tcp_oos_insert_segment>
                  }
                  break;
 8017956:	e0e1      	b.n	8017b1c <tcp_receive+0xeb8>
 8017958:	2000c9f8 	.word	0x2000c9f8
 801795c:	2000c9f5 	.word	0x2000c9f5
 8017960:	2000c9c8 	.word	0x2000c9c8
 8017964:	2000c9e8 	.word	0x2000c9e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801796a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	f040 80c5 	bne.w	8017b00 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017976:	4b7f      	ldr	r3, [pc, #508]	@ (8017b74 <tcp_receive+0xf10>)
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801797c:	68db      	ldr	r3, [r3, #12]
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017982:	2b00      	cmp	r3, #0
 8017984:	f340 80bc 	ble.w	8017b00 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	899b      	ldrh	r3, [r3, #12]
 801798e:	b29b      	uxth	r3, r3
 8017990:	4618      	mov	r0, r3
 8017992:	f7fa fa5b 	bl	8011e4c <lwip_htons>
 8017996:	4603      	mov	r3, r0
 8017998:	b2db      	uxtb	r3, r3
 801799a:	f003 0301 	and.w	r3, r3, #1
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f040 80be 	bne.w	8017b20 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80179a4:	4874      	ldr	r0, [pc, #464]	@ (8017b78 <tcp_receive+0xf14>)
 80179a6:	f7fd fa83 	bl	8014eb0 <tcp_seg_copy>
 80179aa:	4602      	mov	r2, r0
 80179ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179ae:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80179b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	f000 80b5 	beq.w	8017b24 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80179ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80179c2:	8912      	ldrh	r2, [r2, #8]
 80179c4:	441a      	add	r2, r3
 80179c6:	4b6b      	ldr	r3, [pc, #428]	@ (8017b74 <tcp_receive+0xf10>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	1ad3      	subs	r3, r2, r3
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	dd12      	ble.n	80179f6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80179d0:	4b68      	ldr	r3, [pc, #416]	@ (8017b74 <tcp_receive+0xf10>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	b29a      	uxth	r2, r3
 80179d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179d8:	68db      	ldr	r3, [r3, #12]
 80179da:	685b      	ldr	r3, [r3, #4]
 80179dc:	b29b      	uxth	r3, r3
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	b29a      	uxth	r2, r3
 80179e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80179e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179e8:	685a      	ldr	r2, [r3, #4]
 80179ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80179ec:	891b      	ldrh	r3, [r3, #8]
 80179ee:	4619      	mov	r1, r3
 80179f0:	4610      	mov	r0, r2
 80179f2:	f7fb fc65 	bl	80132c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80179f6:	4b61      	ldr	r3, [pc, #388]	@ (8017b7c <tcp_receive+0xf18>)
 80179f8:	881b      	ldrh	r3, [r3, #0]
 80179fa:	461a      	mov	r2, r3
 80179fc:	4b5d      	ldr	r3, [pc, #372]	@ (8017b74 <tcp_receive+0xf10>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	441a      	add	r2, r3
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017a0a:	440b      	add	r3, r1
 8017a0c:	1ad3      	subs	r3, r2, r3
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	f340 8088 	ble.w	8017b24 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	899b      	ldrh	r3, [r3, #12]
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7fa fa14 	bl	8011e4c <lwip_htons>
 8017a24:	4603      	mov	r3, r0
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	f003 0301 	and.w	r3, r3, #1
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d021      	beq.n	8017a74 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	68db      	ldr	r3, [r3, #12]
 8017a36:	899b      	ldrh	r3, [r3, #12]
 8017a38:	b29b      	uxth	r3, r3
 8017a3a:	b21b      	sxth	r3, r3
 8017a3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017a40:	b21c      	sxth	r4, r3
 8017a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	68db      	ldr	r3, [r3, #12]
 8017a48:	899b      	ldrh	r3, [r3, #12]
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7fa f9fd 	bl	8011e4c <lwip_htons>
 8017a52:	4603      	mov	r3, r0
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7fa f9f5 	bl	8011e4c <lwip_htons>
 8017a62:	4603      	mov	r3, r0
 8017a64:	b21b      	sxth	r3, r3
 8017a66:	4323      	orrs	r3, r4
 8017a68:	b21a      	sxth	r2, r3
 8017a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	68db      	ldr	r3, [r3, #12]
 8017a70:	b292      	uxth	r2, r2
 8017a72:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a78:	b29a      	uxth	r2, r3
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a7e:	4413      	add	r3, r2
 8017a80:	b299      	uxth	r1, r3
 8017a82:	4b3c      	ldr	r3, [pc, #240]	@ (8017b74 <tcp_receive+0xf10>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	b29a      	uxth	r2, r3
 8017a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	1a8a      	subs	r2, r1, r2
 8017a8e:	b292      	uxth	r2, r2
 8017a90:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	685a      	ldr	r2, [r3, #4]
 8017a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	891b      	ldrh	r3, [r3, #8]
 8017a9e:	4619      	mov	r1, r3
 8017aa0:	4610      	mov	r0, r2
 8017aa2:	f7fb fc0d 	bl	80132c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	891c      	ldrh	r4, [r3, #8]
 8017aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	68db      	ldr	r3, [r3, #12]
 8017ab2:	899b      	ldrh	r3, [r3, #12]
 8017ab4:	b29b      	uxth	r3, r3
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7fa f9c8 	bl	8011e4c <lwip_htons>
 8017abc:	4603      	mov	r3, r0
 8017abe:	b2db      	uxtb	r3, r3
 8017ac0:	f003 0303 	and.w	r3, r3, #3
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d001      	beq.n	8017acc <tcp_receive+0xe68>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	e000      	b.n	8017ace <tcp_receive+0xe6a>
 8017acc:	2300      	movs	r3, #0
 8017ace:	4423      	add	r3, r4
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8017b7c <tcp_receive+0xf18>)
 8017ad4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017ad6:	4b29      	ldr	r3, [pc, #164]	@ (8017b7c <tcp_receive+0xf18>)
 8017ad8:	881b      	ldrh	r3, [r3, #0]
 8017ada:	461a      	mov	r2, r3
 8017adc:	4b25      	ldr	r3, [pc, #148]	@ (8017b74 <tcp_receive+0xf10>)
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	441a      	add	r2, r3
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ae6:	6879      	ldr	r1, [r7, #4]
 8017ae8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017aea:	440b      	add	r3, r1
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d019      	beq.n	8017b24 <tcp_receive+0xec0>
 8017af0:	4b23      	ldr	r3, [pc, #140]	@ (8017b80 <tcp_receive+0xf1c>)
 8017af2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8017af6:	4923      	ldr	r1, [pc, #140]	@ (8017b84 <tcp_receive+0xf20>)
 8017af8:	4823      	ldr	r0, [pc, #140]	@ (8017b88 <tcp_receive+0xf24>)
 8017afa:	f005 fe1f 	bl	801d73c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017afe:	e011      	b.n	8017b24 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f47f aea5 	bne.w	8017858 <tcp_receive+0xbf4>
 8017b0e:	e00a      	b.n	8017b26 <tcp_receive+0xec2>
                break;
 8017b10:	bf00      	nop
 8017b12:	e008      	b.n	8017b26 <tcp_receive+0xec2>
                break;
 8017b14:	bf00      	nop
 8017b16:	e006      	b.n	8017b26 <tcp_receive+0xec2>
                  break;
 8017b18:	bf00      	nop
 8017b1a:	e004      	b.n	8017b26 <tcp_receive+0xec2>
                  break;
 8017b1c:	bf00      	nop
 8017b1e:	e002      	b.n	8017b26 <tcp_receive+0xec2>
                  break;
 8017b20:	bf00      	nop
 8017b22:	e000      	b.n	8017b26 <tcp_receive+0xec2>
                break;
 8017b24:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017b26:	6878      	ldr	r0, [r7, #4]
 8017b28:	f001 fe88 	bl	801983c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017b2c:	e003      	b.n	8017b36 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	f001 fe84 	bl	801983c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017b34:	e01a      	b.n	8017b6c <tcp_receive+0xf08>
 8017b36:	e019      	b.n	8017b6c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017b38:	4b0e      	ldr	r3, [pc, #56]	@ (8017b74 <tcp_receive+0xf10>)
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b40:	1ad3      	subs	r3, r2, r3
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	db0a      	blt.n	8017b5c <tcp_receive+0xef8>
 8017b46:	4b0b      	ldr	r3, [pc, #44]	@ (8017b74 <tcp_receive+0xf10>)
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b4e:	6879      	ldr	r1, [r7, #4]
 8017b50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b52:	440b      	add	r3, r1
 8017b54:	1ad3      	subs	r3, r2, r3
 8017b56:	3301      	adds	r3, #1
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	dd07      	ble.n	8017b6c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	8b5b      	ldrh	r3, [r3, #26]
 8017b60:	f043 0302 	orr.w	r3, r3, #2
 8017b64:	b29a      	uxth	r2, r3
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017b6a:	e7ff      	b.n	8017b6c <tcp_receive+0xf08>
 8017b6c:	bf00      	nop
 8017b6e:	3750      	adds	r7, #80	@ 0x50
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bdb0      	pop	{r4, r5, r7, pc}
 8017b74:	2000c9e8 	.word	0x2000c9e8
 8017b78:	2000c9c8 	.word	0x2000c9c8
 8017b7c:	2000c9f2 	.word	0x2000c9f2
 8017b80:	08021844 	.word	0x08021844
 8017b84:	08021bec 	.word	0x08021bec
 8017b88:	08021890 	.word	0x08021890

08017b8c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017b8c:	b480      	push	{r7}
 8017b8e:	b083      	sub	sp, #12
 8017b90:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017b92:	4b15      	ldr	r3, [pc, #84]	@ (8017be8 <tcp_get_next_optbyte+0x5c>)
 8017b94:	881b      	ldrh	r3, [r3, #0]
 8017b96:	1c5a      	adds	r2, r3, #1
 8017b98:	b291      	uxth	r1, r2
 8017b9a:	4a13      	ldr	r2, [pc, #76]	@ (8017be8 <tcp_get_next_optbyte+0x5c>)
 8017b9c:	8011      	strh	r1, [r2, #0]
 8017b9e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017ba0:	4b12      	ldr	r3, [pc, #72]	@ (8017bec <tcp_get_next_optbyte+0x60>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d004      	beq.n	8017bb2 <tcp_get_next_optbyte+0x26>
 8017ba8:	4b11      	ldr	r3, [pc, #68]	@ (8017bf0 <tcp_get_next_optbyte+0x64>)
 8017baa:	881b      	ldrh	r3, [r3, #0]
 8017bac:	88fa      	ldrh	r2, [r7, #6]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d208      	bcs.n	8017bc4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017bb2:	4b10      	ldr	r3, [pc, #64]	@ (8017bf4 <tcp_get_next_optbyte+0x68>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	3314      	adds	r3, #20
 8017bb8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017bba:	88fb      	ldrh	r3, [r7, #6]
 8017bbc:	683a      	ldr	r2, [r7, #0]
 8017bbe:	4413      	add	r3, r2
 8017bc0:	781b      	ldrb	r3, [r3, #0]
 8017bc2:	e00b      	b.n	8017bdc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017bc4:	88fb      	ldrh	r3, [r7, #6]
 8017bc6:	b2da      	uxtb	r2, r3
 8017bc8:	4b09      	ldr	r3, [pc, #36]	@ (8017bf0 <tcp_get_next_optbyte+0x64>)
 8017bca:	881b      	ldrh	r3, [r3, #0]
 8017bcc:	b2db      	uxtb	r3, r3
 8017bce:	1ad3      	subs	r3, r2, r3
 8017bd0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017bd2:	4b06      	ldr	r3, [pc, #24]	@ (8017bec <tcp_get_next_optbyte+0x60>)
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	797b      	ldrb	r3, [r7, #5]
 8017bd8:	4413      	add	r3, r2
 8017bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017bdc:	4618      	mov	r0, r3
 8017bde:	370c      	adds	r7, #12
 8017be0:	46bd      	mov	sp, r7
 8017be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be6:	4770      	bx	lr
 8017be8:	2000c9e4 	.word	0x2000c9e4
 8017bec:	2000c9e0 	.word	0x2000c9e0
 8017bf0:	2000c9de 	.word	0x2000c9de
 8017bf4:	2000c9d8 	.word	0x2000c9d8

08017bf8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d106      	bne.n	8017c14 <tcp_parseopt+0x1c>
 8017c06:	4b32      	ldr	r3, [pc, #200]	@ (8017cd0 <tcp_parseopt+0xd8>)
 8017c08:	f240 727d 	movw	r2, #1917	@ 0x77d
 8017c0c:	4931      	ldr	r1, [pc, #196]	@ (8017cd4 <tcp_parseopt+0xdc>)
 8017c0e:	4832      	ldr	r0, [pc, #200]	@ (8017cd8 <tcp_parseopt+0xe0>)
 8017c10:	f005 fd94 	bl	801d73c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017c14:	4b31      	ldr	r3, [pc, #196]	@ (8017cdc <tcp_parseopt+0xe4>)
 8017c16:	881b      	ldrh	r3, [r3, #0]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d056      	beq.n	8017cca <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017c1c:	4b30      	ldr	r3, [pc, #192]	@ (8017ce0 <tcp_parseopt+0xe8>)
 8017c1e:	2200      	movs	r2, #0
 8017c20:	801a      	strh	r2, [r3, #0]
 8017c22:	e046      	b.n	8017cb2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8017c24:	f7ff ffb2 	bl	8017b8c <tcp_get_next_optbyte>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017c2c:	7bfb      	ldrb	r3, [r7, #15]
 8017c2e:	2b02      	cmp	r3, #2
 8017c30:	d006      	beq.n	8017c40 <tcp_parseopt+0x48>
 8017c32:	2b02      	cmp	r3, #2
 8017c34:	dc2a      	bgt.n	8017c8c <tcp_parseopt+0x94>
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d042      	beq.n	8017cc0 <tcp_parseopt+0xc8>
 8017c3a:	2b01      	cmp	r3, #1
 8017c3c:	d038      	beq.n	8017cb0 <tcp_parseopt+0xb8>
 8017c3e:	e025      	b.n	8017c8c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017c40:	f7ff ffa4 	bl	8017b8c <tcp_get_next_optbyte>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b04      	cmp	r3, #4
 8017c48:	d13c      	bne.n	8017cc4 <tcp_parseopt+0xcc>
 8017c4a:	4b25      	ldr	r3, [pc, #148]	@ (8017ce0 <tcp_parseopt+0xe8>)
 8017c4c:	881b      	ldrh	r3, [r3, #0]
 8017c4e:	3301      	adds	r3, #1
 8017c50:	4a22      	ldr	r2, [pc, #136]	@ (8017cdc <tcp_parseopt+0xe4>)
 8017c52:	8812      	ldrh	r2, [r2, #0]
 8017c54:	4293      	cmp	r3, r2
 8017c56:	da35      	bge.n	8017cc4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017c58:	f7ff ff98 	bl	8017b8c <tcp_get_next_optbyte>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	021b      	lsls	r3, r3, #8
 8017c60:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017c62:	f7ff ff93 	bl	8017b8c <tcp_get_next_optbyte>
 8017c66:	4603      	mov	r3, r0
 8017c68:	461a      	mov	r2, r3
 8017c6a:	89bb      	ldrh	r3, [r7, #12]
 8017c6c:	4313      	orrs	r3, r2
 8017c6e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017c70:	89bb      	ldrh	r3, [r7, #12]
 8017c72:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8017c76:	d804      	bhi.n	8017c82 <tcp_parseopt+0x8a>
 8017c78:	89bb      	ldrh	r3, [r7, #12]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d001      	beq.n	8017c82 <tcp_parseopt+0x8a>
 8017c7e:	89ba      	ldrh	r2, [r7, #12]
 8017c80:	e001      	b.n	8017c86 <tcp_parseopt+0x8e>
 8017c82:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8017c8a:	e012      	b.n	8017cb2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017c8c:	f7ff ff7e 	bl	8017b8c <tcp_get_next_optbyte>
 8017c90:	4603      	mov	r3, r0
 8017c92:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017c94:	7afb      	ldrb	r3, [r7, #11]
 8017c96:	2b01      	cmp	r3, #1
 8017c98:	d916      	bls.n	8017cc8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017c9a:	7afb      	ldrb	r3, [r7, #11]
 8017c9c:	b29a      	uxth	r2, r3
 8017c9e:	4b10      	ldr	r3, [pc, #64]	@ (8017ce0 <tcp_parseopt+0xe8>)
 8017ca0:	881b      	ldrh	r3, [r3, #0]
 8017ca2:	4413      	add	r3, r2
 8017ca4:	b29b      	uxth	r3, r3
 8017ca6:	3b02      	subs	r3, #2
 8017ca8:	b29a      	uxth	r2, r3
 8017caa:	4b0d      	ldr	r3, [pc, #52]	@ (8017ce0 <tcp_parseopt+0xe8>)
 8017cac:	801a      	strh	r2, [r3, #0]
 8017cae:	e000      	b.n	8017cb2 <tcp_parseopt+0xba>
          break;
 8017cb0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8017ce0 <tcp_parseopt+0xe8>)
 8017cb4:	881a      	ldrh	r2, [r3, #0]
 8017cb6:	4b09      	ldr	r3, [pc, #36]	@ (8017cdc <tcp_parseopt+0xe4>)
 8017cb8:	881b      	ldrh	r3, [r3, #0]
 8017cba:	429a      	cmp	r2, r3
 8017cbc:	d3b2      	bcc.n	8017c24 <tcp_parseopt+0x2c>
 8017cbe:	e004      	b.n	8017cca <tcp_parseopt+0xd2>
          return;
 8017cc0:	bf00      	nop
 8017cc2:	e002      	b.n	8017cca <tcp_parseopt+0xd2>
            return;
 8017cc4:	bf00      	nop
 8017cc6:	e000      	b.n	8017cca <tcp_parseopt+0xd2>
            return;
 8017cc8:	bf00      	nop
      }
    }
  }
}
 8017cca:	3710      	adds	r7, #16
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	08021844 	.word	0x08021844
 8017cd4:	08021ca8 	.word	0x08021ca8
 8017cd8:	08021890 	.word	0x08021890
 8017cdc:	2000c9dc 	.word	0x2000c9dc
 8017ce0:	2000c9e4 	.word	0x2000c9e4

08017ce4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017ce4:	b480      	push	{r7}
 8017ce6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017ce8:	4b05      	ldr	r3, [pc, #20]	@ (8017d00 <tcp_trigger_input_pcb_close+0x1c>)
 8017cea:	781b      	ldrb	r3, [r3, #0]
 8017cec:	f043 0310 	orr.w	r3, r3, #16
 8017cf0:	b2da      	uxtb	r2, r3
 8017cf2:	4b03      	ldr	r3, [pc, #12]	@ (8017d00 <tcp_trigger_input_pcb_close+0x1c>)
 8017cf4:	701a      	strb	r2, [r3, #0]
}
 8017cf6:	bf00      	nop
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfe:	4770      	bx	lr
 8017d00:	2000c9f5 	.word	0x2000c9f5

08017d04 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b084      	sub	sp, #16
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d00a      	beq.n	8017d2c <tcp_route+0x28>
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	7a1b      	ldrb	r3, [r3, #8]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d006      	beq.n	8017d2c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	7a1b      	ldrb	r3, [r3, #8]
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7fb f8c4 	bl	8012eb0 <netif_get_by_index>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	e003      	b.n	8017d34 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017d2c:	6878      	ldr	r0, [r7, #4]
 8017d2e:	f003 fad1 	bl	801b2d4 <ip4_route>
 8017d32:	4603      	mov	r3, r0
  }
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	3710      	adds	r7, #16
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017d3c:	b590      	push	{r4, r7, lr}
 8017d3e:	b087      	sub	sp, #28
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	60f8      	str	r0, [r7, #12]
 8017d44:	60b9      	str	r1, [r7, #8]
 8017d46:	603b      	str	r3, [r7, #0]
 8017d48:	4613      	mov	r3, r2
 8017d4a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d105      	bne.n	8017d5e <tcp_create_segment+0x22>
 8017d52:	4b43      	ldr	r3, [pc, #268]	@ (8017e60 <tcp_create_segment+0x124>)
 8017d54:	22a3      	movs	r2, #163	@ 0xa3
 8017d56:	4943      	ldr	r1, [pc, #268]	@ (8017e64 <tcp_create_segment+0x128>)
 8017d58:	4843      	ldr	r0, [pc, #268]	@ (8017e68 <tcp_create_segment+0x12c>)
 8017d5a:	f005 fcef 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017d5e:	68bb      	ldr	r3, [r7, #8]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d105      	bne.n	8017d70 <tcp_create_segment+0x34>
 8017d64:	4b3e      	ldr	r3, [pc, #248]	@ (8017e60 <tcp_create_segment+0x124>)
 8017d66:	22a4      	movs	r2, #164	@ 0xa4
 8017d68:	4940      	ldr	r1, [pc, #256]	@ (8017e6c <tcp_create_segment+0x130>)
 8017d6a:	483f      	ldr	r0, [pc, #252]	@ (8017e68 <tcp_create_segment+0x12c>)
 8017d6c:	f005 fce6 	bl	801d73c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017d70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017d74:	009b      	lsls	r3, r3, #2
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	f003 0304 	and.w	r3, r3, #4
 8017d7c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017d7e:	2003      	movs	r0, #3
 8017d80:	f7fa fd3c 	bl	80127fc <memp_malloc>
 8017d84:	6138      	str	r0, [r7, #16]
 8017d86:	693b      	ldr	r3, [r7, #16]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d104      	bne.n	8017d96 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017d8c:	68b8      	ldr	r0, [r7, #8]
 8017d8e:	f7fb fc1d 	bl	80135cc <pbuf_free>
    return NULL;
 8017d92:	2300      	movs	r3, #0
 8017d94:	e060      	b.n	8017e58 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8017d96:	693b      	ldr	r3, [r7, #16]
 8017d98:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8017d9c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017d9e:	693b      	ldr	r3, [r7, #16]
 8017da0:	2200      	movs	r2, #0
 8017da2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	68ba      	ldr	r2, [r7, #8]
 8017da8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	891a      	ldrh	r2, [r3, #8]
 8017dae:	7dfb      	ldrb	r3, [r7, #23]
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	429a      	cmp	r2, r3
 8017db4:	d205      	bcs.n	8017dc2 <tcp_create_segment+0x86>
 8017db6:	4b2a      	ldr	r3, [pc, #168]	@ (8017e60 <tcp_create_segment+0x124>)
 8017db8:	22b0      	movs	r2, #176	@ 0xb0
 8017dba:	492d      	ldr	r1, [pc, #180]	@ (8017e70 <tcp_create_segment+0x134>)
 8017dbc:	482a      	ldr	r0, [pc, #168]	@ (8017e68 <tcp_create_segment+0x12c>)
 8017dbe:	f005 fcbd 	bl	801d73c <iprintf>
  seg->len = p->tot_len - optlen;
 8017dc2:	68bb      	ldr	r3, [r7, #8]
 8017dc4:	891a      	ldrh	r2, [r3, #8]
 8017dc6:	7dfb      	ldrb	r3, [r7, #23]
 8017dc8:	b29b      	uxth	r3, r3
 8017dca:	1ad3      	subs	r3, r2, r3
 8017dcc:	b29a      	uxth	r2, r3
 8017dce:	693b      	ldr	r3, [r7, #16]
 8017dd0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017dd2:	2114      	movs	r1, #20
 8017dd4:	68b8      	ldr	r0, [r7, #8]
 8017dd6:	f7fb fb63 	bl	80134a0 <pbuf_add_header>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d004      	beq.n	8017dea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017de0:	6938      	ldr	r0, [r7, #16]
 8017de2:	f7fd f82e 	bl	8014e42 <tcp_seg_free>
    return NULL;
 8017de6:	2300      	movs	r3, #0
 8017de8:	e036      	b.n	8017e58 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017dea:	693b      	ldr	r3, [r7, #16]
 8017dec:	685b      	ldr	r3, [r3, #4]
 8017dee:	685a      	ldr	r2, [r3, #4]
 8017df0:	693b      	ldr	r3, [r7, #16]
 8017df2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	8ada      	ldrh	r2, [r3, #22]
 8017df8:	693b      	ldr	r3, [r7, #16]
 8017dfa:	68dc      	ldr	r4, [r3, #12]
 8017dfc:	4610      	mov	r0, r2
 8017dfe:	f7fa f825 	bl	8011e4c <lwip_htons>
 8017e02:	4603      	mov	r3, r0
 8017e04:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	8b1a      	ldrh	r2, [r3, #24]
 8017e0a:	693b      	ldr	r3, [r7, #16]
 8017e0c:	68dc      	ldr	r4, [r3, #12]
 8017e0e:	4610      	mov	r0, r2
 8017e10:	f7fa f81c 	bl	8011e4c <lwip_htons>
 8017e14:	4603      	mov	r3, r0
 8017e16:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	68dc      	ldr	r4, [r3, #12]
 8017e1c:	6838      	ldr	r0, [r7, #0]
 8017e1e:	f7fa f82b 	bl	8011e78 <lwip_htonl>
 8017e22:	4603      	mov	r3, r0
 8017e24:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017e26:	7dfb      	ldrb	r3, [r7, #23]
 8017e28:	089b      	lsrs	r3, r3, #2
 8017e2a:	b2db      	uxtb	r3, r3
 8017e2c:	3305      	adds	r3, #5
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	031b      	lsls	r3, r3, #12
 8017e32:	b29a      	uxth	r2, r3
 8017e34:	79fb      	ldrb	r3, [r7, #7]
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	4313      	orrs	r3, r2
 8017e3a:	b29a      	uxth	r2, r3
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	68dc      	ldr	r4, [r3, #12]
 8017e40:	4610      	mov	r0, r2
 8017e42:	f7fa f803 	bl	8011e4c <lwip_htons>
 8017e46:	4603      	mov	r3, r0
 8017e48:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017e4a:	693b      	ldr	r3, [r7, #16]
 8017e4c:	68db      	ldr	r3, [r3, #12]
 8017e4e:	2200      	movs	r2, #0
 8017e50:	749a      	strb	r2, [r3, #18]
 8017e52:	2200      	movs	r2, #0
 8017e54:	74da      	strb	r2, [r3, #19]
  return seg;
 8017e56:	693b      	ldr	r3, [r7, #16]
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	371c      	adds	r7, #28
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd90      	pop	{r4, r7, pc}
 8017e60:	08021cc4 	.word	0x08021cc4
 8017e64:	08021cf8 	.word	0x08021cf8
 8017e68:	08021d18 	.word	0x08021d18
 8017e6c:	08021d40 	.word	0x08021d40
 8017e70:	08021d64 	.word	0x08021d64

08017e74 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b086      	sub	sp, #24
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	607b      	str	r3, [r7, #4]
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	73fb      	strb	r3, [r7, #15]
 8017e80:	460b      	mov	r3, r1
 8017e82:	81bb      	strh	r3, [r7, #12]
 8017e84:	4613      	mov	r3, r2
 8017e86:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017e88:	89bb      	ldrh	r3, [r7, #12]
 8017e8a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d105      	bne.n	8017e9e <tcp_pbuf_prealloc+0x2a>
 8017e92:	4b30      	ldr	r3, [pc, #192]	@ (8017f54 <tcp_pbuf_prealloc+0xe0>)
 8017e94:	22e8      	movs	r2, #232	@ 0xe8
 8017e96:	4930      	ldr	r1, [pc, #192]	@ (8017f58 <tcp_pbuf_prealloc+0xe4>)
 8017e98:	4830      	ldr	r0, [pc, #192]	@ (8017f5c <tcp_pbuf_prealloc+0xe8>)
 8017e9a:	f005 fc4f 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017e9e:	6a3b      	ldr	r3, [r7, #32]
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d105      	bne.n	8017eb0 <tcp_pbuf_prealloc+0x3c>
 8017ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8017f54 <tcp_pbuf_prealloc+0xe0>)
 8017ea6:	22e9      	movs	r2, #233	@ 0xe9
 8017ea8:	492d      	ldr	r1, [pc, #180]	@ (8017f60 <tcp_pbuf_prealloc+0xec>)
 8017eaa:	482c      	ldr	r0, [pc, #176]	@ (8017f5c <tcp_pbuf_prealloc+0xe8>)
 8017eac:	f005 fc46 	bl	801d73c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017eb0:	89ba      	ldrh	r2, [r7, #12]
 8017eb2:	897b      	ldrh	r3, [r7, #10]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d221      	bcs.n	8017efc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017eb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017ebc:	f003 0302 	and.w	r3, r3, #2
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d111      	bne.n	8017ee8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017ec4:	6a3b      	ldr	r3, [r7, #32]
 8017ec6:	8b5b      	ldrh	r3, [r3, #26]
 8017ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d115      	bne.n	8017efc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d007      	beq.n	8017ee8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017ed8:	6a3b      	ldr	r3, [r7, #32]
 8017eda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d103      	bne.n	8017ee8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017ee0:	6a3b      	ldr	r3, [r7, #32]
 8017ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d009      	beq.n	8017efc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017ee8:	89bb      	ldrh	r3, [r7, #12]
 8017eea:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8017eee:	f023 0203 	bic.w	r2, r3, #3
 8017ef2:	897b      	ldrh	r3, [r7, #10]
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	bf28      	it	cs
 8017ef8:	4613      	movcs	r3, r2
 8017efa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017efc:	8af9      	ldrh	r1, [r7, #22]
 8017efe:	7bfb      	ldrb	r3, [r7, #15]
 8017f00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7fb f87d 	bl	8013004 <pbuf_alloc>
 8017f0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d101      	bne.n	8017f16 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017f12:	2300      	movs	r3, #0
 8017f14:	e019      	b.n	8017f4a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d006      	beq.n	8017f2c <tcp_pbuf_prealloc+0xb8>
 8017f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8017f54 <tcp_pbuf_prealloc+0xe0>)
 8017f20:	f240 120b 	movw	r2, #267	@ 0x10b
 8017f24:	490f      	ldr	r1, [pc, #60]	@ (8017f64 <tcp_pbuf_prealloc+0xf0>)
 8017f26:	480d      	ldr	r0, [pc, #52]	@ (8017f5c <tcp_pbuf_prealloc+0xe8>)
 8017f28:	f005 fc08 	bl	801d73c <iprintf>
  *oversize = p->len - length;
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	895a      	ldrh	r2, [r3, #10]
 8017f30:	89bb      	ldrh	r3, [r7, #12]
 8017f32:	1ad3      	subs	r3, r2, r3
 8017f34:	b29a      	uxth	r2, r3
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	89ba      	ldrh	r2, [r7, #12]
 8017f3e:	811a      	strh	r2, [r3, #8]
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	891a      	ldrh	r2, [r3, #8]
 8017f44:	693b      	ldr	r3, [r7, #16]
 8017f46:	815a      	strh	r2, [r3, #10]
  return p;
 8017f48:	693b      	ldr	r3, [r7, #16]
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3718      	adds	r7, #24
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	08021cc4 	.word	0x08021cc4
 8017f58:	08021d7c 	.word	0x08021d7c
 8017f5c:	08021d18 	.word	0x08021d18
 8017f60:	08021da0 	.word	0x08021da0
 8017f64:	08021dc0 	.word	0x08021dc0

08017f68 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b082      	sub	sp, #8
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	6078      	str	r0, [r7, #4]
 8017f70:	460b      	mov	r3, r1
 8017f72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d106      	bne.n	8017f88 <tcp_write_checks+0x20>
 8017f7a:	4b33      	ldr	r3, [pc, #204]	@ (8018048 <tcp_write_checks+0xe0>)
 8017f7c:	f240 1233 	movw	r2, #307	@ 0x133
 8017f80:	4932      	ldr	r1, [pc, #200]	@ (801804c <tcp_write_checks+0xe4>)
 8017f82:	4833      	ldr	r0, [pc, #204]	@ (8018050 <tcp_write_checks+0xe8>)
 8017f84:	f005 fbda 	bl	801d73c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	7d1b      	ldrb	r3, [r3, #20]
 8017f8c:	2b04      	cmp	r3, #4
 8017f8e:	d00e      	beq.n	8017fae <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017f94:	2b07      	cmp	r3, #7
 8017f96:	d00a      	beq.n	8017fae <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017f9c:	2b02      	cmp	r3, #2
 8017f9e:	d006      	beq.n	8017fae <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017fa4:	2b03      	cmp	r3, #3
 8017fa6:	d002      	beq.n	8017fae <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017fa8:	f06f 030a 	mvn.w	r3, #10
 8017fac:	e048      	b.n	8018040 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017fae:	887b      	ldrh	r3, [r7, #2]
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d101      	bne.n	8017fb8 <tcp_write_checks+0x50>
    return ERR_OK;
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	e043      	b.n	8018040 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017fbe:	887a      	ldrh	r2, [r7, #2]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d909      	bls.n	8017fd8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	8b5b      	ldrh	r3, [r3, #26]
 8017fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017fcc:	b29a      	uxth	r2, r3
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd6:	e033      	b.n	8018040 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017fde:	2b08      	cmp	r3, #8
 8017fe0:	d909      	bls.n	8017ff6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	8b5b      	ldrh	r3, [r3, #26]
 8017fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017fea:	b29a      	uxth	r2, r3
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff4:	e024      	b.n	8018040 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d00f      	beq.n	8018020 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018004:	2b00      	cmp	r3, #0
 8018006:	d11a      	bne.n	801803e <tcp_write_checks+0xd6>
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801800c:	2b00      	cmp	r3, #0
 801800e:	d116      	bne.n	801803e <tcp_write_checks+0xd6>
 8018010:	4b0d      	ldr	r3, [pc, #52]	@ (8018048 <tcp_write_checks+0xe0>)
 8018012:	f240 1255 	movw	r2, #341	@ 0x155
 8018016:	490f      	ldr	r1, [pc, #60]	@ (8018054 <tcp_write_checks+0xec>)
 8018018:	480d      	ldr	r0, [pc, #52]	@ (8018050 <tcp_write_checks+0xe8>)
 801801a:	f005 fb8f 	bl	801d73c <iprintf>
 801801e:	e00e      	b.n	801803e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018024:	2b00      	cmp	r3, #0
 8018026:	d103      	bne.n	8018030 <tcp_write_checks+0xc8>
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801802c:	2b00      	cmp	r3, #0
 801802e:	d006      	beq.n	801803e <tcp_write_checks+0xd6>
 8018030:	4b05      	ldr	r3, [pc, #20]	@ (8018048 <tcp_write_checks+0xe0>)
 8018032:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8018036:	4908      	ldr	r1, [pc, #32]	@ (8018058 <tcp_write_checks+0xf0>)
 8018038:	4805      	ldr	r0, [pc, #20]	@ (8018050 <tcp_write_checks+0xe8>)
 801803a:	f005 fb7f 	bl	801d73c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801803e:	2300      	movs	r3, #0
}
 8018040:	4618      	mov	r0, r3
 8018042:	3708      	adds	r7, #8
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}
 8018048:	08021cc4 	.word	0x08021cc4
 801804c:	08021dd4 	.word	0x08021dd4
 8018050:	08021d18 	.word	0x08021d18
 8018054:	08021df4 	.word	0x08021df4
 8018058:	08021e30 	.word	0x08021e30

0801805c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	b09b      	sub	sp, #108	@ 0x6c
 8018060:	af04      	add	r7, sp, #16
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	4611      	mov	r1, r2
 8018068:	461a      	mov	r2, r3
 801806a:	460b      	mov	r3, r1
 801806c:	80fb      	strh	r3, [r7, #6]
 801806e:	4613      	mov	r3, r2
 8018070:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018072:	2300      	movs	r3, #0
 8018074:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018076:	2300      	movs	r3, #0
 8018078:	653b      	str	r3, [r7, #80]	@ 0x50
 801807a:	2300      	movs	r3, #0
 801807c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801807e:	2300      	movs	r3, #0
 8018080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018082:	2300      	movs	r3, #0
 8018084:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018086:	2300      	movs	r3, #0
 8018088:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801808c:	2300      	movs	r3, #0
 801808e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018092:	2300      	movs	r3, #0
 8018094:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018096:	2300      	movs	r3, #0
 8018098:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801809a:	2300      	movs	r3, #0
 801809c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d109      	bne.n	80180b8 <tcp_write+0x5c>
 80180a4:	4ba4      	ldr	r3, [pc, #656]	@ (8018338 <tcp_write+0x2dc>)
 80180a6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80180aa:	49a4      	ldr	r1, [pc, #656]	@ (801833c <tcp_write+0x2e0>)
 80180ac:	48a4      	ldr	r0, [pc, #656]	@ (8018340 <tcp_write+0x2e4>)
 80180ae:	f005 fb45 	bl	801d73c <iprintf>
 80180b2:	f06f 030f 	mvn.w	r3, #15
 80180b6:	e32a      	b.n	801870e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80180be:	085b      	lsrs	r3, r3, #1
 80180c0:	b29a      	uxth	r2, r3
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80180c6:	4293      	cmp	r3, r2
 80180c8:	bf28      	it	cs
 80180ca:	4613      	movcs	r3, r2
 80180cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80180ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d102      	bne.n	80180da <tcp_write+0x7e>
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80180d8:	e000      	b.n	80180dc <tcp_write+0x80>
 80180da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80180dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80180de:	68bb      	ldr	r3, [r7, #8]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d109      	bne.n	80180f8 <tcp_write+0x9c>
 80180e4:	4b94      	ldr	r3, [pc, #592]	@ (8018338 <tcp_write+0x2dc>)
 80180e6:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80180ea:	4996      	ldr	r1, [pc, #600]	@ (8018344 <tcp_write+0x2e8>)
 80180ec:	4894      	ldr	r0, [pc, #592]	@ (8018340 <tcp_write+0x2e4>)
 80180ee:	f005 fb25 	bl	801d73c <iprintf>
 80180f2:	f06f 030f 	mvn.w	r3, #15
 80180f6:	e30a      	b.n	801870e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80180f8:	88fb      	ldrh	r3, [r7, #6]
 80180fa:	4619      	mov	r1, r3
 80180fc:	68f8      	ldr	r0, [r7, #12]
 80180fe:	f7ff ff33 	bl	8017f68 <tcp_write_checks>
 8018102:	4603      	mov	r3, r0
 8018104:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8018108:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801810c:	2b00      	cmp	r3, #0
 801810e:	d002      	beq.n	8018116 <tcp_write+0xba>
    return err;
 8018110:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8018114:	e2fb      	b.n	801870e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801811c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018120:	2300      	movs	r3, #0
 8018122:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801812a:	2b00      	cmp	r3, #0
 801812c:	f000 80f6 	beq.w	801831c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018134:	653b      	str	r3, [r7, #80]	@ 0x50
 8018136:	e002      	b.n	801813e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801813e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d1f8      	bne.n	8018138 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018148:	7a9b      	ldrb	r3, [r3, #10]
 801814a:	009b      	lsls	r3, r3, #2
 801814c:	b29b      	uxth	r3, r3
 801814e:	f003 0304 	and.w	r3, r3, #4
 8018152:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018154:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018158:	891b      	ldrh	r3, [r3, #8]
 801815a:	4619      	mov	r1, r3
 801815c:	8c3b      	ldrh	r3, [r7, #32]
 801815e:	440b      	add	r3, r1
 8018160:	429a      	cmp	r2, r3
 8018162:	da06      	bge.n	8018172 <tcp_write+0x116>
 8018164:	4b74      	ldr	r3, [pc, #464]	@ (8018338 <tcp_write+0x2dc>)
 8018166:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801816a:	4977      	ldr	r1, [pc, #476]	@ (8018348 <tcp_write+0x2ec>)
 801816c:	4874      	ldr	r0, [pc, #464]	@ (8018340 <tcp_write+0x2e4>)
 801816e:	f005 fae5 	bl	801d73c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018174:	891a      	ldrh	r2, [r3, #8]
 8018176:	8c3b      	ldrh	r3, [r7, #32]
 8018178:	4413      	add	r3, r2
 801817a:	b29b      	uxth	r3, r3
 801817c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801817e:	1ad3      	subs	r3, r2, r3
 8018180:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018188:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801818a:	8a7b      	ldrh	r3, [r7, #18]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d026      	beq.n	80181de <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018190:	8a7b      	ldrh	r3, [r7, #18]
 8018192:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018194:	429a      	cmp	r2, r3
 8018196:	d206      	bcs.n	80181a6 <tcp_write+0x14a>
 8018198:	4b67      	ldr	r3, [pc, #412]	@ (8018338 <tcp_write+0x2dc>)
 801819a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801819e:	496b      	ldr	r1, [pc, #428]	@ (801834c <tcp_write+0x2f0>)
 80181a0:	4867      	ldr	r0, [pc, #412]	@ (8018340 <tcp_write+0x2e4>)
 80181a2:	f005 facb 	bl	801d73c <iprintf>
      seg = last_unsent;
 80181a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80181a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80181aa:	8a7b      	ldrh	r3, [r7, #18]
 80181ac:	88fa      	ldrh	r2, [r7, #6]
 80181ae:	4293      	cmp	r3, r2
 80181b0:	bf28      	it	cs
 80181b2:	4613      	movcs	r3, r2
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80181b8:	4293      	cmp	r3, r2
 80181ba:	bf28      	it	cs
 80181bc:	4613      	movcs	r3, r2
 80181be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80181c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80181c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80181c6:	4413      	add	r3, r2
 80181c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80181cc:	8a7a      	ldrh	r2, [r7, #18]
 80181ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80181d6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80181d8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80181da:	1ad3      	subs	r3, r2, r3
 80181dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80181de:	8a7b      	ldrh	r3, [r7, #18]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d00b      	beq.n	80181fc <tcp_write+0x1a0>
 80181e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80181e8:	88fb      	ldrh	r3, [r7, #6]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d006      	beq.n	80181fc <tcp_write+0x1a0>
 80181ee:	4b52      	ldr	r3, [pc, #328]	@ (8018338 <tcp_write+0x2dc>)
 80181f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80181f4:	4956      	ldr	r1, [pc, #344]	@ (8018350 <tcp_write+0x2f4>)
 80181f6:	4852      	ldr	r0, [pc, #328]	@ (8018340 <tcp_write+0x2e4>)
 80181f8:	f005 faa0 	bl	801d73c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80181fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018200:	88fb      	ldrh	r3, [r7, #6]
 8018202:	429a      	cmp	r2, r3
 8018204:	f080 8167 	bcs.w	80184d6 <tcp_write+0x47a>
 8018208:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801820a:	2b00      	cmp	r3, #0
 801820c:	f000 8163 	beq.w	80184d6 <tcp_write+0x47a>
 8018210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018212:	891b      	ldrh	r3, [r3, #8]
 8018214:	2b00      	cmp	r3, #0
 8018216:	f000 815e 	beq.w	80184d6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801821a:	88fa      	ldrh	r2, [r7, #6]
 801821c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018220:	1ad2      	subs	r2, r2, r3
 8018222:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018224:	4293      	cmp	r3, r2
 8018226:	bfa8      	it	ge
 8018228:	4613      	movge	r3, r2
 801822a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801822c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801822e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018230:	797b      	ldrb	r3, [r7, #5]
 8018232:	f003 0301 	and.w	r3, r3, #1
 8018236:	2b00      	cmp	r3, #0
 8018238:	d027      	beq.n	801828a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801823a:	f107 0012 	add.w	r0, r7, #18
 801823e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018240:	8bf9      	ldrh	r1, [r7, #30]
 8018242:	2301      	movs	r3, #1
 8018244:	9302      	str	r3, [sp, #8]
 8018246:	797b      	ldrb	r3, [r7, #5]
 8018248:	9301      	str	r3, [sp, #4]
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	9300      	str	r3, [sp, #0]
 801824e:	4603      	mov	r3, r0
 8018250:	2000      	movs	r0, #0
 8018252:	f7ff fe0f 	bl	8017e74 <tcp_pbuf_prealloc>
 8018256:	6578      	str	r0, [r7, #84]	@ 0x54
 8018258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801825a:	2b00      	cmp	r3, #0
 801825c:	f000 8225 	beq.w	80186aa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018262:	6858      	ldr	r0, [r3, #4]
 8018264:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018268:	68ba      	ldr	r2, [r7, #8]
 801826a:	4413      	add	r3, r2
 801826c:	8bfa      	ldrh	r2, [r7, #30]
 801826e:	4619      	mov	r1, r3
 8018270:	f005 fc17 	bl	801daa2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018274:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018276:	f7fb fa37 	bl	80136e8 <pbuf_clen>
 801827a:	4603      	mov	r3, r0
 801827c:	461a      	mov	r2, r3
 801827e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018282:	4413      	add	r3, r2
 8018284:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8018288:	e041      	b.n	801830e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801828a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	637b      	str	r3, [r7, #52]	@ 0x34
 8018290:	e002      	b.n	8018298 <tcp_write+0x23c>
 8018292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	637b      	str	r3, [r7, #52]	@ 0x34
 8018298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d1f8      	bne.n	8018292 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80182a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182a2:	7b1b      	ldrb	r3, [r3, #12]
 80182a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d115      	bne.n	80182d8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80182ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182ae:	685b      	ldr	r3, [r3, #4]
 80182b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80182b2:	8952      	ldrh	r2, [r2, #10]
 80182b4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80182b6:	68ba      	ldr	r2, [r7, #8]
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d10d      	bne.n	80182d8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80182bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d006      	beq.n	80182d2 <tcp_write+0x276>
 80182c4:	4b1c      	ldr	r3, [pc, #112]	@ (8018338 <tcp_write+0x2dc>)
 80182c6:	f240 2231 	movw	r2, #561	@ 0x231
 80182ca:	4922      	ldr	r1, [pc, #136]	@ (8018354 <tcp_write+0x2f8>)
 80182cc:	481c      	ldr	r0, [pc, #112]	@ (8018340 <tcp_write+0x2e4>)
 80182ce:	f005 fa35 	bl	801d73c <iprintf>
          extendlen = seglen;
 80182d2:	8bfb      	ldrh	r3, [r7, #30]
 80182d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80182d6:	e01a      	b.n	801830e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80182d8:	8bfb      	ldrh	r3, [r7, #30]
 80182da:	2201      	movs	r2, #1
 80182dc:	4619      	mov	r1, r3
 80182de:	2000      	movs	r0, #0
 80182e0:	f7fa fe90 	bl	8013004 <pbuf_alloc>
 80182e4:	6578      	str	r0, [r7, #84]	@ 0x54
 80182e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	f000 81e0 	beq.w	80186ae <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80182ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80182f2:	68ba      	ldr	r2, [r7, #8]
 80182f4:	441a      	add	r2, r3
 80182f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80182f8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80182fa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80182fc:	f7fb f9f4 	bl	80136e8 <pbuf_clen>
 8018300:	4603      	mov	r3, r0
 8018302:	461a      	mov	r2, r3
 8018304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018308:	4413      	add	r3, r2
 801830a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801830e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018312:	8bfb      	ldrh	r3, [r7, #30]
 8018314:	4413      	add	r3, r2
 8018316:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801831a:	e0dc      	b.n	80184d6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018322:	2b00      	cmp	r3, #0
 8018324:	f000 80d7 	beq.w	80184d6 <tcp_write+0x47a>
 8018328:	4b03      	ldr	r3, [pc, #12]	@ (8018338 <tcp_write+0x2dc>)
 801832a:	f240 224a 	movw	r2, #586	@ 0x24a
 801832e:	490a      	ldr	r1, [pc, #40]	@ (8018358 <tcp_write+0x2fc>)
 8018330:	4803      	ldr	r0, [pc, #12]	@ (8018340 <tcp_write+0x2e4>)
 8018332:	f005 fa03 	bl	801d73c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8018336:	e0ce      	b.n	80184d6 <tcp_write+0x47a>
 8018338:	08021cc4 	.word	0x08021cc4
 801833c:	08021e64 	.word	0x08021e64
 8018340:	08021d18 	.word	0x08021d18
 8018344:	08021e7c 	.word	0x08021e7c
 8018348:	08021eb0 	.word	0x08021eb0
 801834c:	08021ec8 	.word	0x08021ec8
 8018350:	08021ee8 	.word	0x08021ee8
 8018354:	08021f08 	.word	0x08021f08
 8018358:	08021f34 	.word	0x08021f34
    struct pbuf *p;
    u16_t left = len - pos;
 801835c:	88fa      	ldrh	r2, [r7, #6]
 801835e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018362:	1ad3      	subs	r3, r2, r3
 8018364:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8018366:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801836a:	b29b      	uxth	r3, r3
 801836c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801836e:	1ad3      	subs	r3, r2, r3
 8018370:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8018372:	8b7a      	ldrh	r2, [r7, #26]
 8018374:	8bbb      	ldrh	r3, [r7, #28]
 8018376:	4293      	cmp	r3, r2
 8018378:	bf28      	it	cs
 801837a:	4613      	movcs	r3, r2
 801837c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801837e:	797b      	ldrb	r3, [r7, #5]
 8018380:	f003 0301 	and.w	r3, r3, #1
 8018384:	2b00      	cmp	r3, #0
 8018386:	d036      	beq.n	80183f6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8018388:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801838c:	b29a      	uxth	r2, r3
 801838e:	8b3b      	ldrh	r3, [r7, #24]
 8018390:	4413      	add	r3, r2
 8018392:	b299      	uxth	r1, r3
 8018394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018396:	2b00      	cmp	r3, #0
 8018398:	bf0c      	ite	eq
 801839a:	2301      	moveq	r3, #1
 801839c:	2300      	movne	r3, #0
 801839e:	b2db      	uxtb	r3, r3
 80183a0:	f107 0012 	add.w	r0, r7, #18
 80183a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80183a6:	9302      	str	r3, [sp, #8]
 80183a8:	797b      	ldrb	r3, [r7, #5]
 80183aa:	9301      	str	r3, [sp, #4]
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	9300      	str	r3, [sp, #0]
 80183b0:	4603      	mov	r3, r0
 80183b2:	2036      	movs	r0, #54	@ 0x36
 80183b4:	f7ff fd5e 	bl	8017e74 <tcp_pbuf_prealloc>
 80183b8:	6338      	str	r0, [r7, #48]	@ 0x30
 80183ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183bc:	2b00      	cmp	r3, #0
 80183be:	f000 8178 	beq.w	80186b2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80183c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c4:	895b      	ldrh	r3, [r3, #10]
 80183c6:	8b3a      	ldrh	r2, [r7, #24]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d906      	bls.n	80183da <tcp_write+0x37e>
 80183cc:	4b8c      	ldr	r3, [pc, #560]	@ (8018600 <tcp_write+0x5a4>)
 80183ce:	f240 2266 	movw	r2, #614	@ 0x266
 80183d2:	498c      	ldr	r1, [pc, #560]	@ (8018604 <tcp_write+0x5a8>)
 80183d4:	488c      	ldr	r0, [pc, #560]	@ (8018608 <tcp_write+0x5ac>)
 80183d6:	f005 f9b1 	bl	801d73c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80183da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183dc:	685a      	ldr	r2, [r3, #4]
 80183de:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80183e2:	18d0      	adds	r0, r2, r3
 80183e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80183e8:	68ba      	ldr	r2, [r7, #8]
 80183ea:	4413      	add	r3, r2
 80183ec:	8b3a      	ldrh	r2, [r7, #24]
 80183ee:	4619      	mov	r1, r3
 80183f0:	f005 fb57 	bl	801daa2 <memcpy>
 80183f4:	e02f      	b.n	8018456 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80183f6:	8a7b      	ldrh	r3, [r7, #18]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d006      	beq.n	801840a <tcp_write+0x3ae>
 80183fc:	4b80      	ldr	r3, [pc, #512]	@ (8018600 <tcp_write+0x5a4>)
 80183fe:	f240 2271 	movw	r2, #625	@ 0x271
 8018402:	4982      	ldr	r1, [pc, #520]	@ (801860c <tcp_write+0x5b0>)
 8018404:	4880      	ldr	r0, [pc, #512]	@ (8018608 <tcp_write+0x5ac>)
 8018406:	f005 f999 	bl	801d73c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801840a:	8b3b      	ldrh	r3, [r7, #24]
 801840c:	2201      	movs	r2, #1
 801840e:	4619      	mov	r1, r3
 8018410:	2036      	movs	r0, #54	@ 0x36
 8018412:	f7fa fdf7 	bl	8013004 <pbuf_alloc>
 8018416:	6178      	str	r0, [r7, #20]
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	2b00      	cmp	r3, #0
 801841c:	f000 814b 	beq.w	80186b6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018424:	68ba      	ldr	r2, [r7, #8]
 8018426:	441a      	add	r2, r3
 8018428:	697b      	ldr	r3, [r7, #20]
 801842a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801842c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8018430:	b29b      	uxth	r3, r3
 8018432:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018436:	4619      	mov	r1, r3
 8018438:	2036      	movs	r0, #54	@ 0x36
 801843a:	f7fa fde3 	bl	8013004 <pbuf_alloc>
 801843e:	6338      	str	r0, [r7, #48]	@ 0x30
 8018440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018442:	2b00      	cmp	r3, #0
 8018444:	d103      	bne.n	801844e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8018446:	6978      	ldr	r0, [r7, #20]
 8018448:	f7fb f8c0 	bl	80135cc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801844c:	e136      	b.n	80186bc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801844e:	6979      	ldr	r1, [r7, #20]
 8018450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018452:	f7fb f989 	bl	8013768 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8018456:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018458:	f7fb f946 	bl	80136e8 <pbuf_clen>
 801845c:	4603      	mov	r3, r0
 801845e:	461a      	mov	r2, r3
 8018460:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018464:	4413      	add	r3, r2
 8018466:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801846a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801846e:	2b09      	cmp	r3, #9
 8018470:	d903      	bls.n	801847a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8018472:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018474:	f7fb f8aa 	bl	80135cc <pbuf_free>
      goto memerr;
 8018478:	e120      	b.n	80186bc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801847e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018482:	441a      	add	r2, r3
 8018484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018488:	9300      	str	r3, [sp, #0]
 801848a:	4613      	mov	r3, r2
 801848c:	2200      	movs	r2, #0
 801848e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f7ff fc53 	bl	8017d3c <tcp_create_segment>
 8018496:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8018498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801849a:	2b00      	cmp	r3, #0
 801849c:	f000 810d 	beq.w	80186ba <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80184a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d102      	bne.n	80184ac <tcp_write+0x450>
      queue = seg;
 80184a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80184a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80184aa:	e00c      	b.n	80184c6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80184ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d106      	bne.n	80184c0 <tcp_write+0x464>
 80184b2:	4b53      	ldr	r3, [pc, #332]	@ (8018600 <tcp_write+0x5a4>)
 80184b4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80184b8:	4955      	ldr	r1, [pc, #340]	@ (8018610 <tcp_write+0x5b4>)
 80184ba:	4853      	ldr	r0, [pc, #332]	@ (8018608 <tcp_write+0x5ac>)
 80184bc:	f005 f93e 	bl	801d73c <iprintf>
      prev_seg->next = seg;
 80184c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80184c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80184c4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80184c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80184c8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80184ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80184ce:	8b3b      	ldrh	r3, [r7, #24]
 80184d0:	4413      	add	r3, r2
 80184d2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80184d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80184da:	88fb      	ldrh	r3, [r7, #6]
 80184dc:	429a      	cmp	r2, r3
 80184de:	f4ff af3d 	bcc.w	801835c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80184e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d02c      	beq.n	8018542 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80184e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80184ee:	e01e      	b.n	801852e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80184f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184f2:	891a      	ldrh	r2, [r3, #8]
 80184f4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80184f6:	4413      	add	r3, r2
 80184f8:	b29a      	uxth	r2, r3
 80184fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80184fc:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80184fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d110      	bne.n	8018528 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018508:	685b      	ldr	r3, [r3, #4]
 801850a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801850c:	8952      	ldrh	r2, [r2, #10]
 801850e:	4413      	add	r3, r2
 8018510:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018512:	68b9      	ldr	r1, [r7, #8]
 8018514:	4618      	mov	r0, r3
 8018516:	f005 fac4 	bl	801daa2 <memcpy>
        p->len += oversize_used;
 801851a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801851c:	895a      	ldrh	r2, [r3, #10]
 801851e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018520:	4413      	add	r3, r2
 8018522:	b29a      	uxth	r2, r3
 8018524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018526:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018530:	2b00      	cmp	r3, #0
 8018532:	d1dd      	bne.n	80184f0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018536:	891a      	ldrh	r2, [r3, #8]
 8018538:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801853a:	4413      	add	r3, r2
 801853c:	b29a      	uxth	r2, r3
 801853e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018540:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8018542:	8a7a      	ldrh	r2, [r7, #18]
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801854a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801854c:	2b00      	cmp	r3, #0
 801854e:	d018      	beq.n	8018582 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8018550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018552:	2b00      	cmp	r3, #0
 8018554:	d106      	bne.n	8018564 <tcp_write+0x508>
 8018556:	4b2a      	ldr	r3, [pc, #168]	@ (8018600 <tcp_write+0x5a4>)
 8018558:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801855c:	492d      	ldr	r1, [pc, #180]	@ (8018614 <tcp_write+0x5b8>)
 801855e:	482a      	ldr	r0, [pc, #168]	@ (8018608 <tcp_write+0x5ac>)
 8018560:	f005 f8ec 	bl	801d73c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801856a:	4618      	mov	r0, r3
 801856c:	f7fb f8fc 	bl	8013768 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8018570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018572:	891a      	ldrh	r2, [r3, #8]
 8018574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8018576:	891b      	ldrh	r3, [r3, #8]
 8018578:	4413      	add	r3, r2
 801857a:	b29a      	uxth	r2, r3
 801857c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801857e:	811a      	strh	r2, [r3, #8]
 8018580:	e037      	b.n	80185f2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8018582:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018584:	2b00      	cmp	r3, #0
 8018586:	d034      	beq.n	80185f2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801858a:	2b00      	cmp	r3, #0
 801858c:	d003      	beq.n	8018596 <tcp_write+0x53a>
 801858e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d106      	bne.n	80185a4 <tcp_write+0x548>
 8018596:	4b1a      	ldr	r3, [pc, #104]	@ (8018600 <tcp_write+0x5a4>)
 8018598:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801859c:	491e      	ldr	r1, [pc, #120]	@ (8018618 <tcp_write+0x5bc>)
 801859e:	481a      	ldr	r0, [pc, #104]	@ (8018608 <tcp_write+0x5ac>)
 80185a0:	f005 f8cc 	bl	801d73c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80185a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80185aa:	e009      	b.n	80185c0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80185ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185ae:	891a      	ldrh	r2, [r3, #8]
 80185b0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80185b2:	4413      	add	r3, r2
 80185b4:	b29a      	uxth	r2, r3
 80185b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185b8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80185ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80185c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d1f1      	bne.n	80185ac <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80185c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185ca:	891a      	ldrh	r2, [r3, #8]
 80185cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80185ce:	4413      	add	r3, r2
 80185d0:	b29a      	uxth	r2, r3
 80185d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185d4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80185d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185d8:	895a      	ldrh	r2, [r3, #10]
 80185da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80185dc:	4413      	add	r3, r2
 80185de:	b29a      	uxth	r2, r3
 80185e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185e2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80185e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185e6:	891a      	ldrh	r2, [r3, #8]
 80185e8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80185ea:	4413      	add	r3, r2
 80185ec:	b29a      	uxth	r2, r3
 80185ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185f0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80185f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d111      	bne.n	801861c <tcp_write+0x5c0>
    pcb->unsent = queue;
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80185fc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80185fe:	e010      	b.n	8018622 <tcp_write+0x5c6>
 8018600:	08021cc4 	.word	0x08021cc4
 8018604:	08021f64 	.word	0x08021f64
 8018608:	08021d18 	.word	0x08021d18
 801860c:	08021fa4 	.word	0x08021fa4
 8018610:	08021fb4 	.word	0x08021fb4
 8018614:	08021fc8 	.word	0x08021fc8
 8018618:	08022000 	.word	0x08022000
  } else {
    last_unsent->next = queue;
 801861c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801861e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018620:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8018626:	88fb      	ldrh	r3, [r7, #6]
 8018628:	441a      	add	r2, r3
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018634:	88fb      	ldrh	r3, [r7, #6]
 8018636:	1ad3      	subs	r3, r2, r3
 8018638:	b29a      	uxth	r2, r3
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018646:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018650:	2b00      	cmp	r3, #0
 8018652:	d00e      	beq.n	8018672 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018658:	2b00      	cmp	r3, #0
 801865a:	d10a      	bne.n	8018672 <tcp_write+0x616>
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018660:	2b00      	cmp	r3, #0
 8018662:	d106      	bne.n	8018672 <tcp_write+0x616>
 8018664:	4b2c      	ldr	r3, [pc, #176]	@ (8018718 <tcp_write+0x6bc>)
 8018666:	f240 3212 	movw	r2, #786	@ 0x312
 801866a:	492c      	ldr	r1, [pc, #176]	@ (801871c <tcp_write+0x6c0>)
 801866c:	482c      	ldr	r0, [pc, #176]	@ (8018720 <tcp_write+0x6c4>)
 801866e:	f005 f865 	bl	801d73c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8018672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018674:	2b00      	cmp	r3, #0
 8018676:	d016      	beq.n	80186a6 <tcp_write+0x64a>
 8018678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801867a:	68db      	ldr	r3, [r3, #12]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d012      	beq.n	80186a6 <tcp_write+0x64a>
 8018680:	797b      	ldrb	r3, [r7, #5]
 8018682:	f003 0302 	and.w	r3, r3, #2
 8018686:	2b00      	cmp	r3, #0
 8018688:	d10d      	bne.n	80186a6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801868a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801868c:	68db      	ldr	r3, [r3, #12]
 801868e:	899b      	ldrh	r3, [r3, #12]
 8018690:	b29c      	uxth	r4, r3
 8018692:	2008      	movs	r0, #8
 8018694:	f7f9 fbda 	bl	8011e4c <lwip_htons>
 8018698:	4603      	mov	r3, r0
 801869a:	461a      	mov	r2, r3
 801869c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801869e:	68db      	ldr	r3, [r3, #12]
 80186a0:	4322      	orrs	r2, r4
 80186a2:	b292      	uxth	r2, r2
 80186a4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80186a6:	2300      	movs	r3, #0
 80186a8:	e031      	b.n	801870e <tcp_write+0x6b2>
          goto memerr;
 80186aa:	bf00      	nop
 80186ac:	e006      	b.n	80186bc <tcp_write+0x660>
            goto memerr;
 80186ae:	bf00      	nop
 80186b0:	e004      	b.n	80186bc <tcp_write+0x660>
        goto memerr;
 80186b2:	bf00      	nop
 80186b4:	e002      	b.n	80186bc <tcp_write+0x660>
        goto memerr;
 80186b6:	bf00      	nop
 80186b8:	e000      	b.n	80186bc <tcp_write+0x660>
      goto memerr;
 80186ba:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80186bc:	68fb      	ldr	r3, [r7, #12]
 80186be:	8b5b      	ldrh	r3, [r3, #26]
 80186c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80186c4:	b29a      	uxth	r2, r3
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80186ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d002      	beq.n	80186d6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80186d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80186d2:	f7fa ff7b 	bl	80135cc <pbuf_free>
  }
  if (queue != NULL) {
 80186d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d002      	beq.n	80186e2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80186dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80186de:	f7fc fb9b 	bl	8014e18 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d00e      	beq.n	801870a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d10a      	bne.n	801870a <tcp_write+0x6ae>
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d106      	bne.n	801870a <tcp_write+0x6ae>
 80186fc:	4b06      	ldr	r3, [pc, #24]	@ (8018718 <tcp_write+0x6bc>)
 80186fe:	f240 3227 	movw	r2, #807	@ 0x327
 8018702:	4906      	ldr	r1, [pc, #24]	@ (801871c <tcp_write+0x6c0>)
 8018704:	4806      	ldr	r0, [pc, #24]	@ (8018720 <tcp_write+0x6c4>)
 8018706:	f005 f819 	bl	801d73c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801870a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801870e:	4618      	mov	r0, r3
 8018710:	375c      	adds	r7, #92	@ 0x5c
 8018712:	46bd      	mov	sp, r7
 8018714:	bd90      	pop	{r4, r7, pc}
 8018716:	bf00      	nop
 8018718:	08021cc4 	.word	0x08021cc4
 801871c:	08022038 	.word	0x08022038
 8018720:	08021d18 	.word	0x08021d18

08018724 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018724:	b590      	push	{r4, r7, lr}
 8018726:	b08b      	sub	sp, #44	@ 0x2c
 8018728:	af02      	add	r7, sp, #8
 801872a:	6078      	str	r0, [r7, #4]
 801872c:	460b      	mov	r3, r1
 801872e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018730:	2300      	movs	r3, #0
 8018732:	61fb      	str	r3, [r7, #28]
 8018734:	2300      	movs	r3, #0
 8018736:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018738:	2300      	movs	r3, #0
 801873a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	2b00      	cmp	r3, #0
 8018740:	d106      	bne.n	8018750 <tcp_split_unsent_seg+0x2c>
 8018742:	4b95      	ldr	r3, [pc, #596]	@ (8018998 <tcp_split_unsent_seg+0x274>)
 8018744:	f240 324b 	movw	r2, #843	@ 0x34b
 8018748:	4994      	ldr	r1, [pc, #592]	@ (801899c <tcp_split_unsent_seg+0x278>)
 801874a:	4895      	ldr	r0, [pc, #596]	@ (80189a0 <tcp_split_unsent_seg+0x27c>)
 801874c:	f004 fff6 	bl	801d73c <iprintf>

  useg = pcb->unsent;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018754:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018756:	697b      	ldr	r3, [r7, #20]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d102      	bne.n	8018762 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801875c:	f04f 33ff 	mov.w	r3, #4294967295
 8018760:	e116      	b.n	8018990 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018762:	887b      	ldrh	r3, [r7, #2]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d109      	bne.n	801877c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018768:	4b8b      	ldr	r3, [pc, #556]	@ (8018998 <tcp_split_unsent_seg+0x274>)
 801876a:	f240 3253 	movw	r2, #851	@ 0x353
 801876e:	498d      	ldr	r1, [pc, #564]	@ (80189a4 <tcp_split_unsent_seg+0x280>)
 8018770:	488b      	ldr	r0, [pc, #556]	@ (80189a0 <tcp_split_unsent_seg+0x27c>)
 8018772:	f004 ffe3 	bl	801d73c <iprintf>
    return ERR_VAL;
 8018776:	f06f 0305 	mvn.w	r3, #5
 801877a:	e109      	b.n	8018990 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	891b      	ldrh	r3, [r3, #8]
 8018780:	887a      	ldrh	r2, [r7, #2]
 8018782:	429a      	cmp	r2, r3
 8018784:	d301      	bcc.n	801878a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018786:	2300      	movs	r3, #0
 8018788:	e102      	b.n	8018990 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801878e:	887a      	ldrh	r2, [r7, #2]
 8018790:	429a      	cmp	r2, r3
 8018792:	d906      	bls.n	80187a2 <tcp_split_unsent_seg+0x7e>
 8018794:	4b80      	ldr	r3, [pc, #512]	@ (8018998 <tcp_split_unsent_seg+0x274>)
 8018796:	f240 325b 	movw	r2, #859	@ 0x35b
 801879a:	4983      	ldr	r1, [pc, #524]	@ (80189a8 <tcp_split_unsent_seg+0x284>)
 801879c:	4880      	ldr	r0, [pc, #512]	@ (80189a0 <tcp_split_unsent_seg+0x27c>)
 801879e:	f004 ffcd 	bl	801d73c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	891b      	ldrh	r3, [r3, #8]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d106      	bne.n	80187b8 <tcp_split_unsent_seg+0x94>
 80187aa:	4b7b      	ldr	r3, [pc, #492]	@ (8018998 <tcp_split_unsent_seg+0x274>)
 80187ac:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80187b0:	497e      	ldr	r1, [pc, #504]	@ (80189ac <tcp_split_unsent_seg+0x288>)
 80187b2:	487b      	ldr	r0, [pc, #492]	@ (80189a0 <tcp_split_unsent_seg+0x27c>)
 80187b4:	f004 ffc2 	bl	801d73c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80187b8:	697b      	ldr	r3, [r7, #20]
 80187ba:	7a9b      	ldrb	r3, [r3, #10]
 80187bc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80187be:	7bfb      	ldrb	r3, [r7, #15]
 80187c0:	009b      	lsls	r3, r3, #2
 80187c2:	b2db      	uxtb	r3, r3
 80187c4:	f003 0304 	and.w	r3, r3, #4
 80187c8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80187ca:	697b      	ldr	r3, [r7, #20]
 80187cc:	891a      	ldrh	r2, [r3, #8]
 80187ce:	887b      	ldrh	r3, [r7, #2]
 80187d0:	1ad3      	subs	r3, r2, r3
 80187d2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80187d4:	7bbb      	ldrb	r3, [r7, #14]
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	89bb      	ldrh	r3, [r7, #12]
 80187da:	4413      	add	r3, r2
 80187dc:	b29b      	uxth	r3, r3
 80187de:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80187e2:	4619      	mov	r1, r3
 80187e4:	2036      	movs	r0, #54	@ 0x36
 80187e6:	f7fa fc0d 	bl	8013004 <pbuf_alloc>
 80187ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	2b00      	cmp	r3, #0
 80187f0:	f000 80b7 	beq.w	8018962 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80187f4:	697b      	ldr	r3, [r7, #20]
 80187f6:	685b      	ldr	r3, [r3, #4]
 80187f8:	891a      	ldrh	r2, [r3, #8]
 80187fa:	697b      	ldr	r3, [r7, #20]
 80187fc:	891b      	ldrh	r3, [r3, #8]
 80187fe:	1ad3      	subs	r3, r2, r3
 8018800:	b29a      	uxth	r2, r3
 8018802:	887b      	ldrh	r3, [r7, #2]
 8018804:	4413      	add	r3, r2
 8018806:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	6858      	ldr	r0, [r3, #4]
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	685a      	ldr	r2, [r3, #4]
 8018810:	7bbb      	ldrb	r3, [r7, #14]
 8018812:	18d1      	adds	r1, r2, r3
 8018814:	897b      	ldrh	r3, [r7, #10]
 8018816:	89ba      	ldrh	r2, [r7, #12]
 8018818:	f7fb f8ce 	bl	80139b8 <pbuf_copy_partial>
 801881c:	4603      	mov	r3, r0
 801881e:	461a      	mov	r2, r3
 8018820:	89bb      	ldrh	r3, [r7, #12]
 8018822:	4293      	cmp	r3, r2
 8018824:	f040 809f 	bne.w	8018966 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018828:	697b      	ldr	r3, [r7, #20]
 801882a:	68db      	ldr	r3, [r3, #12]
 801882c:	899b      	ldrh	r3, [r3, #12]
 801882e:	b29b      	uxth	r3, r3
 8018830:	4618      	mov	r0, r3
 8018832:	f7f9 fb0b 	bl	8011e4c <lwip_htons>
 8018836:	4603      	mov	r3, r0
 8018838:	b2db      	uxtb	r3, r3
 801883a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801883e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018840:	2300      	movs	r3, #0
 8018842:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018844:	7efb      	ldrb	r3, [r7, #27]
 8018846:	f003 0308 	and.w	r3, r3, #8
 801884a:	2b00      	cmp	r3, #0
 801884c:	d007      	beq.n	801885e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801884e:	7efb      	ldrb	r3, [r7, #27]
 8018850:	f023 0308 	bic.w	r3, r3, #8
 8018854:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018856:	7ebb      	ldrb	r3, [r7, #26]
 8018858:	f043 0308 	orr.w	r3, r3, #8
 801885c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801885e:	7efb      	ldrb	r3, [r7, #27]
 8018860:	f003 0301 	and.w	r3, r3, #1
 8018864:	2b00      	cmp	r3, #0
 8018866:	d007      	beq.n	8018878 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018868:	7efb      	ldrb	r3, [r7, #27]
 801886a:	f023 0301 	bic.w	r3, r3, #1
 801886e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018870:	7ebb      	ldrb	r3, [r7, #26]
 8018872:	f043 0301 	orr.w	r3, r3, #1
 8018876:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018878:	697b      	ldr	r3, [r7, #20]
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	4618      	mov	r0, r3
 8018880:	f7f9 fafa 	bl	8011e78 <lwip_htonl>
 8018884:	4602      	mov	r2, r0
 8018886:	887b      	ldrh	r3, [r7, #2]
 8018888:	18d1      	adds	r1, r2, r3
 801888a:	7eba      	ldrb	r2, [r7, #26]
 801888c:	7bfb      	ldrb	r3, [r7, #15]
 801888e:	9300      	str	r3, [sp, #0]
 8018890:	460b      	mov	r3, r1
 8018892:	6939      	ldr	r1, [r7, #16]
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f7ff fa51 	bl	8017d3c <tcp_create_segment>
 801889a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801889c:	69fb      	ldr	r3, [r7, #28]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d063      	beq.n	801896a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80188a2:	697b      	ldr	r3, [r7, #20]
 80188a4:	685b      	ldr	r3, [r3, #4]
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7fa ff1e 	bl	80136e8 <pbuf_clen>
 80188ac:	4603      	mov	r3, r0
 80188ae:	461a      	mov	r2, r3
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80188b6:	1a9b      	subs	r3, r3, r2
 80188b8:	b29a      	uxth	r2, r3
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	6858      	ldr	r0, [r3, #4]
 80188c4:	697b      	ldr	r3, [r7, #20]
 80188c6:	685b      	ldr	r3, [r3, #4]
 80188c8:	891a      	ldrh	r2, [r3, #8]
 80188ca:	89bb      	ldrh	r3, [r7, #12]
 80188cc:	1ad3      	subs	r3, r2, r3
 80188ce:	b29b      	uxth	r3, r3
 80188d0:	4619      	mov	r1, r3
 80188d2:	f7fa fcf5 	bl	80132c0 <pbuf_realloc>
  useg->len -= remainder;
 80188d6:	697b      	ldr	r3, [r7, #20]
 80188d8:	891a      	ldrh	r2, [r3, #8]
 80188da:	89bb      	ldrh	r3, [r7, #12]
 80188dc:	1ad3      	subs	r3, r2, r3
 80188de:	b29a      	uxth	r2, r3
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	68db      	ldr	r3, [r3, #12]
 80188e8:	899b      	ldrh	r3, [r3, #12]
 80188ea:	b29c      	uxth	r4, r3
 80188ec:	7efb      	ldrb	r3, [r7, #27]
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	4618      	mov	r0, r3
 80188f2:	f7f9 faab 	bl	8011e4c <lwip_htons>
 80188f6:	4603      	mov	r3, r0
 80188f8:	461a      	mov	r2, r3
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	68db      	ldr	r3, [r3, #12]
 80188fe:	4322      	orrs	r2, r4
 8018900:	b292      	uxth	r2, r2
 8018902:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018904:	697b      	ldr	r3, [r7, #20]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	4618      	mov	r0, r3
 801890a:	f7fa feed 	bl	80136e8 <pbuf_clen>
 801890e:	4603      	mov	r3, r0
 8018910:	461a      	mov	r2, r3
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018918:	4413      	add	r3, r2
 801891a:	b29a      	uxth	r2, r3
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018922:	69fb      	ldr	r3, [r7, #28]
 8018924:	685b      	ldr	r3, [r3, #4]
 8018926:	4618      	mov	r0, r3
 8018928:	f7fa fede 	bl	80136e8 <pbuf_clen>
 801892c:	4603      	mov	r3, r0
 801892e:	461a      	mov	r2, r3
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018936:	4413      	add	r3, r2
 8018938:	b29a      	uxth	r2, r3
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	69fb      	ldr	r3, [r7, #28]
 8018946:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018948:	697b      	ldr	r3, [r7, #20]
 801894a:	69fa      	ldr	r2, [r7, #28]
 801894c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801894e:	69fb      	ldr	r3, [r7, #28]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d103      	bne.n	801895e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	2200      	movs	r2, #0
 801895a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801895e:	2300      	movs	r3, #0
 8018960:	e016      	b.n	8018990 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018962:	bf00      	nop
 8018964:	e002      	b.n	801896c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018966:	bf00      	nop
 8018968:	e000      	b.n	801896c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801896a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801896c:	69fb      	ldr	r3, [r7, #28]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d006      	beq.n	8018980 <tcp_split_unsent_seg+0x25c>
 8018972:	4b09      	ldr	r3, [pc, #36]	@ (8018998 <tcp_split_unsent_seg+0x274>)
 8018974:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018978:	490d      	ldr	r1, [pc, #52]	@ (80189b0 <tcp_split_unsent_seg+0x28c>)
 801897a:	4809      	ldr	r0, [pc, #36]	@ (80189a0 <tcp_split_unsent_seg+0x27c>)
 801897c:	f004 fede 	bl	801d73c <iprintf>
  if (p != NULL) {
 8018980:	693b      	ldr	r3, [r7, #16]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d002      	beq.n	801898c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018986:	6938      	ldr	r0, [r7, #16]
 8018988:	f7fa fe20 	bl	80135cc <pbuf_free>
  }

  return ERR_MEM;
 801898c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018990:	4618      	mov	r0, r3
 8018992:	3724      	adds	r7, #36	@ 0x24
 8018994:	46bd      	mov	sp, r7
 8018996:	bd90      	pop	{r4, r7, pc}
 8018998:	08021cc4 	.word	0x08021cc4
 801899c:	08022058 	.word	0x08022058
 80189a0:	08021d18 	.word	0x08021d18
 80189a4:	0802207c 	.word	0x0802207c
 80189a8:	080220a0 	.word	0x080220a0
 80189ac:	080220b0 	.word	0x080220b0
 80189b0:	080220c0 	.word	0x080220c0

080189b4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80189b4:	b590      	push	{r4, r7, lr}
 80189b6:	b085      	sub	sp, #20
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d106      	bne.n	80189d0 <tcp_send_fin+0x1c>
 80189c2:	4b21      	ldr	r3, [pc, #132]	@ (8018a48 <tcp_send_fin+0x94>)
 80189c4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80189c8:	4920      	ldr	r1, [pc, #128]	@ (8018a4c <tcp_send_fin+0x98>)
 80189ca:	4821      	ldr	r0, [pc, #132]	@ (8018a50 <tcp_send_fin+0x9c>)
 80189cc:	f004 feb6 	bl	801d73c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d02e      	beq.n	8018a36 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80189dc:	60fb      	str	r3, [r7, #12]
 80189de:	e002      	b.n	80189e6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d1f8      	bne.n	80189e0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	899b      	ldrh	r3, [r3, #12]
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	4618      	mov	r0, r3
 80189f8:	f7f9 fa28 	bl	8011e4c <lwip_htons>
 80189fc:	4603      	mov	r3, r0
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	f003 0307 	and.w	r3, r3, #7
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d116      	bne.n	8018a36 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	68db      	ldr	r3, [r3, #12]
 8018a0c:	899b      	ldrh	r3, [r3, #12]
 8018a0e:	b29c      	uxth	r4, r3
 8018a10:	2001      	movs	r0, #1
 8018a12:	f7f9 fa1b 	bl	8011e4c <lwip_htons>
 8018a16:	4603      	mov	r3, r0
 8018a18:	461a      	mov	r2, r3
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	68db      	ldr	r3, [r3, #12]
 8018a1e:	4322      	orrs	r2, r4
 8018a20:	b292      	uxth	r2, r2
 8018a22:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	8b5b      	ldrh	r3, [r3, #26]
 8018a28:	f043 0320 	orr.w	r3, r3, #32
 8018a2c:	b29a      	uxth	r2, r3
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018a32:	2300      	movs	r3, #0
 8018a34:	e004      	b.n	8018a40 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018a36:	2101      	movs	r1, #1
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f000 f80b 	bl	8018a54 <tcp_enqueue_flags>
 8018a3e:	4603      	mov	r3, r0
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	3714      	adds	r7, #20
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd90      	pop	{r4, r7, pc}
 8018a48:	08021cc4 	.word	0x08021cc4
 8018a4c:	080220cc 	.word	0x080220cc
 8018a50:	08021d18 	.word	0x08021d18

08018a54 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b08a      	sub	sp, #40	@ 0x28
 8018a58:	af02      	add	r7, sp, #8
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	460b      	mov	r3, r1
 8018a5e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018a60:	2300      	movs	r3, #0
 8018a62:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018a64:	2300      	movs	r3, #0
 8018a66:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018a68:	78fb      	ldrb	r3, [r7, #3]
 8018a6a:	f003 0303 	and.w	r3, r3, #3
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d106      	bne.n	8018a80 <tcp_enqueue_flags+0x2c>
 8018a72:	4b67      	ldr	r3, [pc, #412]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018a74:	f240 4211 	movw	r2, #1041	@ 0x411
 8018a78:	4966      	ldr	r1, [pc, #408]	@ (8018c14 <tcp_enqueue_flags+0x1c0>)
 8018a7a:	4867      	ldr	r0, [pc, #412]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018a7c:	f004 fe5e 	bl	801d73c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	d106      	bne.n	8018a94 <tcp_enqueue_flags+0x40>
 8018a86:	4b62      	ldr	r3, [pc, #392]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018a88:	f240 4213 	movw	r2, #1043	@ 0x413
 8018a8c:	4963      	ldr	r1, [pc, #396]	@ (8018c1c <tcp_enqueue_flags+0x1c8>)
 8018a8e:	4862      	ldr	r0, [pc, #392]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018a90:	f004 fe54 	bl	801d73c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018a94:	78fb      	ldrb	r3, [r7, #3]
 8018a96:	f003 0302 	and.w	r3, r3, #2
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d001      	beq.n	8018aa2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018a9e:	2301      	movs	r3, #1
 8018aa0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018aa2:	7ffb      	ldrb	r3, [r7, #31]
 8018aa4:	009b      	lsls	r3, r3, #2
 8018aa6:	b2db      	uxtb	r3, r3
 8018aa8:	f003 0304 	and.w	r3, r3, #4
 8018aac:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018aae:	7dfb      	ldrb	r3, [r7, #23]
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	2036      	movs	r0, #54	@ 0x36
 8018aba:	f7fa faa3 	bl	8013004 <pbuf_alloc>
 8018abe:	6138      	str	r0, [r7, #16]
 8018ac0:	693b      	ldr	r3, [r7, #16]
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d109      	bne.n	8018ada <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	8b5b      	ldrh	r3, [r3, #26]
 8018aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ace:	b29a      	uxth	r2, r3
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ad8:	e095      	b.n	8018c06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018ada:	693b      	ldr	r3, [r7, #16]
 8018adc:	895a      	ldrh	r2, [r3, #10]
 8018ade:	7dfb      	ldrb	r3, [r7, #23]
 8018ae0:	b29b      	uxth	r3, r3
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d206      	bcs.n	8018af4 <tcp_enqueue_flags+0xa0>
 8018ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018ae8:	f240 4239 	movw	r2, #1081	@ 0x439
 8018aec:	494c      	ldr	r1, [pc, #304]	@ (8018c20 <tcp_enqueue_flags+0x1cc>)
 8018aee:	484a      	ldr	r0, [pc, #296]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018af0:	f004 fe24 	bl	801d73c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8018af8:	78fa      	ldrb	r2, [r7, #3]
 8018afa:	7ffb      	ldrb	r3, [r7, #31]
 8018afc:	9300      	str	r3, [sp, #0]
 8018afe:	460b      	mov	r3, r1
 8018b00:	6939      	ldr	r1, [r7, #16]
 8018b02:	6878      	ldr	r0, [r7, #4]
 8018b04:	f7ff f91a 	bl	8017d3c <tcp_create_segment>
 8018b08:	60f8      	str	r0, [r7, #12]
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	d109      	bne.n	8018b24 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	8b5b      	ldrh	r3, [r3, #26]
 8018b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b18:	b29a      	uxth	r2, r3
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b22:	e070      	b.n	8018c06 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	f003 0303 	and.w	r3, r3, #3
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d006      	beq.n	8018b3e <tcp_enqueue_flags+0xea>
 8018b30:	4b37      	ldr	r3, [pc, #220]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018b32:	f240 4242 	movw	r2, #1090	@ 0x442
 8018b36:	493b      	ldr	r1, [pc, #236]	@ (8018c24 <tcp_enqueue_flags+0x1d0>)
 8018b38:	4837      	ldr	r0, [pc, #220]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018b3a:	f004 fdff 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	891b      	ldrh	r3, [r3, #8]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d006      	beq.n	8018b54 <tcp_enqueue_flags+0x100>
 8018b46:	4b32      	ldr	r3, [pc, #200]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018b48:	f240 4243 	movw	r2, #1091	@ 0x443
 8018b4c:	4936      	ldr	r1, [pc, #216]	@ (8018c28 <tcp_enqueue_flags+0x1d4>)
 8018b4e:	4832      	ldr	r0, [pc, #200]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018b50:	f004 fdf4 	bl	801d73c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d103      	bne.n	8018b64 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	68fa      	ldr	r2, [r7, #12]
 8018b60:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018b62:	e00d      	b.n	8018b80 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b68:	61bb      	str	r3, [r7, #24]
 8018b6a:	e002      	b.n	8018b72 <tcp_enqueue_flags+0x11e>
 8018b6c:	69bb      	ldr	r3, [r7, #24]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	61bb      	str	r3, [r7, #24]
 8018b72:	69bb      	ldr	r3, [r7, #24]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d1f8      	bne.n	8018b6c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018b7a:	69bb      	ldr	r3, [r7, #24]
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2200      	movs	r2, #0
 8018b84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018b88:	78fb      	ldrb	r3, [r7, #3]
 8018b8a:	f003 0302 	and.w	r3, r3, #2
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d104      	bne.n	8018b9c <tcp_enqueue_flags+0x148>
 8018b92:	78fb      	ldrb	r3, [r7, #3]
 8018b94:	f003 0301 	and.w	r3, r3, #1
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d004      	beq.n	8018ba6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018ba0:	1c5a      	adds	r2, r3, #1
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018ba6:	78fb      	ldrb	r3, [r7, #3]
 8018ba8:	f003 0301 	and.w	r3, r3, #1
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d006      	beq.n	8018bbe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	8b5b      	ldrh	r3, [r3, #26]
 8018bb4:	f043 0320 	orr.w	r3, r3, #32
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	685b      	ldr	r3, [r3, #4]
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7fa fd90 	bl	80136e8 <pbuf_clen>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	461a      	mov	r2, r3
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018bd2:	4413      	add	r3, r2
 8018bd4:	b29a      	uxth	r2, r3
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d00e      	beq.n	8018c04 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d10a      	bne.n	8018c04 <tcp_enqueue_flags+0x1b0>
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d106      	bne.n	8018c04 <tcp_enqueue_flags+0x1b0>
 8018bf6:	4b06      	ldr	r3, [pc, #24]	@ (8018c10 <tcp_enqueue_flags+0x1bc>)
 8018bf8:	f240 4265 	movw	r2, #1125	@ 0x465
 8018bfc:	490b      	ldr	r1, [pc, #44]	@ (8018c2c <tcp_enqueue_flags+0x1d8>)
 8018bfe:	4806      	ldr	r0, [pc, #24]	@ (8018c18 <tcp_enqueue_flags+0x1c4>)
 8018c00:	f004 fd9c 	bl	801d73c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018c04:	2300      	movs	r3, #0
}
 8018c06:	4618      	mov	r0, r3
 8018c08:	3720      	adds	r7, #32
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	08021cc4 	.word	0x08021cc4
 8018c14:	080220e8 	.word	0x080220e8
 8018c18:	08021d18 	.word	0x08021d18
 8018c1c:	08022140 	.word	0x08022140
 8018c20:	08022160 	.word	0x08022160
 8018c24:	0802219c 	.word	0x0802219c
 8018c28:	080221b4 	.word	0x080221b4
 8018c2c:	080221e0 	.word	0x080221e0

08018c30 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018c30:	b5b0      	push	{r4, r5, r7, lr}
 8018c32:	b08a      	sub	sp, #40	@ 0x28
 8018c34:	af00      	add	r7, sp, #0
 8018c36:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d106      	bne.n	8018c4c <tcp_output+0x1c>
 8018c3e:	4b8a      	ldr	r3, [pc, #552]	@ (8018e68 <tcp_output+0x238>)
 8018c40:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018c44:	4989      	ldr	r1, [pc, #548]	@ (8018e6c <tcp_output+0x23c>)
 8018c46:	488a      	ldr	r0, [pc, #552]	@ (8018e70 <tcp_output+0x240>)
 8018c48:	f004 fd78 	bl	801d73c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	7d1b      	ldrb	r3, [r3, #20]
 8018c50:	2b01      	cmp	r3, #1
 8018c52:	d106      	bne.n	8018c62 <tcp_output+0x32>
 8018c54:	4b84      	ldr	r3, [pc, #528]	@ (8018e68 <tcp_output+0x238>)
 8018c56:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018c5a:	4986      	ldr	r1, [pc, #536]	@ (8018e74 <tcp_output+0x244>)
 8018c5c:	4884      	ldr	r0, [pc, #528]	@ (8018e70 <tcp_output+0x240>)
 8018c5e:	f004 fd6d 	bl	801d73c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018c62:	4b85      	ldr	r3, [pc, #532]	@ (8018e78 <tcp_output+0x248>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	687a      	ldr	r2, [r7, #4]
 8018c68:	429a      	cmp	r2, r3
 8018c6a:	d101      	bne.n	8018c70 <tcp_output+0x40>
    return ERR_OK;
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	e1ce      	b.n	801900e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018c7c:	4293      	cmp	r3, r2
 8018c7e:	bf28      	it	cs
 8018c80:	4613      	movcs	r3, r2
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018c8a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d10b      	bne.n	8018caa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	8b5b      	ldrh	r3, [r3, #26]
 8018c96:	f003 0302 	and.w	r3, r3, #2
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	f000 81aa 	beq.w	8018ff4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018ca0:	6878      	ldr	r0, [r7, #4]
 8018ca2:	f000 fdcb 	bl	801983c <tcp_send_empty_ack>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	e1b1      	b.n	801900e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018caa:	6879      	ldr	r1, [r7, #4]
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	3304      	adds	r3, #4
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f7ff f826 	bl	8017d04 <tcp_route>
 8018cb8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d102      	bne.n	8018cc6 <tcp_output+0x96>
    return ERR_RTE;
 8018cc0:	f06f 0303 	mvn.w	r3, #3
 8018cc4:	e1a3      	b.n	801900e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d003      	beq.n	8018cd4 <tcp_output+0xa4>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d111      	bne.n	8018cf8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018cd4:	697b      	ldr	r3, [r7, #20]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d002      	beq.n	8018ce0 <tcp_output+0xb0>
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	3304      	adds	r3, #4
 8018cde:	e000      	b.n	8018ce2 <tcp_output+0xb2>
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018ce4:	693b      	ldr	r3, [r7, #16]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d102      	bne.n	8018cf0 <tcp_output+0xc0>
      return ERR_RTE;
 8018cea:	f06f 0303 	mvn.w	r3, #3
 8018cee:	e18e      	b.n	801900e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018cf0:	693b      	ldr	r3, [r7, #16]
 8018cf2:	681a      	ldr	r2, [r3, #0]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018cfa:	68db      	ldr	r3, [r3, #12]
 8018cfc:	685b      	ldr	r3, [r3, #4]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f7f9 f8ba 	bl	8011e78 <lwip_htonl>
 8018d04:	4602      	mov	r2, r0
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d0a:	1ad3      	subs	r3, r2, r3
 8018d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d0e:	8912      	ldrh	r2, [r2, #8]
 8018d10:	4413      	add	r3, r2
 8018d12:	69ba      	ldr	r2, [r7, #24]
 8018d14:	429a      	cmp	r2, r3
 8018d16:	d227      	bcs.n	8018d68 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018d1e:	461a      	mov	r2, r3
 8018d20:	69bb      	ldr	r3, [r7, #24]
 8018d22:	4293      	cmp	r3, r2
 8018d24:	d114      	bne.n	8018d50 <tcp_output+0x120>
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d110      	bne.n	8018d50 <tcp_output+0x120>
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d10b      	bne.n	8018d50 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2201      	movs	r2, #1
 8018d44:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	8b5b      	ldrh	r3, [r3, #26]
 8018d54:	f003 0302 	and.w	r3, r3, #2
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 814d 	beq.w	8018ff8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f000 fd6c 	bl	801983c <tcp_send_empty_ack>
 8018d64:	4603      	mov	r3, r0
 8018d66:	e152      	b.n	801900e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d74:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018d76:	6a3b      	ldr	r3, [r7, #32]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 811c 	beq.w	8018fb6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018d7e:	e002      	b.n	8018d86 <tcp_output+0x156>
 8018d80:	6a3b      	ldr	r3, [r7, #32]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	623b      	str	r3, [r7, #32]
 8018d86:	6a3b      	ldr	r3, [r7, #32]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d1f8      	bne.n	8018d80 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018d8e:	e112      	b.n	8018fb6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	899b      	ldrh	r3, [r3, #12]
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	4618      	mov	r0, r3
 8018d9a:	f7f9 f857 	bl	8011e4c <lwip_htons>
 8018d9e:	4603      	mov	r3, r0
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	f003 0304 	and.w	r3, r3, #4
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d006      	beq.n	8018db8 <tcp_output+0x188>
 8018daa:	4b2f      	ldr	r3, [pc, #188]	@ (8018e68 <tcp_output+0x238>)
 8018dac:	f240 5236 	movw	r2, #1334	@ 0x536
 8018db0:	4932      	ldr	r1, [pc, #200]	@ (8018e7c <tcp_output+0x24c>)
 8018db2:	482f      	ldr	r0, [pc, #188]	@ (8018e70 <tcp_output+0x240>)
 8018db4:	f004 fcc2 	bl	801d73c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d01f      	beq.n	8018e00 <tcp_output+0x1d0>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	8b5b      	ldrh	r3, [r3, #26]
 8018dc4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d119      	bne.n	8018e00 <tcp_output+0x1d0>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d00b      	beq.n	8018dec <tcp_output+0x1bc>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d110      	bne.n	8018e00 <tcp_output+0x1d0>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018de2:	891a      	ldrh	r2, [r3, #8]
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018de8:	429a      	cmp	r2, r3
 8018dea:	d209      	bcs.n	8018e00 <tcp_output+0x1d0>
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d004      	beq.n	8018e00 <tcp_output+0x1d0>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018dfc:	2b08      	cmp	r3, #8
 8018dfe:	d901      	bls.n	8018e04 <tcp_output+0x1d4>
 8018e00:	2301      	movs	r3, #1
 8018e02:	e000      	b.n	8018e06 <tcp_output+0x1d6>
 8018e04:	2300      	movs	r3, #0
 8018e06:	2b00      	cmp	r3, #0
 8018e08:	d106      	bne.n	8018e18 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	8b5b      	ldrh	r3, [r3, #26]
 8018e0e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	f000 80e4 	beq.w	8018fe0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	7d1b      	ldrb	r3, [r3, #20]
 8018e1c:	2b02      	cmp	r3, #2
 8018e1e:	d00d      	beq.n	8018e3c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e22:	68db      	ldr	r3, [r3, #12]
 8018e24:	899b      	ldrh	r3, [r3, #12]
 8018e26:	b29c      	uxth	r4, r3
 8018e28:	2010      	movs	r0, #16
 8018e2a:	f7f9 f80f 	bl	8011e4c <lwip_htons>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	461a      	mov	r2, r3
 8018e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	4322      	orrs	r2, r4
 8018e38:	b292      	uxth	r2, r2
 8018e3a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018e3c:	697a      	ldr	r2, [r7, #20]
 8018e3e:	6879      	ldr	r1, [r7, #4]
 8018e40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018e42:	f000 f909 	bl	8019058 <tcp_output_segment>
 8018e46:	4603      	mov	r3, r0
 8018e48:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d016      	beq.n	8018e80 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	8b5b      	ldrh	r3, [r3, #26]
 8018e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018e5a:	b29a      	uxth	r2, r3
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	835a      	strh	r2, [r3, #26]
      return err;
 8018e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e64:	e0d3      	b.n	801900e <tcp_output+0x3de>
 8018e66:	bf00      	nop
 8018e68:	08021cc4 	.word	0x08021cc4
 8018e6c:	08022208 	.word	0x08022208
 8018e70:	08021d18 	.word	0x08021d18
 8018e74:	08022220 	.word	0x08022220
 8018e78:	2000c9fc 	.word	0x2000c9fc
 8018e7c:	08022248 	.word	0x08022248
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e82:	681a      	ldr	r2, [r3, #0]
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	7d1b      	ldrb	r3, [r3, #20]
 8018e8c:	2b02      	cmp	r3, #2
 8018e8e:	d006      	beq.n	8018e9e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	8b5b      	ldrh	r3, [r3, #26]
 8018e94:	f023 0303 	bic.w	r3, r3, #3
 8018e98:	b29a      	uxth	r2, r3
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ea0:	68db      	ldr	r3, [r3, #12]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7f8 ffe7 	bl	8011e78 <lwip_htonl>
 8018eaa:	4604      	mov	r4, r0
 8018eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eae:	891b      	ldrh	r3, [r3, #8]
 8018eb0:	461d      	mov	r5, r3
 8018eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eb4:	68db      	ldr	r3, [r3, #12]
 8018eb6:	899b      	ldrh	r3, [r3, #12]
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7f8 ffc6 	bl	8011e4c <lwip_htons>
 8018ec0:	4603      	mov	r3, r0
 8018ec2:	b2db      	uxtb	r3, r3
 8018ec4:	f003 0303 	and.w	r3, r3, #3
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d001      	beq.n	8018ed0 <tcp_output+0x2a0>
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e000      	b.n	8018ed2 <tcp_output+0x2a2>
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	442b      	add	r3, r5
 8018ed4:	4423      	add	r3, r4
 8018ed6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018edc:	68bb      	ldr	r3, [r7, #8]
 8018ede:	1ad3      	subs	r3, r2, r3
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	da02      	bge.n	8018eea <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	68ba      	ldr	r2, [r7, #8]
 8018ee8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eec:	891b      	ldrh	r3, [r3, #8]
 8018eee:	461c      	mov	r4, r3
 8018ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ef2:	68db      	ldr	r3, [r3, #12]
 8018ef4:	899b      	ldrh	r3, [r3, #12]
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7f8 ffa7 	bl	8011e4c <lwip_htons>
 8018efe:	4603      	mov	r3, r0
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	f003 0303 	and.w	r3, r3, #3
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d001      	beq.n	8018f0e <tcp_output+0x2de>
 8018f0a:	2301      	movs	r3, #1
 8018f0c:	e000      	b.n	8018f10 <tcp_output+0x2e0>
 8018f0e:	2300      	movs	r3, #0
 8018f10:	4423      	add	r3, r4
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d049      	beq.n	8018faa <tcp_output+0x37a>
      seg->next = NULL;
 8018f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f18:	2200      	movs	r2, #0
 8018f1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d105      	bne.n	8018f30 <tcp_output+0x300>
        pcb->unacked = seg;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f28:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8018f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f2c:	623b      	str	r3, [r7, #32]
 8018f2e:	e03f      	b.n	8018fb0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f32:	68db      	ldr	r3, [r3, #12]
 8018f34:	685b      	ldr	r3, [r3, #4]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7f8 ff9e 	bl	8011e78 <lwip_htonl>
 8018f3c:	4604      	mov	r4, r0
 8018f3e:	6a3b      	ldr	r3, [r7, #32]
 8018f40:	68db      	ldr	r3, [r3, #12]
 8018f42:	685b      	ldr	r3, [r3, #4]
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7f8 ff97 	bl	8011e78 <lwip_htonl>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	1ae3      	subs	r3, r4, r3
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	da24      	bge.n	8018f9c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	3370      	adds	r3, #112	@ 0x70
 8018f56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018f58:	e002      	b.n	8018f60 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018f5a:	69fb      	ldr	r3, [r7, #28]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d011      	beq.n	8018f8c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018f68:	69fb      	ldr	r3, [r7, #28]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	685b      	ldr	r3, [r3, #4]
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7f8 ff81 	bl	8011e78 <lwip_htonl>
 8018f76:	4604      	mov	r4, r0
 8018f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f7a:	68db      	ldr	r3, [r3, #12]
 8018f7c:	685b      	ldr	r3, [r3, #4]
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7f8 ff7a 	bl	8011e78 <lwip_htonl>
 8018f84:	4603      	mov	r3, r0
 8018f86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	dbe6      	blt.n	8018f5a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018f8c:	69fb      	ldr	r3, [r7, #28]
 8018f8e:	681a      	ldr	r2, [r3, #0]
 8018f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018f94:	69fb      	ldr	r3, [r7, #28]
 8018f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f98:	601a      	str	r2, [r3, #0]
 8018f9a:	e009      	b.n	8018fb0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018f9c:	6a3b      	ldr	r3, [r7, #32]
 8018f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fa0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018fa2:	6a3b      	ldr	r3, [r7, #32]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	623b      	str	r3, [r7, #32]
 8018fa8:	e002      	b.n	8018fb0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018fac:	f7fb ff49 	bl	8014e42 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8018fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d012      	beq.n	8018fe2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	685b      	ldr	r3, [r3, #4]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7f8 ff58 	bl	8011e78 <lwip_htonl>
 8018fc8:	4602      	mov	r2, r0
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018fce:	1ad3      	subs	r3, r2, r3
 8018fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fd2:	8912      	ldrh	r2, [r2, #8]
 8018fd4:	4413      	add	r3, r2
  while (seg != NULL &&
 8018fd6:	69ba      	ldr	r2, [r7, #24]
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	f4bf aed9 	bcs.w	8018d90 <tcp_output+0x160>
 8018fde:	e000      	b.n	8018fe2 <tcp_output+0x3b2>
      break;
 8018fe0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d108      	bne.n	8018ffc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	2200      	movs	r2, #0
 8018fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8018ff2:	e004      	b.n	8018ffe <tcp_output+0x3ce>
    goto output_done;
 8018ff4:	bf00      	nop
 8018ff6:	e002      	b.n	8018ffe <tcp_output+0x3ce>
    goto output_done;
 8018ff8:	bf00      	nop
 8018ffa:	e000      	b.n	8018ffe <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018ffc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	8b5b      	ldrh	r3, [r3, #26]
 8019002:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019006:	b29a      	uxth	r2, r3
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801900c:	2300      	movs	r3, #0
}
 801900e:	4618      	mov	r0, r3
 8019010:	3728      	adds	r7, #40	@ 0x28
 8019012:	46bd      	mov	sp, r7
 8019014:	bdb0      	pop	{r4, r5, r7, pc}
 8019016:	bf00      	nop

08019018 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d106      	bne.n	8019034 <tcp_output_segment_busy+0x1c>
 8019026:	4b09      	ldr	r3, [pc, #36]	@ (801904c <tcp_output_segment_busy+0x34>)
 8019028:	f240 529a 	movw	r2, #1434	@ 0x59a
 801902c:	4908      	ldr	r1, [pc, #32]	@ (8019050 <tcp_output_segment_busy+0x38>)
 801902e:	4809      	ldr	r0, [pc, #36]	@ (8019054 <tcp_output_segment_busy+0x3c>)
 8019030:	f004 fb84 	bl	801d73c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	7b9b      	ldrb	r3, [r3, #14]
 801903a:	2b01      	cmp	r3, #1
 801903c:	d001      	beq.n	8019042 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801903e:	2301      	movs	r3, #1
 8019040:	e000      	b.n	8019044 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019042:	2300      	movs	r3, #0
}
 8019044:	4618      	mov	r0, r3
 8019046:	3708      	adds	r7, #8
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}
 801904c:	08021cc4 	.word	0x08021cc4
 8019050:	08022260 	.word	0x08022260
 8019054:	08021d18 	.word	0x08021d18

08019058 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019058:	b5b0      	push	{r4, r5, r7, lr}
 801905a:	b08c      	sub	sp, #48	@ 0x30
 801905c:	af04      	add	r7, sp, #16
 801905e:	60f8      	str	r0, [r7, #12]
 8019060:	60b9      	str	r1, [r7, #8]
 8019062:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	2b00      	cmp	r3, #0
 8019068:	d106      	bne.n	8019078 <tcp_output_segment+0x20>
 801906a:	4b64      	ldr	r3, [pc, #400]	@ (80191fc <tcp_output_segment+0x1a4>)
 801906c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019070:	4963      	ldr	r1, [pc, #396]	@ (8019200 <tcp_output_segment+0x1a8>)
 8019072:	4864      	ldr	r0, [pc, #400]	@ (8019204 <tcp_output_segment+0x1ac>)
 8019074:	f004 fb62 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019078:	68bb      	ldr	r3, [r7, #8]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d106      	bne.n	801908c <tcp_output_segment+0x34>
 801907e:	4b5f      	ldr	r3, [pc, #380]	@ (80191fc <tcp_output_segment+0x1a4>)
 8019080:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019084:	4960      	ldr	r1, [pc, #384]	@ (8019208 <tcp_output_segment+0x1b0>)
 8019086:	485f      	ldr	r0, [pc, #380]	@ (8019204 <tcp_output_segment+0x1ac>)
 8019088:	f004 fb58 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d106      	bne.n	80190a0 <tcp_output_segment+0x48>
 8019092:	4b5a      	ldr	r3, [pc, #360]	@ (80191fc <tcp_output_segment+0x1a4>)
 8019094:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8019098:	495c      	ldr	r1, [pc, #368]	@ (801920c <tcp_output_segment+0x1b4>)
 801909a:	485a      	ldr	r0, [pc, #360]	@ (8019204 <tcp_output_segment+0x1ac>)
 801909c:	f004 fb4e 	bl	801d73c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80190a0:	68f8      	ldr	r0, [r7, #12]
 80190a2:	f7ff ffb9 	bl	8019018 <tcp_output_segment_busy>
 80190a6:	4603      	mov	r3, r0
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d001      	beq.n	80190b0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80190ac:	2300      	movs	r3, #0
 80190ae:	e0a1      	b.n	80191f4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80190b0:	68bb      	ldr	r3, [r7, #8]
 80190b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	68dc      	ldr	r4, [r3, #12]
 80190b8:	4610      	mov	r0, r2
 80190ba:	f7f8 fedd 	bl	8011e78 <lwip_htonl>
 80190be:	4603      	mov	r3, r0
 80190c0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80190c2:	68bb      	ldr	r3, [r7, #8]
 80190c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	68dc      	ldr	r4, [r3, #12]
 80190ca:	4610      	mov	r0, r2
 80190cc:	f7f8 febe 	bl	8011e4c <lwip_htons>
 80190d0:	4603      	mov	r3, r0
 80190d2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80190d4:	68bb      	ldr	r3, [r7, #8]
 80190d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80190d8:	68ba      	ldr	r2, [r7, #8]
 80190da:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80190dc:	441a      	add	r2, r3
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	68db      	ldr	r3, [r3, #12]
 80190e6:	3314      	adds	r3, #20
 80190e8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80190ea:	68fb      	ldr	r3, [r7, #12]
 80190ec:	7a9b      	ldrb	r3, [r3, #10]
 80190ee:	f003 0301 	and.w	r3, r3, #1
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d015      	beq.n	8019122 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80190f6:	68bb      	ldr	r3, [r7, #8]
 80190f8:	3304      	adds	r3, #4
 80190fa:	461a      	mov	r2, r3
 80190fc:	6879      	ldr	r1, [r7, #4]
 80190fe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8019102:	f7fc fa39 	bl	8015578 <tcp_eff_send_mss_netif>
 8019106:	4603      	mov	r3, r0
 8019108:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801910a:	8b7b      	ldrh	r3, [r7, #26]
 801910c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8019110:	4618      	mov	r0, r3
 8019112:	f7f8 feb1 	bl	8011e78 <lwip_htonl>
 8019116:	4602      	mov	r2, r0
 8019118:	69fb      	ldr	r3, [r7, #28]
 801911a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801911c:	69fb      	ldr	r3, [r7, #28]
 801911e:	3304      	adds	r3, #4
 8019120:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019122:	68bb      	ldr	r3, [r7, #8]
 8019124:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8019128:	2b00      	cmp	r3, #0
 801912a:	da02      	bge.n	8019132 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	2200      	movs	r2, #0
 8019130:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8019132:	68bb      	ldr	r3, [r7, #8]
 8019134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019136:	2b00      	cmp	r3, #0
 8019138:	d10c      	bne.n	8019154 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801913a:	4b35      	ldr	r3, [pc, #212]	@ (8019210 <tcp_output_segment+0x1b8>)
 801913c:	681a      	ldr	r2, [r3, #0]
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	68db      	ldr	r3, [r3, #12]
 8019146:	685b      	ldr	r3, [r3, #4]
 8019148:	4618      	mov	r0, r3
 801914a:	f7f8 fe95 	bl	8011e78 <lwip_htonl>
 801914e:	4602      	mov	r2, r0
 8019150:	68bb      	ldr	r3, [r7, #8]
 8019152:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	68da      	ldr	r2, [r3, #12]
 8019158:	68fb      	ldr	r3, [r7, #12]
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	685b      	ldr	r3, [r3, #4]
 801915e:	1ad3      	subs	r3, r2, r3
 8019160:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	8959      	ldrh	r1, [r3, #10]
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	685b      	ldr	r3, [r3, #4]
 801916c:	8b3a      	ldrh	r2, [r7, #24]
 801916e:	1a8a      	subs	r2, r1, r2
 8019170:	b292      	uxth	r2, r2
 8019172:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	8919      	ldrh	r1, [r3, #8]
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	8b3a      	ldrh	r2, [r7, #24]
 8019180:	1a8a      	subs	r2, r1, r2
 8019182:	b292      	uxth	r2, r2
 8019184:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	685b      	ldr	r3, [r3, #4]
 801918a:	68fa      	ldr	r2, [r7, #12]
 801918c:	68d2      	ldr	r2, [r2, #12]
 801918e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	68db      	ldr	r3, [r3, #12]
 8019194:	2200      	movs	r2, #0
 8019196:	741a      	strb	r2, [r3, #16]
 8019198:	2200      	movs	r2, #0
 801919a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	68da      	ldr	r2, [r3, #12]
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	7a9b      	ldrb	r3, [r3, #10]
 80191a4:	f003 0301 	and.w	r3, r3, #1
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d001      	beq.n	80191b0 <tcp_output_segment+0x158>
 80191ac:	2318      	movs	r3, #24
 80191ae:	e000      	b.n	80191b2 <tcp_output_segment+0x15a>
 80191b0:	2314      	movs	r3, #20
 80191b2:	4413      	add	r3, r2
 80191b4:	69fa      	ldr	r2, [r7, #28]
 80191b6:	429a      	cmp	r2, r3
 80191b8:	d006      	beq.n	80191c8 <tcp_output_segment+0x170>
 80191ba:	4b10      	ldr	r3, [pc, #64]	@ (80191fc <tcp_output_segment+0x1a4>)
 80191bc:	f240 621c 	movw	r2, #1564	@ 0x61c
 80191c0:	4914      	ldr	r1, [pc, #80]	@ (8019214 <tcp_output_segment+0x1bc>)
 80191c2:	4810      	ldr	r0, [pc, #64]	@ (8019204 <tcp_output_segment+0x1ac>)
 80191c4:	f004 faba 	bl	801d73c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	6858      	ldr	r0, [r3, #4]
 80191cc:	68b9      	ldr	r1, [r7, #8]
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	1d1c      	adds	r4, r3, #4
 80191d2:	68bb      	ldr	r3, [r7, #8]
 80191d4:	7add      	ldrb	r5, [r3, #11]
 80191d6:	68bb      	ldr	r3, [r7, #8]
 80191d8:	7a9b      	ldrb	r3, [r3, #10]
 80191da:	687a      	ldr	r2, [r7, #4]
 80191dc:	9202      	str	r2, [sp, #8]
 80191de:	2206      	movs	r2, #6
 80191e0:	9201      	str	r2, [sp, #4]
 80191e2:	9300      	str	r3, [sp, #0]
 80191e4:	462b      	mov	r3, r5
 80191e6:	4622      	mov	r2, r4
 80191e8:	f002 fa32 	bl	801b650 <ip4_output_if>
 80191ec:	4603      	mov	r3, r0
 80191ee:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80191f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80191f4:	4618      	mov	r0, r3
 80191f6:	3720      	adds	r7, #32
 80191f8:	46bd      	mov	sp, r7
 80191fa:	bdb0      	pop	{r4, r5, r7, pc}
 80191fc:	08021cc4 	.word	0x08021cc4
 8019200:	08022288 	.word	0x08022288
 8019204:	08021d18 	.word	0x08021d18
 8019208:	080222a8 	.word	0x080222a8
 801920c:	080222c8 	.word	0x080222c8
 8019210:	2000c9b0 	.word	0x2000c9b0
 8019214:	080222ec 	.word	0x080222ec

08019218 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019218:	b5b0      	push	{r4, r5, r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d106      	bne.n	8019234 <tcp_rexmit_rto_prepare+0x1c>
 8019226:	4b31      	ldr	r3, [pc, #196]	@ (80192ec <tcp_rexmit_rto_prepare+0xd4>)
 8019228:	f240 6263 	movw	r2, #1635	@ 0x663
 801922c:	4930      	ldr	r1, [pc, #192]	@ (80192f0 <tcp_rexmit_rto_prepare+0xd8>)
 801922e:	4831      	ldr	r0, [pc, #196]	@ (80192f4 <tcp_rexmit_rto_prepare+0xdc>)
 8019230:	f004 fa84 	bl	801d73c <iprintf>

  if (pcb->unacked == NULL) {
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019238:	2b00      	cmp	r3, #0
 801923a:	d102      	bne.n	8019242 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801923c:	f06f 0305 	mvn.w	r3, #5
 8019240:	e050      	b.n	80192e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019246:	60fb      	str	r3, [r7, #12]
 8019248:	e00b      	b.n	8019262 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801924a:	68f8      	ldr	r0, [r7, #12]
 801924c:	f7ff fee4 	bl	8019018 <tcp_output_segment_busy>
 8019250:	4603      	mov	r3, r0
 8019252:	2b00      	cmp	r3, #0
 8019254:	d002      	beq.n	801925c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019256:	f06f 0305 	mvn.w	r3, #5
 801925a:	e043      	b.n	80192e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	60fb      	str	r3, [r7, #12]
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d1ef      	bne.n	801924a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801926a:	68f8      	ldr	r0, [r7, #12]
 801926c:	f7ff fed4 	bl	8019018 <tcp_output_segment_busy>
 8019270:	4603      	mov	r3, r0
 8019272:	2b00      	cmp	r3, #0
 8019274:	d002      	beq.n	801927c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019276:	f06f 0305 	mvn.w	r3, #5
 801927a:	e033      	b.n	80192e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	2200      	movs	r2, #0
 8019290:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	8b5b      	ldrh	r3, [r3, #26]
 8019296:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801929a:	b29a      	uxth	r2, r3
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	68db      	ldr	r3, [r3, #12]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	4618      	mov	r0, r3
 80192a8:	f7f8 fde6 	bl	8011e78 <lwip_htonl>
 80192ac:	4604      	mov	r4, r0
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	891b      	ldrh	r3, [r3, #8]
 80192b2:	461d      	mov	r5, r3
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	68db      	ldr	r3, [r3, #12]
 80192b8:	899b      	ldrh	r3, [r3, #12]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	4618      	mov	r0, r3
 80192be:	f7f8 fdc5 	bl	8011e4c <lwip_htons>
 80192c2:	4603      	mov	r3, r0
 80192c4:	b2db      	uxtb	r3, r3
 80192c6:	f003 0303 	and.w	r3, r3, #3
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d001      	beq.n	80192d2 <tcp_rexmit_rto_prepare+0xba>
 80192ce:	2301      	movs	r3, #1
 80192d0:	e000      	b.n	80192d4 <tcp_rexmit_rto_prepare+0xbc>
 80192d2:	2300      	movs	r3, #0
 80192d4:	442b      	add	r3, r5
 80192d6:	18e2      	adds	r2, r4, r3
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80192dc:	687b      	ldr	r3, [r7, #4]
 80192de:	2200      	movs	r2, #0
 80192e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80192e2:	2300      	movs	r3, #0
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bdb0      	pop	{r4, r5, r7, pc}
 80192ec:	08021cc4 	.word	0x08021cc4
 80192f0:	08022300 	.word	0x08022300
 80192f4:	08021d18 	.word	0x08021d18

080192f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d106      	bne.n	8019314 <tcp_rexmit_rto_commit+0x1c>
 8019306:	4b0d      	ldr	r3, [pc, #52]	@ (801933c <tcp_rexmit_rto_commit+0x44>)
 8019308:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801930c:	490c      	ldr	r1, [pc, #48]	@ (8019340 <tcp_rexmit_rto_commit+0x48>)
 801930e:	480d      	ldr	r0, [pc, #52]	@ (8019344 <tcp_rexmit_rto_commit+0x4c>)
 8019310:	f004 fa14 	bl	801d73c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801931a:	2bff      	cmp	r3, #255	@ 0xff
 801931c:	d007      	beq.n	801932e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019324:	3301      	adds	r3, #1
 8019326:	b2da      	uxtb	r2, r3
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f7ff fc7e 	bl	8018c30 <tcp_output>
}
 8019334:	bf00      	nop
 8019336:	3708      	adds	r7, #8
 8019338:	46bd      	mov	sp, r7
 801933a:	bd80      	pop	{r7, pc}
 801933c:	08021cc4 	.word	0x08021cc4
 8019340:	08022324 	.word	0x08022324
 8019344:	08021d18 	.word	0x08021d18

08019348 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b082      	sub	sp, #8
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d106      	bne.n	8019364 <tcp_rexmit_rto+0x1c>
 8019356:	4b0a      	ldr	r3, [pc, #40]	@ (8019380 <tcp_rexmit_rto+0x38>)
 8019358:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801935c:	4909      	ldr	r1, [pc, #36]	@ (8019384 <tcp_rexmit_rto+0x3c>)
 801935e:	480a      	ldr	r0, [pc, #40]	@ (8019388 <tcp_rexmit_rto+0x40>)
 8019360:	f004 f9ec 	bl	801d73c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019364:	6878      	ldr	r0, [r7, #4]
 8019366:	f7ff ff57 	bl	8019218 <tcp_rexmit_rto_prepare>
 801936a:	4603      	mov	r3, r0
 801936c:	2b00      	cmp	r3, #0
 801936e:	d102      	bne.n	8019376 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019370:	6878      	ldr	r0, [r7, #4]
 8019372:	f7ff ffc1 	bl	80192f8 <tcp_rexmit_rto_commit>
  }
}
 8019376:	bf00      	nop
 8019378:	3708      	adds	r7, #8
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	08021cc4 	.word	0x08021cc4
 8019384:	08022348 	.word	0x08022348
 8019388:	08021d18 	.word	0x08021d18

0801938c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801938c:	b590      	push	{r4, r7, lr}
 801938e:	b085      	sub	sp, #20
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d106      	bne.n	80193a8 <tcp_rexmit+0x1c>
 801939a:	4b2f      	ldr	r3, [pc, #188]	@ (8019458 <tcp_rexmit+0xcc>)
 801939c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80193a0:	492e      	ldr	r1, [pc, #184]	@ (801945c <tcp_rexmit+0xd0>)
 80193a2:	482f      	ldr	r0, [pc, #188]	@ (8019460 <tcp_rexmit+0xd4>)
 80193a4:	f004 f9ca 	bl	801d73c <iprintf>

  if (pcb->unacked == NULL) {
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d102      	bne.n	80193b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80193b0:	f06f 0305 	mvn.w	r3, #5
 80193b4:	e04c      	b.n	8019450 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80193bc:	68b8      	ldr	r0, [r7, #8]
 80193be:	f7ff fe2b 	bl	8019018 <tcp_output_segment_busy>
 80193c2:	4603      	mov	r3, r0
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d002      	beq.n	80193ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80193c8:	f06f 0305 	mvn.w	r3, #5
 80193cc:	e040      	b.n	8019450 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80193ce:	68bb      	ldr	r3, [r7, #8]
 80193d0:	681a      	ldr	r2, [r3, #0]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	336c      	adds	r3, #108	@ 0x6c
 80193da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80193dc:	e002      	b.n	80193e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d011      	beq.n	8019410 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	68db      	ldr	r3, [r3, #12]
 80193f2:	685b      	ldr	r3, [r3, #4]
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7f8 fd3f 	bl	8011e78 <lwip_htonl>
 80193fa:	4604      	mov	r4, r0
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	68db      	ldr	r3, [r3, #12]
 8019400:	685b      	ldr	r3, [r3, #4]
 8019402:	4618      	mov	r0, r3
 8019404:	f7f8 fd38 	bl	8011e78 <lwip_htonl>
 8019408:	4603      	mov	r3, r0
 801940a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801940c:	2b00      	cmp	r3, #0
 801940e:	dbe6      	blt.n	80193de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	68bb      	ldr	r3, [r7, #8]
 8019416:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	68ba      	ldr	r2, [r7, #8]
 801941c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801941e:	68bb      	ldr	r3, [r7, #8]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d103      	bne.n	801942e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	2200      	movs	r2, #0
 801942a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019434:	2bff      	cmp	r3, #255	@ 0xff
 8019436:	d007      	beq.n	8019448 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801943e:	3301      	adds	r3, #1
 8019440:	b2da      	uxtb	r2, r3
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	2200      	movs	r2, #0
 801944c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801944e:	2300      	movs	r3, #0
}
 8019450:	4618      	mov	r0, r3
 8019452:	3714      	adds	r7, #20
 8019454:	46bd      	mov	sp, r7
 8019456:	bd90      	pop	{r4, r7, pc}
 8019458:	08021cc4 	.word	0x08021cc4
 801945c:	08022364 	.word	0x08022364
 8019460:	08021d18 	.word	0x08021d18

08019464 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d106      	bne.n	8019480 <tcp_rexmit_fast+0x1c>
 8019472:	4b2a      	ldr	r3, [pc, #168]	@ (801951c <tcp_rexmit_fast+0xb8>)
 8019474:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8019478:	4929      	ldr	r1, [pc, #164]	@ (8019520 <tcp_rexmit_fast+0xbc>)
 801947a:	482a      	ldr	r0, [pc, #168]	@ (8019524 <tcp_rexmit_fast+0xc0>)
 801947c:	f004 f95e 	bl	801d73c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019484:	2b00      	cmp	r3, #0
 8019486:	d044      	beq.n	8019512 <tcp_rexmit_fast+0xae>
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	8b5b      	ldrh	r3, [r3, #26]
 801948c:	f003 0304 	and.w	r3, r3, #4
 8019490:	2b00      	cmp	r3, #0
 8019492:	d13e      	bne.n	8019512 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f7ff ff79 	bl	801938c <tcp_rexmit>
 801949a:	4603      	mov	r3, r0
 801949c:	2b00      	cmp	r3, #0
 801949e:	d138      	bne.n	8019512 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80194ac:	4293      	cmp	r3, r2
 80194ae:	bf28      	it	cs
 80194b0:	4613      	movcs	r3, r2
 80194b2:	b29b      	uxth	r3, r3
 80194b4:	0fda      	lsrs	r2, r3, #31
 80194b6:	4413      	add	r3, r2
 80194b8:	105b      	asrs	r3, r3, #1
 80194ba:	b29a      	uxth	r2, r3
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80194c8:	461a      	mov	r2, r3
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194ce:	005b      	lsls	r3, r3, #1
 80194d0:	429a      	cmp	r2, r3
 80194d2:	d206      	bcs.n	80194e2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194d8:	005b      	lsls	r3, r3, #1
 80194da:	b29a      	uxth	r2, r3
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80194ec:	4619      	mov	r1, r3
 80194ee:	0049      	lsls	r1, r1, #1
 80194f0:	440b      	add	r3, r1
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	4413      	add	r3, r2
 80194f6:	b29a      	uxth	r2, r3
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	8b5b      	ldrh	r3, [r3, #26]
 8019502:	f043 0304 	orr.w	r3, r3, #4
 8019506:	b29a      	uxth	r2, r3
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	2200      	movs	r2, #0
 8019510:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8019512:	bf00      	nop
 8019514:	3708      	adds	r7, #8
 8019516:	46bd      	mov	sp, r7
 8019518:	bd80      	pop	{r7, pc}
 801951a:	bf00      	nop
 801951c:	08021cc4 	.word	0x08021cc4
 8019520:	0802237c 	.word	0x0802237c
 8019524:	08021d18 	.word	0x08021d18

08019528 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b086      	sub	sp, #24
 801952c:	af00      	add	r7, sp, #0
 801952e:	60f8      	str	r0, [r7, #12]
 8019530:	607b      	str	r3, [r7, #4]
 8019532:	460b      	mov	r3, r1
 8019534:	817b      	strh	r3, [r7, #10]
 8019536:	4613      	mov	r3, r2
 8019538:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801953a:	897a      	ldrh	r2, [r7, #10]
 801953c:	893b      	ldrh	r3, [r7, #8]
 801953e:	4413      	add	r3, r2
 8019540:	b29b      	uxth	r3, r3
 8019542:	3314      	adds	r3, #20
 8019544:	b29b      	uxth	r3, r3
 8019546:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801954a:	4619      	mov	r1, r3
 801954c:	2022      	movs	r0, #34	@ 0x22
 801954e:	f7f9 fd59 	bl	8013004 <pbuf_alloc>
 8019552:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019554:	697b      	ldr	r3, [r7, #20]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d04d      	beq.n	80195f6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801955a:	897b      	ldrh	r3, [r7, #10]
 801955c:	3313      	adds	r3, #19
 801955e:	697a      	ldr	r2, [r7, #20]
 8019560:	8952      	ldrh	r2, [r2, #10]
 8019562:	4293      	cmp	r3, r2
 8019564:	db06      	blt.n	8019574 <tcp_output_alloc_header_common+0x4c>
 8019566:	4b26      	ldr	r3, [pc, #152]	@ (8019600 <tcp_output_alloc_header_common+0xd8>)
 8019568:	f240 7223 	movw	r2, #1827	@ 0x723
 801956c:	4925      	ldr	r1, [pc, #148]	@ (8019604 <tcp_output_alloc_header_common+0xdc>)
 801956e:	4826      	ldr	r0, [pc, #152]	@ (8019608 <tcp_output_alloc_header_common+0xe0>)
 8019570:	f004 f8e4 	bl	801d73c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019574:	697b      	ldr	r3, [r7, #20]
 8019576:	685b      	ldr	r3, [r3, #4]
 8019578:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801957a:	8c3b      	ldrh	r3, [r7, #32]
 801957c:	4618      	mov	r0, r3
 801957e:	f7f8 fc65 	bl	8011e4c <lwip_htons>
 8019582:	4603      	mov	r3, r0
 8019584:	461a      	mov	r2, r3
 8019586:	693b      	ldr	r3, [r7, #16]
 8019588:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801958a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801958c:	4618      	mov	r0, r3
 801958e:	f7f8 fc5d 	bl	8011e4c <lwip_htons>
 8019592:	4603      	mov	r3, r0
 8019594:	461a      	mov	r2, r3
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801959a:	693b      	ldr	r3, [r7, #16]
 801959c:	687a      	ldr	r2, [r7, #4]
 801959e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80195a0:	68f8      	ldr	r0, [r7, #12]
 80195a2:	f7f8 fc69 	bl	8011e78 <lwip_htonl>
 80195a6:	4602      	mov	r2, r0
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80195ac:	897b      	ldrh	r3, [r7, #10]
 80195ae:	089b      	lsrs	r3, r3, #2
 80195b0:	b29b      	uxth	r3, r3
 80195b2:	3305      	adds	r3, #5
 80195b4:	b29b      	uxth	r3, r3
 80195b6:	031b      	lsls	r3, r3, #12
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80195be:	b29b      	uxth	r3, r3
 80195c0:	4313      	orrs	r3, r2
 80195c2:	b29b      	uxth	r3, r3
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7f8 fc41 	bl	8011e4c <lwip_htons>
 80195ca:	4603      	mov	r3, r0
 80195cc:	461a      	mov	r2, r3
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80195d2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7f8 fc39 	bl	8011e4c <lwip_htons>
 80195da:	4603      	mov	r3, r0
 80195dc:	461a      	mov	r2, r3
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80195e2:	693b      	ldr	r3, [r7, #16]
 80195e4:	2200      	movs	r2, #0
 80195e6:	741a      	strb	r2, [r3, #16]
 80195e8:	2200      	movs	r2, #0
 80195ea:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80195ec:	693b      	ldr	r3, [r7, #16]
 80195ee:	2200      	movs	r2, #0
 80195f0:	749a      	strb	r2, [r3, #18]
 80195f2:	2200      	movs	r2, #0
 80195f4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80195f6:	697b      	ldr	r3, [r7, #20]
}
 80195f8:	4618      	mov	r0, r3
 80195fa:	3718      	adds	r7, #24
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}
 8019600:	08021cc4 	.word	0x08021cc4
 8019604:	0802239c 	.word	0x0802239c
 8019608:	08021d18 	.word	0x08021d18

0801960c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801960c:	b5b0      	push	{r4, r5, r7, lr}
 801960e:	b08a      	sub	sp, #40	@ 0x28
 8019610:	af04      	add	r7, sp, #16
 8019612:	60f8      	str	r0, [r7, #12]
 8019614:	607b      	str	r3, [r7, #4]
 8019616:	460b      	mov	r3, r1
 8019618:	817b      	strh	r3, [r7, #10]
 801961a:	4613      	mov	r3, r2
 801961c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d106      	bne.n	8019632 <tcp_output_alloc_header+0x26>
 8019624:	4b15      	ldr	r3, [pc, #84]	@ (801967c <tcp_output_alloc_header+0x70>)
 8019626:	f240 7242 	movw	r2, #1858	@ 0x742
 801962a:	4915      	ldr	r1, [pc, #84]	@ (8019680 <tcp_output_alloc_header+0x74>)
 801962c:	4815      	ldr	r0, [pc, #84]	@ (8019684 <tcp_output_alloc_header+0x78>)
 801962e:	f004 f885 	bl	801d73c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	8adb      	ldrh	r3, [r3, #22]
 801963a:	68fa      	ldr	r2, [r7, #12]
 801963c:	8b12      	ldrh	r2, [r2, #24]
 801963e:	68f9      	ldr	r1, [r7, #12]
 8019640:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019642:	893d      	ldrh	r5, [r7, #8]
 8019644:	897c      	ldrh	r4, [r7, #10]
 8019646:	9103      	str	r1, [sp, #12]
 8019648:	2110      	movs	r1, #16
 801964a:	9102      	str	r1, [sp, #8]
 801964c:	9201      	str	r2, [sp, #4]
 801964e:	9300      	str	r3, [sp, #0]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	462a      	mov	r2, r5
 8019654:	4621      	mov	r1, r4
 8019656:	f7ff ff67 	bl	8019528 <tcp_output_alloc_header_common>
 801965a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801965c:	697b      	ldr	r3, [r7, #20]
 801965e:	2b00      	cmp	r3, #0
 8019660:	d006      	beq.n	8019670 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019666:	68fa      	ldr	r2, [r7, #12]
 8019668:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801966a:	441a      	add	r2, r3
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019670:	697b      	ldr	r3, [r7, #20]
}
 8019672:	4618      	mov	r0, r3
 8019674:	3718      	adds	r7, #24
 8019676:	46bd      	mov	sp, r7
 8019678:	bdb0      	pop	{r4, r5, r7, pc}
 801967a:	bf00      	nop
 801967c:	08021cc4 	.word	0x08021cc4
 8019680:	080223cc 	.word	0x080223cc
 8019684:	08021d18 	.word	0x08021d18

08019688 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b088      	sub	sp, #32
 801968c:	af00      	add	r7, sp, #0
 801968e:	60f8      	str	r0, [r7, #12]
 8019690:	60b9      	str	r1, [r7, #8]
 8019692:	4611      	mov	r1, r2
 8019694:	461a      	mov	r2, r3
 8019696:	460b      	mov	r3, r1
 8019698:	71fb      	strb	r3, [r7, #7]
 801969a:	4613      	mov	r3, r2
 801969c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801969e:	2300      	movs	r3, #0
 80196a0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80196a2:	68bb      	ldr	r3, [r7, #8]
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d106      	bne.n	80196b6 <tcp_output_fill_options+0x2e>
 80196a8:	4b12      	ldr	r3, [pc, #72]	@ (80196f4 <tcp_output_fill_options+0x6c>)
 80196aa:	f240 7256 	movw	r2, #1878	@ 0x756
 80196ae:	4912      	ldr	r1, [pc, #72]	@ (80196f8 <tcp_output_fill_options+0x70>)
 80196b0:	4812      	ldr	r0, [pc, #72]	@ (80196fc <tcp_output_fill_options+0x74>)
 80196b2:	f004 f843 	bl	801d73c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80196b6:	68bb      	ldr	r3, [r7, #8]
 80196b8:	685b      	ldr	r3, [r3, #4]
 80196ba:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80196bc:	69bb      	ldr	r3, [r7, #24]
 80196be:	3314      	adds	r3, #20
 80196c0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80196c2:	8bfb      	ldrh	r3, [r7, #30]
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	461a      	mov	r2, r3
 80196c8:	79fb      	ldrb	r3, [r7, #7]
 80196ca:	009b      	lsls	r3, r3, #2
 80196cc:	f003 0304 	and.w	r3, r3, #4
 80196d0:	4413      	add	r3, r2
 80196d2:	3314      	adds	r3, #20
 80196d4:	69ba      	ldr	r2, [r7, #24]
 80196d6:	4413      	add	r3, r2
 80196d8:	697a      	ldr	r2, [r7, #20]
 80196da:	429a      	cmp	r2, r3
 80196dc:	d006      	beq.n	80196ec <tcp_output_fill_options+0x64>
 80196de:	4b05      	ldr	r3, [pc, #20]	@ (80196f4 <tcp_output_fill_options+0x6c>)
 80196e0:	f240 7275 	movw	r2, #1909	@ 0x775
 80196e4:	4906      	ldr	r1, [pc, #24]	@ (8019700 <tcp_output_fill_options+0x78>)
 80196e6:	4805      	ldr	r0, [pc, #20]	@ (80196fc <tcp_output_fill_options+0x74>)
 80196e8:	f004 f828 	bl	801d73c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80196ec:	bf00      	nop
 80196ee:	3720      	adds	r7, #32
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}
 80196f4:	08021cc4 	.word	0x08021cc4
 80196f8:	080223f4 	.word	0x080223f4
 80196fc:	08021d18 	.word	0x08021d18
 8019700:	080222ec 	.word	0x080222ec

08019704 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b08a      	sub	sp, #40	@ 0x28
 8019708:	af04      	add	r7, sp, #16
 801970a:	60f8      	str	r0, [r7, #12]
 801970c:	60b9      	str	r1, [r7, #8]
 801970e:	607a      	str	r2, [r7, #4]
 8019710:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8019712:	68bb      	ldr	r3, [r7, #8]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d106      	bne.n	8019726 <tcp_output_control_segment+0x22>
 8019718:	4b1c      	ldr	r3, [pc, #112]	@ (801978c <tcp_output_control_segment+0x88>)
 801971a:	f240 7287 	movw	r2, #1927	@ 0x787
 801971e:	491c      	ldr	r1, [pc, #112]	@ (8019790 <tcp_output_control_segment+0x8c>)
 8019720:	481c      	ldr	r0, [pc, #112]	@ (8019794 <tcp_output_control_segment+0x90>)
 8019722:	f004 f80b 	bl	801d73c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019726:	683a      	ldr	r2, [r7, #0]
 8019728:	6879      	ldr	r1, [r7, #4]
 801972a:	68f8      	ldr	r0, [r7, #12]
 801972c:	f7fe faea 	bl	8017d04 <tcp_route>
 8019730:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d102      	bne.n	801973e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019738:	23fc      	movs	r3, #252	@ 0xfc
 801973a:	75fb      	strb	r3, [r7, #23]
 801973c:	e01c      	b.n	8019778 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d006      	beq.n	8019752 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	7adb      	ldrb	r3, [r3, #11]
 8019748:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801974a:	68fb      	ldr	r3, [r7, #12]
 801974c:	7a9b      	ldrb	r3, [r3, #10]
 801974e:	757b      	strb	r3, [r7, #21]
 8019750:	e003      	b.n	801975a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019752:	23ff      	movs	r3, #255	@ 0xff
 8019754:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019756:	2300      	movs	r3, #0
 8019758:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801975a:	7dba      	ldrb	r2, [r7, #22]
 801975c:	693b      	ldr	r3, [r7, #16]
 801975e:	9302      	str	r3, [sp, #8]
 8019760:	2306      	movs	r3, #6
 8019762:	9301      	str	r3, [sp, #4]
 8019764:	7d7b      	ldrb	r3, [r7, #21]
 8019766:	9300      	str	r3, [sp, #0]
 8019768:	4613      	mov	r3, r2
 801976a:	683a      	ldr	r2, [r7, #0]
 801976c:	6879      	ldr	r1, [r7, #4]
 801976e:	68b8      	ldr	r0, [r7, #8]
 8019770:	f001 ff6e 	bl	801b650 <ip4_output_if>
 8019774:	4603      	mov	r3, r0
 8019776:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019778:	68b8      	ldr	r0, [r7, #8]
 801977a:	f7f9 ff27 	bl	80135cc <pbuf_free>
  return err;
 801977e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019782:	4618      	mov	r0, r3
 8019784:	3718      	adds	r7, #24
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}
 801978a:	bf00      	nop
 801978c:	08021cc4 	.word	0x08021cc4
 8019790:	0802241c 	.word	0x0802241c
 8019794:	08021d18 	.word	0x08021d18

08019798 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019798:	b590      	push	{r4, r7, lr}
 801979a:	b08b      	sub	sp, #44	@ 0x2c
 801979c:	af04      	add	r7, sp, #16
 801979e:	60f8      	str	r0, [r7, #12]
 80197a0:	60b9      	str	r1, [r7, #8]
 80197a2:	607a      	str	r2, [r7, #4]
 80197a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80197a6:	683b      	ldr	r3, [r7, #0]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d106      	bne.n	80197ba <tcp_rst+0x22>
 80197ac:	4b1f      	ldr	r3, [pc, #124]	@ (801982c <tcp_rst+0x94>)
 80197ae:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80197b2:	491f      	ldr	r1, [pc, #124]	@ (8019830 <tcp_rst+0x98>)
 80197b4:	481f      	ldr	r0, [pc, #124]	@ (8019834 <tcp_rst+0x9c>)
 80197b6:	f003 ffc1 	bl	801d73c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80197ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d106      	bne.n	80197ce <tcp_rst+0x36>
 80197c0:	4b1a      	ldr	r3, [pc, #104]	@ (801982c <tcp_rst+0x94>)
 80197c2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80197c6:	491c      	ldr	r1, [pc, #112]	@ (8019838 <tcp_rst+0xa0>)
 80197c8:	481a      	ldr	r0, [pc, #104]	@ (8019834 <tcp_rst+0x9c>)
 80197ca:	f003 ffb7 	bl	801d73c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80197ce:	2300      	movs	r3, #0
 80197d0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80197d2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80197d6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80197d8:	7dfb      	ldrb	r3, [r7, #23]
 80197da:	b29c      	uxth	r4, r3
 80197dc:	68b8      	ldr	r0, [r7, #8]
 80197de:	f7f8 fb4b 	bl	8011e78 <lwip_htonl>
 80197e2:	4602      	mov	r2, r0
 80197e4:	8abb      	ldrh	r3, [r7, #20]
 80197e6:	9303      	str	r3, [sp, #12]
 80197e8:	2314      	movs	r3, #20
 80197ea:	9302      	str	r3, [sp, #8]
 80197ec:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80197ee:	9301      	str	r3, [sp, #4]
 80197f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80197f2:	9300      	str	r3, [sp, #0]
 80197f4:	4613      	mov	r3, r2
 80197f6:	2200      	movs	r2, #0
 80197f8:	4621      	mov	r1, r4
 80197fa:	6878      	ldr	r0, [r7, #4]
 80197fc:	f7ff fe94 	bl	8019528 <tcp_output_alloc_header_common>
 8019800:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8019802:	693b      	ldr	r3, [r7, #16]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d00c      	beq.n	8019822 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019808:	7dfb      	ldrb	r3, [r7, #23]
 801980a:	2200      	movs	r2, #0
 801980c:	6939      	ldr	r1, [r7, #16]
 801980e:	68f8      	ldr	r0, [r7, #12]
 8019810:	f7ff ff3a 	bl	8019688 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019816:	683a      	ldr	r2, [r7, #0]
 8019818:	6939      	ldr	r1, [r7, #16]
 801981a:	68f8      	ldr	r0, [r7, #12]
 801981c:	f7ff ff72 	bl	8019704 <tcp_output_control_segment>
 8019820:	e000      	b.n	8019824 <tcp_rst+0x8c>
    return;
 8019822:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019824:	371c      	adds	r7, #28
 8019826:	46bd      	mov	sp, r7
 8019828:	bd90      	pop	{r4, r7, pc}
 801982a:	bf00      	nop
 801982c:	08021cc4 	.word	0x08021cc4
 8019830:	08022448 	.word	0x08022448
 8019834:	08021d18 	.word	0x08021d18
 8019838:	08022464 	.word	0x08022464

0801983c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801983c:	b590      	push	{r4, r7, lr}
 801983e:	b087      	sub	sp, #28
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019844:	2300      	movs	r3, #0
 8019846:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019848:	2300      	movs	r3, #0
 801984a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d106      	bne.n	8019860 <tcp_send_empty_ack+0x24>
 8019852:	4b28      	ldr	r3, [pc, #160]	@ (80198f4 <tcp_send_empty_ack+0xb8>)
 8019854:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019858:	4927      	ldr	r1, [pc, #156]	@ (80198f8 <tcp_send_empty_ack+0xbc>)
 801985a:	4828      	ldr	r0, [pc, #160]	@ (80198fc <tcp_send_empty_ack+0xc0>)
 801985c:	f003 ff6e 	bl	801d73c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019860:	7dfb      	ldrb	r3, [r7, #23]
 8019862:	009b      	lsls	r3, r3, #2
 8019864:	b2db      	uxtb	r3, r3
 8019866:	f003 0304 	and.w	r3, r3, #4
 801986a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801986c:	7d7b      	ldrb	r3, [r7, #21]
 801986e:	b29c      	uxth	r4, r3
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019874:	4618      	mov	r0, r3
 8019876:	f7f8 faff 	bl	8011e78 <lwip_htonl>
 801987a:	4603      	mov	r3, r0
 801987c:	2200      	movs	r2, #0
 801987e:	4621      	mov	r1, r4
 8019880:	6878      	ldr	r0, [r7, #4]
 8019882:	f7ff fec3 	bl	801960c <tcp_output_alloc_header>
 8019886:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019888:	693b      	ldr	r3, [r7, #16]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d109      	bne.n	80198a2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	8b5b      	ldrh	r3, [r3, #26]
 8019892:	f043 0303 	orr.w	r3, r3, #3
 8019896:	b29a      	uxth	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801989c:	f06f 0301 	mvn.w	r3, #1
 80198a0:	e023      	b.n	80198ea <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80198a2:	7dbb      	ldrb	r3, [r7, #22]
 80198a4:	7dfa      	ldrb	r2, [r7, #23]
 80198a6:	6939      	ldr	r1, [r7, #16]
 80198a8:	6878      	ldr	r0, [r7, #4]
 80198aa:	f7ff feed 	bl	8019688 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80198ae:	687a      	ldr	r2, [r7, #4]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	3304      	adds	r3, #4
 80198b4:	6939      	ldr	r1, [r7, #16]
 80198b6:	6878      	ldr	r0, [r7, #4]
 80198b8:	f7ff ff24 	bl	8019704 <tcp_output_control_segment>
 80198bc:	4603      	mov	r3, r0
 80198be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80198c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d007      	beq.n	80198d8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	8b5b      	ldrh	r3, [r3, #26]
 80198cc:	f043 0303 	orr.w	r3, r3, #3
 80198d0:	b29a      	uxth	r2, r3
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	835a      	strh	r2, [r3, #26]
 80198d6:	e006      	b.n	80198e6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	8b5b      	ldrh	r3, [r3, #26]
 80198dc:	f023 0303 	bic.w	r3, r3, #3
 80198e0:	b29a      	uxth	r2, r3
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80198e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	371c      	adds	r7, #28
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd90      	pop	{r4, r7, pc}
 80198f2:	bf00      	nop
 80198f4:	08021cc4 	.word	0x08021cc4
 80198f8:	08022480 	.word	0x08022480
 80198fc:	08021d18 	.word	0x08021d18

08019900 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019900:	b590      	push	{r4, r7, lr}
 8019902:	b087      	sub	sp, #28
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019908:	2300      	movs	r3, #0
 801990a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2b00      	cmp	r3, #0
 8019910:	d106      	bne.n	8019920 <tcp_keepalive+0x20>
 8019912:	4b18      	ldr	r3, [pc, #96]	@ (8019974 <tcp_keepalive+0x74>)
 8019914:	f640 0224 	movw	r2, #2084	@ 0x824
 8019918:	4917      	ldr	r1, [pc, #92]	@ (8019978 <tcp_keepalive+0x78>)
 801991a:	4818      	ldr	r0, [pc, #96]	@ (801997c <tcp_keepalive+0x7c>)
 801991c:	f003 ff0e 	bl	801d73c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019920:	7dfb      	ldrb	r3, [r7, #23]
 8019922:	b29c      	uxth	r4, r3
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019928:	3b01      	subs	r3, #1
 801992a:	4618      	mov	r0, r3
 801992c:	f7f8 faa4 	bl	8011e78 <lwip_htonl>
 8019930:	4603      	mov	r3, r0
 8019932:	2200      	movs	r2, #0
 8019934:	4621      	mov	r1, r4
 8019936:	6878      	ldr	r0, [r7, #4]
 8019938:	f7ff fe68 	bl	801960c <tcp_output_alloc_header>
 801993c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801993e:	693b      	ldr	r3, [r7, #16]
 8019940:	2b00      	cmp	r3, #0
 8019942:	d102      	bne.n	801994a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019944:	f04f 33ff 	mov.w	r3, #4294967295
 8019948:	e010      	b.n	801996c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801994a:	7dfb      	ldrb	r3, [r7, #23]
 801994c:	2200      	movs	r2, #0
 801994e:	6939      	ldr	r1, [r7, #16]
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f7ff fe99 	bl	8019688 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	3304      	adds	r3, #4
 801995c:	6939      	ldr	r1, [r7, #16]
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f7ff fed0 	bl	8019704 <tcp_output_control_segment>
 8019964:	4603      	mov	r3, r0
 8019966:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801996c:	4618      	mov	r0, r3
 801996e:	371c      	adds	r7, #28
 8019970:	46bd      	mov	sp, r7
 8019972:	bd90      	pop	{r4, r7, pc}
 8019974:	08021cc4 	.word	0x08021cc4
 8019978:	080224a0 	.word	0x080224a0
 801997c:	08021d18 	.word	0x08021d18

08019980 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019980:	b590      	push	{r4, r7, lr}
 8019982:	b08b      	sub	sp, #44	@ 0x2c
 8019984:	af00      	add	r7, sp, #0
 8019986:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019988:	2300      	movs	r3, #0
 801998a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d106      	bne.n	80199a2 <tcp_zero_window_probe+0x22>
 8019994:	4b4c      	ldr	r3, [pc, #304]	@ (8019ac8 <tcp_zero_window_probe+0x148>)
 8019996:	f640 024f 	movw	r2, #2127	@ 0x84f
 801999a:	494c      	ldr	r1, [pc, #304]	@ (8019acc <tcp_zero_window_probe+0x14c>)
 801999c:	484c      	ldr	r0, [pc, #304]	@ (8019ad0 <tcp_zero_window_probe+0x150>)
 801999e:	f003 fecd 	bl	801d73c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199a6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80199a8:	6a3b      	ldr	r3, [r7, #32]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d101      	bne.n	80199b2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80199ae:	2300      	movs	r3, #0
 80199b0:	e086      	b.n	8019ac0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80199b8:	2bff      	cmp	r3, #255	@ 0xff
 80199ba:	d007      	beq.n	80199cc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80199c2:	3301      	adds	r3, #1
 80199c4:	b2da      	uxtb	r2, r3
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80199cc:	6a3b      	ldr	r3, [r7, #32]
 80199ce:	68db      	ldr	r3, [r3, #12]
 80199d0:	899b      	ldrh	r3, [r3, #12]
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	4618      	mov	r0, r3
 80199d6:	f7f8 fa39 	bl	8011e4c <lwip_htons>
 80199da:	4603      	mov	r3, r0
 80199dc:	b2db      	uxtb	r3, r3
 80199de:	f003 0301 	and.w	r3, r3, #1
 80199e2:	2b00      	cmp	r3, #0
 80199e4:	d005      	beq.n	80199f2 <tcp_zero_window_probe+0x72>
 80199e6:	6a3b      	ldr	r3, [r7, #32]
 80199e8:	891b      	ldrh	r3, [r3, #8]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d101      	bne.n	80199f2 <tcp_zero_window_probe+0x72>
 80199ee:	2301      	movs	r3, #1
 80199f0:	e000      	b.n	80199f4 <tcp_zero_window_probe+0x74>
 80199f2:	2300      	movs	r3, #0
 80199f4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80199f6:	7ffb      	ldrb	r3, [r7, #31]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	bf0c      	ite	eq
 80199fc:	2301      	moveq	r3, #1
 80199fe:	2300      	movne	r3, #0
 8019a00:	b2db      	uxtb	r3, r3
 8019a02:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019a04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a08:	b299      	uxth	r1, r3
 8019a0a:	6a3b      	ldr	r3, [r7, #32]
 8019a0c:	68db      	ldr	r3, [r3, #12]
 8019a0e:	685b      	ldr	r3, [r3, #4]
 8019a10:	8bba      	ldrh	r2, [r7, #28]
 8019a12:	6878      	ldr	r0, [r7, #4]
 8019a14:	f7ff fdfa 	bl	801960c <tcp_output_alloc_header>
 8019a18:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d102      	bne.n	8019a26 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019a20:	f04f 33ff 	mov.w	r3, #4294967295
 8019a24:	e04c      	b.n	8019ac0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019a26:	69bb      	ldr	r3, [r7, #24]
 8019a28:	685b      	ldr	r3, [r3, #4]
 8019a2a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019a2c:	7ffb      	ldrb	r3, [r7, #31]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d011      	beq.n	8019a56 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019a32:	697b      	ldr	r3, [r7, #20]
 8019a34:	899b      	ldrh	r3, [r3, #12]
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	b21b      	sxth	r3, r3
 8019a3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019a3e:	b21c      	sxth	r4, r3
 8019a40:	2011      	movs	r0, #17
 8019a42:	f7f8 fa03 	bl	8011e4c <lwip_htons>
 8019a46:	4603      	mov	r3, r0
 8019a48:	b21b      	sxth	r3, r3
 8019a4a:	4323      	orrs	r3, r4
 8019a4c:	b21b      	sxth	r3, r3
 8019a4e:	b29a      	uxth	r2, r3
 8019a50:	697b      	ldr	r3, [r7, #20]
 8019a52:	819a      	strh	r2, [r3, #12]
 8019a54:	e010      	b.n	8019a78 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019a56:	69bb      	ldr	r3, [r7, #24]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	3314      	adds	r3, #20
 8019a5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019a5e:	6a3b      	ldr	r3, [r7, #32]
 8019a60:	6858      	ldr	r0, [r3, #4]
 8019a62:	6a3b      	ldr	r3, [r7, #32]
 8019a64:	685b      	ldr	r3, [r3, #4]
 8019a66:	891a      	ldrh	r2, [r3, #8]
 8019a68:	6a3b      	ldr	r3, [r7, #32]
 8019a6a:	891b      	ldrh	r3, [r3, #8]
 8019a6c:	1ad3      	subs	r3, r2, r3
 8019a6e:	b29b      	uxth	r3, r3
 8019a70:	2201      	movs	r2, #1
 8019a72:	6939      	ldr	r1, [r7, #16]
 8019a74:	f7f9 ffa0 	bl	80139b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019a78:	6a3b      	ldr	r3, [r7, #32]
 8019a7a:	68db      	ldr	r3, [r3, #12]
 8019a7c:	685b      	ldr	r3, [r3, #4]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7f8 f9fa 	bl	8011e78 <lwip_htonl>
 8019a84:	4603      	mov	r3, r0
 8019a86:	3301      	adds	r3, #1
 8019a88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	1ad3      	subs	r3, r2, r3
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	da02      	bge.n	8019a9c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	68fa      	ldr	r2, [r7, #12]
 8019a9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	69b9      	ldr	r1, [r7, #24]
 8019aa4:	6878      	ldr	r0, [r7, #4]
 8019aa6:	f7ff fdef 	bl	8019688 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019aaa:	687a      	ldr	r2, [r7, #4]
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	3304      	adds	r3, #4
 8019ab0:	69b9      	ldr	r1, [r7, #24]
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f7ff fe26 	bl	8019704 <tcp_output_control_segment>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019abc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019ac0:	4618      	mov	r0, r3
 8019ac2:	372c      	adds	r7, #44	@ 0x2c
 8019ac4:	46bd      	mov	sp, r7
 8019ac6:	bd90      	pop	{r4, r7, pc}
 8019ac8:	08021cc4 	.word	0x08021cc4
 8019acc:	080224bc 	.word	0x080224bc
 8019ad0:	08021d18 	.word	0x08021d18

08019ad4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	b082      	sub	sp, #8
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019adc:	f7fa f85a 	bl	8013b94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8019b0c <tcpip_tcp_timer+0x38>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d103      	bne.n	8019af0 <tcpip_tcp_timer+0x1c>
 8019ae8:	4b09      	ldr	r3, [pc, #36]	@ (8019b10 <tcpip_tcp_timer+0x3c>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d005      	beq.n	8019afc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019af0:	2200      	movs	r2, #0
 8019af2:	4908      	ldr	r1, [pc, #32]	@ (8019b14 <tcpip_tcp_timer+0x40>)
 8019af4:	20fa      	movs	r0, #250	@ 0xfa
 8019af6:	f000 f8f3 	bl	8019ce0 <sys_timeout>
 8019afa:	e003      	b.n	8019b04 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019afc:	4b06      	ldr	r3, [pc, #24]	@ (8019b18 <tcpip_tcp_timer+0x44>)
 8019afe:	2200      	movs	r2, #0
 8019b00:	601a      	str	r2, [r3, #0]
  }
}
 8019b02:	bf00      	nop
 8019b04:	bf00      	nop
 8019b06:	3708      	adds	r7, #8
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}
 8019b0c:	2000c9bc 	.word	0x2000c9bc
 8019b10:	2000c9c0 	.word	0x2000c9c0
 8019b14:	08019ad5 	.word	0x08019ad5
 8019b18:	2000ca08 	.word	0x2000ca08

08019b1c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019b20:	4b0a      	ldr	r3, [pc, #40]	@ (8019b4c <tcp_timer_needed+0x30>)
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d10f      	bne.n	8019b48 <tcp_timer_needed+0x2c>
 8019b28:	4b09      	ldr	r3, [pc, #36]	@ (8019b50 <tcp_timer_needed+0x34>)
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d103      	bne.n	8019b38 <tcp_timer_needed+0x1c>
 8019b30:	4b08      	ldr	r3, [pc, #32]	@ (8019b54 <tcp_timer_needed+0x38>)
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d007      	beq.n	8019b48 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019b38:	4b04      	ldr	r3, [pc, #16]	@ (8019b4c <tcp_timer_needed+0x30>)
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019b3e:	2200      	movs	r2, #0
 8019b40:	4905      	ldr	r1, [pc, #20]	@ (8019b58 <tcp_timer_needed+0x3c>)
 8019b42:	20fa      	movs	r0, #250	@ 0xfa
 8019b44:	f000 f8cc 	bl	8019ce0 <sys_timeout>
  }
}
 8019b48:	bf00      	nop
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	2000ca08 	.word	0x2000ca08
 8019b50:	2000c9bc 	.word	0x2000c9bc
 8019b54:	2000c9c0 	.word	0x2000c9c0
 8019b58:	08019ad5 	.word	0x08019ad5

08019b5c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b086      	sub	sp, #24
 8019b60:	af00      	add	r7, sp, #0
 8019b62:	60f8      	str	r0, [r7, #12]
 8019b64:	60b9      	str	r1, [r7, #8]
 8019b66:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019b68:	200a      	movs	r0, #10
 8019b6a:	f7f8 fe47 	bl	80127fc <memp_malloc>
 8019b6e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019b70:	693b      	ldr	r3, [r7, #16]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d109      	bne.n	8019b8a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019b76:	693b      	ldr	r3, [r7, #16]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d151      	bne.n	8019c20 <sys_timeout_abs+0xc4>
 8019b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8019c28 <sys_timeout_abs+0xcc>)
 8019b7e:	22be      	movs	r2, #190	@ 0xbe
 8019b80:	492a      	ldr	r1, [pc, #168]	@ (8019c2c <sys_timeout_abs+0xd0>)
 8019b82:	482b      	ldr	r0, [pc, #172]	@ (8019c30 <sys_timeout_abs+0xd4>)
 8019b84:	f003 fdda 	bl	801d73c <iprintf>
    return;
 8019b88:	e04a      	b.n	8019c20 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019b8a:	693b      	ldr	r3, [r7, #16]
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019b90:	693b      	ldr	r3, [r7, #16]
 8019b92:	68ba      	ldr	r2, [r7, #8]
 8019b94:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019b96:	693b      	ldr	r3, [r7, #16]
 8019b98:	687a      	ldr	r2, [r7, #4]
 8019b9a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019b9c:	693b      	ldr	r3, [r7, #16]
 8019b9e:	68fa      	ldr	r2, [r7, #12]
 8019ba0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019ba2:	4b24      	ldr	r3, [pc, #144]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d103      	bne.n	8019bb2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019baa:	4a22      	ldr	r2, [pc, #136]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019bac:	693b      	ldr	r3, [r7, #16]
 8019bae:	6013      	str	r3, [r2, #0]
    return;
 8019bb0:	e037      	b.n	8019c22 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019bb2:	693b      	ldr	r3, [r7, #16]
 8019bb4:	685a      	ldr	r2, [r3, #4]
 8019bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	1ad3      	subs	r3, r2, r3
 8019bbe:	0fdb      	lsrs	r3, r3, #31
 8019bc0:	f003 0301 	and.w	r3, r3, #1
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d007      	beq.n	8019bda <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019bca:	4b1a      	ldr	r3, [pc, #104]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019bcc:	681a      	ldr	r2, [r3, #0]
 8019bce:	693b      	ldr	r3, [r7, #16]
 8019bd0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019bd2:	4a18      	ldr	r2, [pc, #96]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	6013      	str	r3, [r2, #0]
 8019bd8:	e023      	b.n	8019c22 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019bda:	4b16      	ldr	r3, [pc, #88]	@ (8019c34 <sys_timeout_abs+0xd8>)
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	617b      	str	r3, [r7, #20]
 8019be0:	e01a      	b.n	8019c18 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019be2:	697b      	ldr	r3, [r7, #20]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d00b      	beq.n	8019c02 <sys_timeout_abs+0xa6>
 8019bea:	693b      	ldr	r3, [r7, #16]
 8019bec:	685a      	ldr	r2, [r3, #4]
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	1ad3      	subs	r3, r2, r3
 8019bf6:	0fdb      	lsrs	r3, r3, #31
 8019bf8:	f003 0301 	and.w	r3, r3, #1
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d007      	beq.n	8019c12 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	681a      	ldr	r2, [r3, #0]
 8019c06:	693b      	ldr	r3, [r7, #16]
 8019c08:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019c0a:	697b      	ldr	r3, [r7, #20]
 8019c0c:	693a      	ldr	r2, [r7, #16]
 8019c0e:	601a      	str	r2, [r3, #0]
        break;
 8019c10:	e007      	b.n	8019c22 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	617b      	str	r3, [r7, #20]
 8019c18:	697b      	ldr	r3, [r7, #20]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d1e1      	bne.n	8019be2 <sys_timeout_abs+0x86>
 8019c1e:	e000      	b.n	8019c22 <sys_timeout_abs+0xc6>
    return;
 8019c20:	bf00      	nop
      }
    }
  }
}
 8019c22:	3718      	adds	r7, #24
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bd80      	pop	{r7, pc}
 8019c28:	080224e0 	.word	0x080224e0
 8019c2c:	08022514 	.word	0x08022514
 8019c30:	08022554 	.word	0x08022554
 8019c34:	2000ca00 	.word	0x2000ca00

08019c38 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b086      	sub	sp, #24
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	685b      	ldr	r3, [r3, #4]
 8019c48:	4798      	blx	r3

  now = sys_now();
 8019c4a:	f7f2 fccb 	bl	800c5e4 <sys_now>
 8019c4e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019c50:	697b      	ldr	r3, [r7, #20]
 8019c52:	681a      	ldr	r2, [r3, #0]
 8019c54:	4b0f      	ldr	r3, [pc, #60]	@ (8019c94 <lwip_cyclic_timer+0x5c>)
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	4413      	add	r3, r2
 8019c5a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019c5c:	68fa      	ldr	r2, [r7, #12]
 8019c5e:	693b      	ldr	r3, [r7, #16]
 8019c60:	1ad3      	subs	r3, r2, r3
 8019c62:	0fdb      	lsrs	r3, r3, #31
 8019c64:	f003 0301 	and.w	r3, r3, #1
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d009      	beq.n	8019c82 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019c6e:	697b      	ldr	r3, [r7, #20]
 8019c70:	681a      	ldr	r2, [r3, #0]
 8019c72:	693b      	ldr	r3, [r7, #16]
 8019c74:	4413      	add	r3, r2
 8019c76:	687a      	ldr	r2, [r7, #4]
 8019c78:	4907      	ldr	r1, [pc, #28]	@ (8019c98 <lwip_cyclic_timer+0x60>)
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7ff ff6e 	bl	8019b5c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019c80:	e004      	b.n	8019c8c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	4904      	ldr	r1, [pc, #16]	@ (8019c98 <lwip_cyclic_timer+0x60>)
 8019c86:	68f8      	ldr	r0, [r7, #12]
 8019c88:	f7ff ff68 	bl	8019b5c <sys_timeout_abs>
}
 8019c8c:	bf00      	nop
 8019c8e:	3718      	adds	r7, #24
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}
 8019c94:	2000ca04 	.word	0x2000ca04
 8019c98:	08019c39 	.word	0x08019c39

08019c9c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b082      	sub	sp, #8
 8019ca0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	607b      	str	r3, [r7, #4]
 8019ca6:	e00e      	b.n	8019cc6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8019cd8 <sys_timeouts_init+0x3c>)
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	00db      	lsls	r3, r3, #3
 8019cb4:	4a08      	ldr	r2, [pc, #32]	@ (8019cd8 <sys_timeouts_init+0x3c>)
 8019cb6:	4413      	add	r3, r2
 8019cb8:	461a      	mov	r2, r3
 8019cba:	4908      	ldr	r1, [pc, #32]	@ (8019cdc <sys_timeouts_init+0x40>)
 8019cbc:	f000 f810 	bl	8019ce0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	607b      	str	r3, [r7, #4]
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2b02      	cmp	r3, #2
 8019cca:	d9ed      	bls.n	8019ca8 <sys_timeouts_init+0xc>
  }
}
 8019ccc:	bf00      	nop
 8019cce:	bf00      	nop
 8019cd0:	3708      	adds	r7, #8
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	bd80      	pop	{r7, pc}
 8019cd6:	bf00      	nop
 8019cd8:	0802315c 	.word	0x0802315c
 8019cdc:	08019c39 	.word	0x08019c39

08019ce0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b086      	sub	sp, #24
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019cf2:	d306      	bcc.n	8019d02 <sys_timeout+0x22>
 8019cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8019d20 <sys_timeout+0x40>)
 8019cf6:	f240 1229 	movw	r2, #297	@ 0x129
 8019cfa:	490a      	ldr	r1, [pc, #40]	@ (8019d24 <sys_timeout+0x44>)
 8019cfc:	480a      	ldr	r0, [pc, #40]	@ (8019d28 <sys_timeout+0x48>)
 8019cfe:	f003 fd1d 	bl	801d73c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019d02:	f7f2 fc6f 	bl	800c5e4 <sys_now>
 8019d06:	4602      	mov	r2, r0
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	4413      	add	r3, r2
 8019d0c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019d0e:	687a      	ldr	r2, [r7, #4]
 8019d10:	68b9      	ldr	r1, [r7, #8]
 8019d12:	6978      	ldr	r0, [r7, #20]
 8019d14:	f7ff ff22 	bl	8019b5c <sys_timeout_abs>
#endif
}
 8019d18:	bf00      	nop
 8019d1a:	3718      	adds	r7, #24
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	bd80      	pop	{r7, pc}
 8019d20:	080224e0 	.word	0x080224e0
 8019d24:	0802257c 	.word	0x0802257c
 8019d28:	08022554 	.word	0x08022554

08019d2c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019d2c:	b580      	push	{r7, lr}
 8019d2e:	b084      	sub	sp, #16
 8019d30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019d32:	f7f2 fc57 	bl	800c5e4 <sys_now>
 8019d36:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019d38:	4b17      	ldr	r3, [pc, #92]	@ (8019d98 <sys_check_timeouts+0x6c>)
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019d3e:	68bb      	ldr	r3, [r7, #8]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d022      	beq.n	8019d8a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019d44:	68bb      	ldr	r3, [r7, #8]
 8019d46:	685b      	ldr	r3, [r3, #4]
 8019d48:	68fa      	ldr	r2, [r7, #12]
 8019d4a:	1ad3      	subs	r3, r2, r3
 8019d4c:	0fdb      	lsrs	r3, r3, #31
 8019d4e:	f003 0301 	and.w	r3, r3, #1
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d11a      	bne.n	8019d8e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8019d98 <sys_check_timeouts+0x6c>)
 8019d5e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	689b      	ldr	r3, [r3, #8]
 8019d64:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019d66:	68bb      	ldr	r3, [r7, #8]
 8019d68:	68db      	ldr	r3, [r3, #12]
 8019d6a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	685b      	ldr	r3, [r3, #4]
 8019d70:	4a0a      	ldr	r2, [pc, #40]	@ (8019d9c <sys_check_timeouts+0x70>)
 8019d72:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019d74:	68b9      	ldr	r1, [r7, #8]
 8019d76:	200a      	movs	r0, #10
 8019d78:	f7f8 fdb6 	bl	80128e8 <memp_free>
    if (handler != NULL) {
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d0da      	beq.n	8019d38 <sys_check_timeouts+0xc>
      handler(arg);
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	6838      	ldr	r0, [r7, #0]
 8019d86:	4798      	blx	r3
  do {
 8019d88:	e7d6      	b.n	8019d38 <sys_check_timeouts+0xc>
      return;
 8019d8a:	bf00      	nop
 8019d8c:	e000      	b.n	8019d90 <sys_check_timeouts+0x64>
      return;
 8019d8e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019d90:	3710      	adds	r7, #16
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}
 8019d96:	bf00      	nop
 8019d98:	2000ca00 	.word	0x2000ca00
 8019d9c:	2000ca04 	.word	0x2000ca04

08019da0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019da0:	b580      	push	{r7, lr}
 8019da2:	b082      	sub	sp, #8
 8019da4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019da6:	4b16      	ldr	r3, [pc, #88]	@ (8019e00 <sys_timeouts_sleeptime+0x60>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d102      	bne.n	8019db4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019dae:	f04f 33ff 	mov.w	r3, #4294967295
 8019db2:	e020      	b.n	8019df6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019db4:	f7f2 fc16 	bl	800c5e4 <sys_now>
 8019db8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019dba:	4b11      	ldr	r3, [pc, #68]	@ (8019e00 <sys_timeouts_sleeptime+0x60>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	685a      	ldr	r2, [r3, #4]
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	1ad3      	subs	r3, r2, r3
 8019dc4:	0fdb      	lsrs	r3, r3, #31
 8019dc6:	f003 0301 	and.w	r3, r3, #1
 8019dca:	b2db      	uxtb	r3, r3
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d001      	beq.n	8019dd4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	e010      	b.n	8019df6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8019e00 <sys_timeouts_sleeptime+0x60>)
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	685a      	ldr	r2, [r3, #4]
 8019dda:	687b      	ldr	r3, [r7, #4]
 8019ddc:	1ad3      	subs	r3, r2, r3
 8019dde:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	da06      	bge.n	8019df4 <sys_timeouts_sleeptime+0x54>
 8019de6:	4b07      	ldr	r3, [pc, #28]	@ (8019e04 <sys_timeouts_sleeptime+0x64>)
 8019de8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019dec:	4906      	ldr	r1, [pc, #24]	@ (8019e08 <sys_timeouts_sleeptime+0x68>)
 8019dee:	4807      	ldr	r0, [pc, #28]	@ (8019e0c <sys_timeouts_sleeptime+0x6c>)
 8019df0:	f003 fca4 	bl	801d73c <iprintf>
    return ret;
 8019df4:	683b      	ldr	r3, [r7, #0]
  }
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	2000ca00 	.word	0x2000ca00
 8019e04:	080224e0 	.word	0x080224e0
 8019e08:	080225b4 	.word	0x080225b4
 8019e0c:	08022554 	.word	0x08022554

08019e10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019e14:	f003 fb0e 	bl	801d434 <rand>
 8019e18:	4603      	mov	r3, r0
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8019e26:	b29a      	uxth	r2, r3
 8019e28:	4b01      	ldr	r3, [pc, #4]	@ (8019e30 <udp_init+0x20>)
 8019e2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019e2c:	bf00      	nop
 8019e2e:	bd80      	pop	{r7, pc}
 8019e30:	200000a4 	.word	0x200000a4

08019e34 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019e34:	b580      	push	{r7, lr}
 8019e36:	b084      	sub	sp, #16
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	4613      	mov	r3, r2
 8019e40:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d105      	bne.n	8019e54 <udp_input_local_match+0x20>
 8019e48:	4b27      	ldr	r3, [pc, #156]	@ (8019ee8 <udp_input_local_match+0xb4>)
 8019e4a:	2287      	movs	r2, #135	@ 0x87
 8019e4c:	4927      	ldr	r1, [pc, #156]	@ (8019eec <udp_input_local_match+0xb8>)
 8019e4e:	4828      	ldr	r0, [pc, #160]	@ (8019ef0 <udp_input_local_match+0xbc>)
 8019e50:	f003 fc74 	bl	801d73c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	2b00      	cmp	r3, #0
 8019e58:	d105      	bne.n	8019e66 <udp_input_local_match+0x32>
 8019e5a:	4b23      	ldr	r3, [pc, #140]	@ (8019ee8 <udp_input_local_match+0xb4>)
 8019e5c:	2288      	movs	r2, #136	@ 0x88
 8019e5e:	4925      	ldr	r1, [pc, #148]	@ (8019ef4 <udp_input_local_match+0xc0>)
 8019e60:	4823      	ldr	r0, [pc, #140]	@ (8019ef0 <udp_input_local_match+0xbc>)
 8019e62:	f003 fc6b 	bl	801d73c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	7a1b      	ldrb	r3, [r3, #8]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d00b      	beq.n	8019e86 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	7a1a      	ldrb	r2, [r3, #8]
 8019e72:	4b21      	ldr	r3, [pc, #132]	@ (8019ef8 <udp_input_local_match+0xc4>)
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019e7a:	3301      	adds	r3, #1
 8019e7c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	d001      	beq.n	8019e86 <udp_input_local_match+0x52>
    return 0;
 8019e82:	2300      	movs	r3, #0
 8019e84:	e02b      	b.n	8019ede <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019e86:	79fb      	ldrb	r3, [r7, #7]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d018      	beq.n	8019ebe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d013      	beq.n	8019eba <udp_input_local_match+0x86>
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d00f      	beq.n	8019eba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019e9a:	4b17      	ldr	r3, [pc, #92]	@ (8019ef8 <udp_input_local_match+0xc4>)
 8019e9c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ea2:	d00a      	beq.n	8019eba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	681a      	ldr	r2, [r3, #0]
 8019ea8:	4b13      	ldr	r3, [pc, #76]	@ (8019ef8 <udp_input_local_match+0xc4>)
 8019eaa:	695b      	ldr	r3, [r3, #20]
 8019eac:	405a      	eors	r2, r3
 8019eae:	68bb      	ldr	r3, [r7, #8]
 8019eb0:	3308      	adds	r3, #8
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d110      	bne.n	8019edc <udp_input_local_match+0xa8>
          return 1;
 8019eba:	2301      	movs	r3, #1
 8019ebc:	e00f      	b.n	8019ede <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	2b00      	cmp	r3, #0
 8019ec2:	d009      	beq.n	8019ed8 <udp_input_local_match+0xa4>
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d005      	beq.n	8019ed8 <udp_input_local_match+0xa4>
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	681a      	ldr	r2, [r3, #0]
 8019ed0:	4b09      	ldr	r3, [pc, #36]	@ (8019ef8 <udp_input_local_match+0xc4>)
 8019ed2:	695b      	ldr	r3, [r3, #20]
 8019ed4:	429a      	cmp	r2, r3
 8019ed6:	d101      	bne.n	8019edc <udp_input_local_match+0xa8>
        return 1;
 8019ed8:	2301      	movs	r3, #1
 8019eda:	e000      	b.n	8019ede <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019edc:	2300      	movs	r3, #0
}
 8019ede:	4618      	mov	r0, r3
 8019ee0:	3710      	adds	r7, #16
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
 8019ee6:	bf00      	nop
 8019ee8:	080225c8 	.word	0x080225c8
 8019eec:	080225f8 	.word	0x080225f8
 8019ef0:	0802261c 	.word	0x0802261c
 8019ef4:	08022644 	.word	0x08022644
 8019ef8:	2000925c 	.word	0x2000925c

08019efc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019efc:	b590      	push	{r4, r7, lr}
 8019efe:	b08d      	sub	sp, #52	@ 0x34
 8019f00:	af02      	add	r7, sp, #8
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019f06:	2300      	movs	r3, #0
 8019f08:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d105      	bne.n	8019f1c <udp_input+0x20>
 8019f10:	4b7c      	ldr	r3, [pc, #496]	@ (801a104 <udp_input+0x208>)
 8019f12:	22cf      	movs	r2, #207	@ 0xcf
 8019f14:	497c      	ldr	r1, [pc, #496]	@ (801a108 <udp_input+0x20c>)
 8019f16:	487d      	ldr	r0, [pc, #500]	@ (801a10c <udp_input+0x210>)
 8019f18:	f003 fc10 	bl	801d73c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019f1c:	683b      	ldr	r3, [r7, #0]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d105      	bne.n	8019f2e <udp_input+0x32>
 8019f22:	4b78      	ldr	r3, [pc, #480]	@ (801a104 <udp_input+0x208>)
 8019f24:	22d0      	movs	r2, #208	@ 0xd0
 8019f26:	497a      	ldr	r1, [pc, #488]	@ (801a110 <udp_input+0x214>)
 8019f28:	4878      	ldr	r0, [pc, #480]	@ (801a10c <udp_input+0x210>)
 8019f2a:	f003 fc07 	bl	801d73c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	895b      	ldrh	r3, [r3, #10]
 8019f32:	2b07      	cmp	r3, #7
 8019f34:	d803      	bhi.n	8019f3e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019f36:	6878      	ldr	r0, [r7, #4]
 8019f38:	f7f9 fb48 	bl	80135cc <pbuf_free>
    goto end;
 8019f3c:	e0de      	b.n	801a0fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	685b      	ldr	r3, [r3, #4]
 8019f42:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019f44:	4b73      	ldr	r3, [pc, #460]	@ (801a114 <udp_input+0x218>)
 8019f46:	695b      	ldr	r3, [r3, #20]
 8019f48:	4a72      	ldr	r2, [pc, #456]	@ (801a114 <udp_input+0x218>)
 8019f4a:	6812      	ldr	r2, [r2, #0]
 8019f4c:	4611      	mov	r1, r2
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f001 fc56 	bl	801b800 <ip4_addr_isbroadcast_u32>
 8019f54:	4603      	mov	r3, r0
 8019f56:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019f58:	697b      	ldr	r3, [r7, #20]
 8019f5a:	881b      	ldrh	r3, [r3, #0]
 8019f5c:	b29b      	uxth	r3, r3
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f7f7 ff74 	bl	8011e4c <lwip_htons>
 8019f64:	4603      	mov	r3, r0
 8019f66:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	885b      	ldrh	r3, [r3, #2]
 8019f6c:	b29b      	uxth	r3, r3
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7f7 ff6c 	bl	8011e4c <lwip_htons>
 8019f74:	4603      	mov	r3, r0
 8019f76:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019f80:	2300      	movs	r3, #0
 8019f82:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019f84:	4b64      	ldr	r3, [pc, #400]	@ (801a118 <udp_input+0x21c>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8019f8a:	e054      	b.n	801a036 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f8e:	8a5b      	ldrh	r3, [r3, #18]
 8019f90:	89fa      	ldrh	r2, [r7, #14]
 8019f92:	429a      	cmp	r2, r3
 8019f94:	d14a      	bne.n	801a02c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019f96:	7cfb      	ldrb	r3, [r7, #19]
 8019f98:	461a      	mov	r2, r3
 8019f9a:	6839      	ldr	r1, [r7, #0]
 8019f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f9e:	f7ff ff49 	bl	8019e34 <udp_input_local_match>
 8019fa2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d041      	beq.n	801a02c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019faa:	7c1b      	ldrb	r3, [r3, #16]
 8019fac:	f003 0304 	and.w	r3, r3, #4
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d11d      	bne.n	8019ff0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019fb4:	69fb      	ldr	r3, [r7, #28]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d102      	bne.n	8019fc0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fbc:	61fb      	str	r3, [r7, #28]
 8019fbe:	e017      	b.n	8019ff0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019fc0:	7cfb      	ldrb	r3, [r7, #19]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d014      	beq.n	8019ff0 <udp_input+0xf4>
 8019fc6:	4b53      	ldr	r3, [pc, #332]	@ (801a114 <udp_input+0x218>)
 8019fc8:	695b      	ldr	r3, [r3, #20]
 8019fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fce:	d10f      	bne.n	8019ff0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019fd0:	69fb      	ldr	r3, [r7, #28]
 8019fd2:	681a      	ldr	r2, [r3, #0]
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	3304      	adds	r3, #4
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	429a      	cmp	r2, r3
 8019fdc:	d008      	beq.n	8019ff0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fe0:	681a      	ldr	r2, [r3, #0]
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	3304      	adds	r3, #4
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d101      	bne.n	8019ff0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ff2:	8a9b      	ldrh	r3, [r3, #20]
 8019ff4:	8a3a      	ldrh	r2, [r7, #16]
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d118      	bne.n	801a02c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ffc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d005      	beq.n	801a00e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a004:	685a      	ldr	r2, [r3, #4]
 801a006:	4b43      	ldr	r3, [pc, #268]	@ (801a114 <udp_input+0x218>)
 801a008:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a00a:	429a      	cmp	r2, r3
 801a00c:	d10e      	bne.n	801a02c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a00e:	6a3b      	ldr	r3, [r7, #32]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d014      	beq.n	801a03e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a016:	68da      	ldr	r2, [r3, #12]
 801a018:	6a3b      	ldr	r3, [r7, #32]
 801a01a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a01c:	4b3e      	ldr	r3, [pc, #248]	@ (801a118 <udp_input+0x21c>)
 801a01e:	681a      	ldr	r2, [r3, #0]
 801a020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a022:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a024:	4a3c      	ldr	r2, [pc, #240]	@ (801a118 <udp_input+0x21c>)
 801a026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a028:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a02a:	e008      	b.n	801a03e <udp_input+0x142>
      }
    }

    prev = pcb;
 801a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a02e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a032:	68db      	ldr	r3, [r3, #12]
 801a034:	627b      	str	r3, [r7, #36]	@ 0x24
 801a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d1a7      	bne.n	8019f8c <udp_input+0x90>
 801a03c:	e000      	b.n	801a040 <udp_input+0x144>
        break;
 801a03e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a042:	2b00      	cmp	r3, #0
 801a044:	d101      	bne.n	801a04a <udp_input+0x14e>
    pcb = uncon_pcb;
 801a046:	69fb      	ldr	r3, [r7, #28]
 801a048:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d002      	beq.n	801a056 <udp_input+0x15a>
    for_us = 1;
 801a050:	2301      	movs	r3, #1
 801a052:	76fb      	strb	r3, [r7, #27]
 801a054:	e00a      	b.n	801a06c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a056:	683b      	ldr	r3, [r7, #0]
 801a058:	3304      	adds	r3, #4
 801a05a:	681a      	ldr	r2, [r3, #0]
 801a05c:	4b2d      	ldr	r3, [pc, #180]	@ (801a114 <udp_input+0x218>)
 801a05e:	695b      	ldr	r3, [r3, #20]
 801a060:	429a      	cmp	r2, r3
 801a062:	bf0c      	ite	eq
 801a064:	2301      	moveq	r3, #1
 801a066:	2300      	movne	r3, #0
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a06c:	7efb      	ldrb	r3, [r7, #27]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d041      	beq.n	801a0f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a072:	2108      	movs	r1, #8
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f7f9 fa23 	bl	80134c0 <pbuf_remove_header>
 801a07a:	4603      	mov	r3, r0
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d00a      	beq.n	801a096 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a080:	4b20      	ldr	r3, [pc, #128]	@ (801a104 <udp_input+0x208>)
 801a082:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a086:	4925      	ldr	r1, [pc, #148]	@ (801a11c <udp_input+0x220>)
 801a088:	4820      	ldr	r0, [pc, #128]	@ (801a10c <udp_input+0x210>)
 801a08a:	f003 fb57 	bl	801d73c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a08e:	6878      	ldr	r0, [r7, #4]
 801a090:	f7f9 fa9c 	bl	80135cc <pbuf_free>
      goto end;
 801a094:	e032      	b.n	801a0fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d012      	beq.n	801a0c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a09e:	699b      	ldr	r3, [r3, #24]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d00a      	beq.n	801a0ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0a6:	699c      	ldr	r4, [r3, #24]
 801a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0aa:	69d8      	ldr	r0, [r3, #28]
 801a0ac:	8a3b      	ldrh	r3, [r7, #16]
 801a0ae:	9300      	str	r3, [sp, #0]
 801a0b0:	4b1b      	ldr	r3, [pc, #108]	@ (801a120 <udp_input+0x224>)
 801a0b2:	687a      	ldr	r2, [r7, #4]
 801a0b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a0b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a0b8:	e021      	b.n	801a0fe <udp_input+0x202>
        pbuf_free(p);
 801a0ba:	6878      	ldr	r0, [r7, #4]
 801a0bc:	f7f9 fa86 	bl	80135cc <pbuf_free>
        goto end;
 801a0c0:	e01c      	b.n	801a0fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a0c2:	7cfb      	ldrb	r3, [r7, #19]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d112      	bne.n	801a0ee <udp_input+0x1f2>
 801a0c8:	4b12      	ldr	r3, [pc, #72]	@ (801a114 <udp_input+0x218>)
 801a0ca:	695b      	ldr	r3, [r3, #20]
 801a0cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a0d0:	2be0      	cmp	r3, #224	@ 0xe0
 801a0d2:	d00c      	beq.n	801a0ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a0d4:	4b0f      	ldr	r3, [pc, #60]	@ (801a114 <udp_input+0x218>)
 801a0d6:	899b      	ldrh	r3, [r3, #12]
 801a0d8:	3308      	adds	r3, #8
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	b21b      	sxth	r3, r3
 801a0de:	4619      	mov	r1, r3
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f7f9 fa60 	bl	80135a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a0e6:	2103      	movs	r1, #3
 801a0e8:	6878      	ldr	r0, [r7, #4]
 801a0ea:	f001 f869 	bl	801b1c0 <icmp_dest_unreach>
      pbuf_free(p);
 801a0ee:	6878      	ldr	r0, [r7, #4]
 801a0f0:	f7f9 fa6c 	bl	80135cc <pbuf_free>
  return;
 801a0f4:	e003      	b.n	801a0fe <udp_input+0x202>
    pbuf_free(p);
 801a0f6:	6878      	ldr	r0, [r7, #4]
 801a0f8:	f7f9 fa68 	bl	80135cc <pbuf_free>
  return;
 801a0fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a0fe:	372c      	adds	r7, #44	@ 0x2c
 801a100:	46bd      	mov	sp, r7
 801a102:	bd90      	pop	{r4, r7, pc}
 801a104:	080225c8 	.word	0x080225c8
 801a108:	0802266c 	.word	0x0802266c
 801a10c:	0802261c 	.word	0x0802261c
 801a110:	08022684 	.word	0x08022684
 801a114:	2000925c 	.word	0x2000925c
 801a118:	2000ca0c 	.word	0x2000ca0c
 801a11c:	080226a0 	.word	0x080226a0
 801a120:	2000926c 	.word	0x2000926c

0801a124 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a124:	b480      	push	{r7}
 801a126:	b085      	sub	sp, #20
 801a128:	af00      	add	r7, sp, #0
 801a12a:	6078      	str	r0, [r7, #4]
 801a12c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d01e      	beq.n	801a172 <udp_netif_ip_addr_changed+0x4e>
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d01a      	beq.n	801a172 <udp_netif_ip_addr_changed+0x4e>
 801a13c:	683b      	ldr	r3, [r7, #0]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d017      	beq.n	801a172 <udp_netif_ip_addr_changed+0x4e>
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d013      	beq.n	801a172 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a14a:	4b0d      	ldr	r3, [pc, #52]	@ (801a180 <udp_netif_ip_addr_changed+0x5c>)
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	60fb      	str	r3, [r7, #12]
 801a150:	e00c      	b.n	801a16c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	681a      	ldr	r2, [r3, #0]
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	681b      	ldr	r3, [r3, #0]
 801a15a:	429a      	cmp	r2, r3
 801a15c:	d103      	bne.n	801a166 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	681a      	ldr	r2, [r3, #0]
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a166:	68fb      	ldr	r3, [r7, #12]
 801a168:	68db      	ldr	r3, [r3, #12]
 801a16a:	60fb      	str	r3, [r7, #12]
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d1ef      	bne.n	801a152 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a172:	bf00      	nop
 801a174:	3714      	adds	r7, #20
 801a176:	46bd      	mov	sp, r7
 801a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17c:	4770      	bx	lr
 801a17e:	bf00      	nop
 801a180:	2000ca0c 	.word	0x2000ca0c

0801a184 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b082      	sub	sp, #8
 801a188:	af00      	add	r7, sp, #0
 801a18a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a18c:	4915      	ldr	r1, [pc, #84]	@ (801a1e4 <etharp_free_entry+0x60>)
 801a18e:	687a      	ldr	r2, [r7, #4]
 801a190:	4613      	mov	r3, r2
 801a192:	005b      	lsls	r3, r3, #1
 801a194:	4413      	add	r3, r2
 801a196:	00db      	lsls	r3, r3, #3
 801a198:	440b      	add	r3, r1
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d013      	beq.n	801a1c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a1a0:	4910      	ldr	r1, [pc, #64]	@ (801a1e4 <etharp_free_entry+0x60>)
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	4613      	mov	r3, r2
 801a1a6:	005b      	lsls	r3, r3, #1
 801a1a8:	4413      	add	r3, r2
 801a1aa:	00db      	lsls	r3, r3, #3
 801a1ac:	440b      	add	r3, r1
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7f9 fa0b 	bl	80135cc <pbuf_free>
    arp_table[i].q = NULL;
 801a1b6:	490b      	ldr	r1, [pc, #44]	@ (801a1e4 <etharp_free_entry+0x60>)
 801a1b8:	687a      	ldr	r2, [r7, #4]
 801a1ba:	4613      	mov	r3, r2
 801a1bc:	005b      	lsls	r3, r3, #1
 801a1be:	4413      	add	r3, r2
 801a1c0:	00db      	lsls	r3, r3, #3
 801a1c2:	440b      	add	r3, r1
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a1c8:	4906      	ldr	r1, [pc, #24]	@ (801a1e4 <etharp_free_entry+0x60>)
 801a1ca:	687a      	ldr	r2, [r7, #4]
 801a1cc:	4613      	mov	r3, r2
 801a1ce:	005b      	lsls	r3, r3, #1
 801a1d0:	4413      	add	r3, r2
 801a1d2:	00db      	lsls	r3, r3, #3
 801a1d4:	440b      	add	r3, r1
 801a1d6:	3314      	adds	r3, #20
 801a1d8:	2200      	movs	r2, #0
 801a1da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a1dc:	bf00      	nop
 801a1de:	3708      	adds	r7, #8
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	2000ca10 	.word	0x2000ca10

0801a1e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	607b      	str	r3, [r7, #4]
 801a1f2:	e096      	b.n	801a322 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a1f4:	494f      	ldr	r1, [pc, #316]	@ (801a334 <etharp_tmr+0x14c>)
 801a1f6:	687a      	ldr	r2, [r7, #4]
 801a1f8:	4613      	mov	r3, r2
 801a1fa:	005b      	lsls	r3, r3, #1
 801a1fc:	4413      	add	r3, r2
 801a1fe:	00db      	lsls	r3, r3, #3
 801a200:	440b      	add	r3, r1
 801a202:	3314      	adds	r3, #20
 801a204:	781b      	ldrb	r3, [r3, #0]
 801a206:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a208:	78fb      	ldrb	r3, [r7, #3]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	f000 8086 	beq.w	801a31c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a210:	4948      	ldr	r1, [pc, #288]	@ (801a334 <etharp_tmr+0x14c>)
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	4613      	mov	r3, r2
 801a216:	005b      	lsls	r3, r3, #1
 801a218:	4413      	add	r3, r2
 801a21a:	00db      	lsls	r3, r3, #3
 801a21c:	440b      	add	r3, r1
 801a21e:	3312      	adds	r3, #18
 801a220:	881b      	ldrh	r3, [r3, #0]
 801a222:	3301      	adds	r3, #1
 801a224:	b298      	uxth	r0, r3
 801a226:	4943      	ldr	r1, [pc, #268]	@ (801a334 <etharp_tmr+0x14c>)
 801a228:	687a      	ldr	r2, [r7, #4]
 801a22a:	4613      	mov	r3, r2
 801a22c:	005b      	lsls	r3, r3, #1
 801a22e:	4413      	add	r3, r2
 801a230:	00db      	lsls	r3, r3, #3
 801a232:	440b      	add	r3, r1
 801a234:	3312      	adds	r3, #18
 801a236:	4602      	mov	r2, r0
 801a238:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a23a:	493e      	ldr	r1, [pc, #248]	@ (801a334 <etharp_tmr+0x14c>)
 801a23c:	687a      	ldr	r2, [r7, #4]
 801a23e:	4613      	mov	r3, r2
 801a240:	005b      	lsls	r3, r3, #1
 801a242:	4413      	add	r3, r2
 801a244:	00db      	lsls	r3, r3, #3
 801a246:	440b      	add	r3, r1
 801a248:	3312      	adds	r3, #18
 801a24a:	881b      	ldrh	r3, [r3, #0]
 801a24c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a250:	d215      	bcs.n	801a27e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a252:	4938      	ldr	r1, [pc, #224]	@ (801a334 <etharp_tmr+0x14c>)
 801a254:	687a      	ldr	r2, [r7, #4]
 801a256:	4613      	mov	r3, r2
 801a258:	005b      	lsls	r3, r3, #1
 801a25a:	4413      	add	r3, r2
 801a25c:	00db      	lsls	r3, r3, #3
 801a25e:	440b      	add	r3, r1
 801a260:	3314      	adds	r3, #20
 801a262:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a264:	2b01      	cmp	r3, #1
 801a266:	d10e      	bne.n	801a286 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a268:	4932      	ldr	r1, [pc, #200]	@ (801a334 <etharp_tmr+0x14c>)
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	4613      	mov	r3, r2
 801a26e:	005b      	lsls	r3, r3, #1
 801a270:	4413      	add	r3, r2
 801a272:	00db      	lsls	r3, r3, #3
 801a274:	440b      	add	r3, r1
 801a276:	3312      	adds	r3, #18
 801a278:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a27a:	2b04      	cmp	r3, #4
 801a27c:	d903      	bls.n	801a286 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a27e:	6878      	ldr	r0, [r7, #4]
 801a280:	f7ff ff80 	bl	801a184 <etharp_free_entry>
 801a284:	e04a      	b.n	801a31c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a286:	492b      	ldr	r1, [pc, #172]	@ (801a334 <etharp_tmr+0x14c>)
 801a288:	687a      	ldr	r2, [r7, #4]
 801a28a:	4613      	mov	r3, r2
 801a28c:	005b      	lsls	r3, r3, #1
 801a28e:	4413      	add	r3, r2
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	440b      	add	r3, r1
 801a294:	3314      	adds	r3, #20
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	2b03      	cmp	r3, #3
 801a29a:	d10a      	bne.n	801a2b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a29c:	4925      	ldr	r1, [pc, #148]	@ (801a334 <etharp_tmr+0x14c>)
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	00db      	lsls	r3, r3, #3
 801a2a8:	440b      	add	r3, r1
 801a2aa:	3314      	adds	r3, #20
 801a2ac:	2204      	movs	r2, #4
 801a2ae:	701a      	strb	r2, [r3, #0]
 801a2b0:	e034      	b.n	801a31c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a2b2:	4920      	ldr	r1, [pc, #128]	@ (801a334 <etharp_tmr+0x14c>)
 801a2b4:	687a      	ldr	r2, [r7, #4]
 801a2b6:	4613      	mov	r3, r2
 801a2b8:	005b      	lsls	r3, r3, #1
 801a2ba:	4413      	add	r3, r2
 801a2bc:	00db      	lsls	r3, r3, #3
 801a2be:	440b      	add	r3, r1
 801a2c0:	3314      	adds	r3, #20
 801a2c2:	781b      	ldrb	r3, [r3, #0]
 801a2c4:	2b04      	cmp	r3, #4
 801a2c6:	d10a      	bne.n	801a2de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a2c8:	491a      	ldr	r1, [pc, #104]	@ (801a334 <etharp_tmr+0x14c>)
 801a2ca:	687a      	ldr	r2, [r7, #4]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	005b      	lsls	r3, r3, #1
 801a2d0:	4413      	add	r3, r2
 801a2d2:	00db      	lsls	r3, r3, #3
 801a2d4:	440b      	add	r3, r1
 801a2d6:	3314      	adds	r3, #20
 801a2d8:	2202      	movs	r2, #2
 801a2da:	701a      	strb	r2, [r3, #0]
 801a2dc:	e01e      	b.n	801a31c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a2de:	4915      	ldr	r1, [pc, #84]	@ (801a334 <etharp_tmr+0x14c>)
 801a2e0:	687a      	ldr	r2, [r7, #4]
 801a2e2:	4613      	mov	r3, r2
 801a2e4:	005b      	lsls	r3, r3, #1
 801a2e6:	4413      	add	r3, r2
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	440b      	add	r3, r1
 801a2ec:	3314      	adds	r3, #20
 801a2ee:	781b      	ldrb	r3, [r3, #0]
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d113      	bne.n	801a31c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a2f4:	490f      	ldr	r1, [pc, #60]	@ (801a334 <etharp_tmr+0x14c>)
 801a2f6:	687a      	ldr	r2, [r7, #4]
 801a2f8:	4613      	mov	r3, r2
 801a2fa:	005b      	lsls	r3, r3, #1
 801a2fc:	4413      	add	r3, r2
 801a2fe:	00db      	lsls	r3, r3, #3
 801a300:	440b      	add	r3, r1
 801a302:	3308      	adds	r3, #8
 801a304:	6818      	ldr	r0, [r3, #0]
 801a306:	687a      	ldr	r2, [r7, #4]
 801a308:	4613      	mov	r3, r2
 801a30a:	005b      	lsls	r3, r3, #1
 801a30c:	4413      	add	r3, r2
 801a30e:	00db      	lsls	r3, r3, #3
 801a310:	4a08      	ldr	r2, [pc, #32]	@ (801a334 <etharp_tmr+0x14c>)
 801a312:	4413      	add	r3, r2
 801a314:	3304      	adds	r3, #4
 801a316:	4619      	mov	r1, r3
 801a318:	f000 fe3e 	bl	801af98 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	3301      	adds	r3, #1
 801a320:	607b      	str	r3, [r7, #4]
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	2b09      	cmp	r3, #9
 801a326:	f77f af65 	ble.w	801a1f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801a32a:	bf00      	nop
 801a32c:	bf00      	nop
 801a32e:	3708      	adds	r7, #8
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}
 801a334:	2000ca10 	.word	0x2000ca10

0801a338 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b08a      	sub	sp, #40	@ 0x28
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	60f8      	str	r0, [r7, #12]
 801a340:	460b      	mov	r3, r1
 801a342:	607a      	str	r2, [r7, #4]
 801a344:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a346:	230a      	movs	r3, #10
 801a348:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a34a:	230a      	movs	r3, #10
 801a34c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a34e:	230a      	movs	r3, #10
 801a350:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a352:	2300      	movs	r3, #0
 801a354:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a356:	230a      	movs	r3, #10
 801a358:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a35a:	2300      	movs	r3, #0
 801a35c:	83bb      	strh	r3, [r7, #28]
 801a35e:	2300      	movs	r3, #0
 801a360:	837b      	strh	r3, [r7, #26]
 801a362:	2300      	movs	r3, #0
 801a364:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a366:	2300      	movs	r3, #0
 801a368:	843b      	strh	r3, [r7, #32]
 801a36a:	e0ae      	b.n	801a4ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a36c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a370:	49a6      	ldr	r1, [pc, #664]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a372:	4613      	mov	r3, r2
 801a374:	005b      	lsls	r3, r3, #1
 801a376:	4413      	add	r3, r2
 801a378:	00db      	lsls	r3, r3, #3
 801a37a:	440b      	add	r3, r1
 801a37c:	3314      	adds	r3, #20
 801a37e:	781b      	ldrb	r3, [r3, #0]
 801a380:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a386:	2b0a      	cmp	r3, #10
 801a388:	d105      	bne.n	801a396 <etharp_find_entry+0x5e>
 801a38a:	7dfb      	ldrb	r3, [r7, #23]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d102      	bne.n	801a396 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a390:	8c3b      	ldrh	r3, [r7, #32]
 801a392:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a394:	e095      	b.n	801a4c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a396:	7dfb      	ldrb	r3, [r7, #23]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	f000 8092 	beq.w	801a4c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a39e:	7dfb      	ldrb	r3, [r7, #23]
 801a3a0:	2b01      	cmp	r3, #1
 801a3a2:	d009      	beq.n	801a3b8 <etharp_find_entry+0x80>
 801a3a4:	7dfb      	ldrb	r3, [r7, #23]
 801a3a6:	2b01      	cmp	r3, #1
 801a3a8:	d806      	bhi.n	801a3b8 <etharp_find_entry+0x80>
 801a3aa:	4b99      	ldr	r3, [pc, #612]	@ (801a610 <etharp_find_entry+0x2d8>)
 801a3ac:	f240 1223 	movw	r2, #291	@ 0x123
 801a3b0:	4998      	ldr	r1, [pc, #608]	@ (801a614 <etharp_find_entry+0x2dc>)
 801a3b2:	4899      	ldr	r0, [pc, #612]	@ (801a618 <etharp_find_entry+0x2e0>)
 801a3b4:	f003 f9c2 	bl	801d73c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d020      	beq.n	801a400 <etharp_find_entry+0xc8>
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	6819      	ldr	r1, [r3, #0]
 801a3c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3c6:	4891      	ldr	r0, [pc, #580]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a3c8:	4613      	mov	r3, r2
 801a3ca:	005b      	lsls	r3, r3, #1
 801a3cc:	4413      	add	r3, r2
 801a3ce:	00db      	lsls	r3, r3, #3
 801a3d0:	4403      	add	r3, r0
 801a3d2:	3304      	adds	r3, #4
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	4299      	cmp	r1, r3
 801a3d8:	d112      	bne.n	801a400 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d00c      	beq.n	801a3fa <etharp_find_entry+0xc2>
 801a3e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3e4:	4989      	ldr	r1, [pc, #548]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	005b      	lsls	r3, r3, #1
 801a3ea:	4413      	add	r3, r2
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	440b      	add	r3, r1
 801a3f0:	3308      	adds	r3, #8
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	687a      	ldr	r2, [r7, #4]
 801a3f6:	429a      	cmp	r2, r3
 801a3f8:	d102      	bne.n	801a400 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a3fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a3fe:	e100      	b.n	801a602 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a400:	7dfb      	ldrb	r3, [r7, #23]
 801a402:	2b01      	cmp	r3, #1
 801a404:	d140      	bne.n	801a488 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a40a:	4980      	ldr	r1, [pc, #512]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a40c:	4613      	mov	r3, r2
 801a40e:	005b      	lsls	r3, r3, #1
 801a410:	4413      	add	r3, r2
 801a412:	00db      	lsls	r3, r3, #3
 801a414:	440b      	add	r3, r1
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d01a      	beq.n	801a452 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a41c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a420:	497a      	ldr	r1, [pc, #488]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a422:	4613      	mov	r3, r2
 801a424:	005b      	lsls	r3, r3, #1
 801a426:	4413      	add	r3, r2
 801a428:	00db      	lsls	r3, r3, #3
 801a42a:	440b      	add	r3, r1
 801a42c:	3312      	adds	r3, #18
 801a42e:	881b      	ldrh	r3, [r3, #0]
 801a430:	8bba      	ldrh	r2, [r7, #28]
 801a432:	429a      	cmp	r2, r3
 801a434:	d845      	bhi.n	801a4c2 <etharp_find_entry+0x18a>
            old_queue = i;
 801a436:	8c3b      	ldrh	r3, [r7, #32]
 801a438:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a43a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a43e:	4973      	ldr	r1, [pc, #460]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a440:	4613      	mov	r3, r2
 801a442:	005b      	lsls	r3, r3, #1
 801a444:	4413      	add	r3, r2
 801a446:	00db      	lsls	r3, r3, #3
 801a448:	440b      	add	r3, r1
 801a44a:	3312      	adds	r3, #18
 801a44c:	881b      	ldrh	r3, [r3, #0]
 801a44e:	83bb      	strh	r3, [r7, #28]
 801a450:	e037      	b.n	801a4c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a456:	496d      	ldr	r1, [pc, #436]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a458:	4613      	mov	r3, r2
 801a45a:	005b      	lsls	r3, r3, #1
 801a45c:	4413      	add	r3, r2
 801a45e:	00db      	lsls	r3, r3, #3
 801a460:	440b      	add	r3, r1
 801a462:	3312      	adds	r3, #18
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	8b7a      	ldrh	r2, [r7, #26]
 801a468:	429a      	cmp	r2, r3
 801a46a:	d82a      	bhi.n	801a4c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801a46c:	8c3b      	ldrh	r3, [r7, #32]
 801a46e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a474:	4965      	ldr	r1, [pc, #404]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a476:	4613      	mov	r3, r2
 801a478:	005b      	lsls	r3, r3, #1
 801a47a:	4413      	add	r3, r2
 801a47c:	00db      	lsls	r3, r3, #3
 801a47e:	440b      	add	r3, r1
 801a480:	3312      	adds	r3, #18
 801a482:	881b      	ldrh	r3, [r3, #0]
 801a484:	837b      	strh	r3, [r7, #26]
 801a486:	e01c      	b.n	801a4c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a488:	7dfb      	ldrb	r3, [r7, #23]
 801a48a:	2b01      	cmp	r3, #1
 801a48c:	d919      	bls.n	801a4c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a48e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a492:	495e      	ldr	r1, [pc, #376]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a494:	4613      	mov	r3, r2
 801a496:	005b      	lsls	r3, r3, #1
 801a498:	4413      	add	r3, r2
 801a49a:	00db      	lsls	r3, r3, #3
 801a49c:	440b      	add	r3, r1
 801a49e:	3312      	adds	r3, #18
 801a4a0:	881b      	ldrh	r3, [r3, #0]
 801a4a2:	8b3a      	ldrh	r2, [r7, #24]
 801a4a4:	429a      	cmp	r2, r3
 801a4a6:	d80c      	bhi.n	801a4c2 <etharp_find_entry+0x18a>
            old_stable = i;
 801a4a8:	8c3b      	ldrh	r3, [r7, #32]
 801a4aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a4ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4b0:	4956      	ldr	r1, [pc, #344]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a4b2:	4613      	mov	r3, r2
 801a4b4:	005b      	lsls	r3, r3, #1
 801a4b6:	4413      	add	r3, r2
 801a4b8:	00db      	lsls	r3, r3, #3
 801a4ba:	440b      	add	r3, r1
 801a4bc:	3312      	adds	r3, #18
 801a4be:	881b      	ldrh	r3, [r3, #0]
 801a4c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a4c2:	8c3b      	ldrh	r3, [r7, #32]
 801a4c4:	3301      	adds	r3, #1
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	843b      	strh	r3, [r7, #32]
 801a4ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4ce:	2b09      	cmp	r3, #9
 801a4d0:	f77f af4c 	ble.w	801a36c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a4d4:	7afb      	ldrb	r3, [r7, #11]
 801a4d6:	f003 0302 	and.w	r3, r3, #2
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d108      	bne.n	801a4f0 <etharp_find_entry+0x1b8>
 801a4de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a4e2:	2b0a      	cmp	r3, #10
 801a4e4:	d107      	bne.n	801a4f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a4e6:	7afb      	ldrb	r3, [r7, #11]
 801a4e8:	f003 0301 	and.w	r3, r3, #1
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d102      	bne.n	801a4f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a4f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a4f4:	e085      	b.n	801a602 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a4f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a4fa:	2b09      	cmp	r3, #9
 801a4fc:	dc02      	bgt.n	801a504 <etharp_find_entry+0x1cc>
    i = empty;
 801a4fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a500:	843b      	strh	r3, [r7, #32]
 801a502:	e039      	b.n	801a578 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a504:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a508:	2b09      	cmp	r3, #9
 801a50a:	dc14      	bgt.n	801a536 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a50c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a50e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a514:	493d      	ldr	r1, [pc, #244]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a516:	4613      	mov	r3, r2
 801a518:	005b      	lsls	r3, r3, #1
 801a51a:	4413      	add	r3, r2
 801a51c:	00db      	lsls	r3, r3, #3
 801a51e:	440b      	add	r3, r1
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d018      	beq.n	801a558 <etharp_find_entry+0x220>
 801a526:	4b3a      	ldr	r3, [pc, #232]	@ (801a610 <etharp_find_entry+0x2d8>)
 801a528:	f240 126d 	movw	r2, #365	@ 0x16d
 801a52c:	493b      	ldr	r1, [pc, #236]	@ (801a61c <etharp_find_entry+0x2e4>)
 801a52e:	483a      	ldr	r0, [pc, #232]	@ (801a618 <etharp_find_entry+0x2e0>)
 801a530:	f003 f904 	bl	801d73c <iprintf>
 801a534:	e010      	b.n	801a558 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a536:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a53a:	2b09      	cmp	r3, #9
 801a53c:	dc02      	bgt.n	801a544 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a53e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a540:	843b      	strh	r3, [r7, #32]
 801a542:	e009      	b.n	801a558 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a548:	2b09      	cmp	r3, #9
 801a54a:	dc02      	bgt.n	801a552 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a54c:	8bfb      	ldrh	r3, [r7, #30]
 801a54e:	843b      	strh	r3, [r7, #32]
 801a550:	e002      	b.n	801a558 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a552:	f04f 33ff 	mov.w	r3, #4294967295
 801a556:	e054      	b.n	801a602 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a558:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a55c:	2b09      	cmp	r3, #9
 801a55e:	dd06      	ble.n	801a56e <etharp_find_entry+0x236>
 801a560:	4b2b      	ldr	r3, [pc, #172]	@ (801a610 <etharp_find_entry+0x2d8>)
 801a562:	f240 127f 	movw	r2, #383	@ 0x17f
 801a566:	492e      	ldr	r1, [pc, #184]	@ (801a620 <etharp_find_entry+0x2e8>)
 801a568:	482b      	ldr	r0, [pc, #172]	@ (801a618 <etharp_find_entry+0x2e0>)
 801a56a:	f003 f8e7 	bl	801d73c <iprintf>
    etharp_free_entry(i);
 801a56e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a572:	4618      	mov	r0, r3
 801a574:	f7ff fe06 	bl	801a184 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a57c:	2b09      	cmp	r3, #9
 801a57e:	dd06      	ble.n	801a58e <etharp_find_entry+0x256>
 801a580:	4b23      	ldr	r3, [pc, #140]	@ (801a610 <etharp_find_entry+0x2d8>)
 801a582:	f240 1283 	movw	r2, #387	@ 0x183
 801a586:	4926      	ldr	r1, [pc, #152]	@ (801a620 <etharp_find_entry+0x2e8>)
 801a588:	4823      	ldr	r0, [pc, #140]	@ (801a618 <etharp_find_entry+0x2e0>)
 801a58a:	f003 f8d7 	bl	801d73c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a58e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a592:	491e      	ldr	r1, [pc, #120]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a594:	4613      	mov	r3, r2
 801a596:	005b      	lsls	r3, r3, #1
 801a598:	4413      	add	r3, r2
 801a59a:	00db      	lsls	r3, r3, #3
 801a59c:	440b      	add	r3, r1
 801a59e:	3314      	adds	r3, #20
 801a5a0:	781b      	ldrb	r3, [r3, #0]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d006      	beq.n	801a5b4 <etharp_find_entry+0x27c>
 801a5a6:	4b1a      	ldr	r3, [pc, #104]	@ (801a610 <etharp_find_entry+0x2d8>)
 801a5a8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a5ac:	491d      	ldr	r1, [pc, #116]	@ (801a624 <etharp_find_entry+0x2ec>)
 801a5ae:	481a      	ldr	r0, [pc, #104]	@ (801a618 <etharp_find_entry+0x2e0>)
 801a5b0:	f003 f8c4 	bl	801d73c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d00b      	beq.n	801a5d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a5ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	6819      	ldr	r1, [r3, #0]
 801a5c2:	4812      	ldr	r0, [pc, #72]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a5c4:	4613      	mov	r3, r2
 801a5c6:	005b      	lsls	r3, r3, #1
 801a5c8:	4413      	add	r3, r2
 801a5ca:	00db      	lsls	r3, r3, #3
 801a5cc:	4403      	add	r3, r0
 801a5ce:	3304      	adds	r3, #4
 801a5d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a5d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5d6:	490d      	ldr	r1, [pc, #52]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a5d8:	4613      	mov	r3, r2
 801a5da:	005b      	lsls	r3, r3, #1
 801a5dc:	4413      	add	r3, r2
 801a5de:	00db      	lsls	r3, r3, #3
 801a5e0:	440b      	add	r3, r1
 801a5e2:	3312      	adds	r3, #18
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a5e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5ec:	4907      	ldr	r1, [pc, #28]	@ (801a60c <etharp_find_entry+0x2d4>)
 801a5ee:	4613      	mov	r3, r2
 801a5f0:	005b      	lsls	r3, r3, #1
 801a5f2:	4413      	add	r3, r2
 801a5f4:	00db      	lsls	r3, r3, #3
 801a5f6:	440b      	add	r3, r1
 801a5f8:	3308      	adds	r3, #8
 801a5fa:	687a      	ldr	r2, [r7, #4]
 801a5fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a5fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a602:	4618      	mov	r0, r3
 801a604:	3728      	adds	r7, #40	@ 0x28
 801a606:	46bd      	mov	sp, r7
 801a608:	bd80      	pop	{r7, pc}
 801a60a:	bf00      	nop
 801a60c:	2000ca10 	.word	0x2000ca10
 801a610:	0802292c 	.word	0x0802292c
 801a614:	08022964 	.word	0x08022964
 801a618:	080229a4 	.word	0x080229a4
 801a61c:	080229cc 	.word	0x080229cc
 801a620:	080229e4 	.word	0x080229e4
 801a624:	080229f8 	.word	0x080229f8

0801a628 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b088      	sub	sp, #32
 801a62c:	af02      	add	r7, sp, #8
 801a62e:	60f8      	str	r0, [r7, #12]
 801a630:	60b9      	str	r1, [r7, #8]
 801a632:	607a      	str	r2, [r7, #4]
 801a634:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801a63c:	2b06      	cmp	r3, #6
 801a63e:	d006      	beq.n	801a64e <etharp_update_arp_entry+0x26>
 801a640:	4b48      	ldr	r3, [pc, #288]	@ (801a764 <etharp_update_arp_entry+0x13c>)
 801a642:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a646:	4948      	ldr	r1, [pc, #288]	@ (801a768 <etharp_update_arp_entry+0x140>)
 801a648:	4848      	ldr	r0, [pc, #288]	@ (801a76c <etharp_update_arp_entry+0x144>)
 801a64a:	f003 f877 	bl	801d73c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a64e:	68bb      	ldr	r3, [r7, #8]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d012      	beq.n	801a67a <etharp_update_arp_entry+0x52>
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d00e      	beq.n	801a67a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	68f9      	ldr	r1, [r7, #12]
 801a662:	4618      	mov	r0, r3
 801a664:	f001 f8cc 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801a668:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d105      	bne.n	801a67a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a66e:	68bb      	ldr	r3, [r7, #8]
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a676:	2be0      	cmp	r3, #224	@ 0xe0
 801a678:	d102      	bne.n	801a680 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a67a:	f06f 030f 	mvn.w	r3, #15
 801a67e:	e06c      	b.n	801a75a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a680:	78fb      	ldrb	r3, [r7, #3]
 801a682:	68fa      	ldr	r2, [r7, #12]
 801a684:	4619      	mov	r1, r3
 801a686:	68b8      	ldr	r0, [r7, #8]
 801a688:	f7ff fe56 	bl	801a338 <etharp_find_entry>
 801a68c:	4603      	mov	r3, r0
 801a68e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a690:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a694:	2b00      	cmp	r3, #0
 801a696:	da02      	bge.n	801a69e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a698:	8afb      	ldrh	r3, [r7, #22]
 801a69a:	b25b      	sxtb	r3, r3
 801a69c:	e05d      	b.n	801a75a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a69e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6a2:	4933      	ldr	r1, [pc, #204]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a6a4:	4613      	mov	r3, r2
 801a6a6:	005b      	lsls	r3, r3, #1
 801a6a8:	4413      	add	r3, r2
 801a6aa:	00db      	lsls	r3, r3, #3
 801a6ac:	440b      	add	r3, r1
 801a6ae:	3314      	adds	r3, #20
 801a6b0:	2202      	movs	r2, #2
 801a6b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a6b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6b8:	492d      	ldr	r1, [pc, #180]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a6ba:	4613      	mov	r3, r2
 801a6bc:	005b      	lsls	r3, r3, #1
 801a6be:	4413      	add	r3, r2
 801a6c0:	00db      	lsls	r3, r3, #3
 801a6c2:	440b      	add	r3, r1
 801a6c4:	3308      	adds	r3, #8
 801a6c6:	68fa      	ldr	r2, [r7, #12]
 801a6c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a6ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	005b      	lsls	r3, r3, #1
 801a6d2:	4413      	add	r3, r2
 801a6d4:	00db      	lsls	r3, r3, #3
 801a6d6:	3308      	adds	r3, #8
 801a6d8:	4a25      	ldr	r2, [pc, #148]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a6da:	4413      	add	r3, r2
 801a6dc:	3304      	adds	r3, #4
 801a6de:	2206      	movs	r2, #6
 801a6e0:	6879      	ldr	r1, [r7, #4]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f003 f9dd 	bl	801daa2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a6e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6ec:	4920      	ldr	r1, [pc, #128]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	005b      	lsls	r3, r3, #1
 801a6f2:	4413      	add	r3, r2
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	440b      	add	r3, r1
 801a6f8:	3312      	adds	r3, #18
 801a6fa:	2200      	movs	r2, #0
 801a6fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a6fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a702:	491b      	ldr	r1, [pc, #108]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a704:	4613      	mov	r3, r2
 801a706:	005b      	lsls	r3, r3, #1
 801a708:	4413      	add	r3, r2
 801a70a:	00db      	lsls	r3, r3, #3
 801a70c:	440b      	add	r3, r1
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	2b00      	cmp	r3, #0
 801a712:	d021      	beq.n	801a758 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a718:	4915      	ldr	r1, [pc, #84]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a71a:	4613      	mov	r3, r2
 801a71c:	005b      	lsls	r3, r3, #1
 801a71e:	4413      	add	r3, r2
 801a720:	00db      	lsls	r3, r3, #3
 801a722:	440b      	add	r3, r1
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a728:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a72c:	4910      	ldr	r1, [pc, #64]	@ (801a770 <etharp_update_arp_entry+0x148>)
 801a72e:	4613      	mov	r3, r2
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	4413      	add	r3, r2
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	440b      	add	r3, r1
 801a738:	2200      	movs	r2, #0
 801a73a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801a742:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a746:	9300      	str	r3, [sp, #0]
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	6939      	ldr	r1, [r7, #16]
 801a74c:	68f8      	ldr	r0, [r7, #12]
 801a74e:	f001 fff5 	bl	801c73c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a752:	6938      	ldr	r0, [r7, #16]
 801a754:	f7f8 ff3a 	bl	80135cc <pbuf_free>
  }
  return ERR_OK;
 801a758:	2300      	movs	r3, #0
}
 801a75a:	4618      	mov	r0, r3
 801a75c:	3718      	adds	r7, #24
 801a75e:	46bd      	mov	sp, r7
 801a760:	bd80      	pop	{r7, pc}
 801a762:	bf00      	nop
 801a764:	0802292c 	.word	0x0802292c
 801a768:	08022a24 	.word	0x08022a24
 801a76c:	080229a4 	.word	0x080229a4
 801a770:	2000ca10 	.word	0x2000ca10

0801a774 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a774:	b5b0      	push	{r4, r5, r7, lr}
 801a776:	b08a      	sub	sp, #40	@ 0x28
 801a778:	af04      	add	r7, sp, #16
 801a77a:	6078      	str	r0, [r7, #4]
 801a77c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a77e:	683b      	ldr	r3, [r7, #0]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d107      	bne.n	801a794 <etharp_input+0x20>
 801a784:	4b3d      	ldr	r3, [pc, #244]	@ (801a87c <etharp_input+0x108>)
 801a786:	f240 228a 	movw	r2, #650	@ 0x28a
 801a78a:	493d      	ldr	r1, [pc, #244]	@ (801a880 <etharp_input+0x10c>)
 801a78c:	483d      	ldr	r0, [pc, #244]	@ (801a884 <etharp_input+0x110>)
 801a78e:	f002 ffd5 	bl	801d73c <iprintf>
 801a792:	e06f      	b.n	801a874 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	685b      	ldr	r3, [r3, #4]
 801a798:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a79a:	693b      	ldr	r3, [r7, #16]
 801a79c:	881b      	ldrh	r3, [r3, #0]
 801a79e:	b29b      	uxth	r3, r3
 801a7a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a7a4:	d10c      	bne.n	801a7c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7a6:	693b      	ldr	r3, [r7, #16]
 801a7a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a7aa:	2b06      	cmp	r3, #6
 801a7ac:	d108      	bne.n	801a7c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7ae:	693b      	ldr	r3, [r7, #16]
 801a7b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7b2:	2b04      	cmp	r3, #4
 801a7b4:	d104      	bne.n	801a7c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	885b      	ldrh	r3, [r3, #2]
 801a7ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7bc:	2b08      	cmp	r3, #8
 801a7be:	d003      	beq.n	801a7c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a7c0:	6878      	ldr	r0, [r7, #4]
 801a7c2:	f7f8 ff03 	bl	80135cc <pbuf_free>
    return;
 801a7c6:	e055      	b.n	801a874 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a7c8:	693b      	ldr	r3, [r7, #16]
 801a7ca:	330e      	adds	r3, #14
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a7d0:	693b      	ldr	r3, [r7, #16]
 801a7d2:	3318      	adds	r3, #24
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a7d8:	683b      	ldr	r3, [r7, #0]
 801a7da:	3304      	adds	r3, #4
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d102      	bne.n	801a7e8 <etharp_input+0x74>
    for_us = 0;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	75fb      	strb	r3, [r7, #23]
 801a7e6:	e009      	b.n	801a7fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a7e8:	68ba      	ldr	r2, [r7, #8]
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	3304      	adds	r3, #4
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	429a      	cmp	r2, r3
 801a7f2:	bf0c      	ite	eq
 801a7f4:	2301      	moveq	r3, #1
 801a7f6:	2300      	movne	r3, #0
 801a7f8:	b2db      	uxtb	r3, r3
 801a7fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a7fc:	693b      	ldr	r3, [r7, #16]
 801a7fe:	f103 0208 	add.w	r2, r3, #8
 801a802:	7dfb      	ldrb	r3, [r7, #23]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d001      	beq.n	801a80c <etharp_input+0x98>
 801a808:	2301      	movs	r3, #1
 801a80a:	e000      	b.n	801a80e <etharp_input+0x9a>
 801a80c:	2302      	movs	r3, #2
 801a80e:	f107 010c 	add.w	r1, r7, #12
 801a812:	6838      	ldr	r0, [r7, #0]
 801a814:	f7ff ff08 	bl	801a628 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a818:	693b      	ldr	r3, [r7, #16]
 801a81a:	88db      	ldrh	r3, [r3, #6]
 801a81c:	b29b      	uxth	r3, r3
 801a81e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a822:	d003      	beq.n	801a82c <etharp_input+0xb8>
 801a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a828:	d01e      	beq.n	801a868 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a82a:	e020      	b.n	801a86e <etharp_input+0xfa>
      if (for_us) {
 801a82c:	7dfb      	ldrb	r3, [r7, #23]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d01c      	beq.n	801a86c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a832:	683b      	ldr	r3, [r7, #0]
 801a834:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801a838:	693b      	ldr	r3, [r7, #16]
 801a83a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a83e:	683b      	ldr	r3, [r7, #0]
 801a840:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a848:	693a      	ldr	r2, [r7, #16]
 801a84a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a84c:	2102      	movs	r1, #2
 801a84e:	9103      	str	r1, [sp, #12]
 801a850:	f107 010c 	add.w	r1, r7, #12
 801a854:	9102      	str	r1, [sp, #8]
 801a856:	9201      	str	r2, [sp, #4]
 801a858:	9300      	str	r3, [sp, #0]
 801a85a:	462b      	mov	r3, r5
 801a85c:	4622      	mov	r2, r4
 801a85e:	4601      	mov	r1, r0
 801a860:	6838      	ldr	r0, [r7, #0]
 801a862:	f000 faeb 	bl	801ae3c <etharp_raw>
      break;
 801a866:	e001      	b.n	801a86c <etharp_input+0xf8>
      break;
 801a868:	bf00      	nop
 801a86a:	e000      	b.n	801a86e <etharp_input+0xfa>
      break;
 801a86c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a86e:	6878      	ldr	r0, [r7, #4]
 801a870:	f7f8 feac 	bl	80135cc <pbuf_free>
}
 801a874:	3718      	adds	r7, #24
 801a876:	46bd      	mov	sp, r7
 801a878:	bdb0      	pop	{r4, r5, r7, pc}
 801a87a:	bf00      	nop
 801a87c:	0802292c 	.word	0x0802292c
 801a880:	08022a7c 	.word	0x08022a7c
 801a884:	080229a4 	.word	0x080229a4

0801a888 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b086      	sub	sp, #24
 801a88c:	af02      	add	r7, sp, #8
 801a88e:	60f8      	str	r0, [r7, #12]
 801a890:	60b9      	str	r1, [r7, #8]
 801a892:	4613      	mov	r3, r2
 801a894:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a896:	79fa      	ldrb	r2, [r7, #7]
 801a898:	4944      	ldr	r1, [pc, #272]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a89a:	4613      	mov	r3, r2
 801a89c:	005b      	lsls	r3, r3, #1
 801a89e:	4413      	add	r3, r2
 801a8a0:	00db      	lsls	r3, r3, #3
 801a8a2:	440b      	add	r3, r1
 801a8a4:	3314      	adds	r3, #20
 801a8a6:	781b      	ldrb	r3, [r3, #0]
 801a8a8:	2b01      	cmp	r3, #1
 801a8aa:	d806      	bhi.n	801a8ba <etharp_output_to_arp_index+0x32>
 801a8ac:	4b40      	ldr	r3, [pc, #256]	@ (801a9b0 <etharp_output_to_arp_index+0x128>)
 801a8ae:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a8b2:	4940      	ldr	r1, [pc, #256]	@ (801a9b4 <etharp_output_to_arp_index+0x12c>)
 801a8b4:	4840      	ldr	r0, [pc, #256]	@ (801a9b8 <etharp_output_to_arp_index+0x130>)
 801a8b6:	f002 ff41 	bl	801d73c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a8ba:	79fa      	ldrb	r2, [r7, #7]
 801a8bc:	493b      	ldr	r1, [pc, #236]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a8be:	4613      	mov	r3, r2
 801a8c0:	005b      	lsls	r3, r3, #1
 801a8c2:	4413      	add	r3, r2
 801a8c4:	00db      	lsls	r3, r3, #3
 801a8c6:	440b      	add	r3, r1
 801a8c8:	3314      	adds	r3, #20
 801a8ca:	781b      	ldrb	r3, [r3, #0]
 801a8cc:	2b02      	cmp	r3, #2
 801a8ce:	d153      	bne.n	801a978 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a8d0:	79fa      	ldrb	r2, [r7, #7]
 801a8d2:	4936      	ldr	r1, [pc, #216]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a8d4:	4613      	mov	r3, r2
 801a8d6:	005b      	lsls	r3, r3, #1
 801a8d8:	4413      	add	r3, r2
 801a8da:	00db      	lsls	r3, r3, #3
 801a8dc:	440b      	add	r3, r1
 801a8de:	3312      	adds	r3, #18
 801a8e0:	881b      	ldrh	r3, [r3, #0]
 801a8e2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a8e6:	d919      	bls.n	801a91c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a8e8:	79fa      	ldrb	r2, [r7, #7]
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	005b      	lsls	r3, r3, #1
 801a8ee:	4413      	add	r3, r2
 801a8f0:	00db      	lsls	r3, r3, #3
 801a8f2:	4a2e      	ldr	r2, [pc, #184]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a8f4:	4413      	add	r3, r2
 801a8f6:	3304      	adds	r3, #4
 801a8f8:	4619      	mov	r1, r3
 801a8fa:	68f8      	ldr	r0, [r7, #12]
 801a8fc:	f000 fb4c 	bl	801af98 <etharp_request>
 801a900:	4603      	mov	r3, r0
 801a902:	2b00      	cmp	r3, #0
 801a904:	d138      	bne.n	801a978 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a906:	79fa      	ldrb	r2, [r7, #7]
 801a908:	4928      	ldr	r1, [pc, #160]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a90a:	4613      	mov	r3, r2
 801a90c:	005b      	lsls	r3, r3, #1
 801a90e:	4413      	add	r3, r2
 801a910:	00db      	lsls	r3, r3, #3
 801a912:	440b      	add	r3, r1
 801a914:	3314      	adds	r3, #20
 801a916:	2203      	movs	r2, #3
 801a918:	701a      	strb	r2, [r3, #0]
 801a91a:	e02d      	b.n	801a978 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a91c:	79fa      	ldrb	r2, [r7, #7]
 801a91e:	4923      	ldr	r1, [pc, #140]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a920:	4613      	mov	r3, r2
 801a922:	005b      	lsls	r3, r3, #1
 801a924:	4413      	add	r3, r2
 801a926:	00db      	lsls	r3, r3, #3
 801a928:	440b      	add	r3, r1
 801a92a:	3312      	adds	r3, #18
 801a92c:	881b      	ldrh	r3, [r3, #0]
 801a92e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801a932:	d321      	bcc.n	801a978 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a934:	79fa      	ldrb	r2, [r7, #7]
 801a936:	4613      	mov	r3, r2
 801a938:	005b      	lsls	r3, r3, #1
 801a93a:	4413      	add	r3, r2
 801a93c:	00db      	lsls	r3, r3, #3
 801a93e:	4a1b      	ldr	r2, [pc, #108]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a940:	4413      	add	r3, r2
 801a942:	1d19      	adds	r1, r3, #4
 801a944:	79fa      	ldrb	r2, [r7, #7]
 801a946:	4613      	mov	r3, r2
 801a948:	005b      	lsls	r3, r3, #1
 801a94a:	4413      	add	r3, r2
 801a94c:	00db      	lsls	r3, r3, #3
 801a94e:	3308      	adds	r3, #8
 801a950:	4a16      	ldr	r2, [pc, #88]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a952:	4413      	add	r3, r2
 801a954:	3304      	adds	r3, #4
 801a956:	461a      	mov	r2, r3
 801a958:	68f8      	ldr	r0, [r7, #12]
 801a95a:	f000 fafb 	bl	801af54 <etharp_request_dst>
 801a95e:	4603      	mov	r3, r0
 801a960:	2b00      	cmp	r3, #0
 801a962:	d109      	bne.n	801a978 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a964:	79fa      	ldrb	r2, [r7, #7]
 801a966:	4911      	ldr	r1, [pc, #68]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a968:	4613      	mov	r3, r2
 801a96a:	005b      	lsls	r3, r3, #1
 801a96c:	4413      	add	r3, r2
 801a96e:	00db      	lsls	r3, r3, #3
 801a970:	440b      	add	r3, r1
 801a972:	3314      	adds	r3, #20
 801a974:	2203      	movs	r2, #3
 801a976:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801a97e:	79fa      	ldrb	r2, [r7, #7]
 801a980:	4613      	mov	r3, r2
 801a982:	005b      	lsls	r3, r3, #1
 801a984:	4413      	add	r3, r2
 801a986:	00db      	lsls	r3, r3, #3
 801a988:	3308      	adds	r3, #8
 801a98a:	4a08      	ldr	r2, [pc, #32]	@ (801a9ac <etharp_output_to_arp_index+0x124>)
 801a98c:	4413      	add	r3, r2
 801a98e:	3304      	adds	r3, #4
 801a990:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a994:	9200      	str	r2, [sp, #0]
 801a996:	460a      	mov	r2, r1
 801a998:	68b9      	ldr	r1, [r7, #8]
 801a99a:	68f8      	ldr	r0, [r7, #12]
 801a99c:	f001 fece 	bl	801c73c <ethernet_output>
 801a9a0:	4603      	mov	r3, r0
}
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3710      	adds	r7, #16
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd80      	pop	{r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	2000ca10 	.word	0x2000ca10
 801a9b0:	0802292c 	.word	0x0802292c
 801a9b4:	08022a9c 	.word	0x08022a9c
 801a9b8:	080229a4 	.word	0x080229a4

0801a9bc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b08a      	sub	sp, #40	@ 0x28
 801a9c0:	af02      	add	r7, sp, #8
 801a9c2:	60f8      	str	r0, [r7, #12]
 801a9c4:	60b9      	str	r1, [r7, #8]
 801a9c6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d106      	bne.n	801a9e0 <etharp_output+0x24>
 801a9d2:	4b73      	ldr	r3, [pc, #460]	@ (801aba0 <etharp_output+0x1e4>)
 801a9d4:	f240 321e 	movw	r2, #798	@ 0x31e
 801a9d8:	4972      	ldr	r1, [pc, #456]	@ (801aba4 <etharp_output+0x1e8>)
 801a9da:	4873      	ldr	r0, [pc, #460]	@ (801aba8 <etharp_output+0x1ec>)
 801a9dc:	f002 feae 	bl	801d73c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d106      	bne.n	801a9f4 <etharp_output+0x38>
 801a9e6:	4b6e      	ldr	r3, [pc, #440]	@ (801aba0 <etharp_output+0x1e4>)
 801a9e8:	f240 321f 	movw	r2, #799	@ 0x31f
 801a9ec:	496f      	ldr	r1, [pc, #444]	@ (801abac <etharp_output+0x1f0>)
 801a9ee:	486e      	ldr	r0, [pc, #440]	@ (801aba8 <etharp_output+0x1ec>)
 801a9f0:	f002 fea4 	bl	801d73c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d106      	bne.n	801aa08 <etharp_output+0x4c>
 801a9fa:	4b69      	ldr	r3, [pc, #420]	@ (801aba0 <etharp_output+0x1e4>)
 801a9fc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801aa00:	496b      	ldr	r1, [pc, #428]	@ (801abb0 <etharp_output+0x1f4>)
 801aa02:	4869      	ldr	r0, [pc, #420]	@ (801aba8 <etharp_output+0x1ec>)
 801aa04:	f002 fe9a 	bl	801d73c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	68f9      	ldr	r1, [r7, #12]
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f000 fef6 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801aa14:	4603      	mov	r3, r0
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d002      	beq.n	801aa20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aa1a:	4b66      	ldr	r3, [pc, #408]	@ (801abb4 <etharp_output+0x1f8>)
 801aa1c:	61fb      	str	r3, [r7, #28]
 801aa1e:	e0af      	b.n	801ab80 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801aa28:	2be0      	cmp	r3, #224	@ 0xe0
 801aa2a:	d118      	bne.n	801aa5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aa2c:	2301      	movs	r3, #1
 801aa2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aa30:	2300      	movs	r3, #0
 801aa32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aa34:	235e      	movs	r3, #94	@ 0x5e
 801aa36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	3301      	adds	r3, #1
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801aa42:	b2db      	uxtb	r3, r3
 801aa44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	3302      	adds	r3, #2
 801aa4a:	781b      	ldrb	r3, [r3, #0]
 801aa4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	3303      	adds	r3, #3
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa56:	f107 0310 	add.w	r3, r7, #16
 801aa5a:	61fb      	str	r3, [r7, #28]
 801aa5c:	e090      	b.n	801ab80 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	681a      	ldr	r2, [r3, #0]
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	3304      	adds	r3, #4
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	405a      	eors	r2, r3
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	3308      	adds	r3, #8
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	4013      	ands	r3, r2
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d012      	beq.n	801aa9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa7c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801aa80:	4293      	cmp	r3, r2
 801aa82:	d00b      	beq.n	801aa9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	330c      	adds	r3, #12
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d003      	beq.n	801aa96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	330c      	adds	r3, #12
 801aa92:	61bb      	str	r3, [r7, #24]
 801aa94:	e002      	b.n	801aa9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aa96:	f06f 0303 	mvn.w	r3, #3
 801aa9a:	e07d      	b.n	801ab98 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aa9c:	4b46      	ldr	r3, [pc, #280]	@ (801abb8 <etharp_output+0x1fc>)
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	4619      	mov	r1, r3
 801aaa2:	4a46      	ldr	r2, [pc, #280]	@ (801abbc <etharp_output+0x200>)
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	005b      	lsls	r3, r3, #1
 801aaa8:	440b      	add	r3, r1
 801aaaa:	00db      	lsls	r3, r3, #3
 801aaac:	4413      	add	r3, r2
 801aaae:	3314      	adds	r3, #20
 801aab0:	781b      	ldrb	r3, [r3, #0]
 801aab2:	2b01      	cmp	r3, #1
 801aab4:	d925      	bls.n	801ab02 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aab6:	4b40      	ldr	r3, [pc, #256]	@ (801abb8 <etharp_output+0x1fc>)
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	4619      	mov	r1, r3
 801aabc:	4a3f      	ldr	r2, [pc, #252]	@ (801abbc <etharp_output+0x200>)
 801aabe:	460b      	mov	r3, r1
 801aac0:	005b      	lsls	r3, r3, #1
 801aac2:	440b      	add	r3, r1
 801aac4:	00db      	lsls	r3, r3, #3
 801aac6:	4413      	add	r3, r2
 801aac8:	3308      	adds	r3, #8
 801aaca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aacc:	68fa      	ldr	r2, [r7, #12]
 801aace:	429a      	cmp	r2, r3
 801aad0:	d117      	bne.n	801ab02 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aad2:	69bb      	ldr	r3, [r7, #24]
 801aad4:	681a      	ldr	r2, [r3, #0]
 801aad6:	4b38      	ldr	r3, [pc, #224]	@ (801abb8 <etharp_output+0x1fc>)
 801aad8:	781b      	ldrb	r3, [r3, #0]
 801aada:	4618      	mov	r0, r3
 801aadc:	4937      	ldr	r1, [pc, #220]	@ (801abbc <etharp_output+0x200>)
 801aade:	4603      	mov	r3, r0
 801aae0:	005b      	lsls	r3, r3, #1
 801aae2:	4403      	add	r3, r0
 801aae4:	00db      	lsls	r3, r3, #3
 801aae6:	440b      	add	r3, r1
 801aae8:	3304      	adds	r3, #4
 801aaea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aaec:	429a      	cmp	r2, r3
 801aaee:	d108      	bne.n	801ab02 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aaf0:	4b31      	ldr	r3, [pc, #196]	@ (801abb8 <etharp_output+0x1fc>)
 801aaf2:	781b      	ldrb	r3, [r3, #0]
 801aaf4:	461a      	mov	r2, r3
 801aaf6:	68b9      	ldr	r1, [r7, #8]
 801aaf8:	68f8      	ldr	r0, [r7, #12]
 801aafa:	f7ff fec5 	bl	801a888 <etharp_output_to_arp_index>
 801aafe:	4603      	mov	r3, r0
 801ab00:	e04a      	b.n	801ab98 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab02:	2300      	movs	r3, #0
 801ab04:	75fb      	strb	r3, [r7, #23]
 801ab06:	e031      	b.n	801ab6c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab08:	7dfa      	ldrb	r2, [r7, #23]
 801ab0a:	492c      	ldr	r1, [pc, #176]	@ (801abbc <etharp_output+0x200>)
 801ab0c:	4613      	mov	r3, r2
 801ab0e:	005b      	lsls	r3, r3, #1
 801ab10:	4413      	add	r3, r2
 801ab12:	00db      	lsls	r3, r3, #3
 801ab14:	440b      	add	r3, r1
 801ab16:	3314      	adds	r3, #20
 801ab18:	781b      	ldrb	r3, [r3, #0]
 801ab1a:	2b01      	cmp	r3, #1
 801ab1c:	d923      	bls.n	801ab66 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ab1e:	7dfa      	ldrb	r2, [r7, #23]
 801ab20:	4926      	ldr	r1, [pc, #152]	@ (801abbc <etharp_output+0x200>)
 801ab22:	4613      	mov	r3, r2
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4413      	add	r3, r2
 801ab28:	00db      	lsls	r3, r3, #3
 801ab2a:	440b      	add	r3, r1
 801ab2c:	3308      	adds	r3, #8
 801ab2e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab30:	68fa      	ldr	r2, [r7, #12]
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d117      	bne.n	801ab66 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ab36:	69bb      	ldr	r3, [r7, #24]
 801ab38:	6819      	ldr	r1, [r3, #0]
 801ab3a:	7dfa      	ldrb	r2, [r7, #23]
 801ab3c:	481f      	ldr	r0, [pc, #124]	@ (801abbc <etharp_output+0x200>)
 801ab3e:	4613      	mov	r3, r2
 801ab40:	005b      	lsls	r3, r3, #1
 801ab42:	4413      	add	r3, r2
 801ab44:	00db      	lsls	r3, r3, #3
 801ab46:	4403      	add	r3, r0
 801ab48:	3304      	adds	r3, #4
 801ab4a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab4c:	4299      	cmp	r1, r3
 801ab4e:	d10a      	bne.n	801ab66 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab50:	4a19      	ldr	r2, [pc, #100]	@ (801abb8 <etharp_output+0x1fc>)
 801ab52:	7dfb      	ldrb	r3, [r7, #23]
 801ab54:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab56:	7dfb      	ldrb	r3, [r7, #23]
 801ab58:	461a      	mov	r2, r3
 801ab5a:	68b9      	ldr	r1, [r7, #8]
 801ab5c:	68f8      	ldr	r0, [r7, #12]
 801ab5e:	f7ff fe93 	bl	801a888 <etharp_output_to_arp_index>
 801ab62:	4603      	mov	r3, r0
 801ab64:	e018      	b.n	801ab98 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab66:	7dfb      	ldrb	r3, [r7, #23]
 801ab68:	3301      	adds	r3, #1
 801ab6a:	75fb      	strb	r3, [r7, #23]
 801ab6c:	7dfb      	ldrb	r3, [r7, #23]
 801ab6e:	2b09      	cmp	r3, #9
 801ab70:	d9ca      	bls.n	801ab08 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ab72:	68ba      	ldr	r2, [r7, #8]
 801ab74:	69b9      	ldr	r1, [r7, #24]
 801ab76:	68f8      	ldr	r0, [r7, #12]
 801ab78:	f000 f822 	bl	801abc0 <etharp_query>
 801ab7c:	4603      	mov	r3, r0
 801ab7e:	e00b      	b.n	801ab98 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ab80:	68fb      	ldr	r3, [r7, #12]
 801ab82:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ab86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ab8a:	9300      	str	r3, [sp, #0]
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	68b9      	ldr	r1, [r7, #8]
 801ab90:	68f8      	ldr	r0, [r7, #12]
 801ab92:	f001 fdd3 	bl	801c73c <ethernet_output>
 801ab96:	4603      	mov	r3, r0
}
 801ab98:	4618      	mov	r0, r3
 801ab9a:	3720      	adds	r7, #32
 801ab9c:	46bd      	mov	sp, r7
 801ab9e:	bd80      	pop	{r7, pc}
 801aba0:	0802292c 	.word	0x0802292c
 801aba4:	08022a7c 	.word	0x08022a7c
 801aba8:	080229a4 	.word	0x080229a4
 801abac:	08022acc 	.word	0x08022acc
 801abb0:	08022a6c 	.word	0x08022a6c
 801abb4:	08023178 	.word	0x08023178
 801abb8:	2000cb00 	.word	0x2000cb00
 801abbc:	2000ca10 	.word	0x2000ca10

0801abc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b08c      	sub	sp, #48	@ 0x30
 801abc4:	af02      	add	r7, sp, #8
 801abc6:	60f8      	str	r0, [r7, #12]
 801abc8:	60b9      	str	r1, [r7, #8]
 801abca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	3326      	adds	r3, #38	@ 0x26
 801abd0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801abd2:	23ff      	movs	r3, #255	@ 0xff
 801abd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801abd8:	2300      	movs	r3, #0
 801abda:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abdc:	68bb      	ldr	r3, [r7, #8]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	68f9      	ldr	r1, [r7, #12]
 801abe2:	4618      	mov	r0, r3
 801abe4:	f000 fe0c 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801abe8:	4603      	mov	r3, r0
 801abea:	2b00      	cmp	r3, #0
 801abec:	d10c      	bne.n	801ac08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abee:	68bb      	ldr	r3, [r7, #8]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abf6:	2be0      	cmp	r3, #224	@ 0xe0
 801abf8:	d006      	beq.n	801ac08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d003      	beq.n	801ac08 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ac00:	68bb      	ldr	r3, [r7, #8]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d102      	bne.n	801ac0e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ac08:	f06f 030f 	mvn.w	r3, #15
 801ac0c:	e101      	b.n	801ae12 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ac0e:	68fa      	ldr	r2, [r7, #12]
 801ac10:	2101      	movs	r1, #1
 801ac12:	68b8      	ldr	r0, [r7, #8]
 801ac14:	f7ff fb90 	bl	801a338 <etharp_find_entry>
 801ac18:	4603      	mov	r3, r0
 801ac1a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ac1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	da02      	bge.n	801ac2a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ac24:	8a7b      	ldrh	r3, [r7, #18]
 801ac26:	b25b      	sxtb	r3, r3
 801ac28:	e0f3      	b.n	801ae12 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ac2a:	8a7b      	ldrh	r3, [r7, #18]
 801ac2c:	2b7e      	cmp	r3, #126	@ 0x7e
 801ac2e:	d906      	bls.n	801ac3e <etharp_query+0x7e>
 801ac30:	4b7a      	ldr	r3, [pc, #488]	@ (801ae1c <etharp_query+0x25c>)
 801ac32:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ac36:	497a      	ldr	r1, [pc, #488]	@ (801ae20 <etharp_query+0x260>)
 801ac38:	487a      	ldr	r0, [pc, #488]	@ (801ae24 <etharp_query+0x264>)
 801ac3a:	f002 fd7f 	bl	801d73c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac3e:	8a7b      	ldrh	r3, [r7, #18]
 801ac40:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac42:	7c7a      	ldrb	r2, [r7, #17]
 801ac44:	4978      	ldr	r1, [pc, #480]	@ (801ae28 <etharp_query+0x268>)
 801ac46:	4613      	mov	r3, r2
 801ac48:	005b      	lsls	r3, r3, #1
 801ac4a:	4413      	add	r3, r2
 801ac4c:	00db      	lsls	r3, r3, #3
 801ac4e:	440b      	add	r3, r1
 801ac50:	3314      	adds	r3, #20
 801ac52:	781b      	ldrb	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d115      	bne.n	801ac84 <etharp_query+0xc4>
    is_new_entry = 1;
 801ac58:	2301      	movs	r3, #1
 801ac5a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac5c:	7c7a      	ldrb	r2, [r7, #17]
 801ac5e:	4972      	ldr	r1, [pc, #456]	@ (801ae28 <etharp_query+0x268>)
 801ac60:	4613      	mov	r3, r2
 801ac62:	005b      	lsls	r3, r3, #1
 801ac64:	4413      	add	r3, r2
 801ac66:	00db      	lsls	r3, r3, #3
 801ac68:	440b      	add	r3, r1
 801ac6a:	3314      	adds	r3, #20
 801ac6c:	2201      	movs	r2, #1
 801ac6e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ac70:	7c7a      	ldrb	r2, [r7, #17]
 801ac72:	496d      	ldr	r1, [pc, #436]	@ (801ae28 <etharp_query+0x268>)
 801ac74:	4613      	mov	r3, r2
 801ac76:	005b      	lsls	r3, r3, #1
 801ac78:	4413      	add	r3, r2
 801ac7a:	00db      	lsls	r3, r3, #3
 801ac7c:	440b      	add	r3, r1
 801ac7e:	3308      	adds	r3, #8
 801ac80:	68fa      	ldr	r2, [r7, #12]
 801ac82:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ac84:	7c7a      	ldrb	r2, [r7, #17]
 801ac86:	4968      	ldr	r1, [pc, #416]	@ (801ae28 <etharp_query+0x268>)
 801ac88:	4613      	mov	r3, r2
 801ac8a:	005b      	lsls	r3, r3, #1
 801ac8c:	4413      	add	r3, r2
 801ac8e:	00db      	lsls	r3, r3, #3
 801ac90:	440b      	add	r3, r1
 801ac92:	3314      	adds	r3, #20
 801ac94:	781b      	ldrb	r3, [r3, #0]
 801ac96:	2b01      	cmp	r3, #1
 801ac98:	d011      	beq.n	801acbe <etharp_query+0xfe>
 801ac9a:	7c7a      	ldrb	r2, [r7, #17]
 801ac9c:	4962      	ldr	r1, [pc, #392]	@ (801ae28 <etharp_query+0x268>)
 801ac9e:	4613      	mov	r3, r2
 801aca0:	005b      	lsls	r3, r3, #1
 801aca2:	4413      	add	r3, r2
 801aca4:	00db      	lsls	r3, r3, #3
 801aca6:	440b      	add	r3, r1
 801aca8:	3314      	adds	r3, #20
 801acaa:	781b      	ldrb	r3, [r3, #0]
 801acac:	2b01      	cmp	r3, #1
 801acae:	d806      	bhi.n	801acbe <etharp_query+0xfe>
 801acb0:	4b5a      	ldr	r3, [pc, #360]	@ (801ae1c <etharp_query+0x25c>)
 801acb2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801acb6:	495d      	ldr	r1, [pc, #372]	@ (801ae2c <etharp_query+0x26c>)
 801acb8:	485a      	ldr	r0, [pc, #360]	@ (801ae24 <etharp_query+0x264>)
 801acba:	f002 fd3f 	bl	801d73c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801acbe:	6a3b      	ldr	r3, [r7, #32]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d102      	bne.n	801acca <etharp_query+0x10a>
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	2b00      	cmp	r3, #0
 801acc8:	d10c      	bne.n	801ace4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801acca:	68b9      	ldr	r1, [r7, #8]
 801accc:	68f8      	ldr	r0, [r7, #12]
 801acce:	f000 f963 	bl	801af98 <etharp_request>
 801acd2:	4603      	mov	r3, r0
 801acd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d102      	bne.n	801ace4 <etharp_query+0x124>
      return result;
 801acde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801ace2:	e096      	b.n	801ae12 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d106      	bne.n	801acf8 <etharp_query+0x138>
 801acea:	4b4c      	ldr	r3, [pc, #304]	@ (801ae1c <etharp_query+0x25c>)
 801acec:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801acf0:	494f      	ldr	r1, [pc, #316]	@ (801ae30 <etharp_query+0x270>)
 801acf2:	484c      	ldr	r0, [pc, #304]	@ (801ae24 <etharp_query+0x264>)
 801acf4:	f002 fd22 	bl	801d73c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801acf8:	7c7a      	ldrb	r2, [r7, #17]
 801acfa:	494b      	ldr	r1, [pc, #300]	@ (801ae28 <etharp_query+0x268>)
 801acfc:	4613      	mov	r3, r2
 801acfe:	005b      	lsls	r3, r3, #1
 801ad00:	4413      	add	r3, r2
 801ad02:	00db      	lsls	r3, r3, #3
 801ad04:	440b      	add	r3, r1
 801ad06:	3314      	adds	r3, #20
 801ad08:	781b      	ldrb	r3, [r3, #0]
 801ad0a:	2b01      	cmp	r3, #1
 801ad0c:	d917      	bls.n	801ad3e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ad0e:	4a49      	ldr	r2, [pc, #292]	@ (801ae34 <etharp_query+0x274>)
 801ad10:	7c7b      	ldrb	r3, [r7, #17]
 801ad12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ad14:	7c7a      	ldrb	r2, [r7, #17]
 801ad16:	4613      	mov	r3, r2
 801ad18:	005b      	lsls	r3, r3, #1
 801ad1a:	4413      	add	r3, r2
 801ad1c:	00db      	lsls	r3, r3, #3
 801ad1e:	3308      	adds	r3, #8
 801ad20:	4a41      	ldr	r2, [pc, #260]	@ (801ae28 <etharp_query+0x268>)
 801ad22:	4413      	add	r3, r2
 801ad24:	3304      	adds	r3, #4
 801ad26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ad2a:	9200      	str	r2, [sp, #0]
 801ad2c:	697a      	ldr	r2, [r7, #20]
 801ad2e:	6879      	ldr	r1, [r7, #4]
 801ad30:	68f8      	ldr	r0, [r7, #12]
 801ad32:	f001 fd03 	bl	801c73c <ethernet_output>
 801ad36:	4603      	mov	r3, r0
 801ad38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ad3c:	e067      	b.n	801ae0e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad3e:	7c7a      	ldrb	r2, [r7, #17]
 801ad40:	4939      	ldr	r1, [pc, #228]	@ (801ae28 <etharp_query+0x268>)
 801ad42:	4613      	mov	r3, r2
 801ad44:	005b      	lsls	r3, r3, #1
 801ad46:	4413      	add	r3, r2
 801ad48:	00db      	lsls	r3, r3, #3
 801ad4a:	440b      	add	r3, r1
 801ad4c:	3314      	adds	r3, #20
 801ad4e:	781b      	ldrb	r3, [r3, #0]
 801ad50:	2b01      	cmp	r3, #1
 801ad52:	d15c      	bne.n	801ae0e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad54:	2300      	movs	r3, #0
 801ad56:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad5c:	e01c      	b.n	801ad98 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad5e:	69fb      	ldr	r3, [r7, #28]
 801ad60:	895a      	ldrh	r2, [r3, #10]
 801ad62:	69fb      	ldr	r3, [r7, #28]
 801ad64:	891b      	ldrh	r3, [r3, #8]
 801ad66:	429a      	cmp	r2, r3
 801ad68:	d10a      	bne.n	801ad80 <etharp_query+0x1c0>
 801ad6a:	69fb      	ldr	r3, [r7, #28]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d006      	beq.n	801ad80 <etharp_query+0x1c0>
 801ad72:	4b2a      	ldr	r3, [pc, #168]	@ (801ae1c <etharp_query+0x25c>)
 801ad74:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ad78:	492f      	ldr	r1, [pc, #188]	@ (801ae38 <etharp_query+0x278>)
 801ad7a:	482a      	ldr	r0, [pc, #168]	@ (801ae24 <etharp_query+0x264>)
 801ad7c:	f002 fcde 	bl	801d73c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ad80:	69fb      	ldr	r3, [r7, #28]
 801ad82:	7b1b      	ldrb	r3, [r3, #12]
 801ad84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d002      	beq.n	801ad92 <etharp_query+0x1d2>
        copy_needed = 1;
 801ad8c:	2301      	movs	r3, #1
 801ad8e:	61bb      	str	r3, [r7, #24]
        break;
 801ad90:	e005      	b.n	801ad9e <etharp_query+0x1de>
      }
      p = p->next;
 801ad92:	69fb      	ldr	r3, [r7, #28]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad98:	69fb      	ldr	r3, [r7, #28]
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d1df      	bne.n	801ad5e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ad9e:	69bb      	ldr	r3, [r7, #24]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d007      	beq.n	801adb4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801adaa:	200e      	movs	r0, #14
 801adac:	f7f8 fe76 	bl	8013a9c <pbuf_clone>
 801adb0:	61f8      	str	r0, [r7, #28]
 801adb2:	e004      	b.n	801adbe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801adb8:	69f8      	ldr	r0, [r7, #28]
 801adba:	f7f8 fcad 	bl	8013718 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801adbe:	69fb      	ldr	r3, [r7, #28]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d021      	beq.n	801ae08 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801adc4:	7c7a      	ldrb	r2, [r7, #17]
 801adc6:	4918      	ldr	r1, [pc, #96]	@ (801ae28 <etharp_query+0x268>)
 801adc8:	4613      	mov	r3, r2
 801adca:	005b      	lsls	r3, r3, #1
 801adcc:	4413      	add	r3, r2
 801adce:	00db      	lsls	r3, r3, #3
 801add0:	440b      	add	r3, r1
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d00a      	beq.n	801adee <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801add8:	7c7a      	ldrb	r2, [r7, #17]
 801adda:	4913      	ldr	r1, [pc, #76]	@ (801ae28 <etharp_query+0x268>)
 801addc:	4613      	mov	r3, r2
 801adde:	005b      	lsls	r3, r3, #1
 801ade0:	4413      	add	r3, r2
 801ade2:	00db      	lsls	r3, r3, #3
 801ade4:	440b      	add	r3, r1
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	4618      	mov	r0, r3
 801adea:	f7f8 fbef 	bl	80135cc <pbuf_free>
      }
      arp_table[i].q = p;
 801adee:	7c7a      	ldrb	r2, [r7, #17]
 801adf0:	490d      	ldr	r1, [pc, #52]	@ (801ae28 <etharp_query+0x268>)
 801adf2:	4613      	mov	r3, r2
 801adf4:	005b      	lsls	r3, r3, #1
 801adf6:	4413      	add	r3, r2
 801adf8:	00db      	lsls	r3, r3, #3
 801adfa:	440b      	add	r3, r1
 801adfc:	69fa      	ldr	r2, [r7, #28]
 801adfe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ae00:	2300      	movs	r3, #0
 801ae02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae06:	e002      	b.n	801ae0e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ae08:	23ff      	movs	r3, #255	@ 0xff
 801ae0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ae0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3728      	adds	r7, #40	@ 0x28
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	0802292c 	.word	0x0802292c
 801ae20:	08022ad8 	.word	0x08022ad8
 801ae24:	080229a4 	.word	0x080229a4
 801ae28:	2000ca10 	.word	0x2000ca10
 801ae2c:	08022ae8 	.word	0x08022ae8
 801ae30:	08022acc 	.word	0x08022acc
 801ae34:	2000cb00 	.word	0x2000cb00
 801ae38:	08022b10 	.word	0x08022b10

0801ae3c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae3c:	b580      	push	{r7, lr}
 801ae3e:	b08a      	sub	sp, #40	@ 0x28
 801ae40:	af02      	add	r7, sp, #8
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
 801ae48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae4a:	2300      	movs	r3, #0
 801ae4c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae4e:	68fb      	ldr	r3, [r7, #12]
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d106      	bne.n	801ae62 <etharp_raw+0x26>
 801ae54:	4b3a      	ldr	r3, [pc, #232]	@ (801af40 <etharp_raw+0x104>)
 801ae56:	f240 4257 	movw	r2, #1111	@ 0x457
 801ae5a:	493a      	ldr	r1, [pc, #232]	@ (801af44 <etharp_raw+0x108>)
 801ae5c:	483a      	ldr	r0, [pc, #232]	@ (801af48 <etharp_raw+0x10c>)
 801ae5e:	f002 fc6d 	bl	801d73c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae66:	211c      	movs	r1, #28
 801ae68:	200e      	movs	r0, #14
 801ae6a:	f7f8 f8cb 	bl	8013004 <pbuf_alloc>
 801ae6e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ae70:	69bb      	ldr	r3, [r7, #24]
 801ae72:	2b00      	cmp	r3, #0
 801ae74:	d102      	bne.n	801ae7c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ae76:	f04f 33ff 	mov.w	r3, #4294967295
 801ae7a:	e05d      	b.n	801af38 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ae7c:	69bb      	ldr	r3, [r7, #24]
 801ae7e:	895b      	ldrh	r3, [r3, #10]
 801ae80:	2b1b      	cmp	r3, #27
 801ae82:	d806      	bhi.n	801ae92 <etharp_raw+0x56>
 801ae84:	4b2e      	ldr	r3, [pc, #184]	@ (801af40 <etharp_raw+0x104>)
 801ae86:	f240 4262 	movw	r2, #1122	@ 0x462
 801ae8a:	4930      	ldr	r1, [pc, #192]	@ (801af4c <etharp_raw+0x110>)
 801ae8c:	482e      	ldr	r0, [pc, #184]	@ (801af48 <etharp_raw+0x10c>)
 801ae8e:	f002 fc55 	bl	801d73c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ae92:	69bb      	ldr	r3, [r7, #24]
 801ae94:	685b      	ldr	r3, [r3, #4]
 801ae96:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801ae98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	f7f6 ffd6 	bl	8011e4c <lwip_htons>
 801aea0:	4603      	mov	r3, r0
 801aea2:	461a      	mov	r2, r3
 801aea4:	697b      	ldr	r3, [r7, #20]
 801aea6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801aeae:	2b06      	cmp	r3, #6
 801aeb0:	d006      	beq.n	801aec0 <etharp_raw+0x84>
 801aeb2:	4b23      	ldr	r3, [pc, #140]	@ (801af40 <etharp_raw+0x104>)
 801aeb4:	f240 4269 	movw	r2, #1129	@ 0x469
 801aeb8:	4925      	ldr	r1, [pc, #148]	@ (801af50 <etharp_raw+0x114>)
 801aeba:	4823      	ldr	r0, [pc, #140]	@ (801af48 <etharp_raw+0x10c>)
 801aebc:	f002 fc3e 	bl	801d73c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aec0:	697b      	ldr	r3, [r7, #20]
 801aec2:	3308      	adds	r3, #8
 801aec4:	2206      	movs	r2, #6
 801aec6:	6839      	ldr	r1, [r7, #0]
 801aec8:	4618      	mov	r0, r3
 801aeca:	f002 fdea 	bl	801daa2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aece:	697b      	ldr	r3, [r7, #20]
 801aed0:	3312      	adds	r3, #18
 801aed2:	2206      	movs	r2, #6
 801aed4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aed6:	4618      	mov	r0, r3
 801aed8:	f002 fde3 	bl	801daa2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aedc:	697b      	ldr	r3, [r7, #20]
 801aede:	330e      	adds	r3, #14
 801aee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aee2:	6812      	ldr	r2, [r2, #0]
 801aee4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	3318      	adds	r3, #24
 801aeea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aeec:	6812      	ldr	r2, [r2, #0]
 801aeee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	2200      	movs	r2, #0
 801aef4:	701a      	strb	r2, [r3, #0]
 801aef6:	2200      	movs	r2, #0
 801aef8:	f042 0201 	orr.w	r2, r2, #1
 801aefc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801aefe:	697b      	ldr	r3, [r7, #20]
 801af00:	2200      	movs	r2, #0
 801af02:	f042 0208 	orr.w	r2, r2, #8
 801af06:	709a      	strb	r2, [r3, #2]
 801af08:	2200      	movs	r2, #0
 801af0a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801af0c:	697b      	ldr	r3, [r7, #20]
 801af0e:	2206      	movs	r2, #6
 801af10:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801af12:	697b      	ldr	r3, [r7, #20]
 801af14:	2204      	movs	r2, #4
 801af16:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801af18:	f640 0306 	movw	r3, #2054	@ 0x806
 801af1c:	9300      	str	r3, [sp, #0]
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	68ba      	ldr	r2, [r7, #8]
 801af22:	69b9      	ldr	r1, [r7, #24]
 801af24:	68f8      	ldr	r0, [r7, #12]
 801af26:	f001 fc09 	bl	801c73c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801af2a:	69b8      	ldr	r0, [r7, #24]
 801af2c:	f7f8 fb4e 	bl	80135cc <pbuf_free>
  p = NULL;
 801af30:	2300      	movs	r3, #0
 801af32:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801af34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af38:	4618      	mov	r0, r3
 801af3a:	3720      	adds	r7, #32
 801af3c:	46bd      	mov	sp, r7
 801af3e:	bd80      	pop	{r7, pc}
 801af40:	0802292c 	.word	0x0802292c
 801af44:	08022a7c 	.word	0x08022a7c
 801af48:	080229a4 	.word	0x080229a4
 801af4c:	08022b2c 	.word	0x08022b2c
 801af50:	08022b60 	.word	0x08022b60

0801af54 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b088      	sub	sp, #32
 801af58:	af04      	add	r7, sp, #16
 801af5a:	60f8      	str	r0, [r7, #12]
 801af5c:	60b9      	str	r1, [r7, #8]
 801af5e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af60:	68fb      	ldr	r3, [r7, #12]
 801af62:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af66:	68fb      	ldr	r3, [r7, #12]
 801af68:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af70:	2201      	movs	r2, #1
 801af72:	9203      	str	r2, [sp, #12]
 801af74:	68ba      	ldr	r2, [r7, #8]
 801af76:	9202      	str	r2, [sp, #8]
 801af78:	4a06      	ldr	r2, [pc, #24]	@ (801af94 <etharp_request_dst+0x40>)
 801af7a:	9201      	str	r2, [sp, #4]
 801af7c:	9300      	str	r3, [sp, #0]
 801af7e:	4603      	mov	r3, r0
 801af80:	687a      	ldr	r2, [r7, #4]
 801af82:	68f8      	ldr	r0, [r7, #12]
 801af84:	f7ff ff5a 	bl	801ae3c <etharp_raw>
 801af88:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801af8a:	4618      	mov	r0, r3
 801af8c:	3710      	adds	r7, #16
 801af8e:	46bd      	mov	sp, r7
 801af90:	bd80      	pop	{r7, pc}
 801af92:	bf00      	nop
 801af94:	08023180 	.word	0x08023180

0801af98 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801af98:	b580      	push	{r7, lr}
 801af9a:	b082      	sub	sp, #8
 801af9c:	af00      	add	r7, sp, #0
 801af9e:	6078      	str	r0, [r7, #4]
 801afa0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801afa2:	4a05      	ldr	r2, [pc, #20]	@ (801afb8 <etharp_request+0x20>)
 801afa4:	6839      	ldr	r1, [r7, #0]
 801afa6:	6878      	ldr	r0, [r7, #4]
 801afa8:	f7ff ffd4 	bl	801af54 <etharp_request_dst>
 801afac:	4603      	mov	r3, r0
}
 801afae:	4618      	mov	r0, r3
 801afb0:	3708      	adds	r7, #8
 801afb2:	46bd      	mov	sp, r7
 801afb4:	bd80      	pop	{r7, pc}
 801afb6:	bf00      	nop
 801afb8:	08023178 	.word	0x08023178

0801afbc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b08e      	sub	sp, #56	@ 0x38
 801afc0:	af04      	add	r7, sp, #16
 801afc2:	6078      	str	r0, [r7, #4]
 801afc4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801afc6:	4b78      	ldr	r3, [pc, #480]	@ (801b1a8 <icmp_input+0x1ec>)
 801afc8:	689b      	ldr	r3, [r3, #8]
 801afca:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 801afcc:	6a3b      	ldr	r3, [r7, #32]
 801afce:	781b      	ldrb	r3, [r3, #0]
 801afd0:	f003 030f 	and.w	r3, r3, #15
 801afd4:	b2db      	uxtb	r3, r3
 801afd6:	009b      	lsls	r3, r3, #2
 801afd8:	b2db      	uxtb	r3, r3
 801afda:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 801afdc:	8bfb      	ldrh	r3, [r7, #30]
 801afde:	2b13      	cmp	r3, #19
 801afe0:	f240 80cf 	bls.w	801b182 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	895b      	ldrh	r3, [r3, #10]
 801afe8:	2b03      	cmp	r3, #3
 801afea:	f240 80cc 	bls.w	801b186 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	685b      	ldr	r3, [r3, #4]
 801aff2:	781b      	ldrb	r3, [r3, #0]
 801aff4:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801aff6:	7f7b      	ldrb	r3, [r7, #29]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	f000 80bb 	beq.w	801b174 <icmp_input+0x1b8>
 801affe:	2b08      	cmp	r3, #8
 801b000:	f040 80bb 	bne.w	801b17a <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b004:	4b69      	ldr	r3, [pc, #420]	@ (801b1ac <icmp_input+0x1f0>)
 801b006:	627b      	str	r3, [r7, #36]	@ 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b008:	4b67      	ldr	r3, [pc, #412]	@ (801b1a8 <icmp_input+0x1ec>)
 801b00a:	695b      	ldr	r3, [r3, #20]
 801b00c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b010:	2be0      	cmp	r3, #224	@ 0xe0
 801b012:	d102      	bne.n	801b01a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	3304      	adds	r3, #4
 801b018:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b01a:	4b63      	ldr	r3, [pc, #396]	@ (801b1a8 <icmp_input+0x1ec>)
 801b01c:	695b      	ldr	r3, [r3, #20]
 801b01e:	4a62      	ldr	r2, [pc, #392]	@ (801b1a8 <icmp_input+0x1ec>)
 801b020:	6812      	ldr	r2, [r2, #0]
 801b022:	4611      	mov	r1, r2
 801b024:	4618      	mov	r0, r3
 801b026:	f000 fbeb 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801b02a:	4603      	mov	r3, r0
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d002      	beq.n	801b036 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 801b030:	683b      	ldr	r3, [r7, #0]
 801b032:	3304      	adds	r3, #4
 801b034:	627b      	str	r3, [r7, #36]	@ 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	891b      	ldrh	r3, [r3, #8]
 801b03a:	2b07      	cmp	r3, #7
 801b03c:	f240 80a5 	bls.w	801b18a <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b040:	8bfb      	ldrh	r3, [r7, #30]
 801b042:	330e      	adds	r3, #14
 801b044:	4619      	mov	r1, r3
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f7f8 fa2a 	bl	80134a0 <pbuf_add_header>
 801b04c:	4603      	mov	r3, r0
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d04b      	beq.n	801b0ea <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	891a      	ldrh	r2, [r3, #8]
 801b056:	8bfb      	ldrh	r3, [r7, #30]
 801b058:	4413      	add	r3, r2
 801b05a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	891b      	ldrh	r3, [r3, #8]
 801b060:	8b7a      	ldrh	r2, [r7, #26]
 801b062:	429a      	cmp	r2, r3
 801b064:	f0c0 8096 	bcc.w	801b194 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b068:	8b7b      	ldrh	r3, [r7, #26]
 801b06a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b06e:	4619      	mov	r1, r3
 801b070:	200e      	movs	r0, #14
 801b072:	f7f7 ffc7 	bl	8013004 <pbuf_alloc>
 801b076:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b078:	697b      	ldr	r3, [r7, #20]
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	f000 808c 	beq.w	801b198 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b080:	697b      	ldr	r3, [r7, #20]
 801b082:	895b      	ldrh	r3, [r3, #10]
 801b084:	461a      	mov	r2, r3
 801b086:	8bfb      	ldrh	r3, [r7, #30]
 801b088:	3308      	adds	r3, #8
 801b08a:	429a      	cmp	r2, r3
 801b08c:	d203      	bcs.n	801b096 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b08e:	6978      	ldr	r0, [r7, #20]
 801b090:	f7f8 fa9c 	bl	80135cc <pbuf_free>
          goto icmperr;
 801b094:	e081      	b.n	801b19a <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b096:	697b      	ldr	r3, [r7, #20]
 801b098:	685b      	ldr	r3, [r3, #4]
 801b09a:	8bfa      	ldrh	r2, [r7, #30]
 801b09c:	6a39      	ldr	r1, [r7, #32]
 801b09e:	4618      	mov	r0, r3
 801b0a0:	f002 fcff 	bl	801daa2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b0a4:	8bfb      	ldrh	r3, [r7, #30]
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	6978      	ldr	r0, [r7, #20]
 801b0aa:	f7f8 fa09 	bl	80134c0 <pbuf_remove_header>
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d009      	beq.n	801b0c8 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b0b4:	4b3e      	ldr	r3, [pc, #248]	@ (801b1b0 <icmp_input+0x1f4>)
 801b0b6:	22b6      	movs	r2, #182	@ 0xb6
 801b0b8:	493e      	ldr	r1, [pc, #248]	@ (801b1b4 <icmp_input+0x1f8>)
 801b0ba:	483f      	ldr	r0, [pc, #252]	@ (801b1b8 <icmp_input+0x1fc>)
 801b0bc:	f002 fb3e 	bl	801d73c <iprintf>
          pbuf_free(r);
 801b0c0:	6978      	ldr	r0, [r7, #20]
 801b0c2:	f7f8 fa83 	bl	80135cc <pbuf_free>
          goto icmperr;
 801b0c6:	e068      	b.n	801b19a <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b0c8:	6879      	ldr	r1, [r7, #4]
 801b0ca:	6978      	ldr	r0, [r7, #20]
 801b0cc:	f7f8 fba2 	bl	8013814 <pbuf_copy>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d003      	beq.n	801b0de <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b0d6:	6978      	ldr	r0, [r7, #20]
 801b0d8:	f7f8 fa78 	bl	80135cc <pbuf_free>
          goto icmperr;
 801b0dc:	e05d      	b.n	801b19a <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 801b0de:	6878      	ldr	r0, [r7, #4]
 801b0e0:	f7f8 fa74 	bl	80135cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b0e4:	697b      	ldr	r3, [r7, #20]
 801b0e6:	607b      	str	r3, [r7, #4]
 801b0e8:	e00f      	b.n	801b10a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0ea:	8bfb      	ldrh	r3, [r7, #30]
 801b0ec:	330e      	adds	r3, #14
 801b0ee:	4619      	mov	r1, r3
 801b0f0:	6878      	ldr	r0, [r7, #4]
 801b0f2:	f7f8 f9e5 	bl	80134c0 <pbuf_remove_header>
 801b0f6:	4603      	mov	r3, r0
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	d006      	beq.n	801b10a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b0fc:	4b2c      	ldr	r3, [pc, #176]	@ (801b1b0 <icmp_input+0x1f4>)
 801b0fe:	22c7      	movs	r2, #199	@ 0xc7
 801b100:	492e      	ldr	r1, [pc, #184]	@ (801b1bc <icmp_input+0x200>)
 801b102:	482d      	ldr	r0, [pc, #180]	@ (801b1b8 <icmp_input+0x1fc>)
 801b104:	f002 fb1a 	bl	801d73c <iprintf>
          goto icmperr;
 801b108:	e047      	b.n	801b19a <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b110:	8bfb      	ldrh	r3, [r7, #30]
 801b112:	4619      	mov	r1, r3
 801b114:	6878      	ldr	r0, [r7, #4]
 801b116:	f7f8 f9c3 	bl	80134a0 <pbuf_add_header>
 801b11a:	4603      	mov	r3, r0
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d12b      	bne.n	801b178 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	685b      	ldr	r3, [r3, #4]
 801b124:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b128:	681a      	ldr	r2, [r3, #0]
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b12e:	4b1e      	ldr	r3, [pc, #120]	@ (801b1a8 <icmp_input+0x1ec>)
 801b130:	691a      	ldr	r2, [r3, #16]
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b136:	693b      	ldr	r3, [r7, #16]
 801b138:	2200      	movs	r2, #0
 801b13a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b13c:	693b      	ldr	r3, [r7, #16]
 801b13e:	2200      	movs	r2, #0
 801b140:	709a      	strb	r2, [r3, #2]
 801b142:	2200      	movs	r2, #0
 801b144:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	22ff      	movs	r2, #255	@ 0xff
 801b14a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	2200      	movs	r2, #0
 801b150:	729a      	strb	r2, [r3, #10]
 801b152:	2200      	movs	r2, #0
 801b154:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	9302      	str	r3, [sp, #8]
 801b15a:	2301      	movs	r3, #1
 801b15c:	9301      	str	r3, [sp, #4]
 801b15e:	2300      	movs	r3, #0
 801b160:	9300      	str	r3, [sp, #0]
 801b162:	23ff      	movs	r3, #255	@ 0xff
 801b164:	2200      	movs	r2, #0
 801b166:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b168:	6878      	ldr	r0, [r7, #4]
 801b16a:	f000 fa71 	bl	801b650 <ip4_output_if>
 801b16e:	4603      	mov	r3, r0
 801b170:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b172:	e001      	b.n	801b178 <icmp_input+0x1bc>
      break;
 801b174:	bf00      	nop
 801b176:	e000      	b.n	801b17a <icmp_input+0x1be>
      break;
 801b178:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b17a:	6878      	ldr	r0, [r7, #4]
 801b17c:	f7f8 fa26 	bl	80135cc <pbuf_free>
  return;
 801b180:	e00f      	b.n	801b1a2 <icmp_input+0x1e6>
    goto lenerr;
 801b182:	bf00      	nop
 801b184:	e002      	b.n	801b18c <icmp_input+0x1d0>
    goto lenerr;
 801b186:	bf00      	nop
 801b188:	e000      	b.n	801b18c <icmp_input+0x1d0>
        goto lenerr;
 801b18a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b18c:	6878      	ldr	r0, [r7, #4]
 801b18e:	f7f8 fa1d 	bl	80135cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b192:	e006      	b.n	801b1a2 <icmp_input+0x1e6>
          goto icmperr;
 801b194:	bf00      	nop
 801b196:	e000      	b.n	801b19a <icmp_input+0x1de>
          goto icmperr;
 801b198:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b19a:	6878      	ldr	r0, [r7, #4]
 801b19c:	f7f8 fa16 	bl	80135cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b1a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b1a2:	3728      	adds	r7, #40	@ 0x28
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}
 801b1a8:	2000925c 	.word	0x2000925c
 801b1ac:	20009270 	.word	0x20009270
 801b1b0:	08022ba4 	.word	0x08022ba4
 801b1b4:	08022bdc 	.word	0x08022bdc
 801b1b8:	08022c14 	.word	0x08022c14
 801b1bc:	08022c3c 	.word	0x08022c3c

0801b1c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b082      	sub	sp, #8
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	460b      	mov	r3, r1
 801b1ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b1cc:	78fb      	ldrb	r3, [r7, #3]
 801b1ce:	461a      	mov	r2, r3
 801b1d0:	2103      	movs	r1, #3
 801b1d2:	6878      	ldr	r0, [r7, #4]
 801b1d4:	f000 f814 	bl	801b200 <icmp_send_response>
}
 801b1d8:	bf00      	nop
 801b1da:	3708      	adds	r7, #8
 801b1dc:	46bd      	mov	sp, r7
 801b1de:	bd80      	pop	{r7, pc}

0801b1e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b1e0:	b580      	push	{r7, lr}
 801b1e2:	b082      	sub	sp, #8
 801b1e4:	af00      	add	r7, sp, #0
 801b1e6:	6078      	str	r0, [r7, #4]
 801b1e8:	460b      	mov	r3, r1
 801b1ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b1ec:	78fb      	ldrb	r3, [r7, #3]
 801b1ee:	461a      	mov	r2, r3
 801b1f0:	210b      	movs	r1, #11
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	f000 f804 	bl	801b200 <icmp_send_response>
}
 801b1f8:	bf00      	nop
 801b1fa:	3708      	adds	r7, #8
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	bd80      	pop	{r7, pc}

0801b200 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b200:	b580      	push	{r7, lr}
 801b202:	b08c      	sub	sp, #48	@ 0x30
 801b204:	af04      	add	r7, sp, #16
 801b206:	6078      	str	r0, [r7, #4]
 801b208:	460b      	mov	r3, r1
 801b20a:	70fb      	strb	r3, [r7, #3]
 801b20c:	4613      	mov	r3, r2
 801b20e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b210:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b214:	2124      	movs	r1, #36	@ 0x24
 801b216:	2022      	movs	r0, #34	@ 0x22
 801b218:	f7f7 fef4 	bl	8013004 <pbuf_alloc>
 801b21c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b21e:	69fb      	ldr	r3, [r7, #28]
 801b220:	2b00      	cmp	r3, #0
 801b222:	d04c      	beq.n	801b2be <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b224:	69fb      	ldr	r3, [r7, #28]
 801b226:	895b      	ldrh	r3, [r3, #10]
 801b228:	2b23      	cmp	r3, #35	@ 0x23
 801b22a:	d806      	bhi.n	801b23a <icmp_send_response+0x3a>
 801b22c:	4b26      	ldr	r3, [pc, #152]	@ (801b2c8 <icmp_send_response+0xc8>)
 801b22e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b232:	4926      	ldr	r1, [pc, #152]	@ (801b2cc <icmp_send_response+0xcc>)
 801b234:	4826      	ldr	r0, [pc, #152]	@ (801b2d0 <icmp_send_response+0xd0>)
 801b236:	f002 fa81 	bl	801d73c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	685b      	ldr	r3, [r3, #4]
 801b23e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b240:	69fb      	ldr	r3, [r7, #28]
 801b242:	685b      	ldr	r3, [r3, #4]
 801b244:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b246:	697b      	ldr	r3, [r7, #20]
 801b248:	78fa      	ldrb	r2, [r7, #3]
 801b24a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b24c:	697b      	ldr	r3, [r7, #20]
 801b24e:	78ba      	ldrb	r2, [r7, #2]
 801b250:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b252:	697b      	ldr	r3, [r7, #20]
 801b254:	2200      	movs	r2, #0
 801b256:	711a      	strb	r2, [r3, #4]
 801b258:	2200      	movs	r2, #0
 801b25a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b25c:	697b      	ldr	r3, [r7, #20]
 801b25e:	2200      	movs	r2, #0
 801b260:	719a      	strb	r2, [r3, #6]
 801b262:	2200      	movs	r2, #0
 801b264:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b266:	69fb      	ldr	r3, [r7, #28]
 801b268:	685b      	ldr	r3, [r3, #4]
 801b26a:	f103 0008 	add.w	r0, r3, #8
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	685b      	ldr	r3, [r3, #4]
 801b272:	221c      	movs	r2, #28
 801b274:	4619      	mov	r1, r3
 801b276:	f002 fc14 	bl	801daa2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b27a:	69bb      	ldr	r3, [r7, #24]
 801b27c:	68db      	ldr	r3, [r3, #12]
 801b27e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b280:	f107 030c 	add.w	r3, r7, #12
 801b284:	4618      	mov	r0, r3
 801b286:	f000 f825 	bl	801b2d4 <ip4_route>
 801b28a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b28c:	693b      	ldr	r3, [r7, #16]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d011      	beq.n	801b2b6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b292:	697b      	ldr	r3, [r7, #20]
 801b294:	2200      	movs	r2, #0
 801b296:	709a      	strb	r2, [r3, #2]
 801b298:	2200      	movs	r2, #0
 801b29a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b29c:	f107 020c 	add.w	r2, r7, #12
 801b2a0:	693b      	ldr	r3, [r7, #16]
 801b2a2:	9302      	str	r3, [sp, #8]
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	9301      	str	r3, [sp, #4]
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	9300      	str	r3, [sp, #0]
 801b2ac:	23ff      	movs	r3, #255	@ 0xff
 801b2ae:	2100      	movs	r1, #0
 801b2b0:	69f8      	ldr	r0, [r7, #28]
 801b2b2:	f000 f9cd 	bl	801b650 <ip4_output_if>
  }
  pbuf_free(q);
 801b2b6:	69f8      	ldr	r0, [r7, #28]
 801b2b8:	f7f8 f988 	bl	80135cc <pbuf_free>
 801b2bc:	e000      	b.n	801b2c0 <icmp_send_response+0xc0>
    return;
 801b2be:	bf00      	nop
}
 801b2c0:	3720      	adds	r7, #32
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	bd80      	pop	{r7, pc}
 801b2c6:	bf00      	nop
 801b2c8:	08022ba4 	.word	0x08022ba4
 801b2cc:	08022c70 	.word	0x08022c70
 801b2d0:	08022c14 	.word	0x08022c14

0801b2d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b2d4:	b480      	push	{r7}
 801b2d6:	b085      	sub	sp, #20
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b2dc:	4b33      	ldr	r3, [pc, #204]	@ (801b3ac <ip4_route+0xd8>)
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	60fb      	str	r3, [r7, #12]
 801b2e2:	e036      	b.n	801b352 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2ea:	f003 0301 	and.w	r3, r3, #1
 801b2ee:	b2db      	uxtb	r3, r3
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d02b      	beq.n	801b34c <ip4_route+0x78>
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b2fa:	089b      	lsrs	r3, r3, #2
 801b2fc:	f003 0301 	and.w	r3, r3, #1
 801b300:	b2db      	uxtb	r3, r3
 801b302:	2b00      	cmp	r3, #0
 801b304:	d022      	beq.n	801b34c <ip4_route+0x78>
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	3304      	adds	r3, #4
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d01d      	beq.n	801b34c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681a      	ldr	r2, [r3, #0]
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	3304      	adds	r3, #4
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	405a      	eors	r2, r3
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	3308      	adds	r3, #8
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	4013      	ands	r3, r2
 801b324:	2b00      	cmp	r3, #0
 801b326:	d101      	bne.n	801b32c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	e038      	b.n	801b39e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b332:	f003 0302 	and.w	r3, r3, #2
 801b336:	2b00      	cmp	r3, #0
 801b338:	d108      	bne.n	801b34c <ip4_route+0x78>
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	681a      	ldr	r2, [r3, #0]
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	330c      	adds	r3, #12
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	429a      	cmp	r2, r3
 801b346:	d101      	bne.n	801b34c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	e028      	b.n	801b39e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	60fb      	str	r3, [r7, #12]
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d1c5      	bne.n	801b2e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b358:	4b15      	ldr	r3, [pc, #84]	@ (801b3b0 <ip4_route+0xdc>)
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d01a      	beq.n	801b396 <ip4_route+0xc2>
 801b360:	4b13      	ldr	r3, [pc, #76]	@ (801b3b0 <ip4_route+0xdc>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b368:	f003 0301 	and.w	r3, r3, #1
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d012      	beq.n	801b396 <ip4_route+0xc2>
 801b370:	4b0f      	ldr	r3, [pc, #60]	@ (801b3b0 <ip4_route+0xdc>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b378:	f003 0304 	and.w	r3, r3, #4
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d00a      	beq.n	801b396 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b380:	4b0b      	ldr	r3, [pc, #44]	@ (801b3b0 <ip4_route+0xdc>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	3304      	adds	r3, #4
 801b386:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d004      	beq.n	801b396 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	b2db      	uxtb	r3, r3
 801b392:	2b7f      	cmp	r3, #127	@ 0x7f
 801b394:	d101      	bne.n	801b39a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b396:	2300      	movs	r3, #0
 801b398:	e001      	b.n	801b39e <ip4_route+0xca>
  }

  return netif_default;
 801b39a:	4b05      	ldr	r3, [pc, #20]	@ (801b3b0 <ip4_route+0xdc>)
 801b39c:	681b      	ldr	r3, [r3, #0]
}
 801b39e:	4618      	mov	r0, r3
 801b3a0:	3714      	adds	r7, #20
 801b3a2:	46bd      	mov	sp, r7
 801b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3a8:	4770      	bx	lr
 801b3aa:	bf00      	nop
 801b3ac:	2000c9a4 	.word	0x2000c9a4
 801b3b0:	2000c9a8 	.word	0x2000c9a8

0801b3b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b082      	sub	sp, #8
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b3c2:	f003 0301 	and.w	r3, r3, #1
 801b3c6:	b2db      	uxtb	r3, r3
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d016      	beq.n	801b3fa <ip4_input_accept+0x46>
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	3304      	adds	r3, #4
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d011      	beq.n	801b3fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3d6:	4b0b      	ldr	r3, [pc, #44]	@ (801b404 <ip4_input_accept+0x50>)
 801b3d8:	695a      	ldr	r2, [r3, #20]
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	3304      	adds	r3, #4
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	429a      	cmp	r2, r3
 801b3e2:	d008      	beq.n	801b3f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b3e4:	4b07      	ldr	r3, [pc, #28]	@ (801b404 <ip4_input_accept+0x50>)
 801b3e6:	695b      	ldr	r3, [r3, #20]
 801b3e8:	6879      	ldr	r1, [r7, #4]
 801b3ea:	4618      	mov	r0, r3
 801b3ec:	f000 fa08 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801b3f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	d001      	beq.n	801b3fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b3f6:	2301      	movs	r3, #1
 801b3f8:	e000      	b.n	801b3fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b3fa:	2300      	movs	r3, #0
}
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	3708      	adds	r7, #8
 801b400:	46bd      	mov	sp, r7
 801b402:	bd80      	pop	{r7, pc}
 801b404:	2000925c 	.word	0x2000925c

0801b408 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b086      	sub	sp, #24
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	685b      	ldr	r3, [r3, #4]
 801b416:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b418:	697b      	ldr	r3, [r7, #20]
 801b41a:	781b      	ldrb	r3, [r3, #0]
 801b41c:	091b      	lsrs	r3, r3, #4
 801b41e:	b2db      	uxtb	r3, r3
 801b420:	2b04      	cmp	r3, #4
 801b422:	d004      	beq.n	801b42e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b424:	6878      	ldr	r0, [r7, #4]
 801b426:	f7f8 f8d1 	bl	80135cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b42a:	2300      	movs	r3, #0
 801b42c:	e107      	b.n	801b63e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b42e:	697b      	ldr	r3, [r7, #20]
 801b430:	781b      	ldrb	r3, [r3, #0]
 801b432:	f003 030f 	and.w	r3, r3, #15
 801b436:	b2db      	uxtb	r3, r3
 801b438:	009b      	lsls	r3, r3, #2
 801b43a:	b2db      	uxtb	r3, r3
 801b43c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b43e:	697b      	ldr	r3, [r7, #20]
 801b440:	885b      	ldrh	r3, [r3, #2]
 801b442:	b29b      	uxth	r3, r3
 801b444:	4618      	mov	r0, r3
 801b446:	f7f6 fd01 	bl	8011e4c <lwip_htons>
 801b44a:	4603      	mov	r3, r0
 801b44c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	891b      	ldrh	r3, [r3, #8]
 801b452:	89ba      	ldrh	r2, [r7, #12]
 801b454:	429a      	cmp	r2, r3
 801b456:	d204      	bcs.n	801b462 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b458:	89bb      	ldrh	r3, [r7, #12]
 801b45a:	4619      	mov	r1, r3
 801b45c:	6878      	ldr	r0, [r7, #4]
 801b45e:	f7f7 ff2f 	bl	80132c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	895b      	ldrh	r3, [r3, #10]
 801b466:	89fa      	ldrh	r2, [r7, #14]
 801b468:	429a      	cmp	r2, r3
 801b46a:	d807      	bhi.n	801b47c <ip4_input+0x74>
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	891b      	ldrh	r3, [r3, #8]
 801b470:	89ba      	ldrh	r2, [r7, #12]
 801b472:	429a      	cmp	r2, r3
 801b474:	d802      	bhi.n	801b47c <ip4_input+0x74>
 801b476:	89fb      	ldrh	r3, [r7, #14]
 801b478:	2b13      	cmp	r3, #19
 801b47a:	d804      	bhi.n	801b486 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b47c:	6878      	ldr	r0, [r7, #4]
 801b47e:	f7f8 f8a5 	bl	80135cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b482:	2300      	movs	r3, #0
 801b484:	e0db      	b.n	801b63e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b486:	697b      	ldr	r3, [r7, #20]
 801b488:	691b      	ldr	r3, [r3, #16]
 801b48a:	4a6f      	ldr	r2, [pc, #444]	@ (801b648 <ip4_input+0x240>)
 801b48c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b48e:	697b      	ldr	r3, [r7, #20]
 801b490:	68db      	ldr	r3, [r3, #12]
 801b492:	4a6d      	ldr	r2, [pc, #436]	@ (801b648 <ip4_input+0x240>)
 801b494:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b496:	4b6c      	ldr	r3, [pc, #432]	@ (801b648 <ip4_input+0x240>)
 801b498:	695b      	ldr	r3, [r3, #20]
 801b49a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b49e:	2be0      	cmp	r3, #224	@ 0xe0
 801b4a0:	d112      	bne.n	801b4c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b4a2:	683b      	ldr	r3, [r7, #0]
 801b4a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b4a8:	f003 0301 	and.w	r3, r3, #1
 801b4ac:	b2db      	uxtb	r3, r3
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d007      	beq.n	801b4c2 <ip4_input+0xba>
 801b4b2:	683b      	ldr	r3, [r7, #0]
 801b4b4:	3304      	adds	r3, #4
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d002      	beq.n	801b4c2 <ip4_input+0xba>
      netif = inp;
 801b4bc:	683b      	ldr	r3, [r7, #0]
 801b4be:	613b      	str	r3, [r7, #16]
 801b4c0:	e02a      	b.n	801b518 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	613b      	str	r3, [r7, #16]
 801b4c6:	e027      	b.n	801b518 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b4c8:	6838      	ldr	r0, [r7, #0]
 801b4ca:	f7ff ff73 	bl	801b3b4 <ip4_input_accept>
 801b4ce:	4603      	mov	r3, r0
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d002      	beq.n	801b4da <ip4_input+0xd2>
      netif = inp;
 801b4d4:	683b      	ldr	r3, [r7, #0]
 801b4d6:	613b      	str	r3, [r7, #16]
 801b4d8:	e01e      	b.n	801b518 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4da:	2300      	movs	r3, #0
 801b4dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b4de:	4b5a      	ldr	r3, [pc, #360]	@ (801b648 <ip4_input+0x240>)
 801b4e0:	695b      	ldr	r3, [r3, #20]
 801b4e2:	b2db      	uxtb	r3, r3
 801b4e4:	2b7f      	cmp	r3, #127	@ 0x7f
 801b4e6:	d017      	beq.n	801b518 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b4e8:	4b58      	ldr	r3, [pc, #352]	@ (801b64c <ip4_input+0x244>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	613b      	str	r3, [r7, #16]
 801b4ee:	e00e      	b.n	801b50e <ip4_input+0x106>
          if (netif == inp) {
 801b4f0:	693a      	ldr	r2, [r7, #16]
 801b4f2:	683b      	ldr	r3, [r7, #0]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d006      	beq.n	801b506 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b4f8:	6938      	ldr	r0, [r7, #16]
 801b4fa:	f7ff ff5b 	bl	801b3b4 <ip4_input_accept>
 801b4fe:	4603      	mov	r3, r0
 801b500:	2b00      	cmp	r3, #0
 801b502:	d108      	bne.n	801b516 <ip4_input+0x10e>
 801b504:	e000      	b.n	801b508 <ip4_input+0x100>
            continue;
 801b506:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	613b      	str	r3, [r7, #16]
 801b50e:	693b      	ldr	r3, [r7, #16]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d1ed      	bne.n	801b4f0 <ip4_input+0xe8>
 801b514:	e000      	b.n	801b518 <ip4_input+0x110>
            break;
 801b516:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b518:	4b4b      	ldr	r3, [pc, #300]	@ (801b648 <ip4_input+0x240>)
 801b51a:	691b      	ldr	r3, [r3, #16]
 801b51c:	6839      	ldr	r1, [r7, #0]
 801b51e:	4618      	mov	r0, r3
 801b520:	f000 f96e 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801b524:	4603      	mov	r3, r0
 801b526:	2b00      	cmp	r3, #0
 801b528:	d105      	bne.n	801b536 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b52a:	4b47      	ldr	r3, [pc, #284]	@ (801b648 <ip4_input+0x240>)
 801b52c:	691b      	ldr	r3, [r3, #16]
 801b52e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b532:	2be0      	cmp	r3, #224	@ 0xe0
 801b534:	d104      	bne.n	801b540 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b536:	6878      	ldr	r0, [r7, #4]
 801b538:	f7f8 f848 	bl	80135cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b53c:	2300      	movs	r3, #0
 801b53e:	e07e      	b.n	801b63e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b540:	693b      	ldr	r3, [r7, #16]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d104      	bne.n	801b550 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b546:	6878      	ldr	r0, [r7, #4]
 801b548:	f7f8 f840 	bl	80135cc <pbuf_free>
    return ERR_OK;
 801b54c:	2300      	movs	r3, #0
 801b54e:	e076      	b.n	801b63e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b550:	697b      	ldr	r3, [r7, #20]
 801b552:	88db      	ldrh	r3, [r3, #6]
 801b554:	b29b      	uxth	r3, r3
 801b556:	461a      	mov	r2, r3
 801b558:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b55c:	4013      	ands	r3, r2
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d00b      	beq.n	801b57a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b562:	6878      	ldr	r0, [r7, #4]
 801b564:	f000 fd22 	bl	801bfac <ip4_reass>
 801b568:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	2b00      	cmp	r3, #0
 801b56e:	d101      	bne.n	801b574 <ip4_input+0x16c>
      return ERR_OK;
 801b570:	2300      	movs	r3, #0
 801b572:	e064      	b.n	801b63e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	685b      	ldr	r3, [r3, #4]
 801b578:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b57a:	4a33      	ldr	r2, [pc, #204]	@ (801b648 <ip4_input+0x240>)
 801b57c:	693b      	ldr	r3, [r7, #16]
 801b57e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b580:	4a31      	ldr	r2, [pc, #196]	@ (801b648 <ip4_input+0x240>)
 801b582:	683b      	ldr	r3, [r7, #0]
 801b584:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b586:	4a30      	ldr	r2, [pc, #192]	@ (801b648 <ip4_input+0x240>)
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b58c:	697b      	ldr	r3, [r7, #20]
 801b58e:	781b      	ldrb	r3, [r3, #0]
 801b590:	f003 030f 	and.w	r3, r3, #15
 801b594:	b2db      	uxtb	r3, r3
 801b596:	009b      	lsls	r3, r3, #2
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	461a      	mov	r2, r3
 801b59c:	4b2a      	ldr	r3, [pc, #168]	@ (801b648 <ip4_input+0x240>)
 801b59e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b5a0:	89fb      	ldrh	r3, [r7, #14]
 801b5a2:	4619      	mov	r1, r3
 801b5a4:	6878      	ldr	r0, [r7, #4]
 801b5a6:	f7f7 ff8b 	bl	80134c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b5aa:	697b      	ldr	r3, [r7, #20]
 801b5ac:	7a5b      	ldrb	r3, [r3, #9]
 801b5ae:	2b11      	cmp	r3, #17
 801b5b0:	d006      	beq.n	801b5c0 <ip4_input+0x1b8>
 801b5b2:	2b11      	cmp	r3, #17
 801b5b4:	dc13      	bgt.n	801b5de <ip4_input+0x1d6>
 801b5b6:	2b01      	cmp	r3, #1
 801b5b8:	d00c      	beq.n	801b5d4 <ip4_input+0x1cc>
 801b5ba:	2b06      	cmp	r3, #6
 801b5bc:	d005      	beq.n	801b5ca <ip4_input+0x1c2>
 801b5be:	e00e      	b.n	801b5de <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b5c0:	6839      	ldr	r1, [r7, #0]
 801b5c2:	6878      	ldr	r0, [r7, #4]
 801b5c4:	f7fe fc9a 	bl	8019efc <udp_input>
        break;
 801b5c8:	e026      	b.n	801b618 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b5ca:	6839      	ldr	r1, [r7, #0]
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f7fa f891 	bl	80156f4 <tcp_input>
        break;
 801b5d2:	e021      	b.n	801b618 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b5d4:	6839      	ldr	r1, [r7, #0]
 801b5d6:	6878      	ldr	r0, [r7, #4]
 801b5d8:	f7ff fcf0 	bl	801afbc <icmp_input>
        break;
 801b5dc:	e01c      	b.n	801b618 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5de:	4b1a      	ldr	r3, [pc, #104]	@ (801b648 <ip4_input+0x240>)
 801b5e0:	695b      	ldr	r3, [r3, #20]
 801b5e2:	6939      	ldr	r1, [r7, #16]
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f000 f90b 	bl	801b800 <ip4_addr_isbroadcast_u32>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d10f      	bne.n	801b610 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5f0:	4b15      	ldr	r3, [pc, #84]	@ (801b648 <ip4_input+0x240>)
 801b5f2:	695b      	ldr	r3, [r3, #20]
 801b5f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5f8:	2be0      	cmp	r3, #224	@ 0xe0
 801b5fa:	d009      	beq.n	801b610 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b5fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b600:	4619      	mov	r1, r3
 801b602:	6878      	ldr	r0, [r7, #4]
 801b604:	f7f7 ffcf 	bl	80135a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b608:	2102      	movs	r1, #2
 801b60a:	6878      	ldr	r0, [r7, #4]
 801b60c:	f7ff fdd8 	bl	801b1c0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f7f7 ffdb 	bl	80135cc <pbuf_free>
        break;
 801b616:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b618:	4b0b      	ldr	r3, [pc, #44]	@ (801b648 <ip4_input+0x240>)
 801b61a:	2200      	movs	r2, #0
 801b61c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b61e:	4b0a      	ldr	r3, [pc, #40]	@ (801b648 <ip4_input+0x240>)
 801b620:	2200      	movs	r2, #0
 801b622:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b624:	4b08      	ldr	r3, [pc, #32]	@ (801b648 <ip4_input+0x240>)
 801b626:	2200      	movs	r2, #0
 801b628:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b62a:	4b07      	ldr	r3, [pc, #28]	@ (801b648 <ip4_input+0x240>)
 801b62c:	2200      	movs	r2, #0
 801b62e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b630:	4b05      	ldr	r3, [pc, #20]	@ (801b648 <ip4_input+0x240>)
 801b632:	2200      	movs	r2, #0
 801b634:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b636:	4b04      	ldr	r3, [pc, #16]	@ (801b648 <ip4_input+0x240>)
 801b638:	2200      	movs	r2, #0
 801b63a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b63c:	2300      	movs	r3, #0
}
 801b63e:	4618      	mov	r0, r3
 801b640:	3718      	adds	r7, #24
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}
 801b646:	bf00      	nop
 801b648:	2000925c 	.word	0x2000925c
 801b64c:	2000c9a4 	.word	0x2000c9a4

0801b650 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b650:	b580      	push	{r7, lr}
 801b652:	b08a      	sub	sp, #40	@ 0x28
 801b654:	af04      	add	r7, sp, #16
 801b656:	60f8      	str	r0, [r7, #12]
 801b658:	60b9      	str	r1, [r7, #8]
 801b65a:	607a      	str	r2, [r7, #4]
 801b65c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b65e:	68bb      	ldr	r3, [r7, #8]
 801b660:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d009      	beq.n	801b67c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d003      	beq.n	801b676 <ip4_output_if+0x26>
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d102      	bne.n	801b67c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b678:	3304      	adds	r3, #4
 801b67a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b67c:	78fa      	ldrb	r2, [r7, #3]
 801b67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b680:	9302      	str	r3, [sp, #8]
 801b682:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b686:	9301      	str	r3, [sp, #4]
 801b688:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b68c:	9300      	str	r3, [sp, #0]
 801b68e:	4613      	mov	r3, r2
 801b690:	687a      	ldr	r2, [r7, #4]
 801b692:	6979      	ldr	r1, [r7, #20]
 801b694:	68f8      	ldr	r0, [r7, #12]
 801b696:	f000 f805 	bl	801b6a4 <ip4_output_if_src>
 801b69a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b69c:	4618      	mov	r0, r3
 801b69e:	3718      	adds	r7, #24
 801b6a0:	46bd      	mov	sp, r7
 801b6a2:	bd80      	pop	{r7, pc}

0801b6a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b088      	sub	sp, #32
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	60f8      	str	r0, [r7, #12]
 801b6ac:	60b9      	str	r1, [r7, #8]
 801b6ae:	607a      	str	r2, [r7, #4]
 801b6b0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	7b9b      	ldrb	r3, [r3, #14]
 801b6b6:	2b01      	cmp	r3, #1
 801b6b8:	d006      	beq.n	801b6c8 <ip4_output_if_src+0x24>
 801b6ba:	4b4b      	ldr	r3, [pc, #300]	@ (801b7e8 <ip4_output_if_src+0x144>)
 801b6bc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b6c0:	494a      	ldr	r1, [pc, #296]	@ (801b7ec <ip4_output_if_src+0x148>)
 801b6c2:	484b      	ldr	r0, [pc, #300]	@ (801b7f0 <ip4_output_if_src+0x14c>)
 801b6c4:	f002 f83a 	bl	801d73c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d060      	beq.n	801b790 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b6ce:	2314      	movs	r3, #20
 801b6d0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b6d2:	2114      	movs	r1, #20
 801b6d4:	68f8      	ldr	r0, [r7, #12]
 801b6d6:	f7f7 fee3 	bl	80134a0 <pbuf_add_header>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d002      	beq.n	801b6e6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b6e0:	f06f 0301 	mvn.w	r3, #1
 801b6e4:	e07c      	b.n	801b7e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	685b      	ldr	r3, [r3, #4]
 801b6ea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	895b      	ldrh	r3, [r3, #10]
 801b6f0:	2b13      	cmp	r3, #19
 801b6f2:	d806      	bhi.n	801b702 <ip4_output_if_src+0x5e>
 801b6f4:	4b3c      	ldr	r3, [pc, #240]	@ (801b7e8 <ip4_output_if_src+0x144>)
 801b6f6:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b6fa:	493e      	ldr	r1, [pc, #248]	@ (801b7f4 <ip4_output_if_src+0x150>)
 801b6fc:	483c      	ldr	r0, [pc, #240]	@ (801b7f0 <ip4_output_if_src+0x14c>)
 801b6fe:	f002 f81d 	bl	801d73c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b702:	69fb      	ldr	r3, [r7, #28]
 801b704:	78fa      	ldrb	r2, [r7, #3]
 801b706:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b708:	69fb      	ldr	r3, [r7, #28]
 801b70a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b70e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681a      	ldr	r2, [r3, #0]
 801b714:	69fb      	ldr	r3, [r7, #28]
 801b716:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b718:	8b7b      	ldrh	r3, [r7, #26]
 801b71a:	089b      	lsrs	r3, r3, #2
 801b71c:	b29b      	uxth	r3, r3
 801b71e:	b2db      	uxtb	r3, r3
 801b720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b724:	b2da      	uxtb	r2, r3
 801b726:	69fb      	ldr	r3, [r7, #28]
 801b728:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b72a:	69fb      	ldr	r3, [r7, #28]
 801b72c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b730:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	891b      	ldrh	r3, [r3, #8]
 801b736:	4618      	mov	r0, r3
 801b738:	f7f6 fb88 	bl	8011e4c <lwip_htons>
 801b73c:	4603      	mov	r3, r0
 801b73e:	461a      	mov	r2, r3
 801b740:	69fb      	ldr	r3, [r7, #28]
 801b742:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b744:	69fb      	ldr	r3, [r7, #28]
 801b746:	2200      	movs	r2, #0
 801b748:	719a      	strb	r2, [r3, #6]
 801b74a:	2200      	movs	r2, #0
 801b74c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b74e:	4b2a      	ldr	r3, [pc, #168]	@ (801b7f8 <ip4_output_if_src+0x154>)
 801b750:	881b      	ldrh	r3, [r3, #0]
 801b752:	4618      	mov	r0, r3
 801b754:	f7f6 fb7a 	bl	8011e4c <lwip_htons>
 801b758:	4603      	mov	r3, r0
 801b75a:	461a      	mov	r2, r3
 801b75c:	69fb      	ldr	r3, [r7, #28]
 801b75e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b760:	4b25      	ldr	r3, [pc, #148]	@ (801b7f8 <ip4_output_if_src+0x154>)
 801b762:	881b      	ldrh	r3, [r3, #0]
 801b764:	3301      	adds	r3, #1
 801b766:	b29a      	uxth	r2, r3
 801b768:	4b23      	ldr	r3, [pc, #140]	@ (801b7f8 <ip4_output_if_src+0x154>)
 801b76a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b76c:	68bb      	ldr	r3, [r7, #8]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d104      	bne.n	801b77c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b772:	4b22      	ldr	r3, [pc, #136]	@ (801b7fc <ip4_output_if_src+0x158>)
 801b774:	681a      	ldr	r2, [r3, #0]
 801b776:	69fb      	ldr	r3, [r7, #28]
 801b778:	60da      	str	r2, [r3, #12]
 801b77a:	e003      	b.n	801b784 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b77c:	68bb      	ldr	r3, [r7, #8]
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	69fb      	ldr	r3, [r7, #28]
 801b782:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b784:	69fb      	ldr	r3, [r7, #28]
 801b786:	2200      	movs	r2, #0
 801b788:	729a      	strb	r2, [r3, #10]
 801b78a:	2200      	movs	r2, #0
 801b78c:	72da      	strb	r2, [r3, #11]
 801b78e:	e00f      	b.n	801b7b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b790:	68fb      	ldr	r3, [r7, #12]
 801b792:	895b      	ldrh	r3, [r3, #10]
 801b794:	2b13      	cmp	r3, #19
 801b796:	d802      	bhi.n	801b79e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b798:	f06f 0301 	mvn.w	r3, #1
 801b79c:	e020      	b.n	801b7e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	685b      	ldr	r3, [r3, #4]
 801b7a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b7a4:	69fb      	ldr	r3, [r7, #28]
 801b7a6:	691b      	ldr	r3, [r3, #16]
 801b7a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b7aa:	f107 0314 	add.w	r3, r7, #20
 801b7ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d00c      	beq.n	801b7d2 <ip4_output_if_src+0x12e>
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	891a      	ldrh	r2, [r3, #8]
 801b7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d906      	bls.n	801b7d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b7c4:	687a      	ldr	r2, [r7, #4]
 801b7c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b7c8:	68f8      	ldr	r0, [r7, #12]
 801b7ca:	f000 fde3 	bl	801c394 <ip4_frag>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	e006      	b.n	801b7e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b7d4:	695b      	ldr	r3, [r3, #20]
 801b7d6:	687a      	ldr	r2, [r7, #4]
 801b7d8:	68f9      	ldr	r1, [r7, #12]
 801b7da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b7dc:	4798      	blx	r3
 801b7de:	4603      	mov	r3, r0
}
 801b7e0:	4618      	mov	r0, r3
 801b7e2:	3720      	adds	r7, #32
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}
 801b7e8:	08022c9c 	.word	0x08022c9c
 801b7ec:	08022cd0 	.word	0x08022cd0
 801b7f0:	08022cdc 	.word	0x08022cdc
 801b7f4:	08022d04 	.word	0x08022d04
 801b7f8:	2000cb02 	.word	0x2000cb02
 801b7fc:	08023174 	.word	0x08023174

0801b800 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b800:	b480      	push	{r7}
 801b802:	b085      	sub	sp, #20
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
 801b808:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b814:	d002      	beq.n	801b81c <ip4_addr_isbroadcast_u32+0x1c>
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d101      	bne.n	801b820 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b81c:	2301      	movs	r3, #1
 801b81e:	e02a      	b.n	801b876 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b820:	683b      	ldr	r3, [r7, #0]
 801b822:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801b826:	f003 0302 	and.w	r3, r3, #2
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d101      	bne.n	801b832 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b82e:	2300      	movs	r3, #0
 801b830:	e021      	b.n	801b876 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	3304      	adds	r3, #4
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	687a      	ldr	r2, [r7, #4]
 801b83a:	429a      	cmp	r2, r3
 801b83c:	d101      	bne.n	801b842 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b83e:	2300      	movs	r3, #0
 801b840:	e019      	b.n	801b876 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b842:	68fa      	ldr	r2, [r7, #12]
 801b844:	683b      	ldr	r3, [r7, #0]
 801b846:	3304      	adds	r3, #4
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	405a      	eors	r2, r3
 801b84c:	683b      	ldr	r3, [r7, #0]
 801b84e:	3308      	adds	r3, #8
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	4013      	ands	r3, r2
 801b854:	2b00      	cmp	r3, #0
 801b856:	d10d      	bne.n	801b874 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b858:	683b      	ldr	r3, [r7, #0]
 801b85a:	3308      	adds	r3, #8
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	43da      	mvns	r2, r3
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	3308      	adds	r3, #8
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b86c:	429a      	cmp	r2, r3
 801b86e:	d101      	bne.n	801b874 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b870:	2301      	movs	r3, #1
 801b872:	e000      	b.n	801b876 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b874:	2300      	movs	r3, #0
  }
}
 801b876:	4618      	mov	r0, r3
 801b878:	3714      	adds	r7, #20
 801b87a:	46bd      	mov	sp, r7
 801b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b880:	4770      	bx	lr
	...

0801b884 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801b884:	b580      	push	{r7, lr}
 801b886:	b082      	sub	sp, #8
 801b888:	af00      	add	r7, sp, #0
 801b88a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801b88c:	2210      	movs	r2, #16
 801b88e:	4904      	ldr	r1, [pc, #16]	@ (801b8a0 <ip4addr_ntoa+0x1c>)
 801b890:	6878      	ldr	r0, [r7, #4]
 801b892:	f000 f807 	bl	801b8a4 <ip4addr_ntoa_r>
 801b896:	4603      	mov	r3, r0
}
 801b898:	4618      	mov	r0, r3
 801b89a:	3708      	adds	r7, #8
 801b89c:	46bd      	mov	sp, r7
 801b89e:	bd80      	pop	{r7, pc}
 801b8a0:	2000cb04 	.word	0x2000cb04

0801b8a4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801b8a4:	b480      	push	{r7}
 801b8a6:	b08d      	sub	sp, #52	@ 0x34
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801b8b0:	2300      	movs	r3, #0
 801b8b2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801b8b4:	68fb      	ldr	r3, [r7, #12]
 801b8b6:	681b      	ldr	r3, [r3, #0]
 801b8b8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801b8ba:	68bb      	ldr	r3, [r7, #8]
 801b8bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 801b8be:	f107 0318 	add.w	r3, r7, #24
 801b8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b8ca:	e058      	b.n	801b97e <ip4addr_ntoa_r+0xda>
    i = 0;
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 801b8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8d4:	781a      	ldrb	r2, [r3, #0]
 801b8d6:	4b32      	ldr	r3, [pc, #200]	@ (801b9a0 <ip4addr_ntoa_r+0xfc>)
 801b8d8:	fba3 1302 	umull	r1, r3, r3, r2
 801b8dc:	08d9      	lsrs	r1, r3, #3
 801b8de:	460b      	mov	r3, r1
 801b8e0:	009b      	lsls	r3, r3, #2
 801b8e2:	440b      	add	r3, r1
 801b8e4:	005b      	lsls	r3, r3, #1
 801b8e6:	1ad3      	subs	r3, r2, r3
 801b8e8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8ec:	781b      	ldrb	r3, [r3, #0]
 801b8ee:	4a2c      	ldr	r2, [pc, #176]	@ (801b9a0 <ip4addr_ntoa_r+0xfc>)
 801b8f0:	fba2 2303 	umull	r2, r3, r2, r3
 801b8f4:	08db      	lsrs	r3, r3, #3
 801b8f6:	b2da      	uxtb	r2, r3
 801b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b8fa:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801b8fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b900:	1c5a      	adds	r2, r3, #1
 801b902:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b906:	4619      	mov	r1, r3
 801b908:	7ffb      	ldrb	r3, [r7, #31]
 801b90a:	3330      	adds	r3, #48	@ 0x30
 801b90c:	b2da      	uxtb	r2, r3
 801b90e:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 801b912:	443b      	add	r3, r7
 801b914:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801b918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d1d8      	bne.n	801b8d2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801b920:	e011      	b.n	801b946 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801b922:	6a3b      	ldr	r3, [r7, #32]
 801b924:	1c5a      	adds	r2, r3, #1
 801b926:	623a      	str	r2, [r7, #32]
 801b928:	687a      	ldr	r2, [r7, #4]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	dc01      	bgt.n	801b932 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801b92e:	2300      	movs	r3, #0
 801b930:	e030      	b.n	801b994 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801b932:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801b936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b938:	1c59      	adds	r1, r3, #1
 801b93a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b93c:	3230      	adds	r2, #48	@ 0x30
 801b93e:	443a      	add	r2, r7
 801b940:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801b944:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801b946:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801b94a:	1e5a      	subs	r2, r3, #1
 801b94c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801b950:	2b00      	cmp	r3, #0
 801b952:	d1e6      	bne.n	801b922 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801b954:	6a3b      	ldr	r3, [r7, #32]
 801b956:	1c5a      	adds	r2, r3, #1
 801b958:	623a      	str	r2, [r7, #32]
 801b95a:	687a      	ldr	r2, [r7, #4]
 801b95c:	429a      	cmp	r2, r3
 801b95e:	dc01      	bgt.n	801b964 <ip4addr_ntoa_r+0xc0>
      return NULL;
 801b960:	2300      	movs	r3, #0
 801b962:	e017      	b.n	801b994 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b966:	1c5a      	adds	r2, r3, #1
 801b968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b96a:	222e      	movs	r2, #46	@ 0x2e
 801b96c:	701a      	strb	r2, [r3, #0]
    ap++;
 801b96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b970:	3301      	adds	r3, #1
 801b972:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 801b974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b978:	3301      	adds	r3, #1
 801b97a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b97e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b982:	2b03      	cmp	r3, #3
 801b984:	d9a2      	bls.n	801b8cc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801b986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b988:	3b01      	subs	r3, #1
 801b98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b98e:	2200      	movs	r2, #0
 801b990:	701a      	strb	r2, [r3, #0]
  return buf;
 801b992:	68bb      	ldr	r3, [r7, #8]
}
 801b994:	4618      	mov	r0, r3
 801b996:	3734      	adds	r7, #52	@ 0x34
 801b998:	46bd      	mov	sp, r7
 801b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99e:	4770      	bx	lr
 801b9a0:	cccccccd 	.word	0xcccccccd

0801b9a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b9a4:	b580      	push	{r7, lr}
 801b9a6:	b084      	sub	sp, #16
 801b9a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b9ae:	4b12      	ldr	r3, [pc, #72]	@ (801b9f8 <ip_reass_tmr+0x54>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b9b4:	e018      	b.n	801b9e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	7fdb      	ldrb	r3, [r3, #31]
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d00b      	beq.n	801b9d6 <ip_reass_tmr+0x32>
      r->timer--;
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	7fdb      	ldrb	r3, [r3, #31]
 801b9c2:	3b01      	subs	r3, #1
 801b9c4:	b2da      	uxtb	r2, r3
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	60fb      	str	r3, [r7, #12]
 801b9d4:	e008      	b.n	801b9e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b9e0:	68b9      	ldr	r1, [r7, #8]
 801b9e2:	6878      	ldr	r0, [r7, #4]
 801b9e4:	f000 f80a 	bl	801b9fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d1e3      	bne.n	801b9b6 <ip_reass_tmr+0x12>
    }
  }
}
 801b9ee:	bf00      	nop
 801b9f0:	bf00      	nop
 801b9f2:	3710      	adds	r7, #16
 801b9f4:	46bd      	mov	sp, r7
 801b9f6:	bd80      	pop	{r7, pc}
 801b9f8:	2000cb14 	.word	0x2000cb14

0801b9fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b088      	sub	sp, #32
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
 801ba04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ba06:	2300      	movs	r3, #0
 801ba08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ba0a:	683a      	ldr	r2, [r7, #0]
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	429a      	cmp	r2, r3
 801ba10:	d105      	bne.n	801ba1e <ip_reass_free_complete_datagram+0x22>
 801ba12:	4b45      	ldr	r3, [pc, #276]	@ (801bb28 <ip_reass_free_complete_datagram+0x12c>)
 801ba14:	22ab      	movs	r2, #171	@ 0xab
 801ba16:	4945      	ldr	r1, [pc, #276]	@ (801bb2c <ip_reass_free_complete_datagram+0x130>)
 801ba18:	4845      	ldr	r0, [pc, #276]	@ (801bb30 <ip_reass_free_complete_datagram+0x134>)
 801ba1a:	f001 fe8f 	bl	801d73c <iprintf>
  if (prev != NULL) {
 801ba1e:	683b      	ldr	r3, [r7, #0]
 801ba20:	2b00      	cmp	r3, #0
 801ba22:	d00a      	beq.n	801ba3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ba24:	683b      	ldr	r3, [r7, #0]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	687a      	ldr	r2, [r7, #4]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d005      	beq.n	801ba3a <ip_reass_free_complete_datagram+0x3e>
 801ba2e:	4b3e      	ldr	r3, [pc, #248]	@ (801bb28 <ip_reass_free_complete_datagram+0x12c>)
 801ba30:	22ad      	movs	r2, #173	@ 0xad
 801ba32:	4940      	ldr	r1, [pc, #256]	@ (801bb34 <ip_reass_free_complete_datagram+0x138>)
 801ba34:	483e      	ldr	r0, [pc, #248]	@ (801bb30 <ip_reass_free_complete_datagram+0x134>)
 801ba36:	f001 fe81 	bl	801d73c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	685b      	ldr	r3, [r3, #4]
 801ba3e:	685b      	ldr	r3, [r3, #4]
 801ba40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ba42:	697b      	ldr	r3, [r7, #20]
 801ba44:	889b      	ldrh	r3, [r3, #4]
 801ba46:	b29b      	uxth	r3, r3
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d12a      	bne.n	801baa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	685b      	ldr	r3, [r3, #4]
 801ba50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	681a      	ldr	r2, [r3, #0]
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ba5a:	69bb      	ldr	r3, [r7, #24]
 801ba5c:	6858      	ldr	r0, [r3, #4]
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	3308      	adds	r3, #8
 801ba62:	2214      	movs	r2, #20
 801ba64:	4619      	mov	r1, r3
 801ba66:	f002 f81c 	bl	801daa2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ba6a:	2101      	movs	r1, #1
 801ba6c:	69b8      	ldr	r0, [r7, #24]
 801ba6e:	f7ff fbb7 	bl	801b1e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ba72:	69b8      	ldr	r0, [r7, #24]
 801ba74:	f7f7 fe38 	bl	80136e8 <pbuf_clen>
 801ba78:	4603      	mov	r3, r0
 801ba7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba7c:	8bfa      	ldrh	r2, [r7, #30]
 801ba7e:	8a7b      	ldrh	r3, [r7, #18]
 801ba80:	4413      	add	r3, r2
 801ba82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ba86:	db05      	blt.n	801ba94 <ip_reass_free_complete_datagram+0x98>
 801ba88:	4b27      	ldr	r3, [pc, #156]	@ (801bb28 <ip_reass_free_complete_datagram+0x12c>)
 801ba8a:	22bc      	movs	r2, #188	@ 0xbc
 801ba8c:	492a      	ldr	r1, [pc, #168]	@ (801bb38 <ip_reass_free_complete_datagram+0x13c>)
 801ba8e:	4828      	ldr	r0, [pc, #160]	@ (801bb30 <ip_reass_free_complete_datagram+0x134>)
 801ba90:	f001 fe54 	bl	801d73c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba94:	8bfa      	ldrh	r2, [r7, #30]
 801ba96:	8a7b      	ldrh	r3, [r7, #18]
 801ba98:	4413      	add	r3, r2
 801ba9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ba9c:	69b8      	ldr	r0, [r7, #24]
 801ba9e:	f7f7 fd95 	bl	80135cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	685b      	ldr	r3, [r3, #4]
 801baa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801baa8:	e01f      	b.n	801baea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801baaa:	69bb      	ldr	r3, [r7, #24]
 801baac:	685b      	ldr	r3, [r3, #4]
 801baae:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bab0:	69bb      	ldr	r3, [r7, #24]
 801bab2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801bab4:	697b      	ldr	r3, [r7, #20]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801baba:	68f8      	ldr	r0, [r7, #12]
 801babc:	f7f7 fe14 	bl	80136e8 <pbuf_clen>
 801bac0:	4603      	mov	r3, r0
 801bac2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bac4:	8bfa      	ldrh	r2, [r7, #30]
 801bac6:	8a7b      	ldrh	r3, [r7, #18]
 801bac8:	4413      	add	r3, r2
 801baca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bace:	db05      	blt.n	801badc <ip_reass_free_complete_datagram+0xe0>
 801bad0:	4b15      	ldr	r3, [pc, #84]	@ (801bb28 <ip_reass_free_complete_datagram+0x12c>)
 801bad2:	22cc      	movs	r2, #204	@ 0xcc
 801bad4:	4918      	ldr	r1, [pc, #96]	@ (801bb38 <ip_reass_free_complete_datagram+0x13c>)
 801bad6:	4816      	ldr	r0, [pc, #88]	@ (801bb30 <ip_reass_free_complete_datagram+0x134>)
 801bad8:	f001 fe30 	bl	801d73c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801badc:	8bfa      	ldrh	r2, [r7, #30]
 801bade:	8a7b      	ldrh	r3, [r7, #18]
 801bae0:	4413      	add	r3, r2
 801bae2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bae4:	68f8      	ldr	r0, [r7, #12]
 801bae6:	f7f7 fd71 	bl	80135cc <pbuf_free>
  while (p != NULL) {
 801baea:	69bb      	ldr	r3, [r7, #24]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d1dc      	bne.n	801baaa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801baf0:	6839      	ldr	r1, [r7, #0]
 801baf2:	6878      	ldr	r0, [r7, #4]
 801baf4:	f000 f8c2 	bl	801bc7c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801baf8:	4b10      	ldr	r3, [pc, #64]	@ (801bb3c <ip_reass_free_complete_datagram+0x140>)
 801bafa:	881b      	ldrh	r3, [r3, #0]
 801bafc:	8bfa      	ldrh	r2, [r7, #30]
 801bafe:	429a      	cmp	r2, r3
 801bb00:	d905      	bls.n	801bb0e <ip_reass_free_complete_datagram+0x112>
 801bb02:	4b09      	ldr	r3, [pc, #36]	@ (801bb28 <ip_reass_free_complete_datagram+0x12c>)
 801bb04:	22d2      	movs	r2, #210	@ 0xd2
 801bb06:	490e      	ldr	r1, [pc, #56]	@ (801bb40 <ip_reass_free_complete_datagram+0x144>)
 801bb08:	4809      	ldr	r0, [pc, #36]	@ (801bb30 <ip_reass_free_complete_datagram+0x134>)
 801bb0a:	f001 fe17 	bl	801d73c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bb0e:	4b0b      	ldr	r3, [pc, #44]	@ (801bb3c <ip_reass_free_complete_datagram+0x140>)
 801bb10:	881a      	ldrh	r2, [r3, #0]
 801bb12:	8bfb      	ldrh	r3, [r7, #30]
 801bb14:	1ad3      	subs	r3, r2, r3
 801bb16:	b29a      	uxth	r2, r3
 801bb18:	4b08      	ldr	r3, [pc, #32]	@ (801bb3c <ip_reass_free_complete_datagram+0x140>)
 801bb1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bb1c:	8bfb      	ldrh	r3, [r7, #30]
}
 801bb1e:	4618      	mov	r0, r3
 801bb20:	3720      	adds	r7, #32
 801bb22:	46bd      	mov	sp, r7
 801bb24:	bd80      	pop	{r7, pc}
 801bb26:	bf00      	nop
 801bb28:	08022d34 	.word	0x08022d34
 801bb2c:	08022d70 	.word	0x08022d70
 801bb30:	08022d7c 	.word	0x08022d7c
 801bb34:	08022da4 	.word	0x08022da4
 801bb38:	08022db8 	.word	0x08022db8
 801bb3c:	2000cb18 	.word	0x2000cb18
 801bb40:	08022dd8 	.word	0x08022dd8

0801bb44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bb44:	b580      	push	{r7, lr}
 801bb46:	b08a      	sub	sp, #40	@ 0x28
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
 801bb4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bb4e:	2300      	movs	r3, #0
 801bb50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bb52:	2300      	movs	r3, #0
 801bb54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bb56:	2300      	movs	r3, #0
 801bb58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bb5e:	2300      	movs	r3, #0
 801bb60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bb62:	4b28      	ldr	r3, [pc, #160]	@ (801bc04 <ip_reass_remove_oldest_datagram+0xc0>)
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bb68:	e030      	b.n	801bbcc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb6c:	695a      	ldr	r2, [r3, #20]
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	68db      	ldr	r3, [r3, #12]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d10c      	bne.n	801bb90 <ip_reass_remove_oldest_datagram+0x4c>
 801bb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb78:	699a      	ldr	r2, [r3, #24]
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	691b      	ldr	r3, [r3, #16]
 801bb7e:	429a      	cmp	r2, r3
 801bb80:	d106      	bne.n	801bb90 <ip_reass_remove_oldest_datagram+0x4c>
 801bb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb84:	899a      	ldrh	r2, [r3, #12]
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	889b      	ldrh	r3, [r3, #4]
 801bb8a:	b29b      	uxth	r3, r3
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	d014      	beq.n	801bbba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	3301      	adds	r3, #1
 801bb94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bb96:	6a3b      	ldr	r3, [r7, #32]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d104      	bne.n	801bba6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bba0:	69fb      	ldr	r3, [r7, #28]
 801bba2:	61bb      	str	r3, [r7, #24]
 801bba4:	e009      	b.n	801bbba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bba8:	7fda      	ldrb	r2, [r3, #31]
 801bbaa:	6a3b      	ldr	r3, [r7, #32]
 801bbac:	7fdb      	ldrb	r3, [r3, #31]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	d803      	bhi.n	801bbba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbb4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bbb6:	69fb      	ldr	r3, [r7, #28]
 801bbb8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	2b00      	cmp	r3, #0
 801bbc0:	d001      	beq.n	801bbc6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d1cb      	bne.n	801bb6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bbd2:	6a3b      	ldr	r3, [r7, #32]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d008      	beq.n	801bbea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bbd8:	69b9      	ldr	r1, [r7, #24]
 801bbda:	6a38      	ldr	r0, [r7, #32]
 801bbdc:	f7ff ff0e 	bl	801b9fc <ip_reass_free_complete_datagram>
 801bbe0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bbe2:	697a      	ldr	r2, [r7, #20]
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	4413      	add	r3, r2
 801bbe8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bbea:	697a      	ldr	r2, [r7, #20]
 801bbec:	683b      	ldr	r3, [r7, #0]
 801bbee:	429a      	cmp	r2, r3
 801bbf0:	da02      	bge.n	801bbf8 <ip_reass_remove_oldest_datagram+0xb4>
 801bbf2:	693b      	ldr	r3, [r7, #16]
 801bbf4:	2b01      	cmp	r3, #1
 801bbf6:	dcac      	bgt.n	801bb52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bbf8:	697b      	ldr	r3, [r7, #20]
}
 801bbfa:	4618      	mov	r0, r3
 801bbfc:	3728      	adds	r7, #40	@ 0x28
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	bd80      	pop	{r7, pc}
 801bc02:	bf00      	nop
 801bc04:	2000cb14 	.word	0x2000cb14

0801bc08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b084      	sub	sp, #16
 801bc0c:	af00      	add	r7, sp, #0
 801bc0e:	6078      	str	r0, [r7, #4]
 801bc10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc12:	2004      	movs	r0, #4
 801bc14:	f7f6 fdf2 	bl	80127fc <memp_malloc>
 801bc18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d110      	bne.n	801bc42 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bc20:	6839      	ldr	r1, [r7, #0]
 801bc22:	6878      	ldr	r0, [r7, #4]
 801bc24:	f7ff ff8e 	bl	801bb44 <ip_reass_remove_oldest_datagram>
 801bc28:	4602      	mov	r2, r0
 801bc2a:	683b      	ldr	r3, [r7, #0]
 801bc2c:	4293      	cmp	r3, r2
 801bc2e:	dc03      	bgt.n	801bc38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bc30:	2004      	movs	r0, #4
 801bc32:	f7f6 fde3 	bl	80127fc <memp_malloc>
 801bc36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bc38:	68fb      	ldr	r3, [r7, #12]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d101      	bne.n	801bc42 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bc3e:	2300      	movs	r3, #0
 801bc40:	e016      	b.n	801bc70 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bc42:	2220      	movs	r2, #32
 801bc44:	2100      	movs	r1, #0
 801bc46:	68f8      	ldr	r0, [r7, #12]
 801bc48:	f001 fe2d 	bl	801d8a6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	220f      	movs	r2, #15
 801bc50:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bc52:	4b09      	ldr	r3, [pc, #36]	@ (801bc78 <ip_reass_enqueue_new_datagram+0x70>)
 801bc54:	681a      	ldr	r2, [r3, #0]
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bc5a:	4a07      	ldr	r2, [pc, #28]	@ (801bc78 <ip_reass_enqueue_new_datagram+0x70>)
 801bc5c:	68fb      	ldr	r3, [r7, #12]
 801bc5e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	3308      	adds	r3, #8
 801bc64:	2214      	movs	r2, #20
 801bc66:	6879      	ldr	r1, [r7, #4]
 801bc68:	4618      	mov	r0, r3
 801bc6a:	f001 ff1a 	bl	801daa2 <memcpy>
  return ipr;
 801bc6e:	68fb      	ldr	r3, [r7, #12]
}
 801bc70:	4618      	mov	r0, r3
 801bc72:	3710      	adds	r7, #16
 801bc74:	46bd      	mov	sp, r7
 801bc76:	bd80      	pop	{r7, pc}
 801bc78:	2000cb14 	.word	0x2000cb14

0801bc7c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
 801bc84:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bc86:	4b10      	ldr	r3, [pc, #64]	@ (801bcc8 <ip_reass_dequeue_datagram+0x4c>)
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	687a      	ldr	r2, [r7, #4]
 801bc8c:	429a      	cmp	r2, r3
 801bc8e:	d104      	bne.n	801bc9a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	681b      	ldr	r3, [r3, #0]
 801bc94:	4a0c      	ldr	r2, [pc, #48]	@ (801bcc8 <ip_reass_dequeue_datagram+0x4c>)
 801bc96:	6013      	str	r3, [r2, #0]
 801bc98:	e00d      	b.n	801bcb6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bc9a:	683b      	ldr	r3, [r7, #0]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d106      	bne.n	801bcae <ip_reass_dequeue_datagram+0x32>
 801bca0:	4b0a      	ldr	r3, [pc, #40]	@ (801bccc <ip_reass_dequeue_datagram+0x50>)
 801bca2:	f240 1245 	movw	r2, #325	@ 0x145
 801bca6:	490a      	ldr	r1, [pc, #40]	@ (801bcd0 <ip_reass_dequeue_datagram+0x54>)
 801bca8:	480a      	ldr	r0, [pc, #40]	@ (801bcd4 <ip_reass_dequeue_datagram+0x58>)
 801bcaa:	f001 fd47 	bl	801d73c <iprintf>
    prev->next = ipr->next;
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	683b      	ldr	r3, [r7, #0]
 801bcb4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bcb6:	6879      	ldr	r1, [r7, #4]
 801bcb8:	2004      	movs	r0, #4
 801bcba:	f7f6 fe15 	bl	80128e8 <memp_free>
}
 801bcbe:	bf00      	nop
 801bcc0:	3708      	adds	r7, #8
 801bcc2:	46bd      	mov	sp, r7
 801bcc4:	bd80      	pop	{r7, pc}
 801bcc6:	bf00      	nop
 801bcc8:	2000cb14 	.word	0x2000cb14
 801bccc:	08022d34 	.word	0x08022d34
 801bcd0:	08022dfc 	.word	0x08022dfc
 801bcd4:	08022d7c 	.word	0x08022d7c

0801bcd8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b08c      	sub	sp, #48	@ 0x30
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	60f8      	str	r0, [r7, #12]
 801bce0:	60b9      	str	r1, [r7, #8]
 801bce2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bce4:	2300      	movs	r3, #0
 801bce6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bce8:	2301      	movs	r3, #1
 801bcea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bcec:	68bb      	ldr	r3, [r7, #8]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bcf2:	69fb      	ldr	r3, [r7, #28]
 801bcf4:	885b      	ldrh	r3, [r3, #2]
 801bcf6:	b29b      	uxth	r3, r3
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7f6 f8a7 	bl	8011e4c <lwip_htons>
 801bcfe:	4603      	mov	r3, r0
 801bd00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bd02:	69fb      	ldr	r3, [r7, #28]
 801bd04:	781b      	ldrb	r3, [r3, #0]
 801bd06:	f003 030f 	and.w	r3, r3, #15
 801bd0a:	b2db      	uxtb	r3, r3
 801bd0c:	009b      	lsls	r3, r3, #2
 801bd0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bd10:	7e7b      	ldrb	r3, [r7, #25]
 801bd12:	b29b      	uxth	r3, r3
 801bd14:	8b7a      	ldrh	r2, [r7, #26]
 801bd16:	429a      	cmp	r2, r3
 801bd18:	d202      	bcs.n	801bd20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd1a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd1e:	e135      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bd20:	7e7b      	ldrb	r3, [r7, #25]
 801bd22:	b29b      	uxth	r3, r3
 801bd24:	8b7a      	ldrh	r2, [r7, #26]
 801bd26:	1ad3      	subs	r3, r2, r3
 801bd28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bd2a:	69fb      	ldr	r3, [r7, #28]
 801bd2c:	88db      	ldrh	r3, [r3, #6]
 801bd2e:	b29b      	uxth	r3, r3
 801bd30:	4618      	mov	r0, r3
 801bd32:	f7f6 f88b 	bl	8011e4c <lwip_htons>
 801bd36:	4603      	mov	r3, r0
 801bd38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	00db      	lsls	r3, r3, #3
 801bd40:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bd42:	68bb      	ldr	r3, [r7, #8]
 801bd44:	685b      	ldr	r3, [r3, #4]
 801bd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	701a      	strb	r2, [r3, #0]
 801bd4e:	2200      	movs	r2, #0
 801bd50:	705a      	strb	r2, [r3, #1]
 801bd52:	2200      	movs	r2, #0
 801bd54:	709a      	strb	r2, [r3, #2]
 801bd56:	2200      	movs	r2, #0
 801bd58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd5c:	8afa      	ldrh	r2, [r7, #22]
 801bd5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bd60:	8afa      	ldrh	r2, [r7, #22]
 801bd62:	8b7b      	ldrh	r3, [r7, #26]
 801bd64:	4413      	add	r3, r2
 801bd66:	b29a      	uxth	r2, r3
 801bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd6e:	88db      	ldrh	r3, [r3, #6]
 801bd70:	b29b      	uxth	r3, r3
 801bd72:	8afa      	ldrh	r2, [r7, #22]
 801bd74:	429a      	cmp	r2, r3
 801bd76:	d902      	bls.n	801bd7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd78:	f04f 33ff 	mov.w	r3, #4294967295
 801bd7c:	e106      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	685b      	ldr	r3, [r3, #4]
 801bd82:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd84:	e068      	b.n	801be58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd88:	685b      	ldr	r3, [r3, #4]
 801bd8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd8e:	889b      	ldrh	r3, [r3, #4]
 801bd90:	b29a      	uxth	r2, r3
 801bd92:	693b      	ldr	r3, [r7, #16]
 801bd94:	889b      	ldrh	r3, [r3, #4]
 801bd96:	b29b      	uxth	r3, r3
 801bd98:	429a      	cmp	r2, r3
 801bd9a:	d235      	bcs.n	801be08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bda0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d020      	beq.n	801bdea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdaa:	889b      	ldrh	r3, [r3, #4]
 801bdac:	b29a      	uxth	r2, r3
 801bdae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdb0:	88db      	ldrh	r3, [r3, #6]
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	429a      	cmp	r2, r3
 801bdb6:	d307      	bcc.n	801bdc8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bdb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdba:	88db      	ldrh	r3, [r3, #6]
 801bdbc:	b29a      	uxth	r2, r3
 801bdbe:	693b      	ldr	r3, [r7, #16]
 801bdc0:	889b      	ldrh	r3, [r3, #4]
 801bdc2:	b29b      	uxth	r3, r3
 801bdc4:	429a      	cmp	r2, r3
 801bdc6:	d902      	bls.n	801bdce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdc8:	f04f 33ff 	mov.w	r3, #4294967295
 801bdcc:	e0de      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bdce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdd0:	68ba      	ldr	r2, [r7, #8]
 801bdd2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdd6:	88db      	ldrh	r3, [r3, #6]
 801bdd8:	b29a      	uxth	r2, r3
 801bdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bddc:	889b      	ldrh	r3, [r3, #4]
 801bdde:	b29b      	uxth	r3, r3
 801bde0:	429a      	cmp	r2, r3
 801bde2:	d03d      	beq.n	801be60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bde4:	2300      	movs	r3, #0
 801bde6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bde8:	e03a      	b.n	801be60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bdec:	88db      	ldrh	r3, [r3, #6]
 801bdee:	b29a      	uxth	r2, r3
 801bdf0:	693b      	ldr	r3, [r7, #16]
 801bdf2:	889b      	ldrh	r3, [r3, #4]
 801bdf4:	b29b      	uxth	r3, r3
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d902      	bls.n	801be00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdfa:	f04f 33ff 	mov.w	r3, #4294967295
 801bdfe:	e0c5      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	68ba      	ldr	r2, [r7, #8]
 801be04:	605a      	str	r2, [r3, #4]
      break;
 801be06:	e02b      	b.n	801be60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801be08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be0a:	889b      	ldrh	r3, [r3, #4]
 801be0c:	b29a      	uxth	r2, r3
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	889b      	ldrh	r3, [r3, #4]
 801be12:	b29b      	uxth	r3, r3
 801be14:	429a      	cmp	r2, r3
 801be16:	d102      	bne.n	801be1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be18:	f04f 33ff 	mov.w	r3, #4294967295
 801be1c:	e0b6      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be20:	889b      	ldrh	r3, [r3, #4]
 801be22:	b29a      	uxth	r2, r3
 801be24:	693b      	ldr	r3, [r7, #16]
 801be26:	88db      	ldrh	r3, [r3, #6]
 801be28:	b29b      	uxth	r3, r3
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d202      	bcs.n	801be34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be2e:	f04f 33ff 	mov.w	r3, #4294967295
 801be32:	e0ab      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801be34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be36:	2b00      	cmp	r3, #0
 801be38:	d009      	beq.n	801be4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801be3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be3c:	88db      	ldrh	r3, [r3, #6]
 801be3e:	b29a      	uxth	r2, r3
 801be40:	693b      	ldr	r3, [r7, #16]
 801be42:	889b      	ldrh	r3, [r3, #4]
 801be44:	b29b      	uxth	r3, r3
 801be46:	429a      	cmp	r2, r3
 801be48:	d001      	beq.n	801be4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be4a:	2300      	movs	r3, #0
 801be4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801be4e:	693b      	ldr	r3, [r7, #16]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801be54:	693b      	ldr	r3, [r7, #16]
 801be56:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801be58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d193      	bne.n	801bd86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801be5e:	e000      	b.n	801be62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801be60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801be62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be64:	2b00      	cmp	r3, #0
 801be66:	d12d      	bne.n	801bec4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801be68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d01c      	beq.n	801bea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be70:	88db      	ldrh	r3, [r3, #6]
 801be72:	b29a      	uxth	r2, r3
 801be74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be76:	889b      	ldrh	r3, [r3, #4]
 801be78:	b29b      	uxth	r3, r3
 801be7a:	429a      	cmp	r2, r3
 801be7c:	d906      	bls.n	801be8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801be7e:	4b45      	ldr	r3, [pc, #276]	@ (801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be80:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801be84:	4944      	ldr	r1, [pc, #272]	@ (801bf98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801be86:	4845      	ldr	r0, [pc, #276]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be88:	f001 fc58 	bl	801d73c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801be8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be8e:	68ba      	ldr	r2, [r7, #8]
 801be90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801be92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be94:	88db      	ldrh	r3, [r3, #6]
 801be96:	b29a      	uxth	r2, r3
 801be98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be9a:	889b      	ldrh	r3, [r3, #4]
 801be9c:	b29b      	uxth	r3, r3
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d010      	beq.n	801bec4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bea2:	2300      	movs	r3, #0
 801bea4:	623b      	str	r3, [r7, #32]
 801bea6:	e00d      	b.n	801bec4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	685b      	ldr	r3, [r3, #4]
 801beac:	2b00      	cmp	r3, #0
 801beae:	d006      	beq.n	801bebe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801beb0:	4b38      	ldr	r3, [pc, #224]	@ (801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801beb2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801beb6:	493a      	ldr	r1, [pc, #232]	@ (801bfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801beb8:	4838      	ldr	r0, [pc, #224]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801beba:	f001 fc3f 	bl	801d73c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	68ba      	ldr	r2, [r7, #8]
 801bec2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d105      	bne.n	801bed6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	7f9b      	ldrb	r3, [r3, #30]
 801bece:	f003 0301 	and.w	r3, r3, #1
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d059      	beq.n	801bf8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bed6:	6a3b      	ldr	r3, [r7, #32]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d04f      	beq.n	801bf7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	685b      	ldr	r3, [r3, #4]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d006      	beq.n	801bef2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	685b      	ldr	r3, [r3, #4]
 801bee8:	685b      	ldr	r3, [r3, #4]
 801beea:	889b      	ldrh	r3, [r3, #4]
 801beec:	b29b      	uxth	r3, r3
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d002      	beq.n	801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bef2:	2300      	movs	r3, #0
 801bef4:	623b      	str	r3, [r7, #32]
 801bef6:	e041      	b.n	801bf7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801befa:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf02:	e012      	b.n	801bf2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bf04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf06:	685b      	ldr	r3, [r3, #4]
 801bf08:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801bf0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bf0c:	88db      	ldrh	r3, [r3, #6]
 801bf0e:	b29a      	uxth	r2, r3
 801bf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf12:	889b      	ldrh	r3, [r3, #4]
 801bf14:	b29b      	uxth	r3, r3
 801bf16:	429a      	cmp	r2, r3
 801bf18:	d002      	beq.n	801bf20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bf1a:	2300      	movs	r3, #0
 801bf1c:	623b      	str	r3, [r7, #32]
            break;
 801bf1e:	e007      	b.n	801bf30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf22:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801bf24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801bf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d1e9      	bne.n	801bf04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bf30:	6a3b      	ldr	r3, [r7, #32]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d022      	beq.n	801bf7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	685b      	ldr	r3, [r3, #4]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d106      	bne.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bf3e:	4b15      	ldr	r3, [pc, #84]	@ (801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf40:	f240 12df 	movw	r2, #479	@ 0x1df
 801bf44:	4917      	ldr	r1, [pc, #92]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf46:	4815      	ldr	r0, [pc, #84]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf48:	f001 fbf8 	bl	801d73c <iprintf>
          LWIP_ASSERT("sanity check",
 801bf4c:	68fb      	ldr	r3, [r7, #12]
 801bf4e:	685b      	ldr	r3, [r3, #4]
 801bf50:	685b      	ldr	r3, [r3, #4]
 801bf52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf54:	429a      	cmp	r2, r3
 801bf56:	d106      	bne.n	801bf66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bf58:	4b0e      	ldr	r3, [pc, #56]	@ (801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf5a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801bf5e:	4911      	ldr	r1, [pc, #68]	@ (801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf60:	480e      	ldr	r0, [pc, #56]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf62:	f001 fbeb 	bl	801d73c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d006      	beq.n	801bf7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bf6e:	4b09      	ldr	r3, [pc, #36]	@ (801bf94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf70:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801bf74:	490c      	ldr	r1, [pc, #48]	@ (801bfa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bf76:	4809      	ldr	r0, [pc, #36]	@ (801bf9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf78:	f001 fbe0 	bl	801d73c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bf7c:	6a3b      	ldr	r3, [r7, #32]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	bf14      	ite	ne
 801bf82:	2301      	movne	r3, #1
 801bf84:	2300      	moveq	r3, #0
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	e000      	b.n	801bf8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bf8a:	2300      	movs	r3, #0
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3730      	adds	r7, #48	@ 0x30
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	08022d34 	.word	0x08022d34
 801bf98:	08022e18 	.word	0x08022e18
 801bf9c:	08022d7c 	.word	0x08022d7c
 801bfa0:	08022e38 	.word	0x08022e38
 801bfa4:	08022e70 	.word	0x08022e70
 801bfa8:	08022e80 	.word	0x08022e80

0801bfac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b08e      	sub	sp, #56	@ 0x38
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	685b      	ldr	r3, [r3, #4]
 801bfb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bfba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfbc:	781b      	ldrb	r3, [r3, #0]
 801bfbe:	f003 030f 	and.w	r3, r3, #15
 801bfc2:	b2db      	uxtb	r3, r3
 801bfc4:	009b      	lsls	r3, r3, #2
 801bfc6:	b2db      	uxtb	r3, r3
 801bfc8:	2b14      	cmp	r3, #20
 801bfca:	f040 8171 	bne.w	801c2b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfd0:	88db      	ldrh	r3, [r3, #6]
 801bfd2:	b29b      	uxth	r3, r3
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	f7f5 ff39 	bl	8011e4c <lwip_htons>
 801bfda:	4603      	mov	r3, r0
 801bfdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bfe0:	b29b      	uxth	r3, r3
 801bfe2:	00db      	lsls	r3, r3, #3
 801bfe4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfe8:	885b      	ldrh	r3, [r3, #2]
 801bfea:	b29b      	uxth	r3, r3
 801bfec:	4618      	mov	r0, r3
 801bfee:	f7f5 ff2d 	bl	8011e4c <lwip_htons>
 801bff2:	4603      	mov	r3, r0
 801bff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	f003 030f 	and.w	r3, r3, #15
 801bffe:	b2db      	uxtb	r3, r3
 801c000:	009b      	lsls	r3, r3, #2
 801c002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c006:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c00a:	b29b      	uxth	r3, r3
 801c00c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c00e:	429a      	cmp	r2, r3
 801c010:	f0c0 8150 	bcc.w	801c2b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c014:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c018:	b29b      	uxth	r3, r3
 801c01a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c01c:	1ad3      	subs	r3, r2, r3
 801c01e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c020:	6878      	ldr	r0, [r7, #4]
 801c022:	f7f7 fb61 	bl	80136e8 <pbuf_clen>
 801c026:	4603      	mov	r3, r0
 801c028:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c02a:	4b8c      	ldr	r3, [pc, #560]	@ (801c25c <ip4_reass+0x2b0>)
 801c02c:	881b      	ldrh	r3, [r3, #0]
 801c02e:	461a      	mov	r2, r3
 801c030:	8c3b      	ldrh	r3, [r7, #32]
 801c032:	4413      	add	r3, r2
 801c034:	2b0a      	cmp	r3, #10
 801c036:	dd10      	ble.n	801c05a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c038:	8c3b      	ldrh	r3, [r7, #32]
 801c03a:	4619      	mov	r1, r3
 801c03c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c03e:	f7ff fd81 	bl	801bb44 <ip_reass_remove_oldest_datagram>
 801c042:	4603      	mov	r3, r0
 801c044:	2b00      	cmp	r3, #0
 801c046:	f000 8137 	beq.w	801c2b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c04a:	4b84      	ldr	r3, [pc, #528]	@ (801c25c <ip4_reass+0x2b0>)
 801c04c:	881b      	ldrh	r3, [r3, #0]
 801c04e:	461a      	mov	r2, r3
 801c050:	8c3b      	ldrh	r3, [r7, #32]
 801c052:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c054:	2b0a      	cmp	r3, #10
 801c056:	f300 812f 	bgt.w	801c2b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c05a:	4b81      	ldr	r3, [pc, #516]	@ (801c260 <ip4_reass+0x2b4>)
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	633b      	str	r3, [r7, #48]	@ 0x30
 801c060:	e015      	b.n	801c08e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c064:	695a      	ldr	r2, [r3, #20]
 801c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c068:	68db      	ldr	r3, [r3, #12]
 801c06a:	429a      	cmp	r2, r3
 801c06c:	d10c      	bne.n	801c088 <ip4_reass+0xdc>
 801c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c070:	699a      	ldr	r2, [r3, #24]
 801c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c074:	691b      	ldr	r3, [r3, #16]
 801c076:	429a      	cmp	r2, r3
 801c078:	d106      	bne.n	801c088 <ip4_reass+0xdc>
 801c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c07c:	899a      	ldrh	r2, [r3, #12]
 801c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c080:	889b      	ldrh	r3, [r3, #4]
 801c082:	b29b      	uxth	r3, r3
 801c084:	429a      	cmp	r2, r3
 801c086:	d006      	beq.n	801c096 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	633b      	str	r3, [r7, #48]	@ 0x30
 801c08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c090:	2b00      	cmp	r3, #0
 801c092:	d1e6      	bne.n	801c062 <ip4_reass+0xb6>
 801c094:	e000      	b.n	801c098 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c096:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d109      	bne.n	801c0b2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c09e:	8c3b      	ldrh	r3, [r7, #32]
 801c0a0:	4619      	mov	r1, r3
 801c0a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c0a4:	f7ff fdb0 	bl	801bc08 <ip_reass_enqueue_new_datagram>
 801c0a8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d11c      	bne.n	801c0ea <ip4_reass+0x13e>
      goto nullreturn;
 801c0b0:	e105      	b.n	801c2be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0b4:	88db      	ldrh	r3, [r3, #6]
 801c0b6:	b29b      	uxth	r3, r3
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f7f5 fec7 	bl	8011e4c <lwip_htons>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d110      	bne.n	801c0ea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0ca:	89db      	ldrh	r3, [r3, #14]
 801c0cc:	4618      	mov	r0, r3
 801c0ce:	f7f5 febd 	bl	8011e4c <lwip_htons>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d006      	beq.n	801c0ea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c0de:	3308      	adds	r3, #8
 801c0e0:	2214      	movs	r2, #20
 801c0e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	f001 fcdc 	bl	801daa2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ec:	88db      	ldrh	r3, [r3, #6]
 801c0ee:	b29b      	uxth	r3, r3
 801c0f0:	f003 0320 	and.w	r3, r3, #32
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	bf0c      	ite	eq
 801c0f8:	2301      	moveq	r3, #1
 801c0fa:	2300      	movne	r3, #0
 801c0fc:	b2db      	uxtb	r3, r3
 801c0fe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c100:	69fb      	ldr	r3, [r7, #28]
 801c102:	2b00      	cmp	r3, #0
 801c104:	d00e      	beq.n	801c124 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c106:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c10a:	4413      	add	r3, r2
 801c10c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c10e:	8b7a      	ldrh	r2, [r7, #26]
 801c110:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c112:	429a      	cmp	r2, r3
 801c114:	f0c0 80a0 	bcc.w	801c258 <ip4_reass+0x2ac>
 801c118:	8b7b      	ldrh	r3, [r7, #26]
 801c11a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c11e:	4293      	cmp	r3, r2
 801c120:	f200 809a 	bhi.w	801c258 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c124:	69fa      	ldr	r2, [r7, #28]
 801c126:	6879      	ldr	r1, [r7, #4]
 801c128:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c12a:	f7ff fdd5 	bl	801bcd8 <ip_reass_chain_frag_into_datagram_and_validate>
 801c12e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c136:	f000 809b 	beq.w	801c270 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c13a:	4b48      	ldr	r3, [pc, #288]	@ (801c25c <ip4_reass+0x2b0>)
 801c13c:	881a      	ldrh	r2, [r3, #0]
 801c13e:	8c3b      	ldrh	r3, [r7, #32]
 801c140:	4413      	add	r3, r2
 801c142:	b29a      	uxth	r2, r3
 801c144:	4b45      	ldr	r3, [pc, #276]	@ (801c25c <ip4_reass+0x2b0>)
 801c146:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c148:	69fb      	ldr	r3, [r7, #28]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d00d      	beq.n	801c16a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c14e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c150:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c152:	4413      	add	r3, r2
 801c154:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c158:	8a7a      	ldrh	r2, [r7, #18]
 801c15a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c15e:	7f9b      	ldrb	r3, [r3, #30]
 801c160:	f043 0301 	orr.w	r3, r3, #1
 801c164:	b2da      	uxtb	r2, r3
 801c166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c168:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c16a:	697b      	ldr	r3, [r7, #20]
 801c16c:	2b01      	cmp	r3, #1
 801c16e:	d171      	bne.n	801c254 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c172:	8b9b      	ldrh	r3, [r3, #28]
 801c174:	3314      	adds	r3, #20
 801c176:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c17a:	685b      	ldr	r3, [r3, #4]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	681b      	ldr	r3, [r3, #0]
 801c180:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c184:	685b      	ldr	r3, [r3, #4]
 801c186:	685b      	ldr	r3, [r3, #4]
 801c188:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c18c:	3308      	adds	r3, #8
 801c18e:	2214      	movs	r2, #20
 801c190:	4619      	mov	r1, r3
 801c192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c194:	f001 fc85 	bl	801daa2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c198:	8a3b      	ldrh	r3, [r7, #16]
 801c19a:	4618      	mov	r0, r3
 801c19c:	f7f5 fe56 	bl	8011e4c <lwip_htons>
 801c1a0:	4603      	mov	r3, r0
 801c1a2:	461a      	mov	r2, r3
 801c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1a6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	719a      	strb	r2, [r3, #6]
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	729a      	strb	r2, [r3, #10]
 801c1b8:	2200      	movs	r2, #0
 801c1ba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c1c2:	e00d      	b.n	801c1e0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1c6:	685b      	ldr	r3, [r3, #4]
 801c1c8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c1ca:	2114      	movs	r1, #20
 801c1cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c1ce:	f7f7 f977 	bl	80134c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c1d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c1d4:	6878      	ldr	r0, [r7, #4]
 801c1d6:	f7f7 fac7 	bl	8013768 <pbuf_cat>
      r = iprh->next_pbuf;
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d1ee      	bne.n	801c1c4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c1e6:	4b1e      	ldr	r3, [pc, #120]	@ (801c260 <ip4_reass+0x2b4>)
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	d102      	bne.n	801c1f6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c1f0:	2300      	movs	r3, #0
 801c1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1f4:	e010      	b.n	801c218 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c1f6:	4b1a      	ldr	r3, [pc, #104]	@ (801c260 <ip4_reass+0x2b4>)
 801c1f8:	681b      	ldr	r3, [r3, #0]
 801c1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c1fc:	e007      	b.n	801c20e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c204:	429a      	cmp	r2, r3
 801c206:	d006      	beq.n	801c216 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c210:	2b00      	cmp	r3, #0
 801c212:	d1f4      	bne.n	801c1fe <ip4_reass+0x252>
 801c214:	e000      	b.n	801c218 <ip4_reass+0x26c>
          break;
 801c216:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c218:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c21a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c21c:	f7ff fd2e 	bl	801bc7c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c220:	6878      	ldr	r0, [r7, #4]
 801c222:	f7f7 fa61 	bl	80136e8 <pbuf_clen>
 801c226:	4603      	mov	r3, r0
 801c228:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c22a:	4b0c      	ldr	r3, [pc, #48]	@ (801c25c <ip4_reass+0x2b0>)
 801c22c:	881b      	ldrh	r3, [r3, #0]
 801c22e:	8c3a      	ldrh	r2, [r7, #32]
 801c230:	429a      	cmp	r2, r3
 801c232:	d906      	bls.n	801c242 <ip4_reass+0x296>
 801c234:	4b0b      	ldr	r3, [pc, #44]	@ (801c264 <ip4_reass+0x2b8>)
 801c236:	f240 229b 	movw	r2, #667	@ 0x29b
 801c23a:	490b      	ldr	r1, [pc, #44]	@ (801c268 <ip4_reass+0x2bc>)
 801c23c:	480b      	ldr	r0, [pc, #44]	@ (801c26c <ip4_reass+0x2c0>)
 801c23e:	f001 fa7d 	bl	801d73c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c242:	4b06      	ldr	r3, [pc, #24]	@ (801c25c <ip4_reass+0x2b0>)
 801c244:	881a      	ldrh	r2, [r3, #0]
 801c246:	8c3b      	ldrh	r3, [r7, #32]
 801c248:	1ad3      	subs	r3, r2, r3
 801c24a:	b29a      	uxth	r2, r3
 801c24c:	4b03      	ldr	r3, [pc, #12]	@ (801c25c <ip4_reass+0x2b0>)
 801c24e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	e038      	b.n	801c2c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c254:	2300      	movs	r3, #0
 801c256:	e036      	b.n	801c2c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c258:	bf00      	nop
 801c25a:	e00a      	b.n	801c272 <ip4_reass+0x2c6>
 801c25c:	2000cb18 	.word	0x2000cb18
 801c260:	2000cb14 	.word	0x2000cb14
 801c264:	08022d34 	.word	0x08022d34
 801c268:	08022ea4 	.word	0x08022ea4
 801c26c:	08022d7c 	.word	0x08022d7c
    goto nullreturn_ipr;
 801c270:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c274:	2b00      	cmp	r3, #0
 801c276:	d106      	bne.n	801c286 <ip4_reass+0x2da>
 801c278:	4b15      	ldr	r3, [pc, #84]	@ (801c2d0 <ip4_reass+0x324>)
 801c27a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c27e:	4915      	ldr	r1, [pc, #84]	@ (801c2d4 <ip4_reass+0x328>)
 801c280:	4815      	ldr	r0, [pc, #84]	@ (801c2d8 <ip4_reass+0x32c>)
 801c282:	f001 fa5b 	bl	801d73c <iprintf>
  if (ipr->p == NULL) {
 801c286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c288:	685b      	ldr	r3, [r3, #4]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d116      	bne.n	801c2bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c28e:	4b13      	ldr	r3, [pc, #76]	@ (801c2dc <ip4_reass+0x330>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c294:	429a      	cmp	r2, r3
 801c296:	d006      	beq.n	801c2a6 <ip4_reass+0x2fa>
 801c298:	4b0d      	ldr	r3, [pc, #52]	@ (801c2d0 <ip4_reass+0x324>)
 801c29a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c29e:	4910      	ldr	r1, [pc, #64]	@ (801c2e0 <ip4_reass+0x334>)
 801c2a0:	480d      	ldr	r0, [pc, #52]	@ (801c2d8 <ip4_reass+0x32c>)
 801c2a2:	f001 fa4b 	bl	801d73c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c2a6:	2100      	movs	r1, #0
 801c2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c2aa:	f7ff fce7 	bl	801bc7c <ip_reass_dequeue_datagram>
 801c2ae:	e006      	b.n	801c2be <ip4_reass+0x312>
    goto nullreturn;
 801c2b0:	bf00      	nop
 801c2b2:	e004      	b.n	801c2be <ip4_reass+0x312>
    goto nullreturn;
 801c2b4:	bf00      	nop
 801c2b6:	e002      	b.n	801c2be <ip4_reass+0x312>
      goto nullreturn;
 801c2b8:	bf00      	nop
 801c2ba:	e000      	b.n	801c2be <ip4_reass+0x312>
  }

nullreturn:
 801c2bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c2be:	6878      	ldr	r0, [r7, #4]
 801c2c0:	f7f7 f984 	bl	80135cc <pbuf_free>
  return NULL;
 801c2c4:	2300      	movs	r3, #0
}
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	3738      	adds	r7, #56	@ 0x38
 801c2ca:	46bd      	mov	sp, r7
 801c2cc:	bd80      	pop	{r7, pc}
 801c2ce:	bf00      	nop
 801c2d0:	08022d34 	.word	0x08022d34
 801c2d4:	08022ec0 	.word	0x08022ec0
 801c2d8:	08022d7c 	.word	0x08022d7c
 801c2dc:	2000cb14 	.word	0x2000cb14
 801c2e0:	08022ecc 	.word	0x08022ecc

0801c2e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c2e8:	2005      	movs	r0, #5
 801c2ea:	f7f6 fa87 	bl	80127fc <memp_malloc>
 801c2ee:	4603      	mov	r3, r0
}
 801c2f0:	4618      	mov	r0, r3
 801c2f2:	bd80      	pop	{r7, pc}

0801c2f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b082      	sub	sp, #8
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d106      	bne.n	801c310 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c302:	4b07      	ldr	r3, [pc, #28]	@ (801c320 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c304:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c308:	4906      	ldr	r1, [pc, #24]	@ (801c324 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c30a:	4807      	ldr	r0, [pc, #28]	@ (801c328 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c30c:	f001 fa16 	bl	801d73c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c310:	6879      	ldr	r1, [r7, #4]
 801c312:	2005      	movs	r0, #5
 801c314:	f7f6 fae8 	bl	80128e8 <memp_free>
}
 801c318:	bf00      	nop
 801c31a:	3708      	adds	r7, #8
 801c31c:	46bd      	mov	sp, r7
 801c31e:	bd80      	pop	{r7, pc}
 801c320:	08022d34 	.word	0x08022d34
 801c324:	08022eec 	.word	0x08022eec
 801c328:	08022d7c 	.word	0x08022d7c

0801c32c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b084      	sub	sp, #16
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c338:	68fb      	ldr	r3, [r7, #12]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d106      	bne.n	801c34c <ipfrag_free_pbuf_custom+0x20>
 801c33e:	4b11      	ldr	r3, [pc, #68]	@ (801c384 <ipfrag_free_pbuf_custom+0x58>)
 801c340:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c344:	4910      	ldr	r1, [pc, #64]	@ (801c388 <ipfrag_free_pbuf_custom+0x5c>)
 801c346:	4811      	ldr	r0, [pc, #68]	@ (801c38c <ipfrag_free_pbuf_custom+0x60>)
 801c348:	f001 f9f8 	bl	801d73c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c34c:	68fa      	ldr	r2, [r7, #12]
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	429a      	cmp	r2, r3
 801c352:	d006      	beq.n	801c362 <ipfrag_free_pbuf_custom+0x36>
 801c354:	4b0b      	ldr	r3, [pc, #44]	@ (801c384 <ipfrag_free_pbuf_custom+0x58>)
 801c356:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c35a:	490d      	ldr	r1, [pc, #52]	@ (801c390 <ipfrag_free_pbuf_custom+0x64>)
 801c35c:	480b      	ldr	r0, [pc, #44]	@ (801c38c <ipfrag_free_pbuf_custom+0x60>)
 801c35e:	f001 f9ed 	bl	801d73c <iprintf>
  if (pcr->original != NULL) {
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	695b      	ldr	r3, [r3, #20]
 801c366:	2b00      	cmp	r3, #0
 801c368:	d004      	beq.n	801c374 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	695b      	ldr	r3, [r3, #20]
 801c36e:	4618      	mov	r0, r3
 801c370:	f7f7 f92c 	bl	80135cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c374:	68f8      	ldr	r0, [r7, #12]
 801c376:	f7ff ffbd 	bl	801c2f4 <ip_frag_free_pbuf_custom_ref>
}
 801c37a:	bf00      	nop
 801c37c:	3710      	adds	r7, #16
 801c37e:	46bd      	mov	sp, r7
 801c380:	bd80      	pop	{r7, pc}
 801c382:	bf00      	nop
 801c384:	08022d34 	.word	0x08022d34
 801c388:	08022ef8 	.word	0x08022ef8
 801c38c:	08022d7c 	.word	0x08022d7c
 801c390:	08022f04 	.word	0x08022f04

0801c394 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b094      	sub	sp, #80	@ 0x50
 801c398:	af02      	add	r7, sp, #8
 801c39a:	60f8      	str	r0, [r7, #12]
 801c39c:	60b9      	str	r1, [r7, #8]
 801c39e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c3a0:	2300      	movs	r3, #0
 801c3a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c3aa:	3b14      	subs	r3, #20
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	da00      	bge.n	801c3b2 <ip4_frag+0x1e>
 801c3b0:	3307      	adds	r3, #7
 801c3b2:	10db      	asrs	r3, r3, #3
 801c3b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c3b6:	2314      	movs	r3, #20
 801c3b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	685b      	ldr	r3, [r3, #4]
 801c3be:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c3c2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3c6:	781b      	ldrb	r3, [r3, #0]
 801c3c8:	f003 030f 	and.w	r3, r3, #15
 801c3cc:	b2db      	uxtb	r3, r3
 801c3ce:	009b      	lsls	r3, r3, #2
 801c3d0:	b2db      	uxtb	r3, r3
 801c3d2:	2b14      	cmp	r3, #20
 801c3d4:	d002      	beq.n	801c3dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c3d6:	f06f 0305 	mvn.w	r3, #5
 801c3da:	e110      	b.n	801c5fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	895b      	ldrh	r3, [r3, #10]
 801c3e0:	2b13      	cmp	r3, #19
 801c3e2:	d809      	bhi.n	801c3f8 <ip4_frag+0x64>
 801c3e4:	4b88      	ldr	r3, [pc, #544]	@ (801c608 <ip4_frag+0x274>)
 801c3e6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c3ea:	4988      	ldr	r1, [pc, #544]	@ (801c60c <ip4_frag+0x278>)
 801c3ec:	4888      	ldr	r0, [pc, #544]	@ (801c610 <ip4_frag+0x27c>)
 801c3ee:	f001 f9a5 	bl	801d73c <iprintf>
 801c3f2:	f06f 0305 	mvn.w	r3, #5
 801c3f6:	e102      	b.n	801c5fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3fa:	88db      	ldrh	r3, [r3, #6]
 801c3fc:	b29b      	uxth	r3, r3
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7f5 fd24 	bl	8011e4c <lwip_htons>
 801c404:	4603      	mov	r3, r0
 801c406:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c408:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c40a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c40e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c412:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c418:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	891b      	ldrh	r3, [r3, #8]
 801c41e:	3b14      	subs	r3, #20
 801c420:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c424:	e0e1      	b.n	801c5ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c426:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c428:	00db      	lsls	r3, r3, #3
 801c42a:	b29b      	uxth	r3, r3
 801c42c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c430:	4293      	cmp	r3, r2
 801c432:	bf28      	it	cs
 801c434:	4613      	movcs	r3, r2
 801c436:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c438:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c43c:	2114      	movs	r1, #20
 801c43e:	200e      	movs	r0, #14
 801c440:	f7f6 fde0 	bl	8013004 <pbuf_alloc>
 801c444:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c448:	2b00      	cmp	r3, #0
 801c44a:	f000 80d5 	beq.w	801c5f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c450:	895b      	ldrh	r3, [r3, #10]
 801c452:	2b13      	cmp	r3, #19
 801c454:	d806      	bhi.n	801c464 <ip4_frag+0xd0>
 801c456:	4b6c      	ldr	r3, [pc, #432]	@ (801c608 <ip4_frag+0x274>)
 801c458:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c45c:	496d      	ldr	r1, [pc, #436]	@ (801c614 <ip4_frag+0x280>)
 801c45e:	486c      	ldr	r0, [pc, #432]	@ (801c610 <ip4_frag+0x27c>)
 801c460:	f001 f96c 	bl	801d73c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c466:	685b      	ldr	r3, [r3, #4]
 801c468:	2214      	movs	r2, #20
 801c46a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c46c:	4618      	mov	r0, r3
 801c46e:	f001 fb18 	bl	801daa2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c474:	685b      	ldr	r3, [r3, #4]
 801c476:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c478:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c47a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c47e:	e064      	b.n	801c54a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	895a      	ldrh	r2, [r3, #10]
 801c484:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c486:	1ad3      	subs	r3, r2, r3
 801c488:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	895b      	ldrh	r3, [r3, #10]
 801c48e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c490:	429a      	cmp	r2, r3
 801c492:	d906      	bls.n	801c4a2 <ip4_frag+0x10e>
 801c494:	4b5c      	ldr	r3, [pc, #368]	@ (801c608 <ip4_frag+0x274>)
 801c496:	f240 322d 	movw	r2, #813	@ 0x32d
 801c49a:	495f      	ldr	r1, [pc, #380]	@ (801c618 <ip4_frag+0x284>)
 801c49c:	485c      	ldr	r0, [pc, #368]	@ (801c610 <ip4_frag+0x27c>)
 801c49e:	f001 f94d 	bl	801d73c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c4a2:	8bfa      	ldrh	r2, [r7, #30]
 801c4a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c4a8:	4293      	cmp	r3, r2
 801c4aa:	bf28      	it	cs
 801c4ac:	4613      	movcs	r3, r2
 801c4ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c4b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d105      	bne.n	801c4c6 <ip4_frag+0x132>
        poff = 0;
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c4be:	68fb      	ldr	r3, [r7, #12]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	60fb      	str	r3, [r7, #12]
        continue;
 801c4c4:	e041      	b.n	801c54a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c4c6:	f7ff ff0d 	bl	801c2e4 <ip_frag_alloc_pbuf_custom_ref>
 801c4ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c4cc:	69bb      	ldr	r3, [r7, #24]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d103      	bne.n	801c4da <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c4d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c4d4:	f7f7 f87a 	bl	80135cc <pbuf_free>
        goto memerr;
 801c4d8:	e08f      	b.n	801c5fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c4da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c4dc:	68fb      	ldr	r3, [r7, #12]
 801c4de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c4e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c4e2:	4413      	add	r3, r2
 801c4e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c4e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c4ec:	9201      	str	r2, [sp, #4]
 801c4ee:	9300      	str	r3, [sp, #0]
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	2241      	movs	r2, #65	@ 0x41
 801c4f4:	2000      	movs	r0, #0
 801c4f6:	f7f6 feaf 	bl	8013258 <pbuf_alloced_custom>
 801c4fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d106      	bne.n	801c510 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c502:	69b8      	ldr	r0, [r7, #24]
 801c504:	f7ff fef6 	bl	801c2f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c50a:	f7f7 f85f 	bl	80135cc <pbuf_free>
        goto memerr;
 801c50e:	e074      	b.n	801c5fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c510:	68f8      	ldr	r0, [r7, #12]
 801c512:	f7f7 f901 	bl	8013718 <pbuf_ref>
      pcr->original = p;
 801c516:	69bb      	ldr	r3, [r7, #24]
 801c518:	68fa      	ldr	r2, [r7, #12]
 801c51a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c51c:	69bb      	ldr	r3, [r7, #24]
 801c51e:	4a3f      	ldr	r2, [pc, #252]	@ (801c61c <ip4_frag+0x288>)
 801c520:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c522:	6979      	ldr	r1, [r7, #20]
 801c524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c526:	f7f7 f91f 	bl	8013768 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c52a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c52e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c532:	1ad3      	subs	r3, r2, r3
 801c534:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c538:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d004      	beq.n	801c54a <ip4_frag+0x1b6>
        poff = 0;
 801c540:	2300      	movs	r3, #0
 801c542:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	681b      	ldr	r3, [r3, #0]
 801c548:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c54a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d196      	bne.n	801c480 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c552:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c554:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c558:	4413      	add	r3, r2
 801c55a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c55c:	68bb      	ldr	r3, [r7, #8]
 801c55e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c560:	f1a3 0213 	sub.w	r2, r3, #19
 801c564:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c568:	429a      	cmp	r2, r3
 801c56a:	bfcc      	ite	gt
 801c56c:	2301      	movgt	r3, #1
 801c56e:	2300      	movle	r3, #0
 801c570:	b2db      	uxtb	r3, r3
 801c572:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c574:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c57c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c57e:	6a3b      	ldr	r3, [r7, #32]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d002      	beq.n	801c58a <ip4_frag+0x1f6>
 801c584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c586:	2b00      	cmp	r3, #0
 801c588:	d003      	beq.n	801c592 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c58a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c58c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c590:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c592:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c594:	4618      	mov	r0, r3
 801c596:	f7f5 fc59 	bl	8011e4c <lwip_htons>
 801c59a:	4603      	mov	r3, r0
 801c59c:	461a      	mov	r2, r3
 801c59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c5a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5a4:	3314      	adds	r3, #20
 801c5a6:	b29b      	uxth	r3, r3
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f7f5 fc4f 	bl	8011e4c <lwip_htons>
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	729a      	strb	r2, [r3, #10]
 801c5bc:	2200      	movs	r2, #0
 801c5be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c5c0:	68bb      	ldr	r3, [r7, #8]
 801c5c2:	695b      	ldr	r3, [r3, #20]
 801c5c4:	687a      	ldr	r2, [r7, #4]
 801c5c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c5c8:	68b8      	ldr	r0, [r7, #8]
 801c5ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c5cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c5ce:	f7f6 fffd 	bl	80135cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c5d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c5d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c5d8:	1ad3      	subs	r3, r2, r3
 801c5da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c5de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c5e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c5e4:	4413      	add	r3, r2
 801c5e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c5ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	f47f af19 	bne.w	801c426 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	e002      	b.n	801c5fe <ip4_frag+0x26a>
      goto memerr;
 801c5f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c5fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c5fe:	4618      	mov	r0, r3
 801c600:	3748      	adds	r7, #72	@ 0x48
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}
 801c606:	bf00      	nop
 801c608:	08022d34 	.word	0x08022d34
 801c60c:	08022f10 	.word	0x08022f10
 801c610:	08022d7c 	.word	0x08022d7c
 801c614:	08022f2c 	.word	0x08022f2c
 801c618:	08022f4c 	.word	0x08022f4c
 801c61c:	0801c32d 	.word	0x0801c32d

0801c620 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b086      	sub	sp, #24
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c62a:	230e      	movs	r3, #14
 801c62c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	895b      	ldrh	r3, [r3, #10]
 801c632:	2b0e      	cmp	r3, #14
 801c634:	d96e      	bls.n	801c714 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	7bdb      	ldrb	r3, [r3, #15]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d106      	bne.n	801c64c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801c644:	3301      	adds	r3, #1
 801c646:	b2da      	uxtb	r2, r3
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	685b      	ldr	r3, [r3, #4]
 801c650:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c652:	693b      	ldr	r3, [r7, #16]
 801c654:	7b1a      	ldrb	r2, [r3, #12]
 801c656:	7b5b      	ldrb	r3, [r3, #13]
 801c658:	021b      	lsls	r3, r3, #8
 801c65a:	4313      	orrs	r3, r2
 801c65c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c65e:	693b      	ldr	r3, [r7, #16]
 801c660:	781b      	ldrb	r3, [r3, #0]
 801c662:	f003 0301 	and.w	r3, r3, #1
 801c666:	2b00      	cmp	r3, #0
 801c668:	d023      	beq.n	801c6b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c66a:	693b      	ldr	r3, [r7, #16]
 801c66c:	781b      	ldrb	r3, [r3, #0]
 801c66e:	2b01      	cmp	r3, #1
 801c670:	d10f      	bne.n	801c692 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c672:	693b      	ldr	r3, [r7, #16]
 801c674:	785b      	ldrb	r3, [r3, #1]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d11b      	bne.n	801c6b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c67e:	2b5e      	cmp	r3, #94	@ 0x5e
 801c680:	d117      	bne.n	801c6b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	7b5b      	ldrb	r3, [r3, #13]
 801c686:	f043 0310 	orr.w	r3, r3, #16
 801c68a:	b2da      	uxtb	r2, r3
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	735a      	strb	r2, [r3, #13]
 801c690:	e00f      	b.n	801c6b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c692:	693b      	ldr	r3, [r7, #16]
 801c694:	2206      	movs	r2, #6
 801c696:	4928      	ldr	r1, [pc, #160]	@ (801c738 <ethernet_input+0x118>)
 801c698:	4618      	mov	r0, r3
 801c69a:	f001 f8da 	bl	801d852 <memcmp>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d106      	bne.n	801c6b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	7b5b      	ldrb	r3, [r3, #13]
 801c6a8:	f043 0308 	orr.w	r3, r3, #8
 801c6ac:	b2da      	uxtb	r2, r3
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c6b2:	89fb      	ldrh	r3, [r7, #14]
 801c6b4:	2b08      	cmp	r3, #8
 801c6b6:	d003      	beq.n	801c6c0 <ethernet_input+0xa0>
 801c6b8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c6bc:	d014      	beq.n	801c6e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c6be:	e032      	b.n	801c726 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c6c6:	f003 0308 	and.w	r3, r3, #8
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	d024      	beq.n	801c718 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c6ce:	8afb      	ldrh	r3, [r7, #22]
 801c6d0:	4619      	mov	r1, r3
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f7f6 fef4 	bl	80134c0 <pbuf_remove_header>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d11e      	bne.n	801c71c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c6de:	6839      	ldr	r1, [r7, #0]
 801c6e0:	6878      	ldr	r0, [r7, #4]
 801c6e2:	f7fe fe91 	bl	801b408 <ip4_input>
      break;
 801c6e6:	e013      	b.n	801c710 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c6e8:	683b      	ldr	r3, [r7, #0]
 801c6ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801c6ee:	f003 0308 	and.w	r3, r3, #8
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d014      	beq.n	801c720 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c6f6:	8afb      	ldrh	r3, [r7, #22]
 801c6f8:	4619      	mov	r1, r3
 801c6fa:	6878      	ldr	r0, [r7, #4]
 801c6fc:	f7f6 fee0 	bl	80134c0 <pbuf_remove_header>
 801c700:	4603      	mov	r3, r0
 801c702:	2b00      	cmp	r3, #0
 801c704:	d10e      	bne.n	801c724 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c706:	6839      	ldr	r1, [r7, #0]
 801c708:	6878      	ldr	r0, [r7, #4]
 801c70a:	f7fe f833 	bl	801a774 <etharp_input>
      break;
 801c70e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c710:	2300      	movs	r3, #0
 801c712:	e00c      	b.n	801c72e <ethernet_input+0x10e>
    goto free_and_return;
 801c714:	bf00      	nop
 801c716:	e006      	b.n	801c726 <ethernet_input+0x106>
        goto free_and_return;
 801c718:	bf00      	nop
 801c71a:	e004      	b.n	801c726 <ethernet_input+0x106>
        goto free_and_return;
 801c71c:	bf00      	nop
 801c71e:	e002      	b.n	801c726 <ethernet_input+0x106>
        goto free_and_return;
 801c720:	bf00      	nop
 801c722:	e000      	b.n	801c726 <ethernet_input+0x106>
        goto free_and_return;
 801c724:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c726:	6878      	ldr	r0, [r7, #4]
 801c728:	f7f6 ff50 	bl	80135cc <pbuf_free>
  return ERR_OK;
 801c72c:	2300      	movs	r3, #0
}
 801c72e:	4618      	mov	r0, r3
 801c730:	3718      	adds	r7, #24
 801c732:	46bd      	mov	sp, r7
 801c734:	bd80      	pop	{r7, pc}
 801c736:	bf00      	nop
 801c738:	08023178 	.word	0x08023178

0801c73c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b086      	sub	sp, #24
 801c740:	af00      	add	r7, sp, #0
 801c742:	60f8      	str	r0, [r7, #12]
 801c744:	60b9      	str	r1, [r7, #8]
 801c746:	607a      	str	r2, [r7, #4]
 801c748:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c74a:	8c3b      	ldrh	r3, [r7, #32]
 801c74c:	4618      	mov	r0, r3
 801c74e:	f7f5 fb7d 	bl	8011e4c <lwip_htons>
 801c752:	4603      	mov	r3, r0
 801c754:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c756:	210e      	movs	r1, #14
 801c758:	68b8      	ldr	r0, [r7, #8]
 801c75a:	f7f6 fea1 	bl	80134a0 <pbuf_add_header>
 801c75e:	4603      	mov	r3, r0
 801c760:	2b00      	cmp	r3, #0
 801c762:	d125      	bne.n	801c7b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c764:	68bb      	ldr	r3, [r7, #8]
 801c766:	685b      	ldr	r3, [r3, #4]
 801c768:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c76a:	693b      	ldr	r3, [r7, #16]
 801c76c:	8afa      	ldrh	r2, [r7, #22]
 801c76e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c770:	693b      	ldr	r3, [r7, #16]
 801c772:	2206      	movs	r2, #6
 801c774:	6839      	ldr	r1, [r7, #0]
 801c776:	4618      	mov	r0, r3
 801c778:	f001 f993 	bl	801daa2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c77c:	693b      	ldr	r3, [r7, #16]
 801c77e:	3306      	adds	r3, #6
 801c780:	2206      	movs	r2, #6
 801c782:	6879      	ldr	r1, [r7, #4]
 801c784:	4618      	mov	r0, r3
 801c786:	f001 f98c 	bl	801daa2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c790:	2b06      	cmp	r3, #6
 801c792:	d006      	beq.n	801c7a2 <ethernet_output+0x66>
 801c794:	4b0a      	ldr	r3, [pc, #40]	@ (801c7c0 <ethernet_output+0x84>)
 801c796:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801c79a:	490a      	ldr	r1, [pc, #40]	@ (801c7c4 <ethernet_output+0x88>)
 801c79c:	480a      	ldr	r0, [pc, #40]	@ (801c7c8 <ethernet_output+0x8c>)
 801c79e:	f000 ffcd 	bl	801d73c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	699b      	ldr	r3, [r3, #24]
 801c7a6:	68b9      	ldr	r1, [r7, #8]
 801c7a8:	68f8      	ldr	r0, [r7, #12]
 801c7aa:	4798      	blx	r3
 801c7ac:	4603      	mov	r3, r0
 801c7ae:	e002      	b.n	801c7b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c7b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c7b2:	f06f 0301 	mvn.w	r3, #1
}
 801c7b6:	4618      	mov	r0, r3
 801c7b8:	3718      	adds	r7, #24
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	bd80      	pop	{r7, pc}
 801c7be:	bf00      	nop
 801c7c0:	08022f5c 	.word	0x08022f5c
 801c7c4:	08022f94 	.word	0x08022f94
 801c7c8:	08022fc8 	.word	0x08022fc8

0801c7cc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c7cc:	b580      	push	{r7, lr}
 801c7ce:	b086      	sub	sp, #24
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
 801c7d4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c7d6:	683b      	ldr	r3, [r7, #0]
 801c7d8:	60bb      	str	r3, [r7, #8]
 801c7da:	2304      	movs	r3, #4
 801c7dc:	60fb      	str	r3, [r7, #12]
 801c7de:	2300      	movs	r3, #0
 801c7e0:	613b      	str	r3, [r7, #16]
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c7e6:	f107 0308 	add.w	r3, r7, #8
 801c7ea:	2100      	movs	r1, #0
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7f2 fc15 	bl	800f01c <osMessageCreate>
 801c7f2:	4602      	mov	r2, r0
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	d102      	bne.n	801c806 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c800:	f04f 33ff 	mov.w	r3, #4294967295
 801c804:	e000      	b.n	801c808 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c806:	2300      	movs	r3, #0
}
 801c808:	4618      	mov	r0, r3
 801c80a:	3718      	adds	r7, #24
 801c80c:	46bd      	mov	sp, r7
 801c80e:	bd80      	pop	{r7, pc}

0801c810 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b084      	sub	sp, #16
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]
 801c818:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	6839      	ldr	r1, [r7, #0]
 801c820:	2200      	movs	r2, #0
 801c822:	4618      	mov	r0, r3
 801c824:	f7f2 fc22 	bl	800f06c <osMessagePut>
 801c828:	4603      	mov	r3, r0
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d102      	bne.n	801c834 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c82e:	2300      	movs	r3, #0
 801c830:	73fb      	strb	r3, [r7, #15]
 801c832:	e001      	b.n	801c838 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c834:	23ff      	movs	r3, #255	@ 0xff
 801c836:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c838:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c83c:	4618      	mov	r0, r3
 801c83e:	3710      	adds	r7, #16
 801c840:	46bd      	mov	sp, r7
 801c842:	bd80      	pop	{r7, pc}

0801c844 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b08c      	sub	sp, #48	@ 0x30
 801c848:	af00      	add	r7, sp, #0
 801c84a:	61f8      	str	r0, [r7, #28]
 801c84c:	61b9      	str	r1, [r7, #24]
 801c84e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c850:	f7f2 fa22 	bl	800ec98 <osKernelSysTick>
 801c854:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c856:	697b      	ldr	r3, [r7, #20]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d017      	beq.n	801c88c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c85c:	69fb      	ldr	r3, [r7, #28]
 801c85e:	6819      	ldr	r1, [r3, #0]
 801c860:	f107 0320 	add.w	r3, r7, #32
 801c864:	697a      	ldr	r2, [r7, #20]
 801c866:	4618      	mov	r0, r3
 801c868:	f7f2 fc40 	bl	800f0ec <osMessageGet>

    if(event.status == osEventMessage)
 801c86c:	6a3b      	ldr	r3, [r7, #32]
 801c86e:	2b10      	cmp	r3, #16
 801c870:	d109      	bne.n	801c886 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c874:	461a      	mov	r2, r3
 801c876:	69bb      	ldr	r3, [r7, #24]
 801c878:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c87a:	f7f2 fa0d 	bl	800ec98 <osKernelSysTick>
 801c87e:	4602      	mov	r2, r0
 801c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c882:	1ad3      	subs	r3, r2, r3
 801c884:	e019      	b.n	801c8ba <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c886:	f04f 33ff 	mov.w	r3, #4294967295
 801c88a:	e016      	b.n	801c8ba <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c88c:	69fb      	ldr	r3, [r7, #28]
 801c88e:	6819      	ldr	r1, [r3, #0]
 801c890:	463b      	mov	r3, r7
 801c892:	f04f 32ff 	mov.w	r2, #4294967295
 801c896:	4618      	mov	r0, r3
 801c898:	f7f2 fc28 	bl	800f0ec <osMessageGet>
 801c89c:	f107 0320 	add.w	r3, r7, #32
 801c8a0:	463a      	mov	r2, r7
 801c8a2:	ca07      	ldmia	r2, {r0, r1, r2}
 801c8a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8aa:	461a      	mov	r2, r3
 801c8ac:	69bb      	ldr	r3, [r7, #24]
 801c8ae:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c8b0:	f7f2 f9f2 	bl	800ec98 <osKernelSysTick>
 801c8b4:	4602      	mov	r2, r0
 801c8b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c8ba:	4618      	mov	r0, r3
 801c8bc:	3730      	adds	r7, #48	@ 0x30
 801c8be:	46bd      	mov	sp, r7
 801c8c0:	bd80      	pop	{r7, pc}

0801c8c2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c8c2:	b480      	push	{r7}
 801c8c4:	b083      	sub	sp, #12
 801c8c6:	af00      	add	r7, sp, #0
 801c8c8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c8ca:	687b      	ldr	r3, [r7, #4]
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d101      	bne.n	801c8d6 <sys_mbox_valid+0x14>
    return 0;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	e000      	b.n	801c8d8 <sys_mbox_valid+0x16>
  else
    return 1;
 801c8d6:	2301      	movs	r3, #1
}
 801c8d8:	4618      	mov	r0, r3
 801c8da:	370c      	adds	r7, #12
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8e2:	4770      	bx	lr

0801c8e4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c8e8:	4803      	ldr	r0, [pc, #12]	@ (801c8f8 <sys_init+0x14>)
 801c8ea:	f7f2 fa45 	bl	800ed78 <osMutexCreate>
 801c8ee:	4603      	mov	r3, r0
 801c8f0:	4a02      	ldr	r2, [pc, #8]	@ (801c8fc <sys_init+0x18>)
 801c8f2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c8f4:	bf00      	nop
 801c8f6:	bd80      	pop	{r7, pc}
 801c8f8:	08023188 	.word	0x08023188
 801c8fc:	2000cb1c 	.word	0x2000cb1c

0801c900 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c900:	b580      	push	{r7, lr}
 801c902:	b084      	sub	sp, #16
 801c904:	af00      	add	r7, sp, #0
 801c906:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c908:	2300      	movs	r3, #0
 801c90a:	60bb      	str	r3, [r7, #8]
 801c90c:	2300      	movs	r3, #0
 801c90e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c910:	f107 0308 	add.w	r3, r7, #8
 801c914:	4618      	mov	r0, r3
 801c916:	f7f2 fa2f 	bl	800ed78 <osMutexCreate>
 801c91a:	4602      	mov	r2, r0
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	2b00      	cmp	r3, #0
 801c926:	d102      	bne.n	801c92e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c928:	f04f 33ff 	mov.w	r3, #4294967295
 801c92c:	e000      	b.n	801c930 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c92e:	2300      	movs	r3, #0
}
 801c930:	4618      	mov	r0, r3
 801c932:	3710      	adds	r7, #16
 801c934:	46bd      	mov	sp, r7
 801c936:	bd80      	pop	{r7, pc}

0801c938 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	f04f 31ff 	mov.w	r1, #4294967295
 801c948:	4618      	mov	r0, r3
 801c94a:	f7f2 fa2d 	bl	800eda8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c94e:	bf00      	nop
 801c950:	3708      	adds	r7, #8
 801c952:	46bd      	mov	sp, r7
 801c954:	bd80      	pop	{r7, pc}

0801c956 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c956:	b580      	push	{r7, lr}
 801c958:	b082      	sub	sp, #8
 801c95a:	af00      	add	r7, sp, #0
 801c95c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	4618      	mov	r0, r3
 801c964:	f7f2 fa6e 	bl	800ee44 <osMutexRelease>
}
 801c968:	bf00      	nop
 801c96a:	3708      	adds	r7, #8
 801c96c:	46bd      	mov	sp, r7
 801c96e:	bd80      	pop	{r7, pc}

0801c970 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b08c      	sub	sp, #48	@ 0x30
 801c974:	af00      	add	r7, sp, #0
 801c976:	60f8      	str	r0, [r7, #12]
 801c978:	60b9      	str	r1, [r7, #8]
 801c97a:	607a      	str	r2, [r7, #4]
 801c97c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c97e:	f107 0314 	add.w	r3, r7, #20
 801c982:	2200      	movs	r2, #0
 801c984:	601a      	str	r2, [r3, #0]
 801c986:	605a      	str	r2, [r3, #4]
 801c988:	609a      	str	r2, [r3, #8]
 801c98a:	60da      	str	r2, [r3, #12]
 801c98c:	611a      	str	r2, [r3, #16]
 801c98e:	615a      	str	r2, [r3, #20]
 801c990:	619a      	str	r2, [r3, #24]
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	617b      	str	r3, [r7, #20]
 801c996:	68bb      	ldr	r3, [r7, #8]
 801c998:	61bb      	str	r3, [r7, #24]
 801c99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c99c:	b21b      	sxth	r3, r3
 801c99e:	83bb      	strh	r3, [r7, #28]
 801c9a0:	683b      	ldr	r3, [r7, #0]
 801c9a2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c9a4:	f107 0314 	add.w	r3, r7, #20
 801c9a8:	6879      	ldr	r1, [r7, #4]
 801c9aa:	4618      	mov	r0, r3
 801c9ac:	f7f2 f984 	bl	800ecb8 <osThreadCreate>
 801c9b0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	3730      	adds	r7, #48	@ 0x30
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	bd80      	pop	{r7, pc}
	...

0801c9bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c9bc:	b580      	push	{r7, lr}
 801c9be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c9c0:	4b04      	ldr	r3, [pc, #16]	@ (801c9d4 <sys_arch_protect+0x18>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	f04f 31ff 	mov.w	r1, #4294967295
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	f7f2 f9ed 	bl	800eda8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c9ce:	2301      	movs	r3, #1
}
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	bd80      	pop	{r7, pc}
 801c9d4:	2000cb1c 	.word	0x2000cb1c

0801c9d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c9d8:	b580      	push	{r7, lr}
 801c9da:	b082      	sub	sp, #8
 801c9dc:	af00      	add	r7, sp, #0
 801c9de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c9e0:	4b04      	ldr	r3, [pc, #16]	@ (801c9f4 <sys_arch_unprotect+0x1c>)
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	f7f2 fa2d 	bl	800ee44 <osMutexRelease>
}
 801c9ea:	bf00      	nop
 801c9ec:	3708      	adds	r7, #8
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	bd80      	pop	{r7, pc}
 801c9f2:	bf00      	nop
 801c9f4:	2000cb1c 	.word	0x2000cb1c

0801c9f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801c9fc:	2200      	movs	r2, #0
 801c9fe:	4912      	ldr	r1, [pc, #72]	@ (801ca48 <MX_USB_DEVICE_Init+0x50>)
 801ca00:	4812      	ldr	r0, [pc, #72]	@ (801ca4c <MX_USB_DEVICE_Init+0x54>)
 801ca02:	f7f0 fdf9 	bl	800d5f8 <USBD_Init>
 801ca06:	4603      	mov	r3, r0
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d001      	beq.n	801ca10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801ca0c:	f7e5 f926 	bl	8001c5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801ca10:	490f      	ldr	r1, [pc, #60]	@ (801ca50 <MX_USB_DEVICE_Init+0x58>)
 801ca12:	480e      	ldr	r0, [pc, #56]	@ (801ca4c <MX_USB_DEVICE_Init+0x54>)
 801ca14:	f7f0 fe20 	bl	800d658 <USBD_RegisterClass>
 801ca18:	4603      	mov	r3, r0
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d001      	beq.n	801ca22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801ca1e:	f7e5 f91d 	bl	8001c5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801ca22:	490c      	ldr	r1, [pc, #48]	@ (801ca54 <MX_USB_DEVICE_Init+0x5c>)
 801ca24:	4809      	ldr	r0, [pc, #36]	@ (801ca4c <MX_USB_DEVICE_Init+0x54>)
 801ca26:	f7f0 fd17 	bl	800d458 <USBD_CDC_RegisterInterface>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	d001      	beq.n	801ca34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801ca30:	f7e5 f914 	bl	8001c5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801ca34:	4805      	ldr	r0, [pc, #20]	@ (801ca4c <MX_USB_DEVICE_Init+0x54>)
 801ca36:	f7f0 fe45 	bl	800d6c4 <USBD_Start>
 801ca3a:	4603      	mov	r3, r0
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d001      	beq.n	801ca44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801ca40:	f7e5 f90c 	bl	8001c5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ca44:	bf00      	nop
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	200000bc 	.word	0x200000bc
 801ca4c:	2000cb20 	.word	0x2000cb20
 801ca50:	20000018 	.word	0x20000018
 801ca54:	200000a8 	.word	0x200000a8

0801ca58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	4905      	ldr	r1, [pc, #20]	@ (801ca74 <CDC_Init_FS+0x1c>)
 801ca60:	4805      	ldr	r0, [pc, #20]	@ (801ca78 <CDC_Init_FS+0x20>)
 801ca62:	f7f0 fd13 	bl	800d48c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ca66:	4905      	ldr	r1, [pc, #20]	@ (801ca7c <CDC_Init_FS+0x24>)
 801ca68:	4803      	ldr	r0, [pc, #12]	@ (801ca78 <CDC_Init_FS+0x20>)
 801ca6a:	f7f0 fd31 	bl	800d4d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ca6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ca70:	4618      	mov	r0, r3
 801ca72:	bd80      	pop	{r7, pc}
 801ca74:	2000d5fc 	.word	0x2000d5fc
 801ca78:	2000cb20 	.word	0x2000cb20
 801ca7c:	2000cdfc 	.word	0x2000cdfc

0801ca80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ca80:	b480      	push	{r7}
 801ca82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ca84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ca86:	4618      	mov	r0, r3
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca8e:	4770      	bx	lr

0801ca90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ca90:	b480      	push	{r7}
 801ca92:	b083      	sub	sp, #12
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	4603      	mov	r3, r0
 801ca98:	6039      	str	r1, [r7, #0]
 801ca9a:	71fb      	strb	r3, [r7, #7]
 801ca9c:	4613      	mov	r3, r2
 801ca9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801caa0:	79fb      	ldrb	r3, [r7, #7]
 801caa2:	2b23      	cmp	r3, #35	@ 0x23
 801caa4:	d84a      	bhi.n	801cb3c <CDC_Control_FS+0xac>
 801caa6:	a201      	add	r2, pc, #4	@ (adr r2, 801caac <CDC_Control_FS+0x1c>)
 801caa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caac:	0801cb3d 	.word	0x0801cb3d
 801cab0:	0801cb3d 	.word	0x0801cb3d
 801cab4:	0801cb3d 	.word	0x0801cb3d
 801cab8:	0801cb3d 	.word	0x0801cb3d
 801cabc:	0801cb3d 	.word	0x0801cb3d
 801cac0:	0801cb3d 	.word	0x0801cb3d
 801cac4:	0801cb3d 	.word	0x0801cb3d
 801cac8:	0801cb3d 	.word	0x0801cb3d
 801cacc:	0801cb3d 	.word	0x0801cb3d
 801cad0:	0801cb3d 	.word	0x0801cb3d
 801cad4:	0801cb3d 	.word	0x0801cb3d
 801cad8:	0801cb3d 	.word	0x0801cb3d
 801cadc:	0801cb3d 	.word	0x0801cb3d
 801cae0:	0801cb3d 	.word	0x0801cb3d
 801cae4:	0801cb3d 	.word	0x0801cb3d
 801cae8:	0801cb3d 	.word	0x0801cb3d
 801caec:	0801cb3d 	.word	0x0801cb3d
 801caf0:	0801cb3d 	.word	0x0801cb3d
 801caf4:	0801cb3d 	.word	0x0801cb3d
 801caf8:	0801cb3d 	.word	0x0801cb3d
 801cafc:	0801cb3d 	.word	0x0801cb3d
 801cb00:	0801cb3d 	.word	0x0801cb3d
 801cb04:	0801cb3d 	.word	0x0801cb3d
 801cb08:	0801cb3d 	.word	0x0801cb3d
 801cb0c:	0801cb3d 	.word	0x0801cb3d
 801cb10:	0801cb3d 	.word	0x0801cb3d
 801cb14:	0801cb3d 	.word	0x0801cb3d
 801cb18:	0801cb3d 	.word	0x0801cb3d
 801cb1c:	0801cb3d 	.word	0x0801cb3d
 801cb20:	0801cb3d 	.word	0x0801cb3d
 801cb24:	0801cb3d 	.word	0x0801cb3d
 801cb28:	0801cb3d 	.word	0x0801cb3d
 801cb2c:	0801cb3d 	.word	0x0801cb3d
 801cb30:	0801cb3d 	.word	0x0801cb3d
 801cb34:	0801cb3d 	.word	0x0801cb3d
 801cb38:	0801cb3d 	.word	0x0801cb3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cb3c:	bf00      	nop
  }

  return (USBD_OK);
 801cb3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cb40:	4618      	mov	r0, r3
 801cb42:	370c      	adds	r7, #12
 801cb44:	46bd      	mov	sp, r7
 801cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb4a:	4770      	bx	lr

0801cb4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cb4c:	b580      	push	{r7, lr}
 801cb4e:	b082      	sub	sp, #8
 801cb50:	af00      	add	r7, sp, #0
 801cb52:	6078      	str	r0, [r7, #4]
 801cb54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cb56:	6879      	ldr	r1, [r7, #4]
 801cb58:	4805      	ldr	r0, [pc, #20]	@ (801cb70 <CDC_Receive_FS+0x24>)
 801cb5a:	f7f0 fcb9 	bl	800d4d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cb5e:	4804      	ldr	r0, [pc, #16]	@ (801cb70 <CDC_Receive_FS+0x24>)
 801cb60:	f7f0 fd14 	bl	800d58c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801cb64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cb66:	4618      	mov	r0, r3
 801cb68:	3708      	adds	r7, #8
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}
 801cb6e:	bf00      	nop
 801cb70:	2000cb20 	.word	0x2000cb20

0801cb74 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801cb74:	b580      	push	{r7, lr}
 801cb76:	b084      	sub	sp, #16
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
 801cb7c:	460b      	mov	r3, r1
 801cb7e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801cb80:	2300      	movs	r3, #0
 801cb82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801cb84:	4b0d      	ldr	r3, [pc, #52]	@ (801cbbc <CDC_Transmit_FS+0x48>)
 801cb86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801cb8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801cb8c:	68bb      	ldr	r3, [r7, #8]
 801cb8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d001      	beq.n	801cb9a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801cb96:	2301      	movs	r3, #1
 801cb98:	e00b      	b.n	801cbb2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cb9a:	887b      	ldrh	r3, [r7, #2]
 801cb9c:	461a      	mov	r2, r3
 801cb9e:	6879      	ldr	r1, [r7, #4]
 801cba0:	4806      	ldr	r0, [pc, #24]	@ (801cbbc <CDC_Transmit_FS+0x48>)
 801cba2:	f7f0 fc73 	bl	800d48c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801cba6:	4805      	ldr	r0, [pc, #20]	@ (801cbbc <CDC_Transmit_FS+0x48>)
 801cba8:	f7f0 fcb0 	bl	800d50c <USBD_CDC_TransmitPacket>
 801cbac:	4603      	mov	r3, r0
 801cbae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801cbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	3710      	adds	r7, #16
 801cbb6:	46bd      	mov	sp, r7
 801cbb8:	bd80      	pop	{r7, pc}
 801cbba:	bf00      	nop
 801cbbc:	2000cb20 	.word	0x2000cb20

0801cbc0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801cbc0:	b480      	push	{r7}
 801cbc2:	b087      	sub	sp, #28
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	60f8      	str	r0, [r7, #12]
 801cbc8:	60b9      	str	r1, [r7, #8]
 801cbca:	4613      	mov	r3, r2
 801cbcc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801cbd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cbd6:	4618      	mov	r0, r3
 801cbd8:	371c      	adds	r7, #28
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe0:	4770      	bx	lr
	...

0801cbe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cbe4:	b480      	push	{r7}
 801cbe6:	b083      	sub	sp, #12
 801cbe8:	af00      	add	r7, sp, #0
 801cbea:	4603      	mov	r3, r0
 801cbec:	6039      	str	r1, [r7, #0]
 801cbee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cbf0:	683b      	ldr	r3, [r7, #0]
 801cbf2:	2212      	movs	r2, #18
 801cbf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cbf6:	4b03      	ldr	r3, [pc, #12]	@ (801cc04 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	370c      	adds	r7, #12
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc02:	4770      	bx	lr
 801cc04:	200000d8 	.word	0x200000d8

0801cc08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc08:	b480      	push	{r7}
 801cc0a:	b083      	sub	sp, #12
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	4603      	mov	r3, r0
 801cc10:	6039      	str	r1, [r7, #0]
 801cc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cc14:	683b      	ldr	r3, [r7, #0]
 801cc16:	2204      	movs	r2, #4
 801cc18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cc1a:	4b03      	ldr	r3, [pc, #12]	@ (801cc28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	370c      	adds	r7, #12
 801cc20:	46bd      	mov	sp, r7
 801cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc26:	4770      	bx	lr
 801cc28:	200000ec 	.word	0x200000ec

0801cc2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b082      	sub	sp, #8
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	4603      	mov	r3, r0
 801cc34:	6039      	str	r1, [r7, #0]
 801cc36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801cc38:	79fb      	ldrb	r3, [r7, #7]
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	d105      	bne.n	801cc4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cc3e:	683a      	ldr	r2, [r7, #0]
 801cc40:	4907      	ldr	r1, [pc, #28]	@ (801cc60 <USBD_FS_ProductStrDescriptor+0x34>)
 801cc42:	4808      	ldr	r0, [pc, #32]	@ (801cc64 <USBD_FS_ProductStrDescriptor+0x38>)
 801cc44:	f7f1 ff04 	bl	800ea50 <USBD_GetString>
 801cc48:	e004      	b.n	801cc54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801cc4a:	683a      	ldr	r2, [r7, #0]
 801cc4c:	4904      	ldr	r1, [pc, #16]	@ (801cc60 <USBD_FS_ProductStrDescriptor+0x34>)
 801cc4e:	4805      	ldr	r0, [pc, #20]	@ (801cc64 <USBD_FS_ProductStrDescriptor+0x38>)
 801cc50:	f7f1 fefe 	bl	800ea50 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cc54:	4b02      	ldr	r3, [pc, #8]	@ (801cc60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801cc56:	4618      	mov	r0, r3
 801cc58:	3708      	adds	r7, #8
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	bd80      	pop	{r7, pc}
 801cc5e:	bf00      	nop
 801cc60:	2000ddfc 	.word	0x2000ddfc
 801cc64:	08022ff0 	.word	0x08022ff0

0801cc68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b082      	sub	sp, #8
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	4603      	mov	r3, r0
 801cc70:	6039      	str	r1, [r7, #0]
 801cc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801cc74:	683a      	ldr	r2, [r7, #0]
 801cc76:	4904      	ldr	r1, [pc, #16]	@ (801cc88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801cc78:	4804      	ldr	r0, [pc, #16]	@ (801cc8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801cc7a:	f7f1 fee9 	bl	800ea50 <USBD_GetString>
  return USBD_StrDesc;
 801cc7e:	4b02      	ldr	r3, [pc, #8]	@ (801cc88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801cc80:	4618      	mov	r0, r3
 801cc82:	3708      	adds	r7, #8
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}
 801cc88:	2000ddfc 	.word	0x2000ddfc
 801cc8c:	08023008 	.word	0x08023008

0801cc90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	4603      	mov	r3, r0
 801cc98:	6039      	str	r1, [r7, #0]
 801cc9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801cc9c:	683b      	ldr	r3, [r7, #0]
 801cc9e:	221a      	movs	r2, #26
 801cca0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801cca2:	f000 f843 	bl	801cd2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801cca6:	4b02      	ldr	r3, [pc, #8]	@ (801ccb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801cca8:	4618      	mov	r0, r3
 801ccaa:	3708      	adds	r7, #8
 801ccac:	46bd      	mov	sp, r7
 801ccae:	bd80      	pop	{r7, pc}
 801ccb0:	200000f0 	.word	0x200000f0

0801ccb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b082      	sub	sp, #8
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	4603      	mov	r3, r0
 801ccbc:	6039      	str	r1, [r7, #0]
 801ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801ccc0:	79fb      	ldrb	r3, [r7, #7]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d105      	bne.n	801ccd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ccc6:	683a      	ldr	r2, [r7, #0]
 801ccc8:	4907      	ldr	r1, [pc, #28]	@ (801cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ccca:	4808      	ldr	r0, [pc, #32]	@ (801ccec <USBD_FS_ConfigStrDescriptor+0x38>)
 801cccc:	f7f1 fec0 	bl	800ea50 <USBD_GetString>
 801ccd0:	e004      	b.n	801ccdc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ccd2:	683a      	ldr	r2, [r7, #0]
 801ccd4:	4904      	ldr	r1, [pc, #16]	@ (801cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801ccd6:	4805      	ldr	r0, [pc, #20]	@ (801ccec <USBD_FS_ConfigStrDescriptor+0x38>)
 801ccd8:	f7f1 feba 	bl	800ea50 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ccdc:	4b02      	ldr	r3, [pc, #8]	@ (801cce8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801ccde:	4618      	mov	r0, r3
 801cce0:	3708      	adds	r7, #8
 801cce2:	46bd      	mov	sp, r7
 801cce4:	bd80      	pop	{r7, pc}
 801cce6:	bf00      	nop
 801cce8:	2000ddfc 	.word	0x2000ddfc
 801ccec:	0802301c 	.word	0x0802301c

0801ccf0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b082      	sub	sp, #8
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	6039      	str	r1, [r7, #0]
 801ccfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801ccfc:	79fb      	ldrb	r3, [r7, #7]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d105      	bne.n	801cd0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cd02:	683a      	ldr	r2, [r7, #0]
 801cd04:	4907      	ldr	r1, [pc, #28]	@ (801cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cd06:	4808      	ldr	r0, [pc, #32]	@ (801cd28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cd08:	f7f1 fea2 	bl	800ea50 <USBD_GetString>
 801cd0c:	e004      	b.n	801cd18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cd0e:	683a      	ldr	r2, [r7, #0]
 801cd10:	4904      	ldr	r1, [pc, #16]	@ (801cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801cd12:	4805      	ldr	r0, [pc, #20]	@ (801cd28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801cd14:	f7f1 fe9c 	bl	800ea50 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cd18:	4b02      	ldr	r3, [pc, #8]	@ (801cd24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	3708      	adds	r7, #8
 801cd1e:	46bd      	mov	sp, r7
 801cd20:	bd80      	pop	{r7, pc}
 801cd22:	bf00      	nop
 801cd24:	2000ddfc 	.word	0x2000ddfc
 801cd28:	08023028 	.word	0x08023028

0801cd2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b084      	sub	sp, #16
 801cd30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cd32:	4b0f      	ldr	r3, [pc, #60]	@ (801cd70 <Get_SerialNum+0x44>)
 801cd34:	681b      	ldr	r3, [r3, #0]
 801cd36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cd38:	4b0e      	ldr	r3, [pc, #56]	@ (801cd74 <Get_SerialNum+0x48>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cd3e:	4b0e      	ldr	r3, [pc, #56]	@ (801cd78 <Get_SerialNum+0x4c>)
 801cd40:	681b      	ldr	r3, [r3, #0]
 801cd42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cd44:	68fa      	ldr	r2, [r7, #12]
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	4413      	add	r3, r2
 801cd4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cd4c:	68fb      	ldr	r3, [r7, #12]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d009      	beq.n	801cd66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cd52:	2208      	movs	r2, #8
 801cd54:	4909      	ldr	r1, [pc, #36]	@ (801cd7c <Get_SerialNum+0x50>)
 801cd56:	68f8      	ldr	r0, [r7, #12]
 801cd58:	f000 f814 	bl	801cd84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cd5c:	2204      	movs	r2, #4
 801cd5e:	4908      	ldr	r1, [pc, #32]	@ (801cd80 <Get_SerialNum+0x54>)
 801cd60:	68b8      	ldr	r0, [r7, #8]
 801cd62:	f000 f80f 	bl	801cd84 <IntToUnicode>
  }
}
 801cd66:	bf00      	nop
 801cd68:	3710      	adds	r7, #16
 801cd6a:	46bd      	mov	sp, r7
 801cd6c:	bd80      	pop	{r7, pc}
 801cd6e:	bf00      	nop
 801cd70:	1fff7a10 	.word	0x1fff7a10
 801cd74:	1fff7a14 	.word	0x1fff7a14
 801cd78:	1fff7a18 	.word	0x1fff7a18
 801cd7c:	200000f2 	.word	0x200000f2
 801cd80:	20000102 	.word	0x20000102

0801cd84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cd84:	b480      	push	{r7}
 801cd86:	b087      	sub	sp, #28
 801cd88:	af00      	add	r7, sp, #0
 801cd8a:	60f8      	str	r0, [r7, #12]
 801cd8c:	60b9      	str	r1, [r7, #8]
 801cd8e:	4613      	mov	r3, r2
 801cd90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801cd92:	2300      	movs	r3, #0
 801cd94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801cd96:	2300      	movs	r3, #0
 801cd98:	75fb      	strb	r3, [r7, #23]
 801cd9a:	e027      	b.n	801cdec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	0f1b      	lsrs	r3, r3, #28
 801cda0:	2b09      	cmp	r3, #9
 801cda2:	d80b      	bhi.n	801cdbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cda4:	68fb      	ldr	r3, [r7, #12]
 801cda6:	0f1b      	lsrs	r3, r3, #28
 801cda8:	b2da      	uxtb	r2, r3
 801cdaa:	7dfb      	ldrb	r3, [r7, #23]
 801cdac:	005b      	lsls	r3, r3, #1
 801cdae:	4619      	mov	r1, r3
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	440b      	add	r3, r1
 801cdb4:	3230      	adds	r2, #48	@ 0x30
 801cdb6:	b2d2      	uxtb	r2, r2
 801cdb8:	701a      	strb	r2, [r3, #0]
 801cdba:	e00a      	b.n	801cdd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cdbc:	68fb      	ldr	r3, [r7, #12]
 801cdbe:	0f1b      	lsrs	r3, r3, #28
 801cdc0:	b2da      	uxtb	r2, r3
 801cdc2:	7dfb      	ldrb	r3, [r7, #23]
 801cdc4:	005b      	lsls	r3, r3, #1
 801cdc6:	4619      	mov	r1, r3
 801cdc8:	68bb      	ldr	r3, [r7, #8]
 801cdca:	440b      	add	r3, r1
 801cdcc:	3237      	adds	r2, #55	@ 0x37
 801cdce:	b2d2      	uxtb	r2, r2
 801cdd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cdd2:	68fb      	ldr	r3, [r7, #12]
 801cdd4:	011b      	lsls	r3, r3, #4
 801cdd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cdd8:	7dfb      	ldrb	r3, [r7, #23]
 801cdda:	005b      	lsls	r3, r3, #1
 801cddc:	3301      	adds	r3, #1
 801cdde:	68ba      	ldr	r2, [r7, #8]
 801cde0:	4413      	add	r3, r2
 801cde2:	2200      	movs	r2, #0
 801cde4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cde6:	7dfb      	ldrb	r3, [r7, #23]
 801cde8:	3301      	adds	r3, #1
 801cdea:	75fb      	strb	r3, [r7, #23]
 801cdec:	7dfa      	ldrb	r2, [r7, #23]
 801cdee:	79fb      	ldrb	r3, [r7, #7]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d3d3      	bcc.n	801cd9c <IntToUnicode+0x18>
  }
}
 801cdf4:	bf00      	nop
 801cdf6:	bf00      	nop
 801cdf8:	371c      	adds	r7, #28
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce00:	4770      	bx	lr
	...

0801ce04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801ce04:	b580      	push	{r7, lr}
 801ce06:	b08a      	sub	sp, #40	@ 0x28
 801ce08:	af00      	add	r7, sp, #0
 801ce0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ce0c:	f107 0314 	add.w	r3, r7, #20
 801ce10:	2200      	movs	r2, #0
 801ce12:	601a      	str	r2, [r3, #0]
 801ce14:	605a      	str	r2, [r3, #4]
 801ce16:	609a      	str	r2, [r3, #8]
 801ce18:	60da      	str	r2, [r3, #12]
 801ce1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801ce24:	d13a      	bne.n	801ce9c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ce26:	2300      	movs	r3, #0
 801ce28:	613b      	str	r3, [r7, #16]
 801ce2a:	4b1e      	ldr	r3, [pc, #120]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce2e:	4a1d      	ldr	r2, [pc, #116]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce30:	f043 0301 	orr.w	r3, r3, #1
 801ce34:	6313      	str	r3, [r2, #48]	@ 0x30
 801ce36:	4b1b      	ldr	r3, [pc, #108]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce3a:	f003 0301 	and.w	r3, r3, #1
 801ce3e:	613b      	str	r3, [r7, #16]
 801ce40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801ce42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801ce46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801ce48:	2302      	movs	r3, #2
 801ce4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ce4c:	2300      	movs	r3, #0
 801ce4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801ce50:	2303      	movs	r3, #3
 801ce52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801ce54:	230a      	movs	r3, #10
 801ce56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ce58:	f107 0314 	add.w	r3, r7, #20
 801ce5c:	4619      	mov	r1, r3
 801ce5e:	4812      	ldr	r0, [pc, #72]	@ (801cea8 <HAL_PCD_MspInit+0xa4>)
 801ce60:	f7e9 fb86 	bl	8006570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801ce64:	4b0f      	ldr	r3, [pc, #60]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce68:	4a0e      	ldr	r2, [pc, #56]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ce6e:	6353      	str	r3, [r2, #52]	@ 0x34
 801ce70:	2300      	movs	r3, #0
 801ce72:	60fb      	str	r3, [r7, #12]
 801ce74:	4b0b      	ldr	r3, [pc, #44]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ce78:	4a0a      	ldr	r2, [pc, #40]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801ce7e:	6453      	str	r3, [r2, #68]	@ 0x44
 801ce80:	4b08      	ldr	r3, [pc, #32]	@ (801cea4 <HAL_PCD_MspInit+0xa0>)
 801ce82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ce84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801ce88:	60fb      	str	r3, [r7, #12]
 801ce8a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 801ce8c:	2200      	movs	r2, #0
 801ce8e:	2106      	movs	r1, #6
 801ce90:	2043      	movs	r0, #67	@ 0x43
 801ce92:	f7e7 fd93 	bl	80049bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801ce96:	2043      	movs	r0, #67	@ 0x43
 801ce98:	f7e7 fdac 	bl	80049f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801ce9c:	bf00      	nop
 801ce9e:	3728      	adds	r7, #40	@ 0x28
 801cea0:	46bd      	mov	sp, r7
 801cea2:	bd80      	pop	{r7, pc}
 801cea4:	40023800 	.word	0x40023800
 801cea8:	40020000 	.word	0x40020000

0801ceac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b082      	sub	sp, #8
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801cec0:	4619      	mov	r1, r3
 801cec2:	4610      	mov	r0, r2
 801cec4:	f7f0 fc4b 	bl	800d75e <USBD_LL_SetupStage>
}
 801cec8:	bf00      	nop
 801ceca:	3708      	adds	r7, #8
 801cecc:	46bd      	mov	sp, r7
 801cece:	bd80      	pop	{r7, pc}

0801ced0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	460b      	mov	r3, r1
 801ceda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801cee2:	78fa      	ldrb	r2, [r7, #3]
 801cee4:	6879      	ldr	r1, [r7, #4]
 801cee6:	4613      	mov	r3, r2
 801cee8:	00db      	lsls	r3, r3, #3
 801ceea:	4413      	add	r3, r2
 801ceec:	009b      	lsls	r3, r3, #2
 801ceee:	440b      	add	r3, r1
 801cef0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801cef4:	681a      	ldr	r2, [r3, #0]
 801cef6:	78fb      	ldrb	r3, [r7, #3]
 801cef8:	4619      	mov	r1, r3
 801cefa:	f7f0 fc85 	bl	800d808 <USBD_LL_DataOutStage>
}
 801cefe:	bf00      	nop
 801cf00:	3708      	adds	r7, #8
 801cf02:	46bd      	mov	sp, r7
 801cf04:	bd80      	pop	{r7, pc}

0801cf06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf06:	b580      	push	{r7, lr}
 801cf08:	b082      	sub	sp, #8
 801cf0a:	af00      	add	r7, sp, #0
 801cf0c:	6078      	str	r0, [r7, #4]
 801cf0e:	460b      	mov	r3, r1
 801cf10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801cf18:	78fa      	ldrb	r2, [r7, #3]
 801cf1a:	6879      	ldr	r1, [r7, #4]
 801cf1c:	4613      	mov	r3, r2
 801cf1e:	00db      	lsls	r3, r3, #3
 801cf20:	4413      	add	r3, r2
 801cf22:	009b      	lsls	r3, r3, #2
 801cf24:	440b      	add	r3, r1
 801cf26:	3320      	adds	r3, #32
 801cf28:	681a      	ldr	r2, [r3, #0]
 801cf2a:	78fb      	ldrb	r3, [r7, #3]
 801cf2c:	4619      	mov	r1, r3
 801cf2e:	f7f0 fd27 	bl	800d980 <USBD_LL_DataInStage>
}
 801cf32:	bf00      	nop
 801cf34:	3708      	adds	r7, #8
 801cf36:	46bd      	mov	sp, r7
 801cf38:	bd80      	pop	{r7, pc}

0801cf3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf3a:	b580      	push	{r7, lr}
 801cf3c:	b082      	sub	sp, #8
 801cf3e:	af00      	add	r7, sp, #0
 801cf40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f7f0 fe6b 	bl	800dc24 <USBD_LL_SOF>
}
 801cf4e:	bf00      	nop
 801cf50:	3708      	adds	r7, #8
 801cf52:	46bd      	mov	sp, r7
 801cf54:	bd80      	pop	{r7, pc}

0801cf56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cf56:	b580      	push	{r7, lr}
 801cf58:	b084      	sub	sp, #16
 801cf5a:	af00      	add	r7, sp, #0
 801cf5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801cf5e:	2301      	movs	r3, #1
 801cf60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	79db      	ldrb	r3, [r3, #7]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d102      	bne.n	801cf70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801cf6a:	2300      	movs	r3, #0
 801cf6c:	73fb      	strb	r3, [r7, #15]
 801cf6e:	e008      	b.n	801cf82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801cf70:	687b      	ldr	r3, [r7, #4]
 801cf72:	79db      	ldrb	r3, [r3, #7]
 801cf74:	2b02      	cmp	r3, #2
 801cf76:	d102      	bne.n	801cf7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801cf78:	2301      	movs	r3, #1
 801cf7a:	73fb      	strb	r3, [r7, #15]
 801cf7c:	e001      	b.n	801cf82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801cf7e:	f7e4 fe6d 	bl	8001c5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cf88:	7bfa      	ldrb	r2, [r7, #15]
 801cf8a:	4611      	mov	r1, r2
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	f7f0 fe05 	bl	800db9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cf98:	4618      	mov	r0, r3
 801cf9a:	f7f0 fdac 	bl	800daf6 <USBD_LL_Reset>
}
 801cf9e:	bf00      	nop
 801cfa0:	3710      	adds	r7, #16
 801cfa2:	46bd      	mov	sp, r7
 801cfa4:	bd80      	pop	{r7, pc}
	...

0801cfa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b082      	sub	sp, #8
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801cfb6:	4618      	mov	r0, r3
 801cfb8:	f7f0 fe00 	bl	800dbbc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	687a      	ldr	r2, [r7, #4]
 801cfc8:	6812      	ldr	r2, [r2, #0]
 801cfca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801cfce:	f043 0301 	orr.w	r3, r3, #1
 801cfd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	7adb      	ldrb	r3, [r3, #11]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d005      	beq.n	801cfe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801cfdc:	4b04      	ldr	r3, [pc, #16]	@ (801cff0 <HAL_PCD_SuspendCallback+0x48>)
 801cfde:	691b      	ldr	r3, [r3, #16]
 801cfe0:	4a03      	ldr	r2, [pc, #12]	@ (801cff0 <HAL_PCD_SuspendCallback+0x48>)
 801cfe2:	f043 0306 	orr.w	r3, r3, #6
 801cfe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801cfe8:	bf00      	nop
 801cfea:	3708      	adds	r7, #8
 801cfec:	46bd      	mov	sp, r7
 801cfee:	bd80      	pop	{r7, pc}
 801cff0:	e000ed00 	.word	0xe000ed00

0801cff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d002:	4618      	mov	r0, r3
 801d004:	f7f0 fdf6 	bl	800dbf4 <USBD_LL_Resume>
}
 801d008:	bf00      	nop
 801d00a:	3708      	adds	r7, #8
 801d00c:	46bd      	mov	sp, r7
 801d00e:	bd80      	pop	{r7, pc}

0801d010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d010:	b580      	push	{r7, lr}
 801d012:	b082      	sub	sp, #8
 801d014:	af00      	add	r7, sp, #0
 801d016:	6078      	str	r0, [r7, #4]
 801d018:	460b      	mov	r3, r1
 801d01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d022:	78fa      	ldrb	r2, [r7, #3]
 801d024:	4611      	mov	r1, r2
 801d026:	4618      	mov	r0, r3
 801d028:	f7f0 fe4e 	bl	800dcc8 <USBD_LL_IsoOUTIncomplete>
}
 801d02c:	bf00      	nop
 801d02e:	3708      	adds	r7, #8
 801d030:	46bd      	mov	sp, r7
 801d032:	bd80      	pop	{r7, pc}

0801d034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d034:	b580      	push	{r7, lr}
 801d036:	b082      	sub	sp, #8
 801d038:	af00      	add	r7, sp, #0
 801d03a:	6078      	str	r0, [r7, #4]
 801d03c:	460b      	mov	r3, r1
 801d03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d046:	78fa      	ldrb	r2, [r7, #3]
 801d048:	4611      	mov	r1, r2
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7f0 fe0a 	bl	800dc64 <USBD_LL_IsoINIncomplete>
}
 801d050:	bf00      	nop
 801d052:	3708      	adds	r7, #8
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}

0801d058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d058:	b580      	push	{r7, lr}
 801d05a:	b082      	sub	sp, #8
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d066:	4618      	mov	r0, r3
 801d068:	f7f0 fe60 	bl	800dd2c <USBD_LL_DevConnected>
}
 801d06c:	bf00      	nop
 801d06e:	3708      	adds	r7, #8
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}

0801d074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b082      	sub	sp, #8
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801d082:	4618      	mov	r0, r3
 801d084:	f7f0 fe5d 	bl	800dd42 <USBD_LL_DevDisconnected>
}
 801d088:	bf00      	nop
 801d08a:	3708      	adds	r7, #8
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}

0801d090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	781b      	ldrb	r3, [r3, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d13c      	bne.n	801d11a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801d0a0:	4a20      	ldr	r2, [pc, #128]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	4a1e      	ldr	r2, [pc, #120]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801d0b0:	4b1c      	ldr	r3, [pc, #112]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801d0b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801d0b8:	4b1a      	ldr	r3, [pc, #104]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0ba:	2204      	movs	r2, #4
 801d0bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801d0be:	4b19      	ldr	r3, [pc, #100]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0c0:	2202      	movs	r2, #2
 801d0c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801d0c4:	4b17      	ldr	r3, [pc, #92]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0c6:	2200      	movs	r2, #0
 801d0c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d0ca:	4b16      	ldr	r3, [pc, #88]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0cc:	2202      	movs	r2, #2
 801d0ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801d0d0:	4b14      	ldr	r3, [pc, #80]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0d2:	2200      	movs	r2, #0
 801d0d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801d0d6:	4b13      	ldr	r3, [pc, #76]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0d8:	2200      	movs	r2, #0
 801d0da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801d0dc:	4b11      	ldr	r3, [pc, #68]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0de:	2200      	movs	r2, #0
 801d0e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801d0e2:	4b10      	ldr	r3, [pc, #64]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0e4:	2200      	movs	r2, #0
 801d0e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801d0e8:	4b0e      	ldr	r3, [pc, #56]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0ea:	2200      	movs	r2, #0
 801d0ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801d0ee:	480d      	ldr	r0, [pc, #52]	@ (801d124 <USBD_LL_Init+0x94>)
 801d0f0:	f7e9 fbf3 	bl	80068da <HAL_PCD_Init>
 801d0f4:	4603      	mov	r3, r0
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	d001      	beq.n	801d0fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801d0fa:	f7e4 fdaf 	bl	8001c5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801d0fe:	2180      	movs	r1, #128	@ 0x80
 801d100:	4808      	ldr	r0, [pc, #32]	@ (801d124 <USBD_LL_Init+0x94>)
 801d102:	f7ea fe20 	bl	8007d46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801d106:	2240      	movs	r2, #64	@ 0x40
 801d108:	2100      	movs	r1, #0
 801d10a:	4806      	ldr	r0, [pc, #24]	@ (801d124 <USBD_LL_Init+0x94>)
 801d10c:	f7ea fdd4 	bl	8007cb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801d110:	2280      	movs	r2, #128	@ 0x80
 801d112:	2101      	movs	r1, #1
 801d114:	4803      	ldr	r0, [pc, #12]	@ (801d124 <USBD_LL_Init+0x94>)
 801d116:	f7ea fdcf 	bl	8007cb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801d11a:	2300      	movs	r3, #0
}
 801d11c:	4618      	mov	r0, r3
 801d11e:	3708      	adds	r7, #8
 801d120:	46bd      	mov	sp, r7
 801d122:	bd80      	pop	{r7, pc}
 801d124:	2000dffc 	.word	0x2000dffc

0801d128 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b084      	sub	sp, #16
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d130:	2300      	movs	r3, #0
 801d132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d134:	2300      	movs	r3, #0
 801d136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d13e:	4618      	mov	r0, r3
 801d140:	f7e9 fcda 	bl	8006af8 <HAL_PCD_Start>
 801d144:	4603      	mov	r3, r0
 801d146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d148:	7bfb      	ldrb	r3, [r7, #15]
 801d14a:	4618      	mov	r0, r3
 801d14c:	f000 f942 	bl	801d3d4 <USBD_Get_USB_Status>
 801d150:	4603      	mov	r3, r0
 801d152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d154:	7bbb      	ldrb	r3, [r7, #14]
}
 801d156:	4618      	mov	r0, r3
 801d158:	3710      	adds	r7, #16
 801d15a:	46bd      	mov	sp, r7
 801d15c:	bd80      	pop	{r7, pc}

0801d15e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d15e:	b580      	push	{r7, lr}
 801d160:	b084      	sub	sp, #16
 801d162:	af00      	add	r7, sp, #0
 801d164:	6078      	str	r0, [r7, #4]
 801d166:	4608      	mov	r0, r1
 801d168:	4611      	mov	r1, r2
 801d16a:	461a      	mov	r2, r3
 801d16c:	4603      	mov	r3, r0
 801d16e:	70fb      	strb	r3, [r7, #3]
 801d170:	460b      	mov	r3, r1
 801d172:	70bb      	strb	r3, [r7, #2]
 801d174:	4613      	mov	r3, r2
 801d176:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d178:	2300      	movs	r3, #0
 801d17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d17c:	2300      	movs	r3, #0
 801d17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d186:	78bb      	ldrb	r3, [r7, #2]
 801d188:	883a      	ldrh	r2, [r7, #0]
 801d18a:	78f9      	ldrb	r1, [r7, #3]
 801d18c:	f7ea f9ae 	bl	80074ec <HAL_PCD_EP_Open>
 801d190:	4603      	mov	r3, r0
 801d192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d194:	7bfb      	ldrb	r3, [r7, #15]
 801d196:	4618      	mov	r0, r3
 801d198:	f000 f91c 	bl	801d3d4 <USBD_Get_USB_Status>
 801d19c:	4603      	mov	r3, r0
 801d19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	3710      	adds	r7, #16
 801d1a6:	46bd      	mov	sp, r7
 801d1a8:	bd80      	pop	{r7, pc}

0801d1aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d1aa:	b580      	push	{r7, lr}
 801d1ac:	b084      	sub	sp, #16
 801d1ae:	af00      	add	r7, sp, #0
 801d1b0:	6078      	str	r0, [r7, #4]
 801d1b2:	460b      	mov	r3, r1
 801d1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d1c4:	78fa      	ldrb	r2, [r7, #3]
 801d1c6:	4611      	mov	r1, r2
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f7ea f9f9 	bl	80075c0 <HAL_PCD_EP_Close>
 801d1ce:	4603      	mov	r3, r0
 801d1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d1d2:	7bfb      	ldrb	r3, [r7, #15]
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f000 f8fd 	bl	801d3d4 <USBD_Get_USB_Status>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d1de:	7bbb      	ldrb	r3, [r7, #14]
}
 801d1e0:	4618      	mov	r0, r3
 801d1e2:	3710      	adds	r7, #16
 801d1e4:	46bd      	mov	sp, r7
 801d1e6:	bd80      	pop	{r7, pc}

0801d1e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	b084      	sub	sp, #16
 801d1ec:	af00      	add	r7, sp, #0
 801d1ee:	6078      	str	r0, [r7, #4]
 801d1f0:	460b      	mov	r3, r1
 801d1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d1f8:	2300      	movs	r3, #0
 801d1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d202:	78fa      	ldrb	r2, [r7, #3]
 801d204:	4611      	mov	r1, r2
 801d206:	4618      	mov	r0, r3
 801d208:	f7ea fab1 	bl	800776e <HAL_PCD_EP_SetStall>
 801d20c:	4603      	mov	r3, r0
 801d20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d210:	7bfb      	ldrb	r3, [r7, #15]
 801d212:	4618      	mov	r0, r3
 801d214:	f000 f8de 	bl	801d3d4 <USBD_Get_USB_Status>
 801d218:	4603      	mov	r3, r0
 801d21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d21c:	7bbb      	ldrb	r3, [r7, #14]
}
 801d21e:	4618      	mov	r0, r3
 801d220:	3710      	adds	r7, #16
 801d222:	46bd      	mov	sp, r7
 801d224:	bd80      	pop	{r7, pc}

0801d226 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d226:	b580      	push	{r7, lr}
 801d228:	b084      	sub	sp, #16
 801d22a:	af00      	add	r7, sp, #0
 801d22c:	6078      	str	r0, [r7, #4]
 801d22e:	460b      	mov	r3, r1
 801d230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d232:	2300      	movs	r3, #0
 801d234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d236:	2300      	movs	r3, #0
 801d238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d240:	78fa      	ldrb	r2, [r7, #3]
 801d242:	4611      	mov	r1, r2
 801d244:	4618      	mov	r0, r3
 801d246:	f7ea faf5 	bl	8007834 <HAL_PCD_EP_ClrStall>
 801d24a:	4603      	mov	r3, r0
 801d24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d24e:	7bfb      	ldrb	r3, [r7, #15]
 801d250:	4618      	mov	r0, r3
 801d252:	f000 f8bf 	bl	801d3d4 <USBD_Get_USB_Status>
 801d256:	4603      	mov	r3, r0
 801d258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d25a:	7bbb      	ldrb	r3, [r7, #14]
}
 801d25c:	4618      	mov	r0, r3
 801d25e:	3710      	adds	r7, #16
 801d260:	46bd      	mov	sp, r7
 801d262:	bd80      	pop	{r7, pc}

0801d264 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d264:	b480      	push	{r7}
 801d266:	b085      	sub	sp, #20
 801d268:	af00      	add	r7, sp, #0
 801d26a:	6078      	str	r0, [r7, #4]
 801d26c:	460b      	mov	r3, r1
 801d26e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d276:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	da0b      	bge.n	801d298 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d280:	78fb      	ldrb	r3, [r7, #3]
 801d282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d286:	68f9      	ldr	r1, [r7, #12]
 801d288:	4613      	mov	r3, r2
 801d28a:	00db      	lsls	r3, r3, #3
 801d28c:	4413      	add	r3, r2
 801d28e:	009b      	lsls	r3, r3, #2
 801d290:	440b      	add	r3, r1
 801d292:	3316      	adds	r3, #22
 801d294:	781b      	ldrb	r3, [r3, #0]
 801d296:	e00b      	b.n	801d2b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d298:	78fb      	ldrb	r3, [r7, #3]
 801d29a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d29e:	68f9      	ldr	r1, [r7, #12]
 801d2a0:	4613      	mov	r3, r2
 801d2a2:	00db      	lsls	r3, r3, #3
 801d2a4:	4413      	add	r3, r2
 801d2a6:	009b      	lsls	r3, r3, #2
 801d2a8:	440b      	add	r3, r1
 801d2aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801d2ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	3714      	adds	r7, #20
 801d2b4:	46bd      	mov	sp, r7
 801d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2ba:	4770      	bx	lr

0801d2bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d2bc:	b580      	push	{r7, lr}
 801d2be:	b084      	sub	sp, #16
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
 801d2c4:	460b      	mov	r3, r1
 801d2c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d2d6:	78fa      	ldrb	r2, [r7, #3]
 801d2d8:	4611      	mov	r1, r2
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7ea f8e2 	bl	80074a4 <HAL_PCD_SetAddress>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2e4:	7bfb      	ldrb	r3, [r7, #15]
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f000 f874 	bl	801d3d4 <USBD_Get_USB_Status>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801d2f0:	7bbb      	ldrb	r3, [r7, #14]
}
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	3710      	adds	r7, #16
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bd80      	pop	{r7, pc}

0801d2fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d2fa:	b580      	push	{r7, lr}
 801d2fc:	b086      	sub	sp, #24
 801d2fe:	af00      	add	r7, sp, #0
 801d300:	60f8      	str	r0, [r7, #12]
 801d302:	607a      	str	r2, [r7, #4]
 801d304:	603b      	str	r3, [r7, #0]
 801d306:	460b      	mov	r3, r1
 801d308:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d30a:	2300      	movs	r3, #0
 801d30c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d30e:	2300      	movs	r3, #0
 801d310:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d312:	68fb      	ldr	r3, [r7, #12]
 801d314:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d318:	7af9      	ldrb	r1, [r7, #11]
 801d31a:	683b      	ldr	r3, [r7, #0]
 801d31c:	687a      	ldr	r2, [r7, #4]
 801d31e:	f7ea f9ec 	bl	80076fa <HAL_PCD_EP_Transmit>
 801d322:	4603      	mov	r3, r0
 801d324:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d326:	7dfb      	ldrb	r3, [r7, #23]
 801d328:	4618      	mov	r0, r3
 801d32a:	f000 f853 	bl	801d3d4 <USBD_Get_USB_Status>
 801d32e:	4603      	mov	r3, r0
 801d330:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d332:	7dbb      	ldrb	r3, [r7, #22]
}
 801d334:	4618      	mov	r0, r3
 801d336:	3718      	adds	r7, #24
 801d338:	46bd      	mov	sp, r7
 801d33a:	bd80      	pop	{r7, pc}

0801d33c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801d33c:	b580      	push	{r7, lr}
 801d33e:	b086      	sub	sp, #24
 801d340:	af00      	add	r7, sp, #0
 801d342:	60f8      	str	r0, [r7, #12]
 801d344:	607a      	str	r2, [r7, #4]
 801d346:	603b      	str	r3, [r7, #0]
 801d348:	460b      	mov	r3, r1
 801d34a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d34c:	2300      	movs	r3, #0
 801d34e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d350:	2300      	movs	r3, #0
 801d352:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d354:	68fb      	ldr	r3, [r7, #12]
 801d356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801d35a:	7af9      	ldrb	r1, [r7, #11]
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	687a      	ldr	r2, [r7, #4]
 801d360:	f7ea f978 	bl	8007654 <HAL_PCD_EP_Receive>
 801d364:	4603      	mov	r3, r0
 801d366:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d368:	7dfb      	ldrb	r3, [r7, #23]
 801d36a:	4618      	mov	r0, r3
 801d36c:	f000 f832 	bl	801d3d4 <USBD_Get_USB_Status>
 801d370:	4603      	mov	r3, r0
 801d372:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801d374:	7dbb      	ldrb	r3, [r7, #22]
}
 801d376:	4618      	mov	r0, r3
 801d378:	3718      	adds	r7, #24
 801d37a:	46bd      	mov	sp, r7
 801d37c:	bd80      	pop	{r7, pc}

0801d37e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d37e:	b580      	push	{r7, lr}
 801d380:	b082      	sub	sp, #8
 801d382:	af00      	add	r7, sp, #0
 801d384:	6078      	str	r0, [r7, #4]
 801d386:	460b      	mov	r3, r1
 801d388:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801d390:	78fa      	ldrb	r2, [r7, #3]
 801d392:	4611      	mov	r1, r2
 801d394:	4618      	mov	r0, r3
 801d396:	f7ea f998 	bl	80076ca <HAL_PCD_EP_GetRxCount>
 801d39a:	4603      	mov	r3, r0
}
 801d39c:	4618      	mov	r0, r3
 801d39e:	3708      	adds	r7, #8
 801d3a0:	46bd      	mov	sp, r7
 801d3a2:	bd80      	pop	{r7, pc}

0801d3a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d3a4:	b480      	push	{r7}
 801d3a6:	b083      	sub	sp, #12
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d3ac:	4b03      	ldr	r3, [pc, #12]	@ (801d3bc <USBD_static_malloc+0x18>)
}
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	370c      	adds	r7, #12
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3b8:	4770      	bx	lr
 801d3ba:	bf00      	nop
 801d3bc:	2000e4e0 	.word	0x2000e4e0

0801d3c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d3c0:	b480      	push	{r7}
 801d3c2:	b083      	sub	sp, #12
 801d3c4:	af00      	add	r7, sp, #0
 801d3c6:	6078      	str	r0, [r7, #4]

}
 801d3c8:	bf00      	nop
 801d3ca:	370c      	adds	r7, #12
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3d2:	4770      	bx	lr

0801d3d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d3d4:	b480      	push	{r7}
 801d3d6:	b085      	sub	sp, #20
 801d3d8:	af00      	add	r7, sp, #0
 801d3da:	4603      	mov	r3, r0
 801d3dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3de:	2300      	movs	r3, #0
 801d3e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801d3e2:	79fb      	ldrb	r3, [r7, #7]
 801d3e4:	2b03      	cmp	r3, #3
 801d3e6:	d817      	bhi.n	801d418 <USBD_Get_USB_Status+0x44>
 801d3e8:	a201      	add	r2, pc, #4	@ (adr r2, 801d3f0 <USBD_Get_USB_Status+0x1c>)
 801d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d3ee:	bf00      	nop
 801d3f0:	0801d401 	.word	0x0801d401
 801d3f4:	0801d407 	.word	0x0801d407
 801d3f8:	0801d40d 	.word	0x0801d40d
 801d3fc:	0801d413 	.word	0x0801d413
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d400:	2300      	movs	r3, #0
 801d402:	73fb      	strb	r3, [r7, #15]
    break;
 801d404:	e00b      	b.n	801d41e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d406:	2303      	movs	r3, #3
 801d408:	73fb      	strb	r3, [r7, #15]
    break;
 801d40a:	e008      	b.n	801d41e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d40c:	2301      	movs	r3, #1
 801d40e:	73fb      	strb	r3, [r7, #15]
    break;
 801d410:	e005      	b.n	801d41e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d412:	2303      	movs	r3, #3
 801d414:	73fb      	strb	r3, [r7, #15]
    break;
 801d416:	e002      	b.n	801d41e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801d418:	2303      	movs	r3, #3
 801d41a:	73fb      	strb	r3, [r7, #15]
    break;
 801d41c:	bf00      	nop
  }
  return usb_status;
 801d41e:	7bfb      	ldrb	r3, [r7, #15]
}
 801d420:	4618      	mov	r0, r3
 801d422:	3714      	adds	r7, #20
 801d424:	46bd      	mov	sp, r7
 801d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d42a:	4770      	bx	lr

0801d42c <atoi>:
 801d42c:	220a      	movs	r2, #10
 801d42e:	2100      	movs	r1, #0
 801d430:	f000 b8b8 	b.w	801d5a4 <strtol>

0801d434 <rand>:
 801d434:	4b16      	ldr	r3, [pc, #88]	@ (801d490 <rand+0x5c>)
 801d436:	b510      	push	{r4, lr}
 801d438:	681c      	ldr	r4, [r3, #0]
 801d43a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d43c:	b9b3      	cbnz	r3, 801d46c <rand+0x38>
 801d43e:	2018      	movs	r0, #24
 801d440:	f000 fba6 	bl	801db90 <malloc>
 801d444:	4602      	mov	r2, r0
 801d446:	6320      	str	r0, [r4, #48]	@ 0x30
 801d448:	b920      	cbnz	r0, 801d454 <rand+0x20>
 801d44a:	4b12      	ldr	r3, [pc, #72]	@ (801d494 <rand+0x60>)
 801d44c:	4812      	ldr	r0, [pc, #72]	@ (801d498 <rand+0x64>)
 801d44e:	2152      	movs	r1, #82	@ 0x52
 801d450:	f000 fb36 	bl	801dac0 <__assert_func>
 801d454:	4911      	ldr	r1, [pc, #68]	@ (801d49c <rand+0x68>)
 801d456:	4b12      	ldr	r3, [pc, #72]	@ (801d4a0 <rand+0x6c>)
 801d458:	e9c0 1300 	strd	r1, r3, [r0]
 801d45c:	4b11      	ldr	r3, [pc, #68]	@ (801d4a4 <rand+0x70>)
 801d45e:	6083      	str	r3, [r0, #8]
 801d460:	230b      	movs	r3, #11
 801d462:	8183      	strh	r3, [r0, #12]
 801d464:	2100      	movs	r1, #0
 801d466:	2001      	movs	r0, #1
 801d468:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d46c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d46e:	480e      	ldr	r0, [pc, #56]	@ (801d4a8 <rand+0x74>)
 801d470:	690b      	ldr	r3, [r1, #16]
 801d472:	694c      	ldr	r4, [r1, #20]
 801d474:	4a0d      	ldr	r2, [pc, #52]	@ (801d4ac <rand+0x78>)
 801d476:	4358      	muls	r0, r3
 801d478:	fb02 0004 	mla	r0, r2, r4, r0
 801d47c:	fba3 3202 	umull	r3, r2, r3, r2
 801d480:	3301      	adds	r3, #1
 801d482:	eb40 0002 	adc.w	r0, r0, r2
 801d486:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d48a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d48e:	bd10      	pop	{r4, pc}
 801d490:	20000118 	.word	0x20000118
 801d494:	08023190 	.word	0x08023190
 801d498:	080231a7 	.word	0x080231a7
 801d49c:	abcd330e 	.word	0xabcd330e
 801d4a0:	e66d1234 	.word	0xe66d1234
 801d4a4:	0005deec 	.word	0x0005deec
 801d4a8:	5851f42d 	.word	0x5851f42d
 801d4ac:	4c957f2d 	.word	0x4c957f2d

0801d4b0 <_strtol_l.isra.0>:
 801d4b0:	2b24      	cmp	r3, #36	@ 0x24
 801d4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4b6:	4686      	mov	lr, r0
 801d4b8:	4690      	mov	r8, r2
 801d4ba:	d801      	bhi.n	801d4c0 <_strtol_l.isra.0+0x10>
 801d4bc:	2b01      	cmp	r3, #1
 801d4be:	d106      	bne.n	801d4ce <_strtol_l.isra.0+0x1e>
 801d4c0:	f000 faba 	bl	801da38 <__errno>
 801d4c4:	2316      	movs	r3, #22
 801d4c6:	6003      	str	r3, [r0, #0]
 801d4c8:	2000      	movs	r0, #0
 801d4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4ce:	4834      	ldr	r0, [pc, #208]	@ (801d5a0 <_strtol_l.isra.0+0xf0>)
 801d4d0:	460d      	mov	r5, r1
 801d4d2:	462a      	mov	r2, r5
 801d4d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d4d8:	5d06      	ldrb	r6, [r0, r4]
 801d4da:	f016 0608 	ands.w	r6, r6, #8
 801d4de:	d1f8      	bne.n	801d4d2 <_strtol_l.isra.0+0x22>
 801d4e0:	2c2d      	cmp	r4, #45	@ 0x2d
 801d4e2:	d110      	bne.n	801d506 <_strtol_l.isra.0+0x56>
 801d4e4:	782c      	ldrb	r4, [r5, #0]
 801d4e6:	2601      	movs	r6, #1
 801d4e8:	1c95      	adds	r5, r2, #2
 801d4ea:	f033 0210 	bics.w	r2, r3, #16
 801d4ee:	d115      	bne.n	801d51c <_strtol_l.isra.0+0x6c>
 801d4f0:	2c30      	cmp	r4, #48	@ 0x30
 801d4f2:	d10d      	bne.n	801d510 <_strtol_l.isra.0+0x60>
 801d4f4:	782a      	ldrb	r2, [r5, #0]
 801d4f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d4fa:	2a58      	cmp	r2, #88	@ 0x58
 801d4fc:	d108      	bne.n	801d510 <_strtol_l.isra.0+0x60>
 801d4fe:	786c      	ldrb	r4, [r5, #1]
 801d500:	3502      	adds	r5, #2
 801d502:	2310      	movs	r3, #16
 801d504:	e00a      	b.n	801d51c <_strtol_l.isra.0+0x6c>
 801d506:	2c2b      	cmp	r4, #43	@ 0x2b
 801d508:	bf04      	itt	eq
 801d50a:	782c      	ldrbeq	r4, [r5, #0]
 801d50c:	1c95      	addeq	r5, r2, #2
 801d50e:	e7ec      	b.n	801d4ea <_strtol_l.isra.0+0x3a>
 801d510:	2b00      	cmp	r3, #0
 801d512:	d1f6      	bne.n	801d502 <_strtol_l.isra.0+0x52>
 801d514:	2c30      	cmp	r4, #48	@ 0x30
 801d516:	bf14      	ite	ne
 801d518:	230a      	movne	r3, #10
 801d51a:	2308      	moveq	r3, #8
 801d51c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d520:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d524:	2200      	movs	r2, #0
 801d526:	fbbc f9f3 	udiv	r9, ip, r3
 801d52a:	4610      	mov	r0, r2
 801d52c:	fb03 ca19 	mls	sl, r3, r9, ip
 801d530:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d534:	2f09      	cmp	r7, #9
 801d536:	d80f      	bhi.n	801d558 <_strtol_l.isra.0+0xa8>
 801d538:	463c      	mov	r4, r7
 801d53a:	42a3      	cmp	r3, r4
 801d53c:	dd1b      	ble.n	801d576 <_strtol_l.isra.0+0xc6>
 801d53e:	1c57      	adds	r7, r2, #1
 801d540:	d007      	beq.n	801d552 <_strtol_l.isra.0+0xa2>
 801d542:	4581      	cmp	r9, r0
 801d544:	d314      	bcc.n	801d570 <_strtol_l.isra.0+0xc0>
 801d546:	d101      	bne.n	801d54c <_strtol_l.isra.0+0x9c>
 801d548:	45a2      	cmp	sl, r4
 801d54a:	db11      	blt.n	801d570 <_strtol_l.isra.0+0xc0>
 801d54c:	fb00 4003 	mla	r0, r0, r3, r4
 801d550:	2201      	movs	r2, #1
 801d552:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d556:	e7eb      	b.n	801d530 <_strtol_l.isra.0+0x80>
 801d558:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d55c:	2f19      	cmp	r7, #25
 801d55e:	d801      	bhi.n	801d564 <_strtol_l.isra.0+0xb4>
 801d560:	3c37      	subs	r4, #55	@ 0x37
 801d562:	e7ea      	b.n	801d53a <_strtol_l.isra.0+0x8a>
 801d564:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d568:	2f19      	cmp	r7, #25
 801d56a:	d804      	bhi.n	801d576 <_strtol_l.isra.0+0xc6>
 801d56c:	3c57      	subs	r4, #87	@ 0x57
 801d56e:	e7e4      	b.n	801d53a <_strtol_l.isra.0+0x8a>
 801d570:	f04f 32ff 	mov.w	r2, #4294967295
 801d574:	e7ed      	b.n	801d552 <_strtol_l.isra.0+0xa2>
 801d576:	1c53      	adds	r3, r2, #1
 801d578:	d108      	bne.n	801d58c <_strtol_l.isra.0+0xdc>
 801d57a:	2322      	movs	r3, #34	@ 0x22
 801d57c:	f8ce 3000 	str.w	r3, [lr]
 801d580:	4660      	mov	r0, ip
 801d582:	f1b8 0f00 	cmp.w	r8, #0
 801d586:	d0a0      	beq.n	801d4ca <_strtol_l.isra.0+0x1a>
 801d588:	1e69      	subs	r1, r5, #1
 801d58a:	e006      	b.n	801d59a <_strtol_l.isra.0+0xea>
 801d58c:	b106      	cbz	r6, 801d590 <_strtol_l.isra.0+0xe0>
 801d58e:	4240      	negs	r0, r0
 801d590:	f1b8 0f00 	cmp.w	r8, #0
 801d594:	d099      	beq.n	801d4ca <_strtol_l.isra.0+0x1a>
 801d596:	2a00      	cmp	r2, #0
 801d598:	d1f6      	bne.n	801d588 <_strtol_l.isra.0+0xd8>
 801d59a:	f8c8 1000 	str.w	r1, [r8]
 801d59e:	e794      	b.n	801d4ca <_strtol_l.isra.0+0x1a>
 801d5a0:	0802326f 	.word	0x0802326f

0801d5a4 <strtol>:
 801d5a4:	4613      	mov	r3, r2
 801d5a6:	460a      	mov	r2, r1
 801d5a8:	4601      	mov	r1, r0
 801d5aa:	4802      	ldr	r0, [pc, #8]	@ (801d5b4 <strtol+0x10>)
 801d5ac:	6800      	ldr	r0, [r0, #0]
 801d5ae:	f7ff bf7f 	b.w	801d4b0 <_strtol_l.isra.0>
 801d5b2:	bf00      	nop
 801d5b4:	20000118 	.word	0x20000118

0801d5b8 <std>:
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	b510      	push	{r4, lr}
 801d5bc:	4604      	mov	r4, r0
 801d5be:	e9c0 3300 	strd	r3, r3, [r0]
 801d5c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d5c6:	6083      	str	r3, [r0, #8]
 801d5c8:	8181      	strh	r1, [r0, #12]
 801d5ca:	6643      	str	r3, [r0, #100]	@ 0x64
 801d5cc:	81c2      	strh	r2, [r0, #14]
 801d5ce:	6183      	str	r3, [r0, #24]
 801d5d0:	4619      	mov	r1, r3
 801d5d2:	2208      	movs	r2, #8
 801d5d4:	305c      	adds	r0, #92	@ 0x5c
 801d5d6:	f000 f966 	bl	801d8a6 <memset>
 801d5da:	4b0d      	ldr	r3, [pc, #52]	@ (801d610 <std+0x58>)
 801d5dc:	6263      	str	r3, [r4, #36]	@ 0x24
 801d5de:	4b0d      	ldr	r3, [pc, #52]	@ (801d614 <std+0x5c>)
 801d5e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801d5e2:	4b0d      	ldr	r3, [pc, #52]	@ (801d618 <std+0x60>)
 801d5e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801d5e6:	4b0d      	ldr	r3, [pc, #52]	@ (801d61c <std+0x64>)
 801d5e8:	6323      	str	r3, [r4, #48]	@ 0x30
 801d5ea:	4b0d      	ldr	r3, [pc, #52]	@ (801d620 <std+0x68>)
 801d5ec:	6224      	str	r4, [r4, #32]
 801d5ee:	429c      	cmp	r4, r3
 801d5f0:	d006      	beq.n	801d600 <std+0x48>
 801d5f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801d5f6:	4294      	cmp	r4, r2
 801d5f8:	d002      	beq.n	801d600 <std+0x48>
 801d5fa:	33d0      	adds	r3, #208	@ 0xd0
 801d5fc:	429c      	cmp	r4, r3
 801d5fe:	d105      	bne.n	801d60c <std+0x54>
 801d600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d608:	f000 ba40 	b.w	801da8c <__retarget_lock_init_recursive>
 801d60c:	bd10      	pop	{r4, pc}
 801d60e:	bf00      	nop
 801d610:	0801d7cd 	.word	0x0801d7cd
 801d614:	0801d7ef 	.word	0x0801d7ef
 801d618:	0801d827 	.word	0x0801d827
 801d61c:	0801d84b 	.word	0x0801d84b
 801d620:	2000e700 	.word	0x2000e700

0801d624 <stdio_exit_handler>:
 801d624:	4a02      	ldr	r2, [pc, #8]	@ (801d630 <stdio_exit_handler+0xc>)
 801d626:	4903      	ldr	r1, [pc, #12]	@ (801d634 <stdio_exit_handler+0x10>)
 801d628:	4803      	ldr	r0, [pc, #12]	@ (801d638 <stdio_exit_handler+0x14>)
 801d62a:	f000 b869 	b.w	801d700 <_fwalk_sglue>
 801d62e:	bf00      	nop
 801d630:	2000010c 	.word	0x2000010c
 801d634:	0801e651 	.word	0x0801e651
 801d638:	2000011c 	.word	0x2000011c

0801d63c <cleanup_stdio>:
 801d63c:	6841      	ldr	r1, [r0, #4]
 801d63e:	4b0c      	ldr	r3, [pc, #48]	@ (801d670 <cleanup_stdio+0x34>)
 801d640:	4299      	cmp	r1, r3
 801d642:	b510      	push	{r4, lr}
 801d644:	4604      	mov	r4, r0
 801d646:	d001      	beq.n	801d64c <cleanup_stdio+0x10>
 801d648:	f001 f802 	bl	801e650 <_fflush_r>
 801d64c:	68a1      	ldr	r1, [r4, #8]
 801d64e:	4b09      	ldr	r3, [pc, #36]	@ (801d674 <cleanup_stdio+0x38>)
 801d650:	4299      	cmp	r1, r3
 801d652:	d002      	beq.n	801d65a <cleanup_stdio+0x1e>
 801d654:	4620      	mov	r0, r4
 801d656:	f000 fffb 	bl	801e650 <_fflush_r>
 801d65a:	68e1      	ldr	r1, [r4, #12]
 801d65c:	4b06      	ldr	r3, [pc, #24]	@ (801d678 <cleanup_stdio+0x3c>)
 801d65e:	4299      	cmp	r1, r3
 801d660:	d004      	beq.n	801d66c <cleanup_stdio+0x30>
 801d662:	4620      	mov	r0, r4
 801d664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d668:	f000 bff2 	b.w	801e650 <_fflush_r>
 801d66c:	bd10      	pop	{r4, pc}
 801d66e:	bf00      	nop
 801d670:	2000e700 	.word	0x2000e700
 801d674:	2000e768 	.word	0x2000e768
 801d678:	2000e7d0 	.word	0x2000e7d0

0801d67c <global_stdio_init.part.0>:
 801d67c:	b510      	push	{r4, lr}
 801d67e:	4b0b      	ldr	r3, [pc, #44]	@ (801d6ac <global_stdio_init.part.0+0x30>)
 801d680:	4c0b      	ldr	r4, [pc, #44]	@ (801d6b0 <global_stdio_init.part.0+0x34>)
 801d682:	4a0c      	ldr	r2, [pc, #48]	@ (801d6b4 <global_stdio_init.part.0+0x38>)
 801d684:	601a      	str	r2, [r3, #0]
 801d686:	4620      	mov	r0, r4
 801d688:	2200      	movs	r2, #0
 801d68a:	2104      	movs	r1, #4
 801d68c:	f7ff ff94 	bl	801d5b8 <std>
 801d690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801d694:	2201      	movs	r2, #1
 801d696:	2109      	movs	r1, #9
 801d698:	f7ff ff8e 	bl	801d5b8 <std>
 801d69c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801d6a0:	2202      	movs	r2, #2
 801d6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6a6:	2112      	movs	r1, #18
 801d6a8:	f7ff bf86 	b.w	801d5b8 <std>
 801d6ac:	2000e838 	.word	0x2000e838
 801d6b0:	2000e700 	.word	0x2000e700
 801d6b4:	0801d625 	.word	0x0801d625

0801d6b8 <__sfp_lock_acquire>:
 801d6b8:	4801      	ldr	r0, [pc, #4]	@ (801d6c0 <__sfp_lock_acquire+0x8>)
 801d6ba:	f000 b9e8 	b.w	801da8e <__retarget_lock_acquire_recursive>
 801d6be:	bf00      	nop
 801d6c0:	2000e841 	.word	0x2000e841

0801d6c4 <__sfp_lock_release>:
 801d6c4:	4801      	ldr	r0, [pc, #4]	@ (801d6cc <__sfp_lock_release+0x8>)
 801d6c6:	f000 b9e3 	b.w	801da90 <__retarget_lock_release_recursive>
 801d6ca:	bf00      	nop
 801d6cc:	2000e841 	.word	0x2000e841

0801d6d0 <__sinit>:
 801d6d0:	b510      	push	{r4, lr}
 801d6d2:	4604      	mov	r4, r0
 801d6d4:	f7ff fff0 	bl	801d6b8 <__sfp_lock_acquire>
 801d6d8:	6a23      	ldr	r3, [r4, #32]
 801d6da:	b11b      	cbz	r3, 801d6e4 <__sinit+0x14>
 801d6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6e0:	f7ff bff0 	b.w	801d6c4 <__sfp_lock_release>
 801d6e4:	4b04      	ldr	r3, [pc, #16]	@ (801d6f8 <__sinit+0x28>)
 801d6e6:	6223      	str	r3, [r4, #32]
 801d6e8:	4b04      	ldr	r3, [pc, #16]	@ (801d6fc <__sinit+0x2c>)
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d1f5      	bne.n	801d6dc <__sinit+0xc>
 801d6f0:	f7ff ffc4 	bl	801d67c <global_stdio_init.part.0>
 801d6f4:	e7f2      	b.n	801d6dc <__sinit+0xc>
 801d6f6:	bf00      	nop
 801d6f8:	0801d63d 	.word	0x0801d63d
 801d6fc:	2000e838 	.word	0x2000e838

0801d700 <_fwalk_sglue>:
 801d700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d704:	4607      	mov	r7, r0
 801d706:	4688      	mov	r8, r1
 801d708:	4614      	mov	r4, r2
 801d70a:	2600      	movs	r6, #0
 801d70c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d710:	f1b9 0901 	subs.w	r9, r9, #1
 801d714:	d505      	bpl.n	801d722 <_fwalk_sglue+0x22>
 801d716:	6824      	ldr	r4, [r4, #0]
 801d718:	2c00      	cmp	r4, #0
 801d71a:	d1f7      	bne.n	801d70c <_fwalk_sglue+0xc>
 801d71c:	4630      	mov	r0, r6
 801d71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d722:	89ab      	ldrh	r3, [r5, #12]
 801d724:	2b01      	cmp	r3, #1
 801d726:	d907      	bls.n	801d738 <_fwalk_sglue+0x38>
 801d728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d72c:	3301      	adds	r3, #1
 801d72e:	d003      	beq.n	801d738 <_fwalk_sglue+0x38>
 801d730:	4629      	mov	r1, r5
 801d732:	4638      	mov	r0, r7
 801d734:	47c0      	blx	r8
 801d736:	4306      	orrs	r6, r0
 801d738:	3568      	adds	r5, #104	@ 0x68
 801d73a:	e7e9      	b.n	801d710 <_fwalk_sglue+0x10>

0801d73c <iprintf>:
 801d73c:	b40f      	push	{r0, r1, r2, r3}
 801d73e:	b507      	push	{r0, r1, r2, lr}
 801d740:	4906      	ldr	r1, [pc, #24]	@ (801d75c <iprintf+0x20>)
 801d742:	ab04      	add	r3, sp, #16
 801d744:	6808      	ldr	r0, [r1, #0]
 801d746:	f853 2b04 	ldr.w	r2, [r3], #4
 801d74a:	6881      	ldr	r1, [r0, #8]
 801d74c:	9301      	str	r3, [sp, #4]
 801d74e:	f000 fc57 	bl	801e000 <_vfiprintf_r>
 801d752:	b003      	add	sp, #12
 801d754:	f85d eb04 	ldr.w	lr, [sp], #4
 801d758:	b004      	add	sp, #16
 801d75a:	4770      	bx	lr
 801d75c:	20000118 	.word	0x20000118

0801d760 <sniprintf>:
 801d760:	b40c      	push	{r2, r3}
 801d762:	b530      	push	{r4, r5, lr}
 801d764:	4b18      	ldr	r3, [pc, #96]	@ (801d7c8 <sniprintf+0x68>)
 801d766:	1e0c      	subs	r4, r1, #0
 801d768:	681d      	ldr	r5, [r3, #0]
 801d76a:	b09d      	sub	sp, #116	@ 0x74
 801d76c:	da08      	bge.n	801d780 <sniprintf+0x20>
 801d76e:	238b      	movs	r3, #139	@ 0x8b
 801d770:	602b      	str	r3, [r5, #0]
 801d772:	f04f 30ff 	mov.w	r0, #4294967295
 801d776:	b01d      	add	sp, #116	@ 0x74
 801d778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d77c:	b002      	add	sp, #8
 801d77e:	4770      	bx	lr
 801d780:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801d784:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d788:	f04f 0300 	mov.w	r3, #0
 801d78c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d78e:	bf14      	ite	ne
 801d790:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d794:	4623      	moveq	r3, r4
 801d796:	9304      	str	r3, [sp, #16]
 801d798:	9307      	str	r3, [sp, #28]
 801d79a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d79e:	9002      	str	r0, [sp, #8]
 801d7a0:	9006      	str	r0, [sp, #24]
 801d7a2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d7a6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d7a8:	ab21      	add	r3, sp, #132	@ 0x84
 801d7aa:	a902      	add	r1, sp, #8
 801d7ac:	4628      	mov	r0, r5
 801d7ae:	9301      	str	r3, [sp, #4]
 801d7b0:	f000 fb00 	bl	801ddb4 <_svfiprintf_r>
 801d7b4:	1c43      	adds	r3, r0, #1
 801d7b6:	bfbc      	itt	lt
 801d7b8:	238b      	movlt	r3, #139	@ 0x8b
 801d7ba:	602b      	strlt	r3, [r5, #0]
 801d7bc:	2c00      	cmp	r4, #0
 801d7be:	d0da      	beq.n	801d776 <sniprintf+0x16>
 801d7c0:	9b02      	ldr	r3, [sp, #8]
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	701a      	strb	r2, [r3, #0]
 801d7c6:	e7d6      	b.n	801d776 <sniprintf+0x16>
 801d7c8:	20000118 	.word	0x20000118

0801d7cc <__sread>:
 801d7cc:	b510      	push	{r4, lr}
 801d7ce:	460c      	mov	r4, r1
 801d7d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7d4:	f000 f90c 	bl	801d9f0 <_read_r>
 801d7d8:	2800      	cmp	r0, #0
 801d7da:	bfab      	itete	ge
 801d7dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d7de:	89a3      	ldrhlt	r3, [r4, #12]
 801d7e0:	181b      	addge	r3, r3, r0
 801d7e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d7e6:	bfac      	ite	ge
 801d7e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d7ea:	81a3      	strhlt	r3, [r4, #12]
 801d7ec:	bd10      	pop	{r4, pc}

0801d7ee <__swrite>:
 801d7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7f2:	461f      	mov	r7, r3
 801d7f4:	898b      	ldrh	r3, [r1, #12]
 801d7f6:	05db      	lsls	r3, r3, #23
 801d7f8:	4605      	mov	r5, r0
 801d7fa:	460c      	mov	r4, r1
 801d7fc:	4616      	mov	r6, r2
 801d7fe:	d505      	bpl.n	801d80c <__swrite+0x1e>
 801d800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d804:	2302      	movs	r3, #2
 801d806:	2200      	movs	r2, #0
 801d808:	f000 f8e0 	bl	801d9cc <_lseek_r>
 801d80c:	89a3      	ldrh	r3, [r4, #12]
 801d80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d816:	81a3      	strh	r3, [r4, #12]
 801d818:	4632      	mov	r2, r6
 801d81a:	463b      	mov	r3, r7
 801d81c:	4628      	mov	r0, r5
 801d81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d822:	f000 b8f7 	b.w	801da14 <_write_r>

0801d826 <__sseek>:
 801d826:	b510      	push	{r4, lr}
 801d828:	460c      	mov	r4, r1
 801d82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d82e:	f000 f8cd 	bl	801d9cc <_lseek_r>
 801d832:	1c43      	adds	r3, r0, #1
 801d834:	89a3      	ldrh	r3, [r4, #12]
 801d836:	bf15      	itete	ne
 801d838:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d83a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d83e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d842:	81a3      	strheq	r3, [r4, #12]
 801d844:	bf18      	it	ne
 801d846:	81a3      	strhne	r3, [r4, #12]
 801d848:	bd10      	pop	{r4, pc}

0801d84a <__sclose>:
 801d84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d84e:	f000 b84f 	b.w	801d8f0 <_close_r>

0801d852 <memcmp>:
 801d852:	b510      	push	{r4, lr}
 801d854:	3901      	subs	r1, #1
 801d856:	4402      	add	r2, r0
 801d858:	4290      	cmp	r0, r2
 801d85a:	d101      	bne.n	801d860 <memcmp+0xe>
 801d85c:	2000      	movs	r0, #0
 801d85e:	e005      	b.n	801d86c <memcmp+0x1a>
 801d860:	7803      	ldrb	r3, [r0, #0]
 801d862:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d866:	42a3      	cmp	r3, r4
 801d868:	d001      	beq.n	801d86e <memcmp+0x1c>
 801d86a:	1b18      	subs	r0, r3, r4
 801d86c:	bd10      	pop	{r4, pc}
 801d86e:	3001      	adds	r0, #1
 801d870:	e7f2      	b.n	801d858 <memcmp+0x6>

0801d872 <memmove>:
 801d872:	4288      	cmp	r0, r1
 801d874:	b510      	push	{r4, lr}
 801d876:	eb01 0402 	add.w	r4, r1, r2
 801d87a:	d902      	bls.n	801d882 <memmove+0x10>
 801d87c:	4284      	cmp	r4, r0
 801d87e:	4623      	mov	r3, r4
 801d880:	d807      	bhi.n	801d892 <memmove+0x20>
 801d882:	1e43      	subs	r3, r0, #1
 801d884:	42a1      	cmp	r1, r4
 801d886:	d008      	beq.n	801d89a <memmove+0x28>
 801d888:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d88c:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d890:	e7f8      	b.n	801d884 <memmove+0x12>
 801d892:	4402      	add	r2, r0
 801d894:	4601      	mov	r1, r0
 801d896:	428a      	cmp	r2, r1
 801d898:	d100      	bne.n	801d89c <memmove+0x2a>
 801d89a:	bd10      	pop	{r4, pc}
 801d89c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d8a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d8a4:	e7f7      	b.n	801d896 <memmove+0x24>

0801d8a6 <memset>:
 801d8a6:	4402      	add	r2, r0
 801d8a8:	4603      	mov	r3, r0
 801d8aa:	4293      	cmp	r3, r2
 801d8ac:	d100      	bne.n	801d8b0 <memset+0xa>
 801d8ae:	4770      	bx	lr
 801d8b0:	f803 1b01 	strb.w	r1, [r3], #1
 801d8b4:	e7f9      	b.n	801d8aa <memset+0x4>

0801d8b6 <strcat>:
 801d8b6:	b510      	push	{r4, lr}
 801d8b8:	4602      	mov	r2, r0
 801d8ba:	7814      	ldrb	r4, [r2, #0]
 801d8bc:	4613      	mov	r3, r2
 801d8be:	3201      	adds	r2, #1
 801d8c0:	2c00      	cmp	r4, #0
 801d8c2:	d1fa      	bne.n	801d8ba <strcat+0x4>
 801d8c4:	3b01      	subs	r3, #1
 801d8c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d8ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d8ce:	2a00      	cmp	r2, #0
 801d8d0:	d1f9      	bne.n	801d8c6 <strcat+0x10>
 801d8d2:	bd10      	pop	{r4, pc}

0801d8d4 <strchr>:
 801d8d4:	b2c9      	uxtb	r1, r1
 801d8d6:	4603      	mov	r3, r0
 801d8d8:	4618      	mov	r0, r3
 801d8da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8de:	b112      	cbz	r2, 801d8e6 <strchr+0x12>
 801d8e0:	428a      	cmp	r2, r1
 801d8e2:	d1f9      	bne.n	801d8d8 <strchr+0x4>
 801d8e4:	4770      	bx	lr
 801d8e6:	2900      	cmp	r1, #0
 801d8e8:	bf18      	it	ne
 801d8ea:	2000      	movne	r0, #0
 801d8ec:	4770      	bx	lr
	...

0801d8f0 <_close_r>:
 801d8f0:	b538      	push	{r3, r4, r5, lr}
 801d8f2:	4d06      	ldr	r5, [pc, #24]	@ (801d90c <_close_r+0x1c>)
 801d8f4:	2300      	movs	r3, #0
 801d8f6:	4604      	mov	r4, r0
 801d8f8:	4608      	mov	r0, r1
 801d8fa:	602b      	str	r3, [r5, #0]
 801d8fc:	f7e6 faf4 	bl	8003ee8 <_close>
 801d900:	1c43      	adds	r3, r0, #1
 801d902:	d102      	bne.n	801d90a <_close_r+0x1a>
 801d904:	682b      	ldr	r3, [r5, #0]
 801d906:	b103      	cbz	r3, 801d90a <_close_r+0x1a>
 801d908:	6023      	str	r3, [r4, #0]
 801d90a:	bd38      	pop	{r3, r4, r5, pc}
 801d90c:	2000e83c 	.word	0x2000e83c

0801d910 <_reclaim_reent>:
 801d910:	4b2d      	ldr	r3, [pc, #180]	@ (801d9c8 <_reclaim_reent+0xb8>)
 801d912:	681b      	ldr	r3, [r3, #0]
 801d914:	4283      	cmp	r3, r0
 801d916:	b570      	push	{r4, r5, r6, lr}
 801d918:	4604      	mov	r4, r0
 801d91a:	d053      	beq.n	801d9c4 <_reclaim_reent+0xb4>
 801d91c:	69c3      	ldr	r3, [r0, #28]
 801d91e:	b31b      	cbz	r3, 801d968 <_reclaim_reent+0x58>
 801d920:	68db      	ldr	r3, [r3, #12]
 801d922:	b163      	cbz	r3, 801d93e <_reclaim_reent+0x2e>
 801d924:	2500      	movs	r5, #0
 801d926:	69e3      	ldr	r3, [r4, #28]
 801d928:	68db      	ldr	r3, [r3, #12]
 801d92a:	5959      	ldr	r1, [r3, r5]
 801d92c:	b9b1      	cbnz	r1, 801d95c <_reclaim_reent+0x4c>
 801d92e:	3504      	adds	r5, #4
 801d930:	2d80      	cmp	r5, #128	@ 0x80
 801d932:	d1f8      	bne.n	801d926 <_reclaim_reent+0x16>
 801d934:	69e3      	ldr	r3, [r4, #28]
 801d936:	4620      	mov	r0, r4
 801d938:	68d9      	ldr	r1, [r3, #12]
 801d93a:	f000 f8df 	bl	801dafc <_free_r>
 801d93e:	69e3      	ldr	r3, [r4, #28]
 801d940:	6819      	ldr	r1, [r3, #0]
 801d942:	b111      	cbz	r1, 801d94a <_reclaim_reent+0x3a>
 801d944:	4620      	mov	r0, r4
 801d946:	f000 f8d9 	bl	801dafc <_free_r>
 801d94a:	69e3      	ldr	r3, [r4, #28]
 801d94c:	689d      	ldr	r5, [r3, #8]
 801d94e:	b15d      	cbz	r5, 801d968 <_reclaim_reent+0x58>
 801d950:	4629      	mov	r1, r5
 801d952:	4620      	mov	r0, r4
 801d954:	682d      	ldr	r5, [r5, #0]
 801d956:	f000 f8d1 	bl	801dafc <_free_r>
 801d95a:	e7f8      	b.n	801d94e <_reclaim_reent+0x3e>
 801d95c:	680e      	ldr	r6, [r1, #0]
 801d95e:	4620      	mov	r0, r4
 801d960:	f000 f8cc 	bl	801dafc <_free_r>
 801d964:	4631      	mov	r1, r6
 801d966:	e7e1      	b.n	801d92c <_reclaim_reent+0x1c>
 801d968:	6961      	ldr	r1, [r4, #20]
 801d96a:	b111      	cbz	r1, 801d972 <_reclaim_reent+0x62>
 801d96c:	4620      	mov	r0, r4
 801d96e:	f000 f8c5 	bl	801dafc <_free_r>
 801d972:	69e1      	ldr	r1, [r4, #28]
 801d974:	b111      	cbz	r1, 801d97c <_reclaim_reent+0x6c>
 801d976:	4620      	mov	r0, r4
 801d978:	f000 f8c0 	bl	801dafc <_free_r>
 801d97c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d97e:	b111      	cbz	r1, 801d986 <_reclaim_reent+0x76>
 801d980:	4620      	mov	r0, r4
 801d982:	f000 f8bb 	bl	801dafc <_free_r>
 801d986:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d988:	b111      	cbz	r1, 801d990 <_reclaim_reent+0x80>
 801d98a:	4620      	mov	r0, r4
 801d98c:	f000 f8b6 	bl	801dafc <_free_r>
 801d990:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801d992:	b111      	cbz	r1, 801d99a <_reclaim_reent+0x8a>
 801d994:	4620      	mov	r0, r4
 801d996:	f000 f8b1 	bl	801dafc <_free_r>
 801d99a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801d99c:	b111      	cbz	r1, 801d9a4 <_reclaim_reent+0x94>
 801d99e:	4620      	mov	r0, r4
 801d9a0:	f000 f8ac 	bl	801dafc <_free_r>
 801d9a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801d9a6:	b111      	cbz	r1, 801d9ae <_reclaim_reent+0x9e>
 801d9a8:	4620      	mov	r0, r4
 801d9aa:	f000 f8a7 	bl	801dafc <_free_r>
 801d9ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801d9b0:	b111      	cbz	r1, 801d9b8 <_reclaim_reent+0xa8>
 801d9b2:	4620      	mov	r0, r4
 801d9b4:	f000 f8a2 	bl	801dafc <_free_r>
 801d9b8:	6a23      	ldr	r3, [r4, #32]
 801d9ba:	b11b      	cbz	r3, 801d9c4 <_reclaim_reent+0xb4>
 801d9bc:	4620      	mov	r0, r4
 801d9be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9c2:	4718      	bx	r3
 801d9c4:	bd70      	pop	{r4, r5, r6, pc}
 801d9c6:	bf00      	nop
 801d9c8:	20000118 	.word	0x20000118

0801d9cc <_lseek_r>:
 801d9cc:	b538      	push	{r3, r4, r5, lr}
 801d9ce:	4d07      	ldr	r5, [pc, #28]	@ (801d9ec <_lseek_r+0x20>)
 801d9d0:	4604      	mov	r4, r0
 801d9d2:	4608      	mov	r0, r1
 801d9d4:	4611      	mov	r1, r2
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	602a      	str	r2, [r5, #0]
 801d9da:	461a      	mov	r2, r3
 801d9dc:	f7e6 faab 	bl	8003f36 <_lseek>
 801d9e0:	1c43      	adds	r3, r0, #1
 801d9e2:	d102      	bne.n	801d9ea <_lseek_r+0x1e>
 801d9e4:	682b      	ldr	r3, [r5, #0]
 801d9e6:	b103      	cbz	r3, 801d9ea <_lseek_r+0x1e>
 801d9e8:	6023      	str	r3, [r4, #0]
 801d9ea:	bd38      	pop	{r3, r4, r5, pc}
 801d9ec:	2000e83c 	.word	0x2000e83c

0801d9f0 <_read_r>:
 801d9f0:	b538      	push	{r3, r4, r5, lr}
 801d9f2:	4d07      	ldr	r5, [pc, #28]	@ (801da10 <_read_r+0x20>)
 801d9f4:	4604      	mov	r4, r0
 801d9f6:	4608      	mov	r0, r1
 801d9f8:	4611      	mov	r1, r2
 801d9fa:	2200      	movs	r2, #0
 801d9fc:	602a      	str	r2, [r5, #0]
 801d9fe:	461a      	mov	r2, r3
 801da00:	f7e6 fa39 	bl	8003e76 <_read>
 801da04:	1c43      	adds	r3, r0, #1
 801da06:	d102      	bne.n	801da0e <_read_r+0x1e>
 801da08:	682b      	ldr	r3, [r5, #0]
 801da0a:	b103      	cbz	r3, 801da0e <_read_r+0x1e>
 801da0c:	6023      	str	r3, [r4, #0]
 801da0e:	bd38      	pop	{r3, r4, r5, pc}
 801da10:	2000e83c 	.word	0x2000e83c

0801da14 <_write_r>:
 801da14:	b538      	push	{r3, r4, r5, lr}
 801da16:	4d07      	ldr	r5, [pc, #28]	@ (801da34 <_write_r+0x20>)
 801da18:	4604      	mov	r4, r0
 801da1a:	4608      	mov	r0, r1
 801da1c:	4611      	mov	r1, r2
 801da1e:	2200      	movs	r2, #0
 801da20:	602a      	str	r2, [r5, #0]
 801da22:	461a      	mov	r2, r3
 801da24:	f7e6 fa44 	bl	8003eb0 <_write>
 801da28:	1c43      	adds	r3, r0, #1
 801da2a:	d102      	bne.n	801da32 <_write_r+0x1e>
 801da2c:	682b      	ldr	r3, [r5, #0]
 801da2e:	b103      	cbz	r3, 801da32 <_write_r+0x1e>
 801da30:	6023      	str	r3, [r4, #0]
 801da32:	bd38      	pop	{r3, r4, r5, pc}
 801da34:	2000e83c 	.word	0x2000e83c

0801da38 <__errno>:
 801da38:	4b01      	ldr	r3, [pc, #4]	@ (801da40 <__errno+0x8>)
 801da3a:	6818      	ldr	r0, [r3, #0]
 801da3c:	4770      	bx	lr
 801da3e:	bf00      	nop
 801da40:	20000118 	.word	0x20000118

0801da44 <__libc_init_array>:
 801da44:	b570      	push	{r4, r5, r6, lr}
 801da46:	4d0d      	ldr	r5, [pc, #52]	@ (801da7c <__libc_init_array+0x38>)
 801da48:	4c0d      	ldr	r4, [pc, #52]	@ (801da80 <__libc_init_array+0x3c>)
 801da4a:	1b64      	subs	r4, r4, r5
 801da4c:	10a4      	asrs	r4, r4, #2
 801da4e:	2600      	movs	r6, #0
 801da50:	42a6      	cmp	r6, r4
 801da52:	d109      	bne.n	801da68 <__libc_init_array+0x24>
 801da54:	4d0b      	ldr	r5, [pc, #44]	@ (801da84 <__libc_init_array+0x40>)
 801da56:	4c0c      	ldr	r4, [pc, #48]	@ (801da88 <__libc_init_array+0x44>)
 801da58:	f000 ffde 	bl	801ea18 <_init>
 801da5c:	1b64      	subs	r4, r4, r5
 801da5e:	10a4      	asrs	r4, r4, #2
 801da60:	2600      	movs	r6, #0
 801da62:	42a6      	cmp	r6, r4
 801da64:	d105      	bne.n	801da72 <__libc_init_array+0x2e>
 801da66:	bd70      	pop	{r4, r5, r6, pc}
 801da68:	f855 3b04 	ldr.w	r3, [r5], #4
 801da6c:	4798      	blx	r3
 801da6e:	3601      	adds	r6, #1
 801da70:	e7ee      	b.n	801da50 <__libc_init_array+0xc>
 801da72:	f855 3b04 	ldr.w	r3, [r5], #4
 801da76:	4798      	blx	r3
 801da78:	3601      	adds	r6, #1
 801da7a:	e7f2      	b.n	801da62 <__libc_init_array+0x1e>
 801da7c:	08023378 	.word	0x08023378
 801da80:	08023378 	.word	0x08023378
 801da84:	08023378 	.word	0x08023378
 801da88:	0802337c 	.word	0x0802337c

0801da8c <__retarget_lock_init_recursive>:
 801da8c:	4770      	bx	lr

0801da8e <__retarget_lock_acquire_recursive>:
 801da8e:	4770      	bx	lr

0801da90 <__retarget_lock_release_recursive>:
 801da90:	4770      	bx	lr

0801da92 <strcpy>:
 801da92:	4603      	mov	r3, r0
 801da94:	f811 2b01 	ldrb.w	r2, [r1], #1
 801da98:	f803 2b01 	strb.w	r2, [r3], #1
 801da9c:	2a00      	cmp	r2, #0
 801da9e:	d1f9      	bne.n	801da94 <strcpy+0x2>
 801daa0:	4770      	bx	lr

0801daa2 <memcpy>:
 801daa2:	440a      	add	r2, r1
 801daa4:	4291      	cmp	r1, r2
 801daa6:	f100 33ff 	add.w	r3, r0, #4294967295
 801daaa:	d100      	bne.n	801daae <memcpy+0xc>
 801daac:	4770      	bx	lr
 801daae:	b510      	push	{r4, lr}
 801dab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dab8:	4291      	cmp	r1, r2
 801daba:	d1f9      	bne.n	801dab0 <memcpy+0xe>
 801dabc:	bd10      	pop	{r4, pc}
	...

0801dac0 <__assert_func>:
 801dac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dac2:	4614      	mov	r4, r2
 801dac4:	461a      	mov	r2, r3
 801dac6:	4b09      	ldr	r3, [pc, #36]	@ (801daec <__assert_func+0x2c>)
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	4605      	mov	r5, r0
 801dacc:	68d8      	ldr	r0, [r3, #12]
 801dace:	b14c      	cbz	r4, 801dae4 <__assert_func+0x24>
 801dad0:	4b07      	ldr	r3, [pc, #28]	@ (801daf0 <__assert_func+0x30>)
 801dad2:	9100      	str	r1, [sp, #0]
 801dad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dad8:	4906      	ldr	r1, [pc, #24]	@ (801daf4 <__assert_func+0x34>)
 801dada:	462b      	mov	r3, r5
 801dadc:	f000 fde0 	bl	801e6a0 <fiprintf>
 801dae0:	f000 fe94 	bl	801e80c <abort>
 801dae4:	4b04      	ldr	r3, [pc, #16]	@ (801daf8 <__assert_func+0x38>)
 801dae6:	461c      	mov	r4, r3
 801dae8:	e7f3      	b.n	801dad2 <__assert_func+0x12>
 801daea:	bf00      	nop
 801daec:	20000118 	.word	0x20000118
 801daf0:	080231ff 	.word	0x080231ff
 801daf4:	0802320c 	.word	0x0802320c
 801daf8:	0802323a 	.word	0x0802323a

0801dafc <_free_r>:
 801dafc:	b538      	push	{r3, r4, r5, lr}
 801dafe:	4605      	mov	r5, r0
 801db00:	2900      	cmp	r1, #0
 801db02:	d041      	beq.n	801db88 <_free_r+0x8c>
 801db04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801db08:	1f0c      	subs	r4, r1, #4
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	bfb8      	it	lt
 801db0e:	18e4      	addlt	r4, r4, r3
 801db10:	f000 f8e8 	bl	801dce4 <__malloc_lock>
 801db14:	4a1d      	ldr	r2, [pc, #116]	@ (801db8c <_free_r+0x90>)
 801db16:	6813      	ldr	r3, [r2, #0]
 801db18:	b933      	cbnz	r3, 801db28 <_free_r+0x2c>
 801db1a:	6063      	str	r3, [r4, #4]
 801db1c:	6014      	str	r4, [r2, #0]
 801db1e:	4628      	mov	r0, r5
 801db20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801db24:	f000 b8e4 	b.w	801dcf0 <__malloc_unlock>
 801db28:	42a3      	cmp	r3, r4
 801db2a:	d908      	bls.n	801db3e <_free_r+0x42>
 801db2c:	6820      	ldr	r0, [r4, #0]
 801db2e:	1821      	adds	r1, r4, r0
 801db30:	428b      	cmp	r3, r1
 801db32:	bf01      	itttt	eq
 801db34:	6819      	ldreq	r1, [r3, #0]
 801db36:	685b      	ldreq	r3, [r3, #4]
 801db38:	1809      	addeq	r1, r1, r0
 801db3a:	6021      	streq	r1, [r4, #0]
 801db3c:	e7ed      	b.n	801db1a <_free_r+0x1e>
 801db3e:	461a      	mov	r2, r3
 801db40:	685b      	ldr	r3, [r3, #4]
 801db42:	b10b      	cbz	r3, 801db48 <_free_r+0x4c>
 801db44:	42a3      	cmp	r3, r4
 801db46:	d9fa      	bls.n	801db3e <_free_r+0x42>
 801db48:	6811      	ldr	r1, [r2, #0]
 801db4a:	1850      	adds	r0, r2, r1
 801db4c:	42a0      	cmp	r0, r4
 801db4e:	d10b      	bne.n	801db68 <_free_r+0x6c>
 801db50:	6820      	ldr	r0, [r4, #0]
 801db52:	4401      	add	r1, r0
 801db54:	1850      	adds	r0, r2, r1
 801db56:	4283      	cmp	r3, r0
 801db58:	6011      	str	r1, [r2, #0]
 801db5a:	d1e0      	bne.n	801db1e <_free_r+0x22>
 801db5c:	6818      	ldr	r0, [r3, #0]
 801db5e:	685b      	ldr	r3, [r3, #4]
 801db60:	6053      	str	r3, [r2, #4]
 801db62:	4408      	add	r0, r1
 801db64:	6010      	str	r0, [r2, #0]
 801db66:	e7da      	b.n	801db1e <_free_r+0x22>
 801db68:	d902      	bls.n	801db70 <_free_r+0x74>
 801db6a:	230c      	movs	r3, #12
 801db6c:	602b      	str	r3, [r5, #0]
 801db6e:	e7d6      	b.n	801db1e <_free_r+0x22>
 801db70:	6820      	ldr	r0, [r4, #0]
 801db72:	1821      	adds	r1, r4, r0
 801db74:	428b      	cmp	r3, r1
 801db76:	bf04      	itt	eq
 801db78:	6819      	ldreq	r1, [r3, #0]
 801db7a:	685b      	ldreq	r3, [r3, #4]
 801db7c:	6063      	str	r3, [r4, #4]
 801db7e:	bf04      	itt	eq
 801db80:	1809      	addeq	r1, r1, r0
 801db82:	6021      	streq	r1, [r4, #0]
 801db84:	6054      	str	r4, [r2, #4]
 801db86:	e7ca      	b.n	801db1e <_free_r+0x22>
 801db88:	bd38      	pop	{r3, r4, r5, pc}
 801db8a:	bf00      	nop
 801db8c:	2000e848 	.word	0x2000e848

0801db90 <malloc>:
 801db90:	4b02      	ldr	r3, [pc, #8]	@ (801db9c <malloc+0xc>)
 801db92:	4601      	mov	r1, r0
 801db94:	6818      	ldr	r0, [r3, #0]
 801db96:	f000 b825 	b.w	801dbe4 <_malloc_r>
 801db9a:	bf00      	nop
 801db9c:	20000118 	.word	0x20000118

0801dba0 <sbrk_aligned>:
 801dba0:	b570      	push	{r4, r5, r6, lr}
 801dba2:	4e0f      	ldr	r6, [pc, #60]	@ (801dbe0 <sbrk_aligned+0x40>)
 801dba4:	460c      	mov	r4, r1
 801dba6:	6831      	ldr	r1, [r6, #0]
 801dba8:	4605      	mov	r5, r0
 801dbaa:	b911      	cbnz	r1, 801dbb2 <sbrk_aligned+0x12>
 801dbac:	f000 fe1e 	bl	801e7ec <_sbrk_r>
 801dbb0:	6030      	str	r0, [r6, #0]
 801dbb2:	4621      	mov	r1, r4
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	f000 fe19 	bl	801e7ec <_sbrk_r>
 801dbba:	1c43      	adds	r3, r0, #1
 801dbbc:	d103      	bne.n	801dbc6 <sbrk_aligned+0x26>
 801dbbe:	f04f 34ff 	mov.w	r4, #4294967295
 801dbc2:	4620      	mov	r0, r4
 801dbc4:	bd70      	pop	{r4, r5, r6, pc}
 801dbc6:	1cc4      	adds	r4, r0, #3
 801dbc8:	f024 0403 	bic.w	r4, r4, #3
 801dbcc:	42a0      	cmp	r0, r4
 801dbce:	d0f8      	beq.n	801dbc2 <sbrk_aligned+0x22>
 801dbd0:	1a21      	subs	r1, r4, r0
 801dbd2:	4628      	mov	r0, r5
 801dbd4:	f000 fe0a 	bl	801e7ec <_sbrk_r>
 801dbd8:	3001      	adds	r0, #1
 801dbda:	d1f2      	bne.n	801dbc2 <sbrk_aligned+0x22>
 801dbdc:	e7ef      	b.n	801dbbe <sbrk_aligned+0x1e>
 801dbde:	bf00      	nop
 801dbe0:	2000e844 	.word	0x2000e844

0801dbe4 <_malloc_r>:
 801dbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dbe8:	1ccd      	adds	r5, r1, #3
 801dbea:	f025 0503 	bic.w	r5, r5, #3
 801dbee:	3508      	adds	r5, #8
 801dbf0:	2d0c      	cmp	r5, #12
 801dbf2:	bf38      	it	cc
 801dbf4:	250c      	movcc	r5, #12
 801dbf6:	2d00      	cmp	r5, #0
 801dbf8:	4606      	mov	r6, r0
 801dbfa:	db01      	blt.n	801dc00 <_malloc_r+0x1c>
 801dbfc:	42a9      	cmp	r1, r5
 801dbfe:	d904      	bls.n	801dc0a <_malloc_r+0x26>
 801dc00:	230c      	movs	r3, #12
 801dc02:	6033      	str	r3, [r6, #0]
 801dc04:	2000      	movs	r0, #0
 801dc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801dce0 <_malloc_r+0xfc>
 801dc0e:	f000 f869 	bl	801dce4 <__malloc_lock>
 801dc12:	f8d8 3000 	ldr.w	r3, [r8]
 801dc16:	461c      	mov	r4, r3
 801dc18:	bb44      	cbnz	r4, 801dc6c <_malloc_r+0x88>
 801dc1a:	4629      	mov	r1, r5
 801dc1c:	4630      	mov	r0, r6
 801dc1e:	f7ff ffbf 	bl	801dba0 <sbrk_aligned>
 801dc22:	1c43      	adds	r3, r0, #1
 801dc24:	4604      	mov	r4, r0
 801dc26:	d158      	bne.n	801dcda <_malloc_r+0xf6>
 801dc28:	f8d8 4000 	ldr.w	r4, [r8]
 801dc2c:	4627      	mov	r7, r4
 801dc2e:	2f00      	cmp	r7, #0
 801dc30:	d143      	bne.n	801dcba <_malloc_r+0xd6>
 801dc32:	2c00      	cmp	r4, #0
 801dc34:	d04b      	beq.n	801dcce <_malloc_r+0xea>
 801dc36:	6823      	ldr	r3, [r4, #0]
 801dc38:	4639      	mov	r1, r7
 801dc3a:	4630      	mov	r0, r6
 801dc3c:	eb04 0903 	add.w	r9, r4, r3
 801dc40:	f000 fdd4 	bl	801e7ec <_sbrk_r>
 801dc44:	4581      	cmp	r9, r0
 801dc46:	d142      	bne.n	801dcce <_malloc_r+0xea>
 801dc48:	6821      	ldr	r1, [r4, #0]
 801dc4a:	1a6d      	subs	r5, r5, r1
 801dc4c:	4629      	mov	r1, r5
 801dc4e:	4630      	mov	r0, r6
 801dc50:	f7ff ffa6 	bl	801dba0 <sbrk_aligned>
 801dc54:	3001      	adds	r0, #1
 801dc56:	d03a      	beq.n	801dcce <_malloc_r+0xea>
 801dc58:	6823      	ldr	r3, [r4, #0]
 801dc5a:	442b      	add	r3, r5
 801dc5c:	6023      	str	r3, [r4, #0]
 801dc5e:	f8d8 3000 	ldr.w	r3, [r8]
 801dc62:	685a      	ldr	r2, [r3, #4]
 801dc64:	bb62      	cbnz	r2, 801dcc0 <_malloc_r+0xdc>
 801dc66:	f8c8 7000 	str.w	r7, [r8]
 801dc6a:	e00f      	b.n	801dc8c <_malloc_r+0xa8>
 801dc6c:	6822      	ldr	r2, [r4, #0]
 801dc6e:	1b52      	subs	r2, r2, r5
 801dc70:	d420      	bmi.n	801dcb4 <_malloc_r+0xd0>
 801dc72:	2a0b      	cmp	r2, #11
 801dc74:	d917      	bls.n	801dca6 <_malloc_r+0xc2>
 801dc76:	1961      	adds	r1, r4, r5
 801dc78:	42a3      	cmp	r3, r4
 801dc7a:	6025      	str	r5, [r4, #0]
 801dc7c:	bf18      	it	ne
 801dc7e:	6059      	strne	r1, [r3, #4]
 801dc80:	6863      	ldr	r3, [r4, #4]
 801dc82:	bf08      	it	eq
 801dc84:	f8c8 1000 	streq.w	r1, [r8]
 801dc88:	5162      	str	r2, [r4, r5]
 801dc8a:	604b      	str	r3, [r1, #4]
 801dc8c:	4630      	mov	r0, r6
 801dc8e:	f000 f82f 	bl	801dcf0 <__malloc_unlock>
 801dc92:	f104 000b 	add.w	r0, r4, #11
 801dc96:	1d23      	adds	r3, r4, #4
 801dc98:	f020 0007 	bic.w	r0, r0, #7
 801dc9c:	1ac2      	subs	r2, r0, r3
 801dc9e:	bf1c      	itt	ne
 801dca0:	1a1b      	subne	r3, r3, r0
 801dca2:	50a3      	strne	r3, [r4, r2]
 801dca4:	e7af      	b.n	801dc06 <_malloc_r+0x22>
 801dca6:	6862      	ldr	r2, [r4, #4]
 801dca8:	42a3      	cmp	r3, r4
 801dcaa:	bf0c      	ite	eq
 801dcac:	f8c8 2000 	streq.w	r2, [r8]
 801dcb0:	605a      	strne	r2, [r3, #4]
 801dcb2:	e7eb      	b.n	801dc8c <_malloc_r+0xa8>
 801dcb4:	4623      	mov	r3, r4
 801dcb6:	6864      	ldr	r4, [r4, #4]
 801dcb8:	e7ae      	b.n	801dc18 <_malloc_r+0x34>
 801dcba:	463c      	mov	r4, r7
 801dcbc:	687f      	ldr	r7, [r7, #4]
 801dcbe:	e7b6      	b.n	801dc2e <_malloc_r+0x4a>
 801dcc0:	461a      	mov	r2, r3
 801dcc2:	685b      	ldr	r3, [r3, #4]
 801dcc4:	42a3      	cmp	r3, r4
 801dcc6:	d1fb      	bne.n	801dcc0 <_malloc_r+0xdc>
 801dcc8:	2300      	movs	r3, #0
 801dcca:	6053      	str	r3, [r2, #4]
 801dccc:	e7de      	b.n	801dc8c <_malloc_r+0xa8>
 801dcce:	230c      	movs	r3, #12
 801dcd0:	6033      	str	r3, [r6, #0]
 801dcd2:	4630      	mov	r0, r6
 801dcd4:	f000 f80c 	bl	801dcf0 <__malloc_unlock>
 801dcd8:	e794      	b.n	801dc04 <_malloc_r+0x20>
 801dcda:	6005      	str	r5, [r0, #0]
 801dcdc:	e7d6      	b.n	801dc8c <_malloc_r+0xa8>
 801dcde:	bf00      	nop
 801dce0:	2000e848 	.word	0x2000e848

0801dce4 <__malloc_lock>:
 801dce4:	4801      	ldr	r0, [pc, #4]	@ (801dcec <__malloc_lock+0x8>)
 801dce6:	f7ff bed2 	b.w	801da8e <__retarget_lock_acquire_recursive>
 801dcea:	bf00      	nop
 801dcec:	2000e840 	.word	0x2000e840

0801dcf0 <__malloc_unlock>:
 801dcf0:	4801      	ldr	r0, [pc, #4]	@ (801dcf8 <__malloc_unlock+0x8>)
 801dcf2:	f7ff becd 	b.w	801da90 <__retarget_lock_release_recursive>
 801dcf6:	bf00      	nop
 801dcf8:	2000e840 	.word	0x2000e840

0801dcfc <__ssputs_r>:
 801dcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd00:	688e      	ldr	r6, [r1, #8]
 801dd02:	461f      	mov	r7, r3
 801dd04:	42be      	cmp	r6, r7
 801dd06:	680b      	ldr	r3, [r1, #0]
 801dd08:	4682      	mov	sl, r0
 801dd0a:	460c      	mov	r4, r1
 801dd0c:	4690      	mov	r8, r2
 801dd0e:	d82d      	bhi.n	801dd6c <__ssputs_r+0x70>
 801dd10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dd14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dd18:	d026      	beq.n	801dd68 <__ssputs_r+0x6c>
 801dd1a:	6965      	ldr	r5, [r4, #20]
 801dd1c:	6909      	ldr	r1, [r1, #16]
 801dd1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dd22:	eba3 0901 	sub.w	r9, r3, r1
 801dd26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dd2a:	1c7b      	adds	r3, r7, #1
 801dd2c:	444b      	add	r3, r9
 801dd2e:	106d      	asrs	r5, r5, #1
 801dd30:	429d      	cmp	r5, r3
 801dd32:	bf38      	it	cc
 801dd34:	461d      	movcc	r5, r3
 801dd36:	0553      	lsls	r3, r2, #21
 801dd38:	d527      	bpl.n	801dd8a <__ssputs_r+0x8e>
 801dd3a:	4629      	mov	r1, r5
 801dd3c:	f7ff ff52 	bl	801dbe4 <_malloc_r>
 801dd40:	4606      	mov	r6, r0
 801dd42:	b360      	cbz	r0, 801dd9e <__ssputs_r+0xa2>
 801dd44:	6921      	ldr	r1, [r4, #16]
 801dd46:	464a      	mov	r2, r9
 801dd48:	f7ff feab 	bl	801daa2 <memcpy>
 801dd4c:	89a3      	ldrh	r3, [r4, #12]
 801dd4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dd52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd56:	81a3      	strh	r3, [r4, #12]
 801dd58:	6126      	str	r6, [r4, #16]
 801dd5a:	6165      	str	r5, [r4, #20]
 801dd5c:	444e      	add	r6, r9
 801dd5e:	eba5 0509 	sub.w	r5, r5, r9
 801dd62:	6026      	str	r6, [r4, #0]
 801dd64:	60a5      	str	r5, [r4, #8]
 801dd66:	463e      	mov	r6, r7
 801dd68:	42be      	cmp	r6, r7
 801dd6a:	d900      	bls.n	801dd6e <__ssputs_r+0x72>
 801dd6c:	463e      	mov	r6, r7
 801dd6e:	6820      	ldr	r0, [r4, #0]
 801dd70:	4632      	mov	r2, r6
 801dd72:	4641      	mov	r1, r8
 801dd74:	f7ff fd7d 	bl	801d872 <memmove>
 801dd78:	68a3      	ldr	r3, [r4, #8]
 801dd7a:	1b9b      	subs	r3, r3, r6
 801dd7c:	60a3      	str	r3, [r4, #8]
 801dd7e:	6823      	ldr	r3, [r4, #0]
 801dd80:	4433      	add	r3, r6
 801dd82:	6023      	str	r3, [r4, #0]
 801dd84:	2000      	movs	r0, #0
 801dd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd8a:	462a      	mov	r2, r5
 801dd8c:	f000 fd45 	bl	801e81a <_realloc_r>
 801dd90:	4606      	mov	r6, r0
 801dd92:	2800      	cmp	r0, #0
 801dd94:	d1e0      	bne.n	801dd58 <__ssputs_r+0x5c>
 801dd96:	6921      	ldr	r1, [r4, #16]
 801dd98:	4650      	mov	r0, sl
 801dd9a:	f7ff feaf 	bl	801dafc <_free_r>
 801dd9e:	230c      	movs	r3, #12
 801dda0:	f8ca 3000 	str.w	r3, [sl]
 801dda4:	89a3      	ldrh	r3, [r4, #12]
 801dda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ddaa:	81a3      	strh	r3, [r4, #12]
 801ddac:	f04f 30ff 	mov.w	r0, #4294967295
 801ddb0:	e7e9      	b.n	801dd86 <__ssputs_r+0x8a>
	...

0801ddb4 <_svfiprintf_r>:
 801ddb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddb8:	4698      	mov	r8, r3
 801ddba:	898b      	ldrh	r3, [r1, #12]
 801ddbc:	061b      	lsls	r3, r3, #24
 801ddbe:	b09d      	sub	sp, #116	@ 0x74
 801ddc0:	4607      	mov	r7, r0
 801ddc2:	460d      	mov	r5, r1
 801ddc4:	4614      	mov	r4, r2
 801ddc6:	d510      	bpl.n	801ddea <_svfiprintf_r+0x36>
 801ddc8:	690b      	ldr	r3, [r1, #16]
 801ddca:	b973      	cbnz	r3, 801ddea <_svfiprintf_r+0x36>
 801ddcc:	2140      	movs	r1, #64	@ 0x40
 801ddce:	f7ff ff09 	bl	801dbe4 <_malloc_r>
 801ddd2:	6028      	str	r0, [r5, #0]
 801ddd4:	6128      	str	r0, [r5, #16]
 801ddd6:	b930      	cbnz	r0, 801dde6 <_svfiprintf_r+0x32>
 801ddd8:	230c      	movs	r3, #12
 801ddda:	603b      	str	r3, [r7, #0]
 801dddc:	f04f 30ff 	mov.w	r0, #4294967295
 801dde0:	b01d      	add	sp, #116	@ 0x74
 801dde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dde6:	2340      	movs	r3, #64	@ 0x40
 801dde8:	616b      	str	r3, [r5, #20]
 801ddea:	2300      	movs	r3, #0
 801ddec:	9309      	str	r3, [sp, #36]	@ 0x24
 801ddee:	2320      	movs	r3, #32
 801ddf0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ddf4:	f8cd 800c 	str.w	r8, [sp, #12]
 801ddf8:	2330      	movs	r3, #48	@ 0x30
 801ddfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801df98 <_svfiprintf_r+0x1e4>
 801ddfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801de02:	f04f 0901 	mov.w	r9, #1
 801de06:	4623      	mov	r3, r4
 801de08:	469a      	mov	sl, r3
 801de0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801de0e:	b10a      	cbz	r2, 801de14 <_svfiprintf_r+0x60>
 801de10:	2a25      	cmp	r2, #37	@ 0x25
 801de12:	d1f9      	bne.n	801de08 <_svfiprintf_r+0x54>
 801de14:	ebba 0b04 	subs.w	fp, sl, r4
 801de18:	d00b      	beq.n	801de32 <_svfiprintf_r+0x7e>
 801de1a:	465b      	mov	r3, fp
 801de1c:	4622      	mov	r2, r4
 801de1e:	4629      	mov	r1, r5
 801de20:	4638      	mov	r0, r7
 801de22:	f7ff ff6b 	bl	801dcfc <__ssputs_r>
 801de26:	3001      	adds	r0, #1
 801de28:	f000 80a7 	beq.w	801df7a <_svfiprintf_r+0x1c6>
 801de2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de2e:	445a      	add	r2, fp
 801de30:	9209      	str	r2, [sp, #36]	@ 0x24
 801de32:	f89a 3000 	ldrb.w	r3, [sl]
 801de36:	2b00      	cmp	r3, #0
 801de38:	f000 809f 	beq.w	801df7a <_svfiprintf_r+0x1c6>
 801de3c:	2300      	movs	r3, #0
 801de3e:	f04f 32ff 	mov.w	r2, #4294967295
 801de42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801de46:	f10a 0a01 	add.w	sl, sl, #1
 801de4a:	9304      	str	r3, [sp, #16]
 801de4c:	9307      	str	r3, [sp, #28]
 801de4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801de52:	931a      	str	r3, [sp, #104]	@ 0x68
 801de54:	4654      	mov	r4, sl
 801de56:	2205      	movs	r2, #5
 801de58:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de5c:	484e      	ldr	r0, [pc, #312]	@ (801df98 <_svfiprintf_r+0x1e4>)
 801de5e:	f7e2 f9bf 	bl	80001e0 <memchr>
 801de62:	9a04      	ldr	r2, [sp, #16]
 801de64:	b9d8      	cbnz	r0, 801de9e <_svfiprintf_r+0xea>
 801de66:	06d0      	lsls	r0, r2, #27
 801de68:	bf44      	itt	mi
 801de6a:	2320      	movmi	r3, #32
 801de6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de70:	0711      	lsls	r1, r2, #28
 801de72:	bf44      	itt	mi
 801de74:	232b      	movmi	r3, #43	@ 0x2b
 801de76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de7a:	f89a 3000 	ldrb.w	r3, [sl]
 801de7e:	2b2a      	cmp	r3, #42	@ 0x2a
 801de80:	d015      	beq.n	801deae <_svfiprintf_r+0xfa>
 801de82:	9a07      	ldr	r2, [sp, #28]
 801de84:	4654      	mov	r4, sl
 801de86:	2000      	movs	r0, #0
 801de88:	f04f 0c0a 	mov.w	ip, #10
 801de8c:	4621      	mov	r1, r4
 801de8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de92:	3b30      	subs	r3, #48	@ 0x30
 801de94:	2b09      	cmp	r3, #9
 801de96:	d94b      	bls.n	801df30 <_svfiprintf_r+0x17c>
 801de98:	b1b0      	cbz	r0, 801dec8 <_svfiprintf_r+0x114>
 801de9a:	9207      	str	r2, [sp, #28]
 801de9c:	e014      	b.n	801dec8 <_svfiprintf_r+0x114>
 801de9e:	eba0 0308 	sub.w	r3, r0, r8
 801dea2:	fa09 f303 	lsl.w	r3, r9, r3
 801dea6:	4313      	orrs	r3, r2
 801dea8:	9304      	str	r3, [sp, #16]
 801deaa:	46a2      	mov	sl, r4
 801deac:	e7d2      	b.n	801de54 <_svfiprintf_r+0xa0>
 801deae:	9b03      	ldr	r3, [sp, #12]
 801deb0:	1d19      	adds	r1, r3, #4
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	9103      	str	r1, [sp, #12]
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	bfbb      	ittet	lt
 801deba:	425b      	neglt	r3, r3
 801debc:	f042 0202 	orrlt.w	r2, r2, #2
 801dec0:	9307      	strge	r3, [sp, #28]
 801dec2:	9307      	strlt	r3, [sp, #28]
 801dec4:	bfb8      	it	lt
 801dec6:	9204      	strlt	r2, [sp, #16]
 801dec8:	7823      	ldrb	r3, [r4, #0]
 801deca:	2b2e      	cmp	r3, #46	@ 0x2e
 801decc:	d10a      	bne.n	801dee4 <_svfiprintf_r+0x130>
 801dece:	7863      	ldrb	r3, [r4, #1]
 801ded0:	2b2a      	cmp	r3, #42	@ 0x2a
 801ded2:	d132      	bne.n	801df3a <_svfiprintf_r+0x186>
 801ded4:	9b03      	ldr	r3, [sp, #12]
 801ded6:	1d1a      	adds	r2, r3, #4
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	9203      	str	r2, [sp, #12]
 801dedc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dee0:	3402      	adds	r4, #2
 801dee2:	9305      	str	r3, [sp, #20]
 801dee4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801dfa8 <_svfiprintf_r+0x1f4>
 801dee8:	7821      	ldrb	r1, [r4, #0]
 801deea:	2203      	movs	r2, #3
 801deec:	4650      	mov	r0, sl
 801deee:	f7e2 f977 	bl	80001e0 <memchr>
 801def2:	b138      	cbz	r0, 801df04 <_svfiprintf_r+0x150>
 801def4:	9b04      	ldr	r3, [sp, #16]
 801def6:	eba0 000a 	sub.w	r0, r0, sl
 801defa:	2240      	movs	r2, #64	@ 0x40
 801defc:	4082      	lsls	r2, r0
 801defe:	4313      	orrs	r3, r2
 801df00:	3401      	adds	r4, #1
 801df02:	9304      	str	r3, [sp, #16]
 801df04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df08:	4824      	ldr	r0, [pc, #144]	@ (801df9c <_svfiprintf_r+0x1e8>)
 801df0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801df0e:	2206      	movs	r2, #6
 801df10:	f7e2 f966 	bl	80001e0 <memchr>
 801df14:	2800      	cmp	r0, #0
 801df16:	d036      	beq.n	801df86 <_svfiprintf_r+0x1d2>
 801df18:	4b21      	ldr	r3, [pc, #132]	@ (801dfa0 <_svfiprintf_r+0x1ec>)
 801df1a:	bb1b      	cbnz	r3, 801df64 <_svfiprintf_r+0x1b0>
 801df1c:	9b03      	ldr	r3, [sp, #12]
 801df1e:	3307      	adds	r3, #7
 801df20:	f023 0307 	bic.w	r3, r3, #7
 801df24:	3308      	adds	r3, #8
 801df26:	9303      	str	r3, [sp, #12]
 801df28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df2a:	4433      	add	r3, r6
 801df2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801df2e:	e76a      	b.n	801de06 <_svfiprintf_r+0x52>
 801df30:	fb0c 3202 	mla	r2, ip, r2, r3
 801df34:	460c      	mov	r4, r1
 801df36:	2001      	movs	r0, #1
 801df38:	e7a8      	b.n	801de8c <_svfiprintf_r+0xd8>
 801df3a:	2300      	movs	r3, #0
 801df3c:	3401      	adds	r4, #1
 801df3e:	9305      	str	r3, [sp, #20]
 801df40:	4619      	mov	r1, r3
 801df42:	f04f 0c0a 	mov.w	ip, #10
 801df46:	4620      	mov	r0, r4
 801df48:	f810 2b01 	ldrb.w	r2, [r0], #1
 801df4c:	3a30      	subs	r2, #48	@ 0x30
 801df4e:	2a09      	cmp	r2, #9
 801df50:	d903      	bls.n	801df5a <_svfiprintf_r+0x1a6>
 801df52:	2b00      	cmp	r3, #0
 801df54:	d0c6      	beq.n	801dee4 <_svfiprintf_r+0x130>
 801df56:	9105      	str	r1, [sp, #20]
 801df58:	e7c4      	b.n	801dee4 <_svfiprintf_r+0x130>
 801df5a:	fb0c 2101 	mla	r1, ip, r1, r2
 801df5e:	4604      	mov	r4, r0
 801df60:	2301      	movs	r3, #1
 801df62:	e7f0      	b.n	801df46 <_svfiprintf_r+0x192>
 801df64:	ab03      	add	r3, sp, #12
 801df66:	9300      	str	r3, [sp, #0]
 801df68:	462a      	mov	r2, r5
 801df6a:	4b0e      	ldr	r3, [pc, #56]	@ (801dfa4 <_svfiprintf_r+0x1f0>)
 801df6c:	a904      	add	r1, sp, #16
 801df6e:	4638      	mov	r0, r7
 801df70:	f3af 8000 	nop.w
 801df74:	1c42      	adds	r2, r0, #1
 801df76:	4606      	mov	r6, r0
 801df78:	d1d6      	bne.n	801df28 <_svfiprintf_r+0x174>
 801df7a:	89ab      	ldrh	r3, [r5, #12]
 801df7c:	065b      	lsls	r3, r3, #25
 801df7e:	f53f af2d 	bmi.w	801dddc <_svfiprintf_r+0x28>
 801df82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801df84:	e72c      	b.n	801dde0 <_svfiprintf_r+0x2c>
 801df86:	ab03      	add	r3, sp, #12
 801df88:	9300      	str	r3, [sp, #0]
 801df8a:	462a      	mov	r2, r5
 801df8c:	4b05      	ldr	r3, [pc, #20]	@ (801dfa4 <_svfiprintf_r+0x1f0>)
 801df8e:	a904      	add	r1, sp, #16
 801df90:	4638      	mov	r0, r7
 801df92:	f000 f9bb 	bl	801e30c <_printf_i>
 801df96:	e7ed      	b.n	801df74 <_svfiprintf_r+0x1c0>
 801df98:	0802323b 	.word	0x0802323b
 801df9c:	08023245 	.word	0x08023245
 801dfa0:	00000000 	.word	0x00000000
 801dfa4:	0801dcfd 	.word	0x0801dcfd
 801dfa8:	08023241 	.word	0x08023241

0801dfac <__sfputc_r>:
 801dfac:	6893      	ldr	r3, [r2, #8]
 801dfae:	3b01      	subs	r3, #1
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	b410      	push	{r4}
 801dfb4:	6093      	str	r3, [r2, #8]
 801dfb6:	da08      	bge.n	801dfca <__sfputc_r+0x1e>
 801dfb8:	6994      	ldr	r4, [r2, #24]
 801dfba:	42a3      	cmp	r3, r4
 801dfbc:	db01      	blt.n	801dfc2 <__sfputc_r+0x16>
 801dfbe:	290a      	cmp	r1, #10
 801dfc0:	d103      	bne.n	801dfca <__sfputc_r+0x1e>
 801dfc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfc6:	f000 bb7d 	b.w	801e6c4 <__swbuf_r>
 801dfca:	6813      	ldr	r3, [r2, #0]
 801dfcc:	1c58      	adds	r0, r3, #1
 801dfce:	6010      	str	r0, [r2, #0]
 801dfd0:	7019      	strb	r1, [r3, #0]
 801dfd2:	4608      	mov	r0, r1
 801dfd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfd8:	4770      	bx	lr

0801dfda <__sfputs_r>:
 801dfda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfdc:	4606      	mov	r6, r0
 801dfde:	460f      	mov	r7, r1
 801dfe0:	4614      	mov	r4, r2
 801dfe2:	18d5      	adds	r5, r2, r3
 801dfe4:	42ac      	cmp	r4, r5
 801dfe6:	d101      	bne.n	801dfec <__sfputs_r+0x12>
 801dfe8:	2000      	movs	r0, #0
 801dfea:	e007      	b.n	801dffc <__sfputs_r+0x22>
 801dfec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dff0:	463a      	mov	r2, r7
 801dff2:	4630      	mov	r0, r6
 801dff4:	f7ff ffda 	bl	801dfac <__sfputc_r>
 801dff8:	1c43      	adds	r3, r0, #1
 801dffa:	d1f3      	bne.n	801dfe4 <__sfputs_r+0xa>
 801dffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e000 <_vfiprintf_r>:
 801e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e004:	460d      	mov	r5, r1
 801e006:	b09d      	sub	sp, #116	@ 0x74
 801e008:	4614      	mov	r4, r2
 801e00a:	4698      	mov	r8, r3
 801e00c:	4606      	mov	r6, r0
 801e00e:	b118      	cbz	r0, 801e018 <_vfiprintf_r+0x18>
 801e010:	6a03      	ldr	r3, [r0, #32]
 801e012:	b90b      	cbnz	r3, 801e018 <_vfiprintf_r+0x18>
 801e014:	f7ff fb5c 	bl	801d6d0 <__sinit>
 801e018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e01a:	07d9      	lsls	r1, r3, #31
 801e01c:	d405      	bmi.n	801e02a <_vfiprintf_r+0x2a>
 801e01e:	89ab      	ldrh	r3, [r5, #12]
 801e020:	059a      	lsls	r2, r3, #22
 801e022:	d402      	bmi.n	801e02a <_vfiprintf_r+0x2a>
 801e024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e026:	f7ff fd32 	bl	801da8e <__retarget_lock_acquire_recursive>
 801e02a:	89ab      	ldrh	r3, [r5, #12]
 801e02c:	071b      	lsls	r3, r3, #28
 801e02e:	d501      	bpl.n	801e034 <_vfiprintf_r+0x34>
 801e030:	692b      	ldr	r3, [r5, #16]
 801e032:	b99b      	cbnz	r3, 801e05c <_vfiprintf_r+0x5c>
 801e034:	4629      	mov	r1, r5
 801e036:	4630      	mov	r0, r6
 801e038:	f000 fb82 	bl	801e740 <__swsetup_r>
 801e03c:	b170      	cbz	r0, 801e05c <_vfiprintf_r+0x5c>
 801e03e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e040:	07dc      	lsls	r4, r3, #31
 801e042:	d504      	bpl.n	801e04e <_vfiprintf_r+0x4e>
 801e044:	f04f 30ff 	mov.w	r0, #4294967295
 801e048:	b01d      	add	sp, #116	@ 0x74
 801e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e04e:	89ab      	ldrh	r3, [r5, #12]
 801e050:	0598      	lsls	r0, r3, #22
 801e052:	d4f7      	bmi.n	801e044 <_vfiprintf_r+0x44>
 801e054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e056:	f7ff fd1b 	bl	801da90 <__retarget_lock_release_recursive>
 801e05a:	e7f3      	b.n	801e044 <_vfiprintf_r+0x44>
 801e05c:	2300      	movs	r3, #0
 801e05e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e060:	2320      	movs	r3, #32
 801e062:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e066:	f8cd 800c 	str.w	r8, [sp, #12]
 801e06a:	2330      	movs	r3, #48	@ 0x30
 801e06c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e21c <_vfiprintf_r+0x21c>
 801e070:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e074:	f04f 0901 	mov.w	r9, #1
 801e078:	4623      	mov	r3, r4
 801e07a:	469a      	mov	sl, r3
 801e07c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e080:	b10a      	cbz	r2, 801e086 <_vfiprintf_r+0x86>
 801e082:	2a25      	cmp	r2, #37	@ 0x25
 801e084:	d1f9      	bne.n	801e07a <_vfiprintf_r+0x7a>
 801e086:	ebba 0b04 	subs.w	fp, sl, r4
 801e08a:	d00b      	beq.n	801e0a4 <_vfiprintf_r+0xa4>
 801e08c:	465b      	mov	r3, fp
 801e08e:	4622      	mov	r2, r4
 801e090:	4629      	mov	r1, r5
 801e092:	4630      	mov	r0, r6
 801e094:	f7ff ffa1 	bl	801dfda <__sfputs_r>
 801e098:	3001      	adds	r0, #1
 801e09a:	f000 80a7 	beq.w	801e1ec <_vfiprintf_r+0x1ec>
 801e09e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e0a0:	445a      	add	r2, fp
 801e0a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801e0a4:	f89a 3000 	ldrb.w	r3, [sl]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	f000 809f 	beq.w	801e1ec <_vfiprintf_r+0x1ec>
 801e0ae:	2300      	movs	r3, #0
 801e0b0:	f04f 32ff 	mov.w	r2, #4294967295
 801e0b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0b8:	f10a 0a01 	add.w	sl, sl, #1
 801e0bc:	9304      	str	r3, [sp, #16]
 801e0be:	9307      	str	r3, [sp, #28]
 801e0c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e0c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801e0c6:	4654      	mov	r4, sl
 801e0c8:	2205      	movs	r2, #5
 801e0ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ce:	4853      	ldr	r0, [pc, #332]	@ (801e21c <_vfiprintf_r+0x21c>)
 801e0d0:	f7e2 f886 	bl	80001e0 <memchr>
 801e0d4:	9a04      	ldr	r2, [sp, #16]
 801e0d6:	b9d8      	cbnz	r0, 801e110 <_vfiprintf_r+0x110>
 801e0d8:	06d1      	lsls	r1, r2, #27
 801e0da:	bf44      	itt	mi
 801e0dc:	2320      	movmi	r3, #32
 801e0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e0e2:	0713      	lsls	r3, r2, #28
 801e0e4:	bf44      	itt	mi
 801e0e6:	232b      	movmi	r3, #43	@ 0x2b
 801e0e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e0ec:	f89a 3000 	ldrb.w	r3, [sl]
 801e0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e0f2:	d015      	beq.n	801e120 <_vfiprintf_r+0x120>
 801e0f4:	9a07      	ldr	r2, [sp, #28]
 801e0f6:	4654      	mov	r4, sl
 801e0f8:	2000      	movs	r0, #0
 801e0fa:	f04f 0c0a 	mov.w	ip, #10
 801e0fe:	4621      	mov	r1, r4
 801e100:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e104:	3b30      	subs	r3, #48	@ 0x30
 801e106:	2b09      	cmp	r3, #9
 801e108:	d94b      	bls.n	801e1a2 <_vfiprintf_r+0x1a2>
 801e10a:	b1b0      	cbz	r0, 801e13a <_vfiprintf_r+0x13a>
 801e10c:	9207      	str	r2, [sp, #28]
 801e10e:	e014      	b.n	801e13a <_vfiprintf_r+0x13a>
 801e110:	eba0 0308 	sub.w	r3, r0, r8
 801e114:	fa09 f303 	lsl.w	r3, r9, r3
 801e118:	4313      	orrs	r3, r2
 801e11a:	9304      	str	r3, [sp, #16]
 801e11c:	46a2      	mov	sl, r4
 801e11e:	e7d2      	b.n	801e0c6 <_vfiprintf_r+0xc6>
 801e120:	9b03      	ldr	r3, [sp, #12]
 801e122:	1d19      	adds	r1, r3, #4
 801e124:	681b      	ldr	r3, [r3, #0]
 801e126:	9103      	str	r1, [sp, #12]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	bfbb      	ittet	lt
 801e12c:	425b      	neglt	r3, r3
 801e12e:	f042 0202 	orrlt.w	r2, r2, #2
 801e132:	9307      	strge	r3, [sp, #28]
 801e134:	9307      	strlt	r3, [sp, #28]
 801e136:	bfb8      	it	lt
 801e138:	9204      	strlt	r2, [sp, #16]
 801e13a:	7823      	ldrb	r3, [r4, #0]
 801e13c:	2b2e      	cmp	r3, #46	@ 0x2e
 801e13e:	d10a      	bne.n	801e156 <_vfiprintf_r+0x156>
 801e140:	7863      	ldrb	r3, [r4, #1]
 801e142:	2b2a      	cmp	r3, #42	@ 0x2a
 801e144:	d132      	bne.n	801e1ac <_vfiprintf_r+0x1ac>
 801e146:	9b03      	ldr	r3, [sp, #12]
 801e148:	1d1a      	adds	r2, r3, #4
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	9203      	str	r2, [sp, #12]
 801e14e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e152:	3402      	adds	r4, #2
 801e154:	9305      	str	r3, [sp, #20]
 801e156:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e22c <_vfiprintf_r+0x22c>
 801e15a:	7821      	ldrb	r1, [r4, #0]
 801e15c:	2203      	movs	r2, #3
 801e15e:	4650      	mov	r0, sl
 801e160:	f7e2 f83e 	bl	80001e0 <memchr>
 801e164:	b138      	cbz	r0, 801e176 <_vfiprintf_r+0x176>
 801e166:	9b04      	ldr	r3, [sp, #16]
 801e168:	eba0 000a 	sub.w	r0, r0, sl
 801e16c:	2240      	movs	r2, #64	@ 0x40
 801e16e:	4082      	lsls	r2, r0
 801e170:	4313      	orrs	r3, r2
 801e172:	3401      	adds	r4, #1
 801e174:	9304      	str	r3, [sp, #16]
 801e176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e17a:	4829      	ldr	r0, [pc, #164]	@ (801e220 <_vfiprintf_r+0x220>)
 801e17c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e180:	2206      	movs	r2, #6
 801e182:	f7e2 f82d 	bl	80001e0 <memchr>
 801e186:	2800      	cmp	r0, #0
 801e188:	d03f      	beq.n	801e20a <_vfiprintf_r+0x20a>
 801e18a:	4b26      	ldr	r3, [pc, #152]	@ (801e224 <_vfiprintf_r+0x224>)
 801e18c:	bb1b      	cbnz	r3, 801e1d6 <_vfiprintf_r+0x1d6>
 801e18e:	9b03      	ldr	r3, [sp, #12]
 801e190:	3307      	adds	r3, #7
 801e192:	f023 0307 	bic.w	r3, r3, #7
 801e196:	3308      	adds	r3, #8
 801e198:	9303      	str	r3, [sp, #12]
 801e19a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e19c:	443b      	add	r3, r7
 801e19e:	9309      	str	r3, [sp, #36]	@ 0x24
 801e1a0:	e76a      	b.n	801e078 <_vfiprintf_r+0x78>
 801e1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1a6:	460c      	mov	r4, r1
 801e1a8:	2001      	movs	r0, #1
 801e1aa:	e7a8      	b.n	801e0fe <_vfiprintf_r+0xfe>
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	3401      	adds	r4, #1
 801e1b0:	9305      	str	r3, [sp, #20]
 801e1b2:	4619      	mov	r1, r3
 801e1b4:	f04f 0c0a 	mov.w	ip, #10
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1be:	3a30      	subs	r2, #48	@ 0x30
 801e1c0:	2a09      	cmp	r2, #9
 801e1c2:	d903      	bls.n	801e1cc <_vfiprintf_r+0x1cc>
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d0c6      	beq.n	801e156 <_vfiprintf_r+0x156>
 801e1c8:	9105      	str	r1, [sp, #20]
 801e1ca:	e7c4      	b.n	801e156 <_vfiprintf_r+0x156>
 801e1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	e7f0      	b.n	801e1b8 <_vfiprintf_r+0x1b8>
 801e1d6:	ab03      	add	r3, sp, #12
 801e1d8:	9300      	str	r3, [sp, #0]
 801e1da:	462a      	mov	r2, r5
 801e1dc:	4b12      	ldr	r3, [pc, #72]	@ (801e228 <_vfiprintf_r+0x228>)
 801e1de:	a904      	add	r1, sp, #16
 801e1e0:	4630      	mov	r0, r6
 801e1e2:	f3af 8000 	nop.w
 801e1e6:	4607      	mov	r7, r0
 801e1e8:	1c78      	adds	r0, r7, #1
 801e1ea:	d1d6      	bne.n	801e19a <_vfiprintf_r+0x19a>
 801e1ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e1ee:	07d9      	lsls	r1, r3, #31
 801e1f0:	d405      	bmi.n	801e1fe <_vfiprintf_r+0x1fe>
 801e1f2:	89ab      	ldrh	r3, [r5, #12]
 801e1f4:	059a      	lsls	r2, r3, #22
 801e1f6:	d402      	bmi.n	801e1fe <_vfiprintf_r+0x1fe>
 801e1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e1fa:	f7ff fc49 	bl	801da90 <__retarget_lock_release_recursive>
 801e1fe:	89ab      	ldrh	r3, [r5, #12]
 801e200:	065b      	lsls	r3, r3, #25
 801e202:	f53f af1f 	bmi.w	801e044 <_vfiprintf_r+0x44>
 801e206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e208:	e71e      	b.n	801e048 <_vfiprintf_r+0x48>
 801e20a:	ab03      	add	r3, sp, #12
 801e20c:	9300      	str	r3, [sp, #0]
 801e20e:	462a      	mov	r2, r5
 801e210:	4b05      	ldr	r3, [pc, #20]	@ (801e228 <_vfiprintf_r+0x228>)
 801e212:	a904      	add	r1, sp, #16
 801e214:	4630      	mov	r0, r6
 801e216:	f000 f879 	bl	801e30c <_printf_i>
 801e21a:	e7e4      	b.n	801e1e6 <_vfiprintf_r+0x1e6>
 801e21c:	0802323b 	.word	0x0802323b
 801e220:	08023245 	.word	0x08023245
 801e224:	00000000 	.word	0x00000000
 801e228:	0801dfdb 	.word	0x0801dfdb
 801e22c:	08023241 	.word	0x08023241

0801e230 <_printf_common>:
 801e230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e234:	4616      	mov	r6, r2
 801e236:	4698      	mov	r8, r3
 801e238:	688a      	ldr	r2, [r1, #8]
 801e23a:	690b      	ldr	r3, [r1, #16]
 801e23c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e240:	4293      	cmp	r3, r2
 801e242:	bfb8      	it	lt
 801e244:	4613      	movlt	r3, r2
 801e246:	6033      	str	r3, [r6, #0]
 801e248:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e24c:	4607      	mov	r7, r0
 801e24e:	460c      	mov	r4, r1
 801e250:	b10a      	cbz	r2, 801e256 <_printf_common+0x26>
 801e252:	3301      	adds	r3, #1
 801e254:	6033      	str	r3, [r6, #0]
 801e256:	6823      	ldr	r3, [r4, #0]
 801e258:	0699      	lsls	r1, r3, #26
 801e25a:	bf42      	ittt	mi
 801e25c:	6833      	ldrmi	r3, [r6, #0]
 801e25e:	3302      	addmi	r3, #2
 801e260:	6033      	strmi	r3, [r6, #0]
 801e262:	6825      	ldr	r5, [r4, #0]
 801e264:	f015 0506 	ands.w	r5, r5, #6
 801e268:	d106      	bne.n	801e278 <_printf_common+0x48>
 801e26a:	f104 0a19 	add.w	sl, r4, #25
 801e26e:	68e3      	ldr	r3, [r4, #12]
 801e270:	6832      	ldr	r2, [r6, #0]
 801e272:	1a9b      	subs	r3, r3, r2
 801e274:	42ab      	cmp	r3, r5
 801e276:	dc26      	bgt.n	801e2c6 <_printf_common+0x96>
 801e278:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801e27c:	6822      	ldr	r2, [r4, #0]
 801e27e:	3b00      	subs	r3, #0
 801e280:	bf18      	it	ne
 801e282:	2301      	movne	r3, #1
 801e284:	0692      	lsls	r2, r2, #26
 801e286:	d42b      	bmi.n	801e2e0 <_printf_common+0xb0>
 801e288:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801e28c:	4641      	mov	r1, r8
 801e28e:	4638      	mov	r0, r7
 801e290:	47c8      	blx	r9
 801e292:	3001      	adds	r0, #1
 801e294:	d01e      	beq.n	801e2d4 <_printf_common+0xa4>
 801e296:	6823      	ldr	r3, [r4, #0]
 801e298:	6922      	ldr	r2, [r4, #16]
 801e29a:	f003 0306 	and.w	r3, r3, #6
 801e29e:	2b04      	cmp	r3, #4
 801e2a0:	bf02      	ittt	eq
 801e2a2:	68e5      	ldreq	r5, [r4, #12]
 801e2a4:	6833      	ldreq	r3, [r6, #0]
 801e2a6:	1aed      	subeq	r5, r5, r3
 801e2a8:	68a3      	ldr	r3, [r4, #8]
 801e2aa:	bf0c      	ite	eq
 801e2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e2b0:	2500      	movne	r5, #0
 801e2b2:	4293      	cmp	r3, r2
 801e2b4:	bfc4      	itt	gt
 801e2b6:	1a9b      	subgt	r3, r3, r2
 801e2b8:	18ed      	addgt	r5, r5, r3
 801e2ba:	2600      	movs	r6, #0
 801e2bc:	341a      	adds	r4, #26
 801e2be:	42b5      	cmp	r5, r6
 801e2c0:	d11a      	bne.n	801e2f8 <_printf_common+0xc8>
 801e2c2:	2000      	movs	r0, #0
 801e2c4:	e008      	b.n	801e2d8 <_printf_common+0xa8>
 801e2c6:	2301      	movs	r3, #1
 801e2c8:	4652      	mov	r2, sl
 801e2ca:	4641      	mov	r1, r8
 801e2cc:	4638      	mov	r0, r7
 801e2ce:	47c8      	blx	r9
 801e2d0:	3001      	adds	r0, #1
 801e2d2:	d103      	bne.n	801e2dc <_printf_common+0xac>
 801e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2dc:	3501      	adds	r5, #1
 801e2de:	e7c6      	b.n	801e26e <_printf_common+0x3e>
 801e2e0:	18e1      	adds	r1, r4, r3
 801e2e2:	1c5a      	adds	r2, r3, #1
 801e2e4:	2030      	movs	r0, #48	@ 0x30
 801e2e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801e2ea:	4422      	add	r2, r4
 801e2ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801e2f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801e2f4:	3302      	adds	r3, #2
 801e2f6:	e7c7      	b.n	801e288 <_printf_common+0x58>
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	4622      	mov	r2, r4
 801e2fc:	4641      	mov	r1, r8
 801e2fe:	4638      	mov	r0, r7
 801e300:	47c8      	blx	r9
 801e302:	3001      	adds	r0, #1
 801e304:	d0e6      	beq.n	801e2d4 <_printf_common+0xa4>
 801e306:	3601      	adds	r6, #1
 801e308:	e7d9      	b.n	801e2be <_printf_common+0x8e>
	...

0801e30c <_printf_i>:
 801e30c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e310:	7e0f      	ldrb	r7, [r1, #24]
 801e312:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801e314:	2f78      	cmp	r7, #120	@ 0x78
 801e316:	4691      	mov	r9, r2
 801e318:	4680      	mov	r8, r0
 801e31a:	460c      	mov	r4, r1
 801e31c:	469a      	mov	sl, r3
 801e31e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801e322:	d807      	bhi.n	801e334 <_printf_i+0x28>
 801e324:	2f62      	cmp	r7, #98	@ 0x62
 801e326:	d80a      	bhi.n	801e33e <_printf_i+0x32>
 801e328:	2f00      	cmp	r7, #0
 801e32a:	f000 80d1 	beq.w	801e4d0 <_printf_i+0x1c4>
 801e32e:	2f58      	cmp	r7, #88	@ 0x58
 801e330:	f000 80b8 	beq.w	801e4a4 <_printf_i+0x198>
 801e334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e338:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801e33c:	e03a      	b.n	801e3b4 <_printf_i+0xa8>
 801e33e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801e342:	2b15      	cmp	r3, #21
 801e344:	d8f6      	bhi.n	801e334 <_printf_i+0x28>
 801e346:	a101      	add	r1, pc, #4	@ (adr r1, 801e34c <_printf_i+0x40>)
 801e348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e34c:	0801e3a5 	.word	0x0801e3a5
 801e350:	0801e3b9 	.word	0x0801e3b9
 801e354:	0801e335 	.word	0x0801e335
 801e358:	0801e335 	.word	0x0801e335
 801e35c:	0801e335 	.word	0x0801e335
 801e360:	0801e335 	.word	0x0801e335
 801e364:	0801e3b9 	.word	0x0801e3b9
 801e368:	0801e335 	.word	0x0801e335
 801e36c:	0801e335 	.word	0x0801e335
 801e370:	0801e335 	.word	0x0801e335
 801e374:	0801e335 	.word	0x0801e335
 801e378:	0801e4b7 	.word	0x0801e4b7
 801e37c:	0801e3e3 	.word	0x0801e3e3
 801e380:	0801e471 	.word	0x0801e471
 801e384:	0801e335 	.word	0x0801e335
 801e388:	0801e335 	.word	0x0801e335
 801e38c:	0801e4d9 	.word	0x0801e4d9
 801e390:	0801e335 	.word	0x0801e335
 801e394:	0801e3e3 	.word	0x0801e3e3
 801e398:	0801e335 	.word	0x0801e335
 801e39c:	0801e335 	.word	0x0801e335
 801e3a0:	0801e479 	.word	0x0801e479
 801e3a4:	6833      	ldr	r3, [r6, #0]
 801e3a6:	1d1a      	adds	r2, r3, #4
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	6032      	str	r2, [r6, #0]
 801e3ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801e3b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	e09c      	b.n	801e4f2 <_printf_i+0x1e6>
 801e3b8:	6833      	ldr	r3, [r6, #0]
 801e3ba:	6820      	ldr	r0, [r4, #0]
 801e3bc:	1d19      	adds	r1, r3, #4
 801e3be:	6031      	str	r1, [r6, #0]
 801e3c0:	0606      	lsls	r6, r0, #24
 801e3c2:	d501      	bpl.n	801e3c8 <_printf_i+0xbc>
 801e3c4:	681d      	ldr	r5, [r3, #0]
 801e3c6:	e003      	b.n	801e3d0 <_printf_i+0xc4>
 801e3c8:	0645      	lsls	r5, r0, #25
 801e3ca:	d5fb      	bpl.n	801e3c4 <_printf_i+0xb8>
 801e3cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801e3d0:	2d00      	cmp	r5, #0
 801e3d2:	da03      	bge.n	801e3dc <_printf_i+0xd0>
 801e3d4:	232d      	movs	r3, #45	@ 0x2d
 801e3d6:	426d      	negs	r5, r5
 801e3d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e3dc:	4858      	ldr	r0, [pc, #352]	@ (801e540 <_printf_i+0x234>)
 801e3de:	230a      	movs	r3, #10
 801e3e0:	e011      	b.n	801e406 <_printf_i+0xfa>
 801e3e2:	6821      	ldr	r1, [r4, #0]
 801e3e4:	6833      	ldr	r3, [r6, #0]
 801e3e6:	0608      	lsls	r0, r1, #24
 801e3e8:	f853 5b04 	ldr.w	r5, [r3], #4
 801e3ec:	d402      	bmi.n	801e3f4 <_printf_i+0xe8>
 801e3ee:	0649      	lsls	r1, r1, #25
 801e3f0:	bf48      	it	mi
 801e3f2:	b2ad      	uxthmi	r5, r5
 801e3f4:	2f6f      	cmp	r7, #111	@ 0x6f
 801e3f6:	4852      	ldr	r0, [pc, #328]	@ (801e540 <_printf_i+0x234>)
 801e3f8:	6033      	str	r3, [r6, #0]
 801e3fa:	bf14      	ite	ne
 801e3fc:	230a      	movne	r3, #10
 801e3fe:	2308      	moveq	r3, #8
 801e400:	2100      	movs	r1, #0
 801e402:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801e406:	6866      	ldr	r6, [r4, #4]
 801e408:	60a6      	str	r6, [r4, #8]
 801e40a:	2e00      	cmp	r6, #0
 801e40c:	db05      	blt.n	801e41a <_printf_i+0x10e>
 801e40e:	6821      	ldr	r1, [r4, #0]
 801e410:	432e      	orrs	r6, r5
 801e412:	f021 0104 	bic.w	r1, r1, #4
 801e416:	6021      	str	r1, [r4, #0]
 801e418:	d04b      	beq.n	801e4b2 <_printf_i+0x1a6>
 801e41a:	4616      	mov	r6, r2
 801e41c:	fbb5 f1f3 	udiv	r1, r5, r3
 801e420:	fb03 5711 	mls	r7, r3, r1, r5
 801e424:	5dc7      	ldrb	r7, [r0, r7]
 801e426:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801e42a:	462f      	mov	r7, r5
 801e42c:	42bb      	cmp	r3, r7
 801e42e:	460d      	mov	r5, r1
 801e430:	d9f4      	bls.n	801e41c <_printf_i+0x110>
 801e432:	2b08      	cmp	r3, #8
 801e434:	d10b      	bne.n	801e44e <_printf_i+0x142>
 801e436:	6823      	ldr	r3, [r4, #0]
 801e438:	07df      	lsls	r7, r3, #31
 801e43a:	d508      	bpl.n	801e44e <_printf_i+0x142>
 801e43c:	6923      	ldr	r3, [r4, #16]
 801e43e:	6861      	ldr	r1, [r4, #4]
 801e440:	4299      	cmp	r1, r3
 801e442:	bfde      	ittt	le
 801e444:	2330      	movle	r3, #48	@ 0x30
 801e446:	f806 3c01 	strble.w	r3, [r6, #-1]
 801e44a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801e44e:	1b92      	subs	r2, r2, r6
 801e450:	6122      	str	r2, [r4, #16]
 801e452:	f8cd a000 	str.w	sl, [sp]
 801e456:	464b      	mov	r3, r9
 801e458:	aa03      	add	r2, sp, #12
 801e45a:	4621      	mov	r1, r4
 801e45c:	4640      	mov	r0, r8
 801e45e:	f7ff fee7 	bl	801e230 <_printf_common>
 801e462:	3001      	adds	r0, #1
 801e464:	d14a      	bne.n	801e4fc <_printf_i+0x1f0>
 801e466:	f04f 30ff 	mov.w	r0, #4294967295
 801e46a:	b004      	add	sp, #16
 801e46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e470:	6823      	ldr	r3, [r4, #0]
 801e472:	f043 0320 	orr.w	r3, r3, #32
 801e476:	6023      	str	r3, [r4, #0]
 801e478:	4832      	ldr	r0, [pc, #200]	@ (801e544 <_printf_i+0x238>)
 801e47a:	2778      	movs	r7, #120	@ 0x78
 801e47c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801e480:	6823      	ldr	r3, [r4, #0]
 801e482:	6831      	ldr	r1, [r6, #0]
 801e484:	061f      	lsls	r7, r3, #24
 801e486:	f851 5b04 	ldr.w	r5, [r1], #4
 801e48a:	d402      	bmi.n	801e492 <_printf_i+0x186>
 801e48c:	065f      	lsls	r7, r3, #25
 801e48e:	bf48      	it	mi
 801e490:	b2ad      	uxthmi	r5, r5
 801e492:	6031      	str	r1, [r6, #0]
 801e494:	07d9      	lsls	r1, r3, #31
 801e496:	bf44      	itt	mi
 801e498:	f043 0320 	orrmi.w	r3, r3, #32
 801e49c:	6023      	strmi	r3, [r4, #0]
 801e49e:	b11d      	cbz	r5, 801e4a8 <_printf_i+0x19c>
 801e4a0:	2310      	movs	r3, #16
 801e4a2:	e7ad      	b.n	801e400 <_printf_i+0xf4>
 801e4a4:	4826      	ldr	r0, [pc, #152]	@ (801e540 <_printf_i+0x234>)
 801e4a6:	e7e9      	b.n	801e47c <_printf_i+0x170>
 801e4a8:	6823      	ldr	r3, [r4, #0]
 801e4aa:	f023 0320 	bic.w	r3, r3, #32
 801e4ae:	6023      	str	r3, [r4, #0]
 801e4b0:	e7f6      	b.n	801e4a0 <_printf_i+0x194>
 801e4b2:	4616      	mov	r6, r2
 801e4b4:	e7bd      	b.n	801e432 <_printf_i+0x126>
 801e4b6:	6833      	ldr	r3, [r6, #0]
 801e4b8:	6825      	ldr	r5, [r4, #0]
 801e4ba:	6961      	ldr	r1, [r4, #20]
 801e4bc:	1d18      	adds	r0, r3, #4
 801e4be:	6030      	str	r0, [r6, #0]
 801e4c0:	062e      	lsls	r6, r5, #24
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	d501      	bpl.n	801e4ca <_printf_i+0x1be>
 801e4c6:	6019      	str	r1, [r3, #0]
 801e4c8:	e002      	b.n	801e4d0 <_printf_i+0x1c4>
 801e4ca:	0668      	lsls	r0, r5, #25
 801e4cc:	d5fb      	bpl.n	801e4c6 <_printf_i+0x1ba>
 801e4ce:	8019      	strh	r1, [r3, #0]
 801e4d0:	2300      	movs	r3, #0
 801e4d2:	6123      	str	r3, [r4, #16]
 801e4d4:	4616      	mov	r6, r2
 801e4d6:	e7bc      	b.n	801e452 <_printf_i+0x146>
 801e4d8:	6833      	ldr	r3, [r6, #0]
 801e4da:	1d1a      	adds	r2, r3, #4
 801e4dc:	6032      	str	r2, [r6, #0]
 801e4de:	681e      	ldr	r6, [r3, #0]
 801e4e0:	6862      	ldr	r2, [r4, #4]
 801e4e2:	2100      	movs	r1, #0
 801e4e4:	4630      	mov	r0, r6
 801e4e6:	f7e1 fe7b 	bl	80001e0 <memchr>
 801e4ea:	b108      	cbz	r0, 801e4f0 <_printf_i+0x1e4>
 801e4ec:	1b80      	subs	r0, r0, r6
 801e4ee:	6060      	str	r0, [r4, #4]
 801e4f0:	6863      	ldr	r3, [r4, #4]
 801e4f2:	6123      	str	r3, [r4, #16]
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801e4fa:	e7aa      	b.n	801e452 <_printf_i+0x146>
 801e4fc:	6923      	ldr	r3, [r4, #16]
 801e4fe:	4632      	mov	r2, r6
 801e500:	4649      	mov	r1, r9
 801e502:	4640      	mov	r0, r8
 801e504:	47d0      	blx	sl
 801e506:	3001      	adds	r0, #1
 801e508:	d0ad      	beq.n	801e466 <_printf_i+0x15a>
 801e50a:	6823      	ldr	r3, [r4, #0]
 801e50c:	079b      	lsls	r3, r3, #30
 801e50e:	d413      	bmi.n	801e538 <_printf_i+0x22c>
 801e510:	68e0      	ldr	r0, [r4, #12]
 801e512:	9b03      	ldr	r3, [sp, #12]
 801e514:	4298      	cmp	r0, r3
 801e516:	bfb8      	it	lt
 801e518:	4618      	movlt	r0, r3
 801e51a:	e7a6      	b.n	801e46a <_printf_i+0x15e>
 801e51c:	2301      	movs	r3, #1
 801e51e:	4632      	mov	r2, r6
 801e520:	4649      	mov	r1, r9
 801e522:	4640      	mov	r0, r8
 801e524:	47d0      	blx	sl
 801e526:	3001      	adds	r0, #1
 801e528:	d09d      	beq.n	801e466 <_printf_i+0x15a>
 801e52a:	3501      	adds	r5, #1
 801e52c:	68e3      	ldr	r3, [r4, #12]
 801e52e:	9903      	ldr	r1, [sp, #12]
 801e530:	1a5b      	subs	r3, r3, r1
 801e532:	42ab      	cmp	r3, r5
 801e534:	dcf2      	bgt.n	801e51c <_printf_i+0x210>
 801e536:	e7eb      	b.n	801e510 <_printf_i+0x204>
 801e538:	2500      	movs	r5, #0
 801e53a:	f104 0619 	add.w	r6, r4, #25
 801e53e:	e7f5      	b.n	801e52c <_printf_i+0x220>
 801e540:	0802324c 	.word	0x0802324c
 801e544:	0802325d 	.word	0x0802325d

0801e548 <__sflush_r>:
 801e548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e550:	0716      	lsls	r6, r2, #28
 801e552:	4605      	mov	r5, r0
 801e554:	460c      	mov	r4, r1
 801e556:	d454      	bmi.n	801e602 <__sflush_r+0xba>
 801e558:	684b      	ldr	r3, [r1, #4]
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	dc02      	bgt.n	801e564 <__sflush_r+0x1c>
 801e55e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e560:	2b00      	cmp	r3, #0
 801e562:	dd48      	ble.n	801e5f6 <__sflush_r+0xae>
 801e564:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e566:	2e00      	cmp	r6, #0
 801e568:	d045      	beq.n	801e5f6 <__sflush_r+0xae>
 801e56a:	2300      	movs	r3, #0
 801e56c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e570:	682f      	ldr	r7, [r5, #0]
 801e572:	6a21      	ldr	r1, [r4, #32]
 801e574:	602b      	str	r3, [r5, #0]
 801e576:	d030      	beq.n	801e5da <__sflush_r+0x92>
 801e578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e57a:	89a3      	ldrh	r3, [r4, #12]
 801e57c:	0759      	lsls	r1, r3, #29
 801e57e:	d505      	bpl.n	801e58c <__sflush_r+0x44>
 801e580:	6863      	ldr	r3, [r4, #4]
 801e582:	1ad2      	subs	r2, r2, r3
 801e584:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e586:	b10b      	cbz	r3, 801e58c <__sflush_r+0x44>
 801e588:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e58a:	1ad2      	subs	r2, r2, r3
 801e58c:	2300      	movs	r3, #0
 801e58e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e590:	6a21      	ldr	r1, [r4, #32]
 801e592:	4628      	mov	r0, r5
 801e594:	47b0      	blx	r6
 801e596:	1c43      	adds	r3, r0, #1
 801e598:	89a3      	ldrh	r3, [r4, #12]
 801e59a:	d106      	bne.n	801e5aa <__sflush_r+0x62>
 801e59c:	6829      	ldr	r1, [r5, #0]
 801e59e:	291d      	cmp	r1, #29
 801e5a0:	d82b      	bhi.n	801e5fa <__sflush_r+0xb2>
 801e5a2:	4a2a      	ldr	r2, [pc, #168]	@ (801e64c <__sflush_r+0x104>)
 801e5a4:	40ca      	lsrs	r2, r1
 801e5a6:	07d6      	lsls	r6, r2, #31
 801e5a8:	d527      	bpl.n	801e5fa <__sflush_r+0xb2>
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	6062      	str	r2, [r4, #4]
 801e5ae:	04d9      	lsls	r1, r3, #19
 801e5b0:	6922      	ldr	r2, [r4, #16]
 801e5b2:	6022      	str	r2, [r4, #0]
 801e5b4:	d504      	bpl.n	801e5c0 <__sflush_r+0x78>
 801e5b6:	1c42      	adds	r2, r0, #1
 801e5b8:	d101      	bne.n	801e5be <__sflush_r+0x76>
 801e5ba:	682b      	ldr	r3, [r5, #0]
 801e5bc:	b903      	cbnz	r3, 801e5c0 <__sflush_r+0x78>
 801e5be:	6560      	str	r0, [r4, #84]	@ 0x54
 801e5c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e5c2:	602f      	str	r7, [r5, #0]
 801e5c4:	b1b9      	cbz	r1, 801e5f6 <__sflush_r+0xae>
 801e5c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e5ca:	4299      	cmp	r1, r3
 801e5cc:	d002      	beq.n	801e5d4 <__sflush_r+0x8c>
 801e5ce:	4628      	mov	r0, r5
 801e5d0:	f7ff fa94 	bl	801dafc <_free_r>
 801e5d4:	2300      	movs	r3, #0
 801e5d6:	6363      	str	r3, [r4, #52]	@ 0x34
 801e5d8:	e00d      	b.n	801e5f6 <__sflush_r+0xae>
 801e5da:	2301      	movs	r3, #1
 801e5dc:	4628      	mov	r0, r5
 801e5de:	47b0      	blx	r6
 801e5e0:	4602      	mov	r2, r0
 801e5e2:	1c50      	adds	r0, r2, #1
 801e5e4:	d1c9      	bne.n	801e57a <__sflush_r+0x32>
 801e5e6:	682b      	ldr	r3, [r5, #0]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d0c6      	beq.n	801e57a <__sflush_r+0x32>
 801e5ec:	2b1d      	cmp	r3, #29
 801e5ee:	d001      	beq.n	801e5f4 <__sflush_r+0xac>
 801e5f0:	2b16      	cmp	r3, #22
 801e5f2:	d11e      	bne.n	801e632 <__sflush_r+0xea>
 801e5f4:	602f      	str	r7, [r5, #0]
 801e5f6:	2000      	movs	r0, #0
 801e5f8:	e022      	b.n	801e640 <__sflush_r+0xf8>
 801e5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e5fe:	b21b      	sxth	r3, r3
 801e600:	e01b      	b.n	801e63a <__sflush_r+0xf2>
 801e602:	690f      	ldr	r7, [r1, #16]
 801e604:	2f00      	cmp	r7, #0
 801e606:	d0f6      	beq.n	801e5f6 <__sflush_r+0xae>
 801e608:	0793      	lsls	r3, r2, #30
 801e60a:	680e      	ldr	r6, [r1, #0]
 801e60c:	bf08      	it	eq
 801e60e:	694b      	ldreq	r3, [r1, #20]
 801e610:	600f      	str	r7, [r1, #0]
 801e612:	bf18      	it	ne
 801e614:	2300      	movne	r3, #0
 801e616:	eba6 0807 	sub.w	r8, r6, r7
 801e61a:	608b      	str	r3, [r1, #8]
 801e61c:	f1b8 0f00 	cmp.w	r8, #0
 801e620:	dde9      	ble.n	801e5f6 <__sflush_r+0xae>
 801e622:	6a21      	ldr	r1, [r4, #32]
 801e624:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e626:	4643      	mov	r3, r8
 801e628:	463a      	mov	r2, r7
 801e62a:	4628      	mov	r0, r5
 801e62c:	47b0      	blx	r6
 801e62e:	2800      	cmp	r0, #0
 801e630:	dc08      	bgt.n	801e644 <__sflush_r+0xfc>
 801e632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e63a:	81a3      	strh	r3, [r4, #12]
 801e63c:	f04f 30ff 	mov.w	r0, #4294967295
 801e640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e644:	4407      	add	r7, r0
 801e646:	eba8 0800 	sub.w	r8, r8, r0
 801e64a:	e7e7      	b.n	801e61c <__sflush_r+0xd4>
 801e64c:	20400001 	.word	0x20400001

0801e650 <_fflush_r>:
 801e650:	b538      	push	{r3, r4, r5, lr}
 801e652:	690b      	ldr	r3, [r1, #16]
 801e654:	4605      	mov	r5, r0
 801e656:	460c      	mov	r4, r1
 801e658:	b913      	cbnz	r3, 801e660 <_fflush_r+0x10>
 801e65a:	2500      	movs	r5, #0
 801e65c:	4628      	mov	r0, r5
 801e65e:	bd38      	pop	{r3, r4, r5, pc}
 801e660:	b118      	cbz	r0, 801e66a <_fflush_r+0x1a>
 801e662:	6a03      	ldr	r3, [r0, #32]
 801e664:	b90b      	cbnz	r3, 801e66a <_fflush_r+0x1a>
 801e666:	f7ff f833 	bl	801d6d0 <__sinit>
 801e66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d0f3      	beq.n	801e65a <_fflush_r+0xa>
 801e672:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e674:	07d0      	lsls	r0, r2, #31
 801e676:	d404      	bmi.n	801e682 <_fflush_r+0x32>
 801e678:	0599      	lsls	r1, r3, #22
 801e67a:	d402      	bmi.n	801e682 <_fflush_r+0x32>
 801e67c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e67e:	f7ff fa06 	bl	801da8e <__retarget_lock_acquire_recursive>
 801e682:	4628      	mov	r0, r5
 801e684:	4621      	mov	r1, r4
 801e686:	f7ff ff5f 	bl	801e548 <__sflush_r>
 801e68a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e68c:	07da      	lsls	r2, r3, #31
 801e68e:	4605      	mov	r5, r0
 801e690:	d4e4      	bmi.n	801e65c <_fflush_r+0xc>
 801e692:	89a3      	ldrh	r3, [r4, #12]
 801e694:	059b      	lsls	r3, r3, #22
 801e696:	d4e1      	bmi.n	801e65c <_fflush_r+0xc>
 801e698:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e69a:	f7ff f9f9 	bl	801da90 <__retarget_lock_release_recursive>
 801e69e:	e7dd      	b.n	801e65c <_fflush_r+0xc>

0801e6a0 <fiprintf>:
 801e6a0:	b40e      	push	{r1, r2, r3}
 801e6a2:	b503      	push	{r0, r1, lr}
 801e6a4:	4601      	mov	r1, r0
 801e6a6:	ab03      	add	r3, sp, #12
 801e6a8:	4805      	ldr	r0, [pc, #20]	@ (801e6c0 <fiprintf+0x20>)
 801e6aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6ae:	6800      	ldr	r0, [r0, #0]
 801e6b0:	9301      	str	r3, [sp, #4]
 801e6b2:	f7ff fca5 	bl	801e000 <_vfiprintf_r>
 801e6b6:	b002      	add	sp, #8
 801e6b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6bc:	b003      	add	sp, #12
 801e6be:	4770      	bx	lr
 801e6c0:	20000118 	.word	0x20000118

0801e6c4 <__swbuf_r>:
 801e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6c6:	460e      	mov	r6, r1
 801e6c8:	4614      	mov	r4, r2
 801e6ca:	4605      	mov	r5, r0
 801e6cc:	b118      	cbz	r0, 801e6d6 <__swbuf_r+0x12>
 801e6ce:	6a03      	ldr	r3, [r0, #32]
 801e6d0:	b90b      	cbnz	r3, 801e6d6 <__swbuf_r+0x12>
 801e6d2:	f7fe fffd 	bl	801d6d0 <__sinit>
 801e6d6:	69a3      	ldr	r3, [r4, #24]
 801e6d8:	60a3      	str	r3, [r4, #8]
 801e6da:	89a3      	ldrh	r3, [r4, #12]
 801e6dc:	071a      	lsls	r2, r3, #28
 801e6de:	d501      	bpl.n	801e6e4 <__swbuf_r+0x20>
 801e6e0:	6923      	ldr	r3, [r4, #16]
 801e6e2:	b943      	cbnz	r3, 801e6f6 <__swbuf_r+0x32>
 801e6e4:	4621      	mov	r1, r4
 801e6e6:	4628      	mov	r0, r5
 801e6e8:	f000 f82a 	bl	801e740 <__swsetup_r>
 801e6ec:	b118      	cbz	r0, 801e6f6 <__swbuf_r+0x32>
 801e6ee:	f04f 37ff 	mov.w	r7, #4294967295
 801e6f2:	4638      	mov	r0, r7
 801e6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6f6:	6823      	ldr	r3, [r4, #0]
 801e6f8:	6922      	ldr	r2, [r4, #16]
 801e6fa:	1a98      	subs	r0, r3, r2
 801e6fc:	6963      	ldr	r3, [r4, #20]
 801e6fe:	b2f6      	uxtb	r6, r6
 801e700:	4283      	cmp	r3, r0
 801e702:	4637      	mov	r7, r6
 801e704:	dc05      	bgt.n	801e712 <__swbuf_r+0x4e>
 801e706:	4621      	mov	r1, r4
 801e708:	4628      	mov	r0, r5
 801e70a:	f7ff ffa1 	bl	801e650 <_fflush_r>
 801e70e:	2800      	cmp	r0, #0
 801e710:	d1ed      	bne.n	801e6ee <__swbuf_r+0x2a>
 801e712:	68a3      	ldr	r3, [r4, #8]
 801e714:	3b01      	subs	r3, #1
 801e716:	60a3      	str	r3, [r4, #8]
 801e718:	6823      	ldr	r3, [r4, #0]
 801e71a:	1c5a      	adds	r2, r3, #1
 801e71c:	6022      	str	r2, [r4, #0]
 801e71e:	701e      	strb	r6, [r3, #0]
 801e720:	6962      	ldr	r2, [r4, #20]
 801e722:	1c43      	adds	r3, r0, #1
 801e724:	429a      	cmp	r2, r3
 801e726:	d004      	beq.n	801e732 <__swbuf_r+0x6e>
 801e728:	89a3      	ldrh	r3, [r4, #12]
 801e72a:	07db      	lsls	r3, r3, #31
 801e72c:	d5e1      	bpl.n	801e6f2 <__swbuf_r+0x2e>
 801e72e:	2e0a      	cmp	r6, #10
 801e730:	d1df      	bne.n	801e6f2 <__swbuf_r+0x2e>
 801e732:	4621      	mov	r1, r4
 801e734:	4628      	mov	r0, r5
 801e736:	f7ff ff8b 	bl	801e650 <_fflush_r>
 801e73a:	2800      	cmp	r0, #0
 801e73c:	d0d9      	beq.n	801e6f2 <__swbuf_r+0x2e>
 801e73e:	e7d6      	b.n	801e6ee <__swbuf_r+0x2a>

0801e740 <__swsetup_r>:
 801e740:	b538      	push	{r3, r4, r5, lr}
 801e742:	4b29      	ldr	r3, [pc, #164]	@ (801e7e8 <__swsetup_r+0xa8>)
 801e744:	4605      	mov	r5, r0
 801e746:	6818      	ldr	r0, [r3, #0]
 801e748:	460c      	mov	r4, r1
 801e74a:	b118      	cbz	r0, 801e754 <__swsetup_r+0x14>
 801e74c:	6a03      	ldr	r3, [r0, #32]
 801e74e:	b90b      	cbnz	r3, 801e754 <__swsetup_r+0x14>
 801e750:	f7fe ffbe 	bl	801d6d0 <__sinit>
 801e754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e758:	0719      	lsls	r1, r3, #28
 801e75a:	d422      	bmi.n	801e7a2 <__swsetup_r+0x62>
 801e75c:	06da      	lsls	r2, r3, #27
 801e75e:	d407      	bmi.n	801e770 <__swsetup_r+0x30>
 801e760:	2209      	movs	r2, #9
 801e762:	602a      	str	r2, [r5, #0]
 801e764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e768:	81a3      	strh	r3, [r4, #12]
 801e76a:	f04f 30ff 	mov.w	r0, #4294967295
 801e76e:	e033      	b.n	801e7d8 <__swsetup_r+0x98>
 801e770:	0758      	lsls	r0, r3, #29
 801e772:	d512      	bpl.n	801e79a <__swsetup_r+0x5a>
 801e774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e776:	b141      	cbz	r1, 801e78a <__swsetup_r+0x4a>
 801e778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e77c:	4299      	cmp	r1, r3
 801e77e:	d002      	beq.n	801e786 <__swsetup_r+0x46>
 801e780:	4628      	mov	r0, r5
 801e782:	f7ff f9bb 	bl	801dafc <_free_r>
 801e786:	2300      	movs	r3, #0
 801e788:	6363      	str	r3, [r4, #52]	@ 0x34
 801e78a:	89a3      	ldrh	r3, [r4, #12]
 801e78c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e790:	81a3      	strh	r3, [r4, #12]
 801e792:	2300      	movs	r3, #0
 801e794:	6063      	str	r3, [r4, #4]
 801e796:	6923      	ldr	r3, [r4, #16]
 801e798:	6023      	str	r3, [r4, #0]
 801e79a:	89a3      	ldrh	r3, [r4, #12]
 801e79c:	f043 0308 	orr.w	r3, r3, #8
 801e7a0:	81a3      	strh	r3, [r4, #12]
 801e7a2:	6923      	ldr	r3, [r4, #16]
 801e7a4:	b94b      	cbnz	r3, 801e7ba <__swsetup_r+0x7a>
 801e7a6:	89a3      	ldrh	r3, [r4, #12]
 801e7a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e7b0:	d003      	beq.n	801e7ba <__swsetup_r+0x7a>
 801e7b2:	4621      	mov	r1, r4
 801e7b4:	4628      	mov	r0, r5
 801e7b6:	f000 f884 	bl	801e8c2 <__smakebuf_r>
 801e7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7be:	f013 0201 	ands.w	r2, r3, #1
 801e7c2:	d00a      	beq.n	801e7da <__swsetup_r+0x9a>
 801e7c4:	2200      	movs	r2, #0
 801e7c6:	60a2      	str	r2, [r4, #8]
 801e7c8:	6962      	ldr	r2, [r4, #20]
 801e7ca:	4252      	negs	r2, r2
 801e7cc:	61a2      	str	r2, [r4, #24]
 801e7ce:	6922      	ldr	r2, [r4, #16]
 801e7d0:	b942      	cbnz	r2, 801e7e4 <__swsetup_r+0xa4>
 801e7d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e7d6:	d1c5      	bne.n	801e764 <__swsetup_r+0x24>
 801e7d8:	bd38      	pop	{r3, r4, r5, pc}
 801e7da:	0799      	lsls	r1, r3, #30
 801e7dc:	bf58      	it	pl
 801e7de:	6962      	ldrpl	r2, [r4, #20]
 801e7e0:	60a2      	str	r2, [r4, #8]
 801e7e2:	e7f4      	b.n	801e7ce <__swsetup_r+0x8e>
 801e7e4:	2000      	movs	r0, #0
 801e7e6:	e7f7      	b.n	801e7d8 <__swsetup_r+0x98>
 801e7e8:	20000118 	.word	0x20000118

0801e7ec <_sbrk_r>:
 801e7ec:	b538      	push	{r3, r4, r5, lr}
 801e7ee:	4d06      	ldr	r5, [pc, #24]	@ (801e808 <_sbrk_r+0x1c>)
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	4604      	mov	r4, r0
 801e7f4:	4608      	mov	r0, r1
 801e7f6:	602b      	str	r3, [r5, #0]
 801e7f8:	f7e5 fbaa 	bl	8003f50 <_sbrk>
 801e7fc:	1c43      	adds	r3, r0, #1
 801e7fe:	d102      	bne.n	801e806 <_sbrk_r+0x1a>
 801e800:	682b      	ldr	r3, [r5, #0]
 801e802:	b103      	cbz	r3, 801e806 <_sbrk_r+0x1a>
 801e804:	6023      	str	r3, [r4, #0]
 801e806:	bd38      	pop	{r3, r4, r5, pc}
 801e808:	2000e83c 	.word	0x2000e83c

0801e80c <abort>:
 801e80c:	b508      	push	{r3, lr}
 801e80e:	2006      	movs	r0, #6
 801e810:	f000 f8bc 	bl	801e98c <raise>
 801e814:	2001      	movs	r0, #1
 801e816:	f7e5 fb23 	bl	8003e60 <_exit>

0801e81a <_realloc_r>:
 801e81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e81e:	4607      	mov	r7, r0
 801e820:	4614      	mov	r4, r2
 801e822:	460d      	mov	r5, r1
 801e824:	b921      	cbnz	r1, 801e830 <_realloc_r+0x16>
 801e826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e82a:	4611      	mov	r1, r2
 801e82c:	f7ff b9da 	b.w	801dbe4 <_malloc_r>
 801e830:	b92a      	cbnz	r2, 801e83e <_realloc_r+0x24>
 801e832:	f7ff f963 	bl	801dafc <_free_r>
 801e836:	4625      	mov	r5, r4
 801e838:	4628      	mov	r0, r5
 801e83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e83e:	f000 f8e3 	bl	801ea08 <_malloc_usable_size_r>
 801e842:	4284      	cmp	r4, r0
 801e844:	4606      	mov	r6, r0
 801e846:	d802      	bhi.n	801e84e <_realloc_r+0x34>
 801e848:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e84c:	d8f4      	bhi.n	801e838 <_realloc_r+0x1e>
 801e84e:	4621      	mov	r1, r4
 801e850:	4638      	mov	r0, r7
 801e852:	f7ff f9c7 	bl	801dbe4 <_malloc_r>
 801e856:	4680      	mov	r8, r0
 801e858:	b908      	cbnz	r0, 801e85e <_realloc_r+0x44>
 801e85a:	4645      	mov	r5, r8
 801e85c:	e7ec      	b.n	801e838 <_realloc_r+0x1e>
 801e85e:	42b4      	cmp	r4, r6
 801e860:	4622      	mov	r2, r4
 801e862:	4629      	mov	r1, r5
 801e864:	bf28      	it	cs
 801e866:	4632      	movcs	r2, r6
 801e868:	f7ff f91b 	bl	801daa2 <memcpy>
 801e86c:	4629      	mov	r1, r5
 801e86e:	4638      	mov	r0, r7
 801e870:	f7ff f944 	bl	801dafc <_free_r>
 801e874:	e7f1      	b.n	801e85a <_realloc_r+0x40>

0801e876 <__swhatbuf_r>:
 801e876:	b570      	push	{r4, r5, r6, lr}
 801e878:	460c      	mov	r4, r1
 801e87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e87e:	2900      	cmp	r1, #0
 801e880:	b096      	sub	sp, #88	@ 0x58
 801e882:	4615      	mov	r5, r2
 801e884:	461e      	mov	r6, r3
 801e886:	da0d      	bge.n	801e8a4 <__swhatbuf_r+0x2e>
 801e888:	89a3      	ldrh	r3, [r4, #12]
 801e88a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e88e:	f04f 0100 	mov.w	r1, #0
 801e892:	bf14      	ite	ne
 801e894:	2340      	movne	r3, #64	@ 0x40
 801e896:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e89a:	2000      	movs	r0, #0
 801e89c:	6031      	str	r1, [r6, #0]
 801e89e:	602b      	str	r3, [r5, #0]
 801e8a0:	b016      	add	sp, #88	@ 0x58
 801e8a2:	bd70      	pop	{r4, r5, r6, pc}
 801e8a4:	466a      	mov	r2, sp
 801e8a6:	f000 f879 	bl	801e99c <_fstat_r>
 801e8aa:	2800      	cmp	r0, #0
 801e8ac:	dbec      	blt.n	801e888 <__swhatbuf_r+0x12>
 801e8ae:	9901      	ldr	r1, [sp, #4]
 801e8b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e8b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e8b8:	4259      	negs	r1, r3
 801e8ba:	4159      	adcs	r1, r3
 801e8bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e8c0:	e7eb      	b.n	801e89a <__swhatbuf_r+0x24>

0801e8c2 <__smakebuf_r>:
 801e8c2:	898b      	ldrh	r3, [r1, #12]
 801e8c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e8c6:	079d      	lsls	r5, r3, #30
 801e8c8:	4606      	mov	r6, r0
 801e8ca:	460c      	mov	r4, r1
 801e8cc:	d507      	bpl.n	801e8de <__smakebuf_r+0x1c>
 801e8ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e8d2:	6023      	str	r3, [r4, #0]
 801e8d4:	6123      	str	r3, [r4, #16]
 801e8d6:	2301      	movs	r3, #1
 801e8d8:	6163      	str	r3, [r4, #20]
 801e8da:	b003      	add	sp, #12
 801e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8de:	ab01      	add	r3, sp, #4
 801e8e0:	466a      	mov	r2, sp
 801e8e2:	f7ff ffc8 	bl	801e876 <__swhatbuf_r>
 801e8e6:	9f00      	ldr	r7, [sp, #0]
 801e8e8:	4605      	mov	r5, r0
 801e8ea:	4639      	mov	r1, r7
 801e8ec:	4630      	mov	r0, r6
 801e8ee:	f7ff f979 	bl	801dbe4 <_malloc_r>
 801e8f2:	b948      	cbnz	r0, 801e908 <__smakebuf_r+0x46>
 801e8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8f8:	059a      	lsls	r2, r3, #22
 801e8fa:	d4ee      	bmi.n	801e8da <__smakebuf_r+0x18>
 801e8fc:	f023 0303 	bic.w	r3, r3, #3
 801e900:	f043 0302 	orr.w	r3, r3, #2
 801e904:	81a3      	strh	r3, [r4, #12]
 801e906:	e7e2      	b.n	801e8ce <__smakebuf_r+0xc>
 801e908:	89a3      	ldrh	r3, [r4, #12]
 801e90a:	6020      	str	r0, [r4, #0]
 801e90c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e910:	81a3      	strh	r3, [r4, #12]
 801e912:	9b01      	ldr	r3, [sp, #4]
 801e914:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e918:	b15b      	cbz	r3, 801e932 <__smakebuf_r+0x70>
 801e91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e91e:	4630      	mov	r0, r6
 801e920:	f000 f84e 	bl	801e9c0 <_isatty_r>
 801e924:	b128      	cbz	r0, 801e932 <__smakebuf_r+0x70>
 801e926:	89a3      	ldrh	r3, [r4, #12]
 801e928:	f023 0303 	bic.w	r3, r3, #3
 801e92c:	f043 0301 	orr.w	r3, r3, #1
 801e930:	81a3      	strh	r3, [r4, #12]
 801e932:	89a3      	ldrh	r3, [r4, #12]
 801e934:	431d      	orrs	r5, r3
 801e936:	81a5      	strh	r5, [r4, #12]
 801e938:	e7cf      	b.n	801e8da <__smakebuf_r+0x18>

0801e93a <_raise_r>:
 801e93a:	291f      	cmp	r1, #31
 801e93c:	b538      	push	{r3, r4, r5, lr}
 801e93e:	4605      	mov	r5, r0
 801e940:	460c      	mov	r4, r1
 801e942:	d904      	bls.n	801e94e <_raise_r+0x14>
 801e944:	2316      	movs	r3, #22
 801e946:	6003      	str	r3, [r0, #0]
 801e948:	f04f 30ff 	mov.w	r0, #4294967295
 801e94c:	bd38      	pop	{r3, r4, r5, pc}
 801e94e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e950:	b112      	cbz	r2, 801e958 <_raise_r+0x1e>
 801e952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e956:	b94b      	cbnz	r3, 801e96c <_raise_r+0x32>
 801e958:	4628      	mov	r0, r5
 801e95a:	f000 f853 	bl	801ea04 <_getpid_r>
 801e95e:	4622      	mov	r2, r4
 801e960:	4601      	mov	r1, r0
 801e962:	4628      	mov	r0, r5
 801e964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e968:	f000 b83a 	b.w	801e9e0 <_kill_r>
 801e96c:	2b01      	cmp	r3, #1
 801e96e:	d00a      	beq.n	801e986 <_raise_r+0x4c>
 801e970:	1c59      	adds	r1, r3, #1
 801e972:	d103      	bne.n	801e97c <_raise_r+0x42>
 801e974:	2316      	movs	r3, #22
 801e976:	6003      	str	r3, [r0, #0]
 801e978:	2001      	movs	r0, #1
 801e97a:	e7e7      	b.n	801e94c <_raise_r+0x12>
 801e97c:	2100      	movs	r1, #0
 801e97e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e982:	4620      	mov	r0, r4
 801e984:	4798      	blx	r3
 801e986:	2000      	movs	r0, #0
 801e988:	e7e0      	b.n	801e94c <_raise_r+0x12>
	...

0801e98c <raise>:
 801e98c:	4b02      	ldr	r3, [pc, #8]	@ (801e998 <raise+0xc>)
 801e98e:	4601      	mov	r1, r0
 801e990:	6818      	ldr	r0, [r3, #0]
 801e992:	f7ff bfd2 	b.w	801e93a <_raise_r>
 801e996:	bf00      	nop
 801e998:	20000118 	.word	0x20000118

0801e99c <_fstat_r>:
 801e99c:	b538      	push	{r3, r4, r5, lr}
 801e99e:	4d07      	ldr	r5, [pc, #28]	@ (801e9bc <_fstat_r+0x20>)
 801e9a0:	2300      	movs	r3, #0
 801e9a2:	4604      	mov	r4, r0
 801e9a4:	4608      	mov	r0, r1
 801e9a6:	4611      	mov	r1, r2
 801e9a8:	602b      	str	r3, [r5, #0]
 801e9aa:	f7e5 faa9 	bl	8003f00 <_fstat>
 801e9ae:	1c43      	adds	r3, r0, #1
 801e9b0:	d102      	bne.n	801e9b8 <_fstat_r+0x1c>
 801e9b2:	682b      	ldr	r3, [r5, #0]
 801e9b4:	b103      	cbz	r3, 801e9b8 <_fstat_r+0x1c>
 801e9b6:	6023      	str	r3, [r4, #0]
 801e9b8:	bd38      	pop	{r3, r4, r5, pc}
 801e9ba:	bf00      	nop
 801e9bc:	2000e83c 	.word	0x2000e83c

0801e9c0 <_isatty_r>:
 801e9c0:	b538      	push	{r3, r4, r5, lr}
 801e9c2:	4d06      	ldr	r5, [pc, #24]	@ (801e9dc <_isatty_r+0x1c>)
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	4604      	mov	r4, r0
 801e9c8:	4608      	mov	r0, r1
 801e9ca:	602b      	str	r3, [r5, #0]
 801e9cc:	f7e5 faa8 	bl	8003f20 <_isatty>
 801e9d0:	1c43      	adds	r3, r0, #1
 801e9d2:	d102      	bne.n	801e9da <_isatty_r+0x1a>
 801e9d4:	682b      	ldr	r3, [r5, #0]
 801e9d6:	b103      	cbz	r3, 801e9da <_isatty_r+0x1a>
 801e9d8:	6023      	str	r3, [r4, #0]
 801e9da:	bd38      	pop	{r3, r4, r5, pc}
 801e9dc:	2000e83c 	.word	0x2000e83c

0801e9e0 <_kill_r>:
 801e9e0:	b538      	push	{r3, r4, r5, lr}
 801e9e2:	4d07      	ldr	r5, [pc, #28]	@ (801ea00 <_kill_r+0x20>)
 801e9e4:	2300      	movs	r3, #0
 801e9e6:	4604      	mov	r4, r0
 801e9e8:	4608      	mov	r0, r1
 801e9ea:	4611      	mov	r1, r2
 801e9ec:	602b      	str	r3, [r5, #0]
 801e9ee:	f7e5 fa25 	bl	8003e3c <_kill>
 801e9f2:	1c43      	adds	r3, r0, #1
 801e9f4:	d102      	bne.n	801e9fc <_kill_r+0x1c>
 801e9f6:	682b      	ldr	r3, [r5, #0]
 801e9f8:	b103      	cbz	r3, 801e9fc <_kill_r+0x1c>
 801e9fa:	6023      	str	r3, [r4, #0]
 801e9fc:	bd38      	pop	{r3, r4, r5, pc}
 801e9fe:	bf00      	nop
 801ea00:	2000e83c 	.word	0x2000e83c

0801ea04 <_getpid_r>:
 801ea04:	f7e5 ba12 	b.w	8003e2c <_getpid>

0801ea08 <_malloc_usable_size_r>:
 801ea08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ea0c:	1f18      	subs	r0, r3, #4
 801ea0e:	2b00      	cmp	r3, #0
 801ea10:	bfbc      	itt	lt
 801ea12:	580b      	ldrlt	r3, [r1, r0]
 801ea14:	18c0      	addlt	r0, r0, r3
 801ea16:	4770      	bx	lr

0801ea18 <_init>:
 801ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea1a:	bf00      	nop
 801ea1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea1e:	bc08      	pop	{r3}
 801ea20:	469e      	mov	lr, r3
 801ea22:	4770      	bx	lr

0801ea24 <_fini>:
 801ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea26:	bf00      	nop
 801ea28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea2a:	bc08      	pop	{r3}
 801ea2c:	469e      	mov	lr, r3
 801ea2e:	4770      	bx	lr
